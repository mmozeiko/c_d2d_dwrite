#pragma once

// generated by https://github.com/mmozeiko/c_d2d_dwrite

#include <combaseapi.h>
#include <dxgicommon.h>
#include <d3dcommon.h>
#include <d2dbasetypes.h>
#include <dcommon.h>

#pragma comment (lib, "d2d1")

typedef enum DWRITE_PAINT_FEATURE_LEVEL DWRITE_PAINT_FEATURE_LEVEL;

typedef D2D_COLOR_F D2D1_COLOR_F;
typedef struct DWRITE_GLYPH_RUN DWRITE_GLYPH_RUN;
typedef struct DWRITE_GLYPH_RUN_DESCRIPTION DWRITE_GLYPH_RUN_DESCRIPTION;

typedef interface IDXGIDevice                 IDXGIDevice;
typedef interface IDXGISurface                IDXGISurface;
typedef interface IWICImagingFactory          IWICImagingFactory;
typedef interface IDWriteTextFormat           IDWriteTextFormat;
typedef interface IDWriteTextLayout           IDWriteTextLayout;
typedef interface IDWriteRenderingParams      IDWriteRenderingParams;
typedef interface IDWriteFontFace             IDWriteFontFace;
typedef interface IWICBitmapSource            IWICBitmapSource;
typedef interface IWICBitmap                  IWICBitmap;
typedef interface IWICColorContext            IWICColorContext;
typedef interface IPrintDocumentPackageTarget IPrintDocumentPackageTarget;

// interfaces

typedef struct ID2D1AnalysisTransform         { struct { void* tbl[]; }* v; } ID2D1AnalysisTransform;
typedef struct ID2D1Bitmap                    { struct { void* tbl[]; }* v; } ID2D1Bitmap;
typedef struct ID2D1Bitmap1                   { struct { void* tbl[]; }* v; } ID2D1Bitmap1;
typedef struct ID2D1BitmapBrush               { struct { void* tbl[]; }* v; } ID2D1BitmapBrush;
typedef struct ID2D1BitmapBrush1              { struct { void* tbl[]; }* v; } ID2D1BitmapBrush1;
typedef struct ID2D1BitmapRenderTarget        { struct { void* tbl[]; }* v; } ID2D1BitmapRenderTarget;
typedef struct ID2D1BlendTransform            { struct { void* tbl[]; }* v; } ID2D1BlendTransform;
typedef struct ID2D1BorderTransform           { struct { void* tbl[]; }* v; } ID2D1BorderTransform;
typedef struct ID2D1BoundsAdjustmentTransform { struct { void* tbl[]; }* v; } ID2D1BoundsAdjustmentTransform;
typedef struct ID2D1Brush                     { struct { void* tbl[]; }* v; } ID2D1Brush;
typedef struct ID2D1ColorContext              { struct { void* tbl[]; }* v; } ID2D1ColorContext;
typedef struct ID2D1ColorContext1             { struct { void* tbl[]; }* v; } ID2D1ColorContext1;
typedef struct ID2D1CommandList               { struct { void* tbl[]; }* v; } ID2D1CommandList;
typedef struct ID2D1CommandSink               { struct { void* tbl[]; }* v; } ID2D1CommandSink;
typedef struct ID2D1CommandSink1              { struct { void* tbl[]; }* v; } ID2D1CommandSink1;
typedef struct ID2D1CommandSink2              { struct { void* tbl[]; }* v; } ID2D1CommandSink2;
typedef struct ID2D1CommandSink3              { struct { void* tbl[]; }* v; } ID2D1CommandSink3;
typedef struct ID2D1CommandSink4              { struct { void* tbl[]; }* v; } ID2D1CommandSink4;
typedef struct ID2D1CommandSink5              { struct { void* tbl[]; }* v; } ID2D1CommandSink5;
typedef struct ID2D1ComputeInfo               { struct { void* tbl[]; }* v; } ID2D1ComputeInfo;
typedef struct ID2D1ComputeTransform          { struct { void* tbl[]; }* v; } ID2D1ComputeTransform;
typedef struct ID2D1ConcreteTransform         { struct { void* tbl[]; }* v; } ID2D1ConcreteTransform;
typedef struct ID2D1DCRenderTarget            { struct { void* tbl[]; }* v; } ID2D1DCRenderTarget;
typedef struct ID2D1Device                    { struct { void* tbl[]; }* v; } ID2D1Device;
typedef struct ID2D1Device1                   { struct { void* tbl[]; }* v; } ID2D1Device1;
typedef struct ID2D1Device2                   { struct { void* tbl[]; }* v; } ID2D1Device2;
typedef struct ID2D1Device3                   { struct { void* tbl[]; }* v; } ID2D1Device3;
typedef struct ID2D1Device4                   { struct { void* tbl[]; }* v; } ID2D1Device4;
typedef struct ID2D1Device5                   { struct { void* tbl[]; }* v; } ID2D1Device5;
typedef struct ID2D1Device6                   { struct { void* tbl[]; }* v; } ID2D1Device6;
typedef struct ID2D1Device7                   { struct { void* tbl[]; }* v; } ID2D1Device7;
typedef struct ID2D1DeviceContext             { struct { void* tbl[]; }* v; } ID2D1DeviceContext;
typedef struct ID2D1DeviceContext1            { struct { void* tbl[]; }* v; } ID2D1DeviceContext1;
typedef struct ID2D1DeviceContext2            { struct { void* tbl[]; }* v; } ID2D1DeviceContext2;
typedef struct ID2D1DeviceContext3            { struct { void* tbl[]; }* v; } ID2D1DeviceContext3;
typedef struct ID2D1DeviceContext4            { struct { void* tbl[]; }* v; } ID2D1DeviceContext4;
typedef struct ID2D1DeviceContext5            { struct { void* tbl[]; }* v; } ID2D1DeviceContext5;
typedef struct ID2D1DeviceContext6            { struct { void* tbl[]; }* v; } ID2D1DeviceContext6;
typedef struct ID2D1DeviceContext7            { struct { void* tbl[]; }* v; } ID2D1DeviceContext7;
typedef struct ID2D1DrawInfo                  { struct { void* tbl[]; }* v; } ID2D1DrawInfo;
typedef struct ID2D1DrawingStateBlock         { struct { void* tbl[]; }* v; } ID2D1DrawingStateBlock;
typedef struct ID2D1DrawingStateBlock1        { struct { void* tbl[]; }* v; } ID2D1DrawingStateBlock1;
typedef struct ID2D1DrawTransform             { struct { void* tbl[]; }* v; } ID2D1DrawTransform;
typedef struct ID2D1Effect                    { struct { void* tbl[]; }* v; } ID2D1Effect;
typedef struct ID2D1EffectContext             { struct { void* tbl[]; }* v; } ID2D1EffectContext;
typedef struct ID2D1EffectContext1            { struct { void* tbl[]; }* v; } ID2D1EffectContext1;
typedef struct ID2D1EffectContext2            { struct { void* tbl[]; }* v; } ID2D1EffectContext2;
typedef struct ID2D1EffectImpl                { struct { void* tbl[]; }* v; } ID2D1EffectImpl;
typedef struct ID2D1EllipseGeometry           { struct { void* tbl[]; }* v; } ID2D1EllipseGeometry;
typedef struct ID2D1Factory                   { struct { void* tbl[]; }* v; } ID2D1Factory;
typedef struct ID2D1Factory1                  { struct { void* tbl[]; }* v; } ID2D1Factory1;
typedef struct ID2D1Factory2                  { struct { void* tbl[]; }* v; } ID2D1Factory2;
typedef struct ID2D1Factory3                  { struct { void* tbl[]; }* v; } ID2D1Factory3;
typedef struct ID2D1Factory4                  { struct { void* tbl[]; }* v; } ID2D1Factory4;
typedef struct ID2D1Factory5                  { struct { void* tbl[]; }* v; } ID2D1Factory5;
typedef struct ID2D1Factory6                  { struct { void* tbl[]; }* v; } ID2D1Factory6;
typedef struct ID2D1Factory7                  { struct { void* tbl[]; }* v; } ID2D1Factory7;
typedef struct ID2D1Factory8                  { struct { void* tbl[]; }* v; } ID2D1Factory8;
typedef struct ID2D1GdiInteropRenderTarget    { struct { void* tbl[]; }* v; } ID2D1GdiInteropRenderTarget;
typedef struct ID2D1GdiMetafile               { struct { void* tbl[]; }* v; } ID2D1GdiMetafile;
typedef struct ID2D1GdiMetafile1              { struct { void* tbl[]; }* v; } ID2D1GdiMetafile1;
typedef struct ID2D1GdiMetafileSink           { struct { void* tbl[]; }* v; } ID2D1GdiMetafileSink;
typedef struct ID2D1GdiMetafileSink1          { struct { void* tbl[]; }* v; } ID2D1GdiMetafileSink1;
typedef struct ID2D1Geometry                  { struct { void* tbl[]; }* v; } ID2D1Geometry;
typedef struct ID2D1GeometryGroup             { struct { void* tbl[]; }* v; } ID2D1GeometryGroup;
typedef struct ID2D1GeometryRealization       { struct { void* tbl[]; }* v; } ID2D1GeometryRealization;
typedef struct ID2D1GeometrySink              { struct { void* tbl[]; }* v; } ID2D1GeometrySink;
typedef struct ID2D1GradientMesh              { struct { void* tbl[]; }* v; } ID2D1GradientMesh;
typedef struct ID2D1GradientStopCollection    { struct { void* tbl[]; }* v; } ID2D1GradientStopCollection;
typedef struct ID2D1GradientStopCollection1   { struct { void* tbl[]; }* v; } ID2D1GradientStopCollection1;
typedef struct ID2D1HwndRenderTarget          { struct { void* tbl[]; }* v; } ID2D1HwndRenderTarget;
typedef struct ID2D1Image                     { struct { void* tbl[]; }* v; } ID2D1Image;
typedef struct ID2D1ImageBrush                { struct { void* tbl[]; }* v; } ID2D1ImageBrush;
typedef struct ID2D1ImageSource               { struct { void* tbl[]; }* v; } ID2D1ImageSource;
typedef struct ID2D1ImageSourceFromWic        { struct { void* tbl[]; }* v; } ID2D1ImageSourceFromWic;
typedef struct ID2D1Ink                       { struct { void* tbl[]; }* v; } ID2D1Ink;
typedef struct ID2D1InkStyle                  { struct { void* tbl[]; }* v; } ID2D1InkStyle;
typedef struct ID2D1Layer                     { struct { void* tbl[]; }* v; } ID2D1Layer;
typedef struct ID2D1LinearGradientBrush       { struct { void* tbl[]; }* v; } ID2D1LinearGradientBrush;
typedef struct ID2D1LookupTable3D             { struct { void* tbl[]; }* v; } ID2D1LookupTable3D;
typedef struct ID2D1Mesh                      { struct { void* tbl[]; }* v; } ID2D1Mesh;
typedef struct ID2D1Multithread               { struct { void* tbl[]; }* v; } ID2D1Multithread;
typedef struct ID2D1OffsetTransform           { struct { void* tbl[]; }* v; } ID2D1OffsetTransform;
typedef struct ID2D1PathGeometry              { struct { void* tbl[]; }* v; } ID2D1PathGeometry;
typedef struct ID2D1PathGeometry1             { struct { void* tbl[]; }* v; } ID2D1PathGeometry1;
typedef struct ID2D1PrintControl              { struct { void* tbl[]; }* v; } ID2D1PrintControl;
typedef struct ID2D1Properties                { struct { void* tbl[]; }* v; } ID2D1Properties;
typedef struct ID2D1RadialGradientBrush       { struct { void* tbl[]; }* v; } ID2D1RadialGradientBrush;
typedef struct ID2D1RectangleGeometry         { struct { void* tbl[]; }* v; } ID2D1RectangleGeometry;
typedef struct ID2D1RenderInfo                { struct { void* tbl[]; }* v; } ID2D1RenderInfo;
typedef struct ID2D1RenderTarget              { struct { void* tbl[]; }* v; } ID2D1RenderTarget;
typedef struct ID2D1Resource                  { struct { void* tbl[]; }* v; } ID2D1Resource;
typedef struct ID2D1ResourceTexture           { struct { void* tbl[]; }* v; } ID2D1ResourceTexture;
typedef struct ID2D1RoundedRectangleGeometry  { struct { void* tbl[]; }* v; } ID2D1RoundedRectangleGeometry;
typedef struct ID2D1SimplifiedGeometrySink    { struct { void* tbl[]; }* v; } ID2D1SimplifiedGeometrySink;
typedef struct ID2D1SolidColorBrush           { struct { void* tbl[]; }* v; } ID2D1SolidColorBrush;
typedef struct ID2D1SourceTransform           { struct { void* tbl[]; }* v; } ID2D1SourceTransform;
typedef struct ID2D1SpriteBatch               { struct { void* tbl[]; }* v; } ID2D1SpriteBatch;
typedef struct ID2D1StrokeStyle               { struct { void* tbl[]; }* v; } ID2D1StrokeStyle;
typedef struct ID2D1StrokeStyle1              { struct { void* tbl[]; }* v; } ID2D1StrokeStyle1;
typedef struct ID2D1SvgAttribute              { struct { void* tbl[]; }* v; } ID2D1SvgAttribute;
typedef struct ID2D1SvgDocument               { struct { void* tbl[]; }* v; } ID2D1SvgDocument;
typedef struct ID2D1SvgElement                { struct { void* tbl[]; }* v; } ID2D1SvgElement;
typedef struct ID2D1SvgGlyphStyle             { struct { void* tbl[]; }* v; } ID2D1SvgGlyphStyle;
typedef struct ID2D1SvgPaint                  { struct { void* tbl[]; }* v; } ID2D1SvgPaint;
typedef struct ID2D1SvgPathData               { struct { void* tbl[]; }* v; } ID2D1SvgPathData;
typedef struct ID2D1SvgPointCollection        { struct { void* tbl[]; }* v; } ID2D1SvgPointCollection;
typedef struct ID2D1SvgStrokeDashArray        { struct { void* tbl[]; }* v; } ID2D1SvgStrokeDashArray;
typedef struct ID2D1TessellationSink          { struct { void* tbl[]; }* v; } ID2D1TessellationSink;
typedef struct ID2D1Transform                 { struct { void* tbl[]; }* v; } ID2D1Transform;
typedef struct ID2D1TransformedGeometry       { struct { void* tbl[]; }* v; } ID2D1TransformedGeometry;
typedef struct ID2D1TransformedImageSource    { struct { void* tbl[]; }* v; } ID2D1TransformedImageSource;
typedef struct ID2D1TransformGraph            { struct { void* tbl[]; }* v; } ID2D1TransformGraph;
typedef struct ID2D1TransformNode             { struct { void* tbl[]; }* v; } ID2D1TransformNode;
typedef struct ID2D1VertexBuffer              { struct { void* tbl[]; }* v; } ID2D1VertexBuffer;

// constants

DEFINE_GUID(CLSID_D2D12DAffineTransform,      0x6aa97485, 0x6354, 0x4cfc, 0x90, 0x8c, 0xe4, 0xa7, 0x4f, 0x62, 0xc9, 0x6c);
DEFINE_GUID(CLSID_D2D13DPerspectiveTransform, 0xc2844d0b, 0x3d86, 0x46e7, 0x85, 0xba, 0x52, 0x6c, 0x92, 0x40, 0xf3, 0xfb);
DEFINE_GUID(CLSID_D2D13DTransform,            0xe8467b04, 0xec61, 0x4b8a, 0xb5, 0xde, 0xd4, 0xd7, 0x3d, 0xeb, 0xea, 0x5a);
DEFINE_GUID(CLSID_D2D1AlphaMask,              0xc80ecff0, 0x3fd5, 0x4f05, 0x83, 0x28, 0xc5, 0xd1, 0x72, 0x4b, 0x4f, 0x0a);
DEFINE_GUID(CLSID_D2D1ArithmeticComposite,    0xfc151437, 0x049a, 0x4784, 0xa2, 0x4a, 0xf1, 0xc4, 0xda, 0xf2, 0x09, 0x87);
DEFINE_GUID(CLSID_D2D1Atlas,                  0x913e2be4, 0xfdcf, 0x4fe2, 0xa5, 0xf0, 0x24, 0x54, 0xf1, 0x4f, 0xf4, 0x08);
DEFINE_GUID(CLSID_D2D1BitmapSource,           0x5fb6c24d, 0xc6dd, 0x4231, 0x94, 0x04, 0x50, 0xf4, 0xd5, 0xc3, 0x25, 0x2d);
DEFINE_GUID(CLSID_D2D1Blend,                  0x81c5b77b, 0x13f8, 0x4cdd, 0xad, 0x20, 0xc8, 0x90, 0x54, 0x7a, 0xc6, 0x5d);
DEFINE_GUID(CLSID_D2D1Border,                 0x2a2d49c0, 0x4acf, 0x43c7, 0x8c, 0x6a, 0x7c, 0x4a, 0x27, 0x87, 0x4d, 0x27);
DEFINE_GUID(CLSID_D2D1Brightness,             0x8cea8d1e, 0x77b0, 0x4986, 0xb3, 0xb9, 0x2f, 0x0c, 0x0e, 0xae, 0x78, 0x87);
DEFINE_GUID(CLSID_D2D1ChromaKey,              0x74c01f5b, 0x2a0d, 0x408c, 0x88, 0xe2, 0xc7, 0xa3, 0xc7, 0x19, 0x77, 0x42);
DEFINE_GUID(CLSID_D2D1ColorManagement,        0x1a28524c, 0xfdd6, 0x4aa4, 0xae, 0x8f, 0x83, 0x7e, 0xb8, 0x26, 0x7b, 0x37);
DEFINE_GUID(CLSID_D2D1ColorMatrix,            0x921f03d6, 0x641c, 0x47df, 0x85, 0x2d, 0xb4, 0xbb, 0x61, 0x53, 0xae, 0x11);
DEFINE_GUID(CLSID_D2D1Composite,              0x48fc9f51, 0xf6ac, 0x48f1, 0x8b, 0x58, 0x3b, 0x28, 0xac, 0x46, 0xf7, 0x6d);
DEFINE_GUID(CLSID_D2D1Contrast,               0xb648a78a, 0x0ed5, 0x4f80, 0xa9, 0x4a, 0x8e, 0x82, 0x5a, 0xca, 0x6b, 0x77);
DEFINE_GUID(CLSID_D2D1ConvolveMatrix,         0x407f8c08, 0x5533, 0x4331, 0xa3, 0x41, 0x23, 0xcc, 0x38, 0x77, 0x84, 0x3e);
DEFINE_GUID(CLSID_D2D1Crop,                   0xe23f7110, 0x0e9a, 0x4324, 0xaf, 0x47, 0x6a, 0x2c, 0x0c, 0x46, 0xf3, 0x5b);
DEFINE_GUID(CLSID_D2D1CrossFade,              0x12f575e8, 0x4db1, 0x485f, 0x9a, 0x84, 0x03, 0xa0, 0x7d, 0xd3, 0x82, 0x9f);
DEFINE_GUID(CLSID_D2D1DirectionalBlur,        0x174319a6, 0x58e9, 0x49b2, 0xbb, 0x63, 0xca, 0xf2, 0xc8, 0x11, 0xa3, 0xdb);
DEFINE_GUID(CLSID_D2D1DiscreteTransfer,       0x90866fcd, 0x488e, 0x454b, 0xaf, 0x06, 0xe5, 0x04, 0x1b, 0x66, 0xc3, 0x6c);
DEFINE_GUID(CLSID_D2D1DisplacementMap,        0xedc48364, 0x0417, 0x4111, 0x94, 0x50, 0x43, 0x84, 0x5f, 0xa9, 0xf8, 0x90);
DEFINE_GUID(CLSID_D2D1DistantDiffuse,         0x3e7efd62, 0xa32d, 0x46d4, 0xa8, 0x3c, 0x52, 0x78, 0x88, 0x9a, 0xc9, 0x54);
DEFINE_GUID(CLSID_D2D1DistantSpecular,        0x428c1ee5, 0x77b8, 0x4450, 0x8a, 0xb5, 0x72, 0x21, 0x9c, 0x21, 0xab, 0xda);
DEFINE_GUID(CLSID_D2D1DpiCompensation,        0x6c26c5c7, 0x34e0, 0x46fc, 0x9c, 0xfd, 0xe5, 0x82, 0x37, 0x06, 0xe2, 0x28);
DEFINE_GUID(CLSID_D2D1EdgeDetection,          0xeff583ca, 0xcb07, 0x4aa9, 0xac, 0x5d, 0x2c, 0xc4, 0x4c, 0x76, 0x46, 0x0f);
DEFINE_GUID(CLSID_D2D1Emboss,                 0xb1c5eb2b, 0x0348, 0x43f0, 0x81, 0x07, 0x49, 0x57, 0xca, 0xcb, 0xa2, 0xae);
DEFINE_GUID(CLSID_D2D1Exposure,               0xb56c8cfa, 0xf634, 0x41ee, 0xbe, 0xe0, 0xff, 0xa6, 0x17, 0x10, 0x60, 0x04);
DEFINE_GUID(CLSID_D2D1Flood,                  0x61c23c20, 0xae69, 0x4d8e, 0x94, 0xcf, 0x50, 0x07, 0x8d, 0xf6, 0x38, 0xf2);
DEFINE_GUID(CLSID_D2D1GammaTransfer,          0x409444c4, 0xc419, 0x41a0, 0xb0, 0xc1, 0x8c, 0xd0, 0xc0, 0xa1, 0x8e, 0x42);
DEFINE_GUID(CLSID_D2D1GaussianBlur,           0x1feb6d69, 0x2fe6, 0x4ac9, 0x8c, 0x58, 0x1d, 0x7f, 0x93, 0xe7, 0xa6, 0xa5);
DEFINE_GUID(CLSID_D2D1Grayscale,              0x36dde0eb, 0x3725, 0x42e0, 0x83, 0x6d, 0x52, 0xfb, 0x20, 0xae, 0xe6, 0x44);
DEFINE_GUID(CLSID_D2D1HdrToneMap,             0x7b0b748d, 0x4610, 0x4486, 0xa9, 0x0c, 0x99, 0x9d, 0x9a, 0x2e, 0x2b, 0x11);
DEFINE_GUID(CLSID_D2D1HighlightsShadows,      0xcadc8384, 0x323f, 0x4c7e, 0xa3, 0x61, 0x2e, 0x2b, 0x24, 0xdf, 0x6e, 0xe4);
DEFINE_GUID(CLSID_D2D1Histogram,              0x881db7d0, 0xf7ee, 0x4d4d, 0xa6, 0xd2, 0x46, 0x97, 0xac, 0xc6, 0x6e, 0xe8);
DEFINE_GUID(CLSID_D2D1HueRotation,            0x0f4458ec, 0x4b32, 0x491b, 0x9e, 0x85, 0xbd, 0x73, 0xf4, 0x4d, 0x3e, 0xb6);
DEFINE_GUID(CLSID_D2D1HueToRgb,               0x7b78a6bd, 0x0141, 0x4def, 0x8a, 0x52, 0x63, 0x56, 0xee, 0x0c, 0xbd, 0xd5);
DEFINE_GUID(CLSID_D2D1Invert,                 0xe0c3784d, 0xcb39, 0x4e84, 0xb6, 0xfd, 0x6b, 0x72, 0xf0, 0x81, 0x02, 0x63);
DEFINE_GUID(CLSID_D2D1LinearTransfer,         0xad47c8fd, 0x63ef, 0x4acc, 0x9b, 0x51, 0x67, 0x97, 0x9c, 0x03, 0x6c, 0x06);
DEFINE_GUID(CLSID_D2D1LookupTable3D,          0x349e0eda, 0x0088, 0x4a79, 0x9c, 0xa3, 0xc7, 0xe3, 0x00, 0x20, 0x20, 0x20);
DEFINE_GUID(CLSID_D2D1LuminanceToAlpha,       0x41251ab7, 0x0beb, 0x46f8, 0x9d, 0xa7, 0x59, 0xe9, 0x3f, 0xcc, 0xe5, 0xde);
DEFINE_GUID(CLSID_D2D1Morphology,             0xeae6c40d, 0x626a, 0x4c2d, 0xbf, 0xcb, 0x39, 0x10, 0x01, 0xab, 0xe2, 0x02);
DEFINE_GUID(CLSID_D2D1Opacity,                0x811d79a4, 0xde28, 0x4454, 0x80, 0x94, 0xc6, 0x46, 0x85, 0xf8, 0xbd, 0x4c);
DEFINE_GUID(CLSID_D2D1OpacityMetadata,        0x6c53006a, 0x4450, 0x4199, 0xaa, 0x5b, 0xad, 0x16, 0x56, 0xfe, 0xce, 0x5e);
DEFINE_GUID(CLSID_D2D1PointDiffuse,           0xb9e303c3, 0xc08c, 0x4f91, 0x8b, 0x7b, 0x38, 0x65, 0x6b, 0xc4, 0x8c, 0x20);
DEFINE_GUID(CLSID_D2D1PointSpecular,          0x09c3ca26, 0x3ae2, 0x4f09, 0x9e, 0xbc, 0xed, 0x38, 0x65, 0xd5, 0x3f, 0x22);
DEFINE_GUID(CLSID_D2D1Posterize,              0x2188945e, 0x33a3, 0x4366, 0xb7, 0xbc, 0x08, 0x6b, 0xd0, 0x2d, 0x08, 0x84);
DEFINE_GUID(CLSID_D2D1Premultiply,            0x06eab419, 0xdeed, 0x4018, 0x80, 0xd2, 0x3e, 0x1d, 0x47, 0x1a, 0xde, 0xb2);
DEFINE_GUID(CLSID_D2D1RgbToHue,               0x23f3e5ec, 0x91e8, 0x4d3d, 0xad, 0x0a, 0xaf, 0xad, 0xc1, 0x00, 0x4a, 0xa1);
DEFINE_GUID(CLSID_D2D1Saturation,             0x5cb2d9cf, 0x327d, 0x459f, 0xa0, 0xce, 0x40, 0xc0, 0xb2, 0x08, 0x6b, 0xf7);
DEFINE_GUID(CLSID_D2D1Scale,                  0x9daf9369, 0x3846, 0x4d0e, 0xa4, 0x4e, 0x0c, 0x60, 0x79, 0x34, 0xa5, 0xd7);
DEFINE_GUID(CLSID_D2D1Sepia,                  0x3a1af410, 0x5f1d, 0x4dbe, 0x84, 0xdf, 0x91, 0x5d, 0xa7, 0x9b, 0x71, 0x53);
DEFINE_GUID(CLSID_D2D1Shadow,                 0xc67ea361, 0x1863, 0x4e69, 0x89, 0xdb, 0x69, 0x5d, 0x3e, 0x9a, 0x5b, 0x6b);
DEFINE_GUID(CLSID_D2D1Sharpen,                0xc9b887cb, 0xc5ff, 0x4dc5, 0x97, 0x79, 0x27, 0x3d, 0xcf, 0x41, 0x7c, 0x7d);
DEFINE_GUID(CLSID_D2D1SpotDiffuse,            0x818a1105, 0x7932, 0x44f4, 0xaa, 0x86, 0x08, 0xae, 0x7b, 0x2f, 0x2c, 0x93);
DEFINE_GUID(CLSID_D2D1SpotSpecular,           0xedae421e, 0x7654, 0x4a37, 0x9d, 0xb8, 0x71, 0xac, 0xc1, 0xbe, 0xb3, 0xc1);
DEFINE_GUID(CLSID_D2D1Straighten,             0x4da47b12, 0x79a3, 0x4fb0, 0x82, 0x37, 0xbb, 0xc3, 0xb2, 0xa4, 0xde, 0x08);
DEFINE_GUID(CLSID_D2D1TableTransfer,          0x5bf818c3, 0x5e43, 0x48cb, 0xb6, 0x31, 0x86, 0x83, 0x96, 0xd6, 0xa1, 0xd4);
DEFINE_GUID(CLSID_D2D1TemperatureTint,        0x89176087, 0x8af9, 0x4a08, 0xae, 0xb1, 0x89, 0x5f, 0x38, 0xdb, 0x17, 0x66);
DEFINE_GUID(CLSID_D2D1Tile,                   0xb0784138, 0x3b76, 0x4bc5, 0xb1, 0x3b, 0x0f, 0xa2, 0xad, 0x02, 0x65, 0x9f);
DEFINE_GUID(CLSID_D2D1Tint,                   0x36312b17, 0xf7dd, 0x4014, 0x91, 0x5d, 0xff, 0xca, 0x76, 0x8c, 0xf2, 0x11);
DEFINE_GUID(CLSID_D2D1Turbulence,             0xcf2bb6ae, 0x889a, 0x4ad7, 0xba, 0x29, 0xa2, 0xfd, 0x73, 0x2c, 0x9f, 0xc9);
DEFINE_GUID(CLSID_D2D1UnPremultiply,          0xfb9ac489, 0xad8d, 0x41ed, 0x99, 0x99, 0xbb, 0x63, 0x47, 0xd1, 0x10, 0xf7);
DEFINE_GUID(CLSID_D2D1Vignette,               0xc00c40be, 0x5e67, 0x4ca3, 0x95, 0xb4, 0xf4, 0xb0, 0x2c, 0x11, 0x51, 0x35);
DEFINE_GUID(CLSID_D2D1WhiteLevelAdjustment,   0x44a1cadb, 0x6cdd, 0x4818, 0x8f, 0xf4, 0x26, 0xc1, 0xcf, 0xe9, 0x5b, 0xdb);
DEFINE_GUID(CLSID_D2D1YCbCr,                  0x99503cc1, 0x66c7, 0x45c9, 0xa8, 0x75, 0x8a, 0xd8, 0xa7, 0x91, 0x44, 0x01);
#define D2D1_APPEND_ALIGNED_ELEMENT 0xffffffff
#define D2D1_DEFAULT_FLATTENING_TOLERANCE 0.25f
#define D2D1_SCENE_REFERRED_SDR_WHITE_LEVEL 80.f
#define FACILITY_D2D 2201

// typedefs

typedef HRESULT (CALLBACK* PD2D1_EFFECT_FACTORY)(IUnknown** effectImpl);
typedef HRESULT (CALLBACK* PD2D1_PROPERTY_GET_FUNCTION)(const IUnknown* effect, UINT8* data, UINT32 dataSize, UINT32* actualSize);
typedef HRESULT (CALLBACK* PD2D1_PROPERTY_SET_FUNCTION)(IUnknown* effect, const UINT8* data, UINT32 dataSize);

// enums

typedef enum D2D1_2DAFFINETRANSFORM_PROP {
    D2D1_2DAFFINETRANSFORM_PROP_INTERPOLATION_MODE = 0,
    D2D1_2DAFFINETRANSFORM_PROP_BORDER_MODE        = 1,
    D2D1_2DAFFINETRANSFORM_PROP_TRANSFORM_MATRIX   = 2,
    D2D1_2DAFFINETRANSFORM_PROP_SHARPNESS          = 3,
} D2D1_2DAFFINETRANSFORM_PROP;

typedef enum D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE {
    D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR    = 0,
    D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_LINEAR              = 1,
    D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_CUBIC               = 2,
    D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 3,
    D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_ANISOTROPIC         = 4,
} D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE;

typedef enum D2D1_3DPERSPECTIVETRANSFORM_PROP {
    D2D1_3DPERSPECTIVETRANSFORM_PROP_INTERPOLATION_MODE = 0,
    D2D1_3DPERSPECTIVETRANSFORM_PROP_BORDER_MODE        = 1,
    D2D1_3DPERSPECTIVETRANSFORM_PROP_DEPTH              = 2,
    D2D1_3DPERSPECTIVETRANSFORM_PROP_PERSPECTIVE_ORIGIN = 3,
    D2D1_3DPERSPECTIVETRANSFORM_PROP_LOCAL_OFFSET       = 4,
    D2D1_3DPERSPECTIVETRANSFORM_PROP_GLOBAL_OFFSET      = 5,
    D2D1_3DPERSPECTIVETRANSFORM_PROP_ROTATION_ORIGIN    = 6,
    D2D1_3DPERSPECTIVETRANSFORM_PROP_ROTATION           = 7,
} D2D1_3DPERSPECTIVETRANSFORM_PROP;

typedef enum D2D1_3DTRANSFORM_INTERPOLATION_MODE {
    D2D1_3DTRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR    = 0,
    D2D1_3DTRANSFORM_INTERPOLATION_MODE_LINEAR              = 1,
    D2D1_3DTRANSFORM_INTERPOLATION_MODE_CUBIC               = 2,
    D2D1_3DTRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 3,
    D2D1_3DTRANSFORM_INTERPOLATION_MODE_ANISOTROPIC         = 4,
} D2D1_3DTRANSFORM_INTERPOLATION_MODE;

typedef enum D2D1_3DTRANSFORM_PROP {
    D2D1_3DTRANSFORM_PROP_INTERPOLATION_MODE = 0,
    D2D1_3DTRANSFORM_PROP_BORDER_MODE        = 1,
    D2D1_3DTRANSFORM_PROP_TRANSFORM_MATRIX   = 2,
} D2D1_3DTRANSFORM_PROP;

typedef enum D2D1_ANTIALIAS_MODE {
    D2D1_ANTIALIAS_MODE_PER_PRIMITIVE = 0,
    D2D1_ANTIALIAS_MODE_ALIASED       = 1,
} D2D1_ANTIALIAS_MODE;

typedef enum D2D1_ARC_SIZE {
    D2D1_ARC_SIZE_SMALL = 0,
    D2D1_ARC_SIZE_LARGE = 1,
} D2D1_ARC_SIZE;

typedef enum D2D1_ARITHMETICCOMPOSITE_PROP {
    D2D1_ARITHMETICCOMPOSITE_PROP_COEFFICIENTS = 0,
    D2D1_ARITHMETICCOMPOSITE_PROP_CLAMP_OUTPUT = 1,
} D2D1_ARITHMETICCOMPOSITE_PROP;

typedef enum D2D1_ATLAS_PROP {
    D2D1_ATLAS_PROP_INPUT_RECT         = 0,
    D2D1_ATLAS_PROP_INPUT_PADDING_RECT = 1,
} D2D1_ATLAS_PROP;

typedef enum D2D1_BITMAP_INTERPOLATION_MODE {
    D2D1_BITMAP_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0,
    D2D1_BITMAP_INTERPOLATION_MODE_LINEAR           = 1,
} D2D1_BITMAP_INTERPOLATION_MODE;

typedef enum D2D1_BITMAP_OPTIONS {
    D2D1_BITMAP_OPTIONS_NONE           = 0,
    D2D1_BITMAP_OPTIONS_TARGET         = 1,
    D2D1_BITMAP_OPTIONS_CANNOT_DRAW    = 2,
    D2D1_BITMAP_OPTIONS_CPU_READ       = 4,
    D2D1_BITMAP_OPTIONS_GDI_COMPATIBLE = 8,
} D2D1_BITMAP_OPTIONS;

typedef enum D2D1_BITMAPSOURCE_ALPHA_MODE {
    D2D1_BITMAPSOURCE_ALPHA_MODE_PREMULTIPLIED = 1,
    D2D1_BITMAPSOURCE_ALPHA_MODE_STRAIGHT      = 2,
} D2D1_BITMAPSOURCE_ALPHA_MODE;

typedef enum D2D1_BITMAPSOURCE_INTERPOLATION_MODE {
    D2D1_BITMAPSOURCE_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0,
    D2D1_BITMAPSOURCE_INTERPOLATION_MODE_LINEAR           = 1,
    D2D1_BITMAPSOURCE_INTERPOLATION_MODE_CUBIC            = 2,
    D2D1_BITMAPSOURCE_INTERPOLATION_MODE_FANT             = 6,
    D2D1_BITMAPSOURCE_INTERPOLATION_MODE_MIPMAP_LINEAR    = 7,
} D2D1_BITMAPSOURCE_INTERPOLATION_MODE;

typedef enum D2D1_BITMAPSOURCE_ORIENTATION {
    D2D1_BITMAPSOURCE_ORIENTATION_DEFAULT                             = 1,
    D2D1_BITMAPSOURCE_ORIENTATION_FLIP_HORIZONTAL                     = 2,
    D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE180                 = 3,
    D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE180_FLIP_HORIZONTAL = 4,
    D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE270_FLIP_HORIZONTAL = 5,
    D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE90                  = 6,
    D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE90_FLIP_HORIZONTAL  = 7,
    D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE270                 = 8,
} D2D1_BITMAPSOURCE_ORIENTATION;

typedef enum D2D1_BITMAPSOURCE_PROP {
    D2D1_BITMAPSOURCE_PROP_WIC_BITMAP_SOURCE     = 0,
    D2D1_BITMAPSOURCE_PROP_SCALE                 = 1,
    D2D1_BITMAPSOURCE_PROP_INTERPOLATION_MODE    = 2,
    D2D1_BITMAPSOURCE_PROP_ENABLE_DPI_CORRECTION = 3,
    D2D1_BITMAPSOURCE_PROP_ALPHA_MODE            = 4,
    D2D1_BITMAPSOURCE_PROP_ORIENTATION           = 5,
} D2D1_BITMAPSOURCE_PROP;

typedef enum D2D1_BLEND {
    D2D1_BLEND_ZERO             = 1,
    D2D1_BLEND_ONE              = 2,
    D2D1_BLEND_SRC_COLOR        = 3,
    D2D1_BLEND_INV_SRC_COLOR    = 4,
    D2D1_BLEND_SRC_ALPHA        = 5,
    D2D1_BLEND_INV_SRC_ALPHA    = 6,
    D2D1_BLEND_DEST_ALPHA       = 7,
    D2D1_BLEND_INV_DEST_ALPHA   = 8,
    D2D1_BLEND_DEST_COLOR       = 9,
    D2D1_BLEND_INV_DEST_COLOR   = 10,
    D2D1_BLEND_SRC_ALPHA_SAT    = 11,
    D2D1_BLEND_BLEND_FACTOR     = 14,
    D2D1_BLEND_INV_BLEND_FACTOR = 15,
} D2D1_BLEND;

typedef enum D2D1_BLEND_MODE {
    D2D1_BLEND_MODE_MULTIPLY      = 0,
    D2D1_BLEND_MODE_SCREEN        = 1,
    D2D1_BLEND_MODE_DARKEN        = 2,
    D2D1_BLEND_MODE_LIGHTEN       = 3,
    D2D1_BLEND_MODE_DISSOLVE      = 4,
    D2D1_BLEND_MODE_COLOR_BURN    = 5,
    D2D1_BLEND_MODE_LINEAR_BURN   = 6,
    D2D1_BLEND_MODE_DARKER_COLOR  = 7,
    D2D1_BLEND_MODE_LIGHTER_COLOR = 8,
    D2D1_BLEND_MODE_COLOR_DODGE   = 9,
    D2D1_BLEND_MODE_LINEAR_DODGE  = 10,
    D2D1_BLEND_MODE_OVERLAY       = 11,
    D2D1_BLEND_MODE_SOFT_LIGHT    = 12,
    D2D1_BLEND_MODE_HARD_LIGHT    = 13,
    D2D1_BLEND_MODE_VIVID_LIGHT   = 14,
    D2D1_BLEND_MODE_LINEAR_LIGHT  = 15,
    D2D1_BLEND_MODE_PIN_LIGHT     = 16,
    D2D1_BLEND_MODE_HARD_MIX      = 17,
    D2D1_BLEND_MODE_DIFFERENCE    = 18,
    D2D1_BLEND_MODE_EXCLUSION     = 19,
    D2D1_BLEND_MODE_HUE           = 20,
    D2D1_BLEND_MODE_SATURATION    = 21,
    D2D1_BLEND_MODE_COLOR         = 22,
    D2D1_BLEND_MODE_LUMINOSITY    = 23,
    D2D1_BLEND_MODE_SUBTRACT      = 24,
    D2D1_BLEND_MODE_DIVISION      = 25,
} D2D1_BLEND_MODE;

typedef enum D2D1_BLEND_OPERATION {
    D2D1_BLEND_OPERATION_ADD          = 1,
    D2D1_BLEND_OPERATION_SUBTRACT     = 2,
    D2D1_BLEND_OPERATION_REV_SUBTRACT = 3,
    D2D1_BLEND_OPERATION_MIN          = 4,
    D2D1_BLEND_OPERATION_MAX          = 5,
} D2D1_BLEND_OPERATION;

typedef enum D2D1_BLEND_PROP {
    D2D1_BLEND_PROP_MODE = 0,
} D2D1_BLEND_PROP;

typedef enum D2D1_BORDER_EDGE_MODE {
    D2D1_BORDER_EDGE_MODE_CLAMP  = 0,
    D2D1_BORDER_EDGE_MODE_WRAP   = 1,
    D2D1_BORDER_EDGE_MODE_MIRROR = 2,
} D2D1_BORDER_EDGE_MODE;

typedef enum D2D1_BORDER_PROP {
    D2D1_BORDER_PROP_EDGE_MODE_X = 0,
    D2D1_BORDER_PROP_EDGE_MODE_Y = 1,
} D2D1_BORDER_PROP;

typedef enum D2D1_BRIGHTNESS_PROP {
    D2D1_BRIGHTNESS_PROP_WHITE_POINT = 0,
    D2D1_BRIGHTNESS_PROP_BLACK_POINT = 1,
} D2D1_BRIGHTNESS_PROP;

typedef enum D2D1_BUFFER_PRECISION {
    D2D1_BUFFER_PRECISION_UNKNOWN         = 0,
    D2D1_BUFFER_PRECISION_8BPC_UNORM      = 1,
    D2D1_BUFFER_PRECISION_8BPC_UNORM_SRGB = 2,
    D2D1_BUFFER_PRECISION_16BPC_UNORM     = 3,
    D2D1_BUFFER_PRECISION_16BPC_FLOAT     = 4,
    D2D1_BUFFER_PRECISION_32BPC_FLOAT     = 5,
} D2D1_BUFFER_PRECISION;

typedef enum D2D1_CAP_STYLE {
    D2D1_CAP_STYLE_FLAT     = 0,
    D2D1_CAP_STYLE_SQUARE   = 1,
    D2D1_CAP_STYLE_ROUND    = 2,
    D2D1_CAP_STYLE_TRIANGLE = 3,
} D2D1_CAP_STYLE;

typedef enum D2D1_CHANGE_TYPE {
    D2D1_CHANGE_TYPE_NONE       = 0,
    D2D1_CHANGE_TYPE_PROPERTIES = 1,
    D2D1_CHANGE_TYPE_CONTEXT    = 2,
    D2D1_CHANGE_TYPE_GRAPH      = 3,
} D2D1_CHANGE_TYPE;

typedef enum D2D1_CHANNEL_DEPTH {
    D2D1_CHANNEL_DEPTH_DEFAULT = 0,
    D2D1_CHANNEL_DEPTH_1       = 1,
    D2D1_CHANNEL_DEPTH_4       = 4,
} D2D1_CHANNEL_DEPTH;

typedef enum D2D1_CHANNEL_SELECTOR {
    D2D1_CHANNEL_SELECTOR_R = 0,
    D2D1_CHANNEL_SELECTOR_G = 1,
    D2D1_CHANNEL_SELECTOR_B = 2,
    D2D1_CHANNEL_SELECTOR_A = 3,
} D2D1_CHANNEL_SELECTOR;

typedef enum D2D1_CHROMAKEY_PROP {
    D2D1_CHROMAKEY_PROP_COLOR        = 0,
    D2D1_CHROMAKEY_PROP_TOLERANCE    = 1,
    D2D1_CHROMAKEY_PROP_INVERT_ALPHA = 2,
    D2D1_CHROMAKEY_PROP_FEATHER      = 3,
} D2D1_CHROMAKEY_PROP;

typedef enum D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION {
    D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION_DEFAULT = 0,
    D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION_DISABLE = 1,
} D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION;

typedef enum D2D1_COLOR_CONTEXT_TYPE {
    D2D1_COLOR_CONTEXT_TYPE_ICC    = 0,
    D2D1_COLOR_CONTEXT_TYPE_SIMPLE = 1,
    D2D1_COLOR_CONTEXT_TYPE_DXGI   = 2,
} D2D1_COLOR_CONTEXT_TYPE;

typedef enum D2D1_COLOR_INTERPOLATION_MODE {
    D2D1_COLOR_INTERPOLATION_MODE_STRAIGHT      = 0,
    D2D1_COLOR_INTERPOLATION_MODE_PREMULTIPLIED = 1,
} D2D1_COLOR_INTERPOLATION_MODE;

typedef enum D2D1_COLOR_SPACE {
    D2D1_COLOR_SPACE_CUSTOM = 0,
    D2D1_COLOR_SPACE_SRGB   = 1,
    D2D1_COLOR_SPACE_SCRGB  = 2,
} D2D1_COLOR_SPACE;

typedef enum D2D1_COLORMANAGEMENT_ALPHA_MODE {
    D2D1_COLORMANAGEMENT_ALPHA_MODE_PREMULTIPLIED = 1,
    D2D1_COLORMANAGEMENT_ALPHA_MODE_STRAIGHT      = 2,
} D2D1_COLORMANAGEMENT_ALPHA_MODE;

typedef enum D2D1_COLORMANAGEMENT_PROP {
    D2D1_COLORMANAGEMENT_PROP_SOURCE_COLOR_CONTEXT         = 0,
    D2D1_COLORMANAGEMENT_PROP_SOURCE_RENDERING_INTENT      = 1,
    D2D1_COLORMANAGEMENT_PROP_DESTINATION_COLOR_CONTEXT    = 2,
    D2D1_COLORMANAGEMENT_PROP_DESTINATION_RENDERING_INTENT = 3,
    D2D1_COLORMANAGEMENT_PROP_ALPHA_MODE                   = 4,
    D2D1_COLORMANAGEMENT_PROP_QUALITY                      = 5,
} D2D1_COLORMANAGEMENT_PROP;

typedef enum D2D1_COLORMANAGEMENT_QUALITY {
    D2D1_COLORMANAGEMENT_QUALITY_PROOF  = 0,
    D2D1_COLORMANAGEMENT_QUALITY_NORMAL = 1,
    D2D1_COLORMANAGEMENT_QUALITY_BEST   = 2,
} D2D1_COLORMANAGEMENT_QUALITY;

typedef enum D2D1_COLORMANAGEMENT_RENDERING_INTENT {
    D2D1_COLORMANAGEMENT_RENDERING_INTENT_PERCEPTUAL            = 0,
    D2D1_COLORMANAGEMENT_RENDERING_INTENT_RELATIVE_COLORIMETRIC = 1,
    D2D1_COLORMANAGEMENT_RENDERING_INTENT_SATURATION            = 2,
    D2D1_COLORMANAGEMENT_RENDERING_INTENT_ABSOLUTE_COLORIMETRIC = 3,
} D2D1_COLORMANAGEMENT_RENDERING_INTENT;

typedef enum D2D1_COLORMATRIX_PROP {
    D2D1_COLORMATRIX_PROP_COLOR_MATRIX = 0,
    D2D1_COLORMATRIX_PROP_ALPHA_MODE   = 1,
    D2D1_COLORMATRIX_PROP_CLAMP_OUTPUT = 2,
} D2D1_COLORMATRIX_PROP;

typedef enum D2D1_COMBINE_MODE {
    D2D1_COMBINE_MODE_UNION     = 0,
    D2D1_COMBINE_MODE_INTERSECT = 1,
    D2D1_COMBINE_MODE_XOR       = 2,
    D2D1_COMBINE_MODE_EXCLUDE   = 3,
} D2D1_COMBINE_MODE;

typedef enum D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS {
    D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_NONE           = 0,
    D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_GDI_COMPATIBLE = 1,
} D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS;

typedef enum D2D1_COMPOSITE_MODE {
    D2D1_COMPOSITE_MODE_SOURCE_OVER         = 0,
    D2D1_COMPOSITE_MODE_DESTINATION_OVER    = 1,
    D2D1_COMPOSITE_MODE_SOURCE_IN           = 2,
    D2D1_COMPOSITE_MODE_DESTINATION_IN      = 3,
    D2D1_COMPOSITE_MODE_SOURCE_OUT          = 4,
    D2D1_COMPOSITE_MODE_DESTINATION_OUT     = 5,
    D2D1_COMPOSITE_MODE_SOURCE_ATOP         = 6,
    D2D1_COMPOSITE_MODE_DESTINATION_ATOP    = 7,
    D2D1_COMPOSITE_MODE_XOR                 = 8,
    D2D1_COMPOSITE_MODE_PLUS                = 9,
    D2D1_COMPOSITE_MODE_SOURCE_COPY         = 10,
    D2D1_COMPOSITE_MODE_BOUNDED_SOURCE_COPY = 11,
    D2D1_COMPOSITE_MODE_MASK_INVERT         = 12,
} D2D1_COMPOSITE_MODE;

typedef enum D2D1_COMPOSITE_PROP {
    D2D1_COMPOSITE_PROP_MODE = 0,
} D2D1_COMPOSITE_PROP;

typedef enum D2D1_CONTRAST_PROP {
    D2D1_CONTRAST_PROP_CONTRAST    = 0,
    D2D1_CONTRAST_PROP_CLAMP_INPUT = 1,
} D2D1_CONTRAST_PROP;

typedef enum D2D1_CONVOLVEMATRIX_PROP {
    D2D1_CONVOLVEMATRIX_PROP_KERNEL_UNIT_LENGTH = 0,
    D2D1_CONVOLVEMATRIX_PROP_SCALE_MODE         = 1,
    D2D1_CONVOLVEMATRIX_PROP_KERNEL_SIZE_X      = 2,
    D2D1_CONVOLVEMATRIX_PROP_KERNEL_SIZE_Y      = 3,
    D2D1_CONVOLVEMATRIX_PROP_KERNEL_MATRIX      = 4,
    D2D1_CONVOLVEMATRIX_PROP_DIVISOR            = 5,
    D2D1_CONVOLVEMATRIX_PROP_BIAS               = 6,
    D2D1_CONVOLVEMATRIX_PROP_KERNEL_OFFSET      = 7,
    D2D1_CONVOLVEMATRIX_PROP_PRESERVE_ALPHA     = 8,
    D2D1_CONVOLVEMATRIX_PROP_BORDER_MODE        = 9,
    D2D1_CONVOLVEMATRIX_PROP_CLAMP_OUTPUT       = 10,
} D2D1_CONVOLVEMATRIX_PROP;

typedef enum D2D1_CONVOLVEMATRIX_SCALE_MODE {
    D2D1_CONVOLVEMATRIX_SCALE_MODE_NEAREST_NEIGHBOR    = 0,
    D2D1_CONVOLVEMATRIX_SCALE_MODE_LINEAR              = 1,
    D2D1_CONVOLVEMATRIX_SCALE_MODE_CUBIC               = 2,
    D2D1_CONVOLVEMATRIX_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3,
    D2D1_CONVOLVEMATRIX_SCALE_MODE_ANISOTROPIC         = 4,
    D2D1_CONVOLVEMATRIX_SCALE_MODE_HIGH_QUALITY_CUBIC  = 5,
} D2D1_CONVOLVEMATRIX_SCALE_MODE;

typedef enum D2D1_CROP_PROP {
    D2D1_CROP_PROP_RECT        = 0,
    D2D1_CROP_PROP_BORDER_MODE = 1,
} D2D1_CROP_PROP;

typedef enum D2D1_CROSSFADE_PROP {
    D2D1_CROSSFADE_PROP_WEIGHT = 0,
} D2D1_CROSSFADE_PROP;

typedef enum D2D1_DASH_STYLE {
    D2D1_DASH_STYLE_SOLID        = 0,
    D2D1_DASH_STYLE_DASH         = 1,
    D2D1_DASH_STYLE_DOT          = 2,
    D2D1_DASH_STYLE_DASH_DOT     = 3,
    D2D1_DASH_STYLE_DASH_DOT_DOT = 4,
    D2D1_DASH_STYLE_CUSTOM       = 5,
} D2D1_DASH_STYLE;

typedef enum D2D1_DC_INITIALIZE_MODE {
    D2D1_DC_INITIALIZE_MODE_COPY  = 0,
    D2D1_DC_INITIALIZE_MODE_CLEAR = 1,
} D2D1_DC_INITIALIZE_MODE;

typedef enum D2D1_DEBUG_LEVEL {
    D2D1_DEBUG_LEVEL_NONE        = 0,
    D2D1_DEBUG_LEVEL_ERROR       = 1,
    D2D1_DEBUG_LEVEL_WARNING     = 2,
    D2D1_DEBUG_LEVEL_INFORMATION = 3,
} D2D1_DEBUG_LEVEL;

typedef enum D2D1_DEVICE_CONTEXT_OPTIONS {
    D2D1_DEVICE_CONTEXT_OPTIONS_NONE                               = 0,
    D2D1_DEVICE_CONTEXT_OPTIONS_ENABLE_MULTITHREADED_OPTIMIZATIONS = 1,
} D2D1_DEVICE_CONTEXT_OPTIONS;

typedef enum D2D1_DIRECTIONALBLUR_OPTIMIZATION {
    D2D1_DIRECTIONALBLUR_OPTIMIZATION_SPEED    = 0,
    D2D1_DIRECTIONALBLUR_OPTIMIZATION_BALANCED = 1,
    D2D1_DIRECTIONALBLUR_OPTIMIZATION_QUALITY  = 2,
} D2D1_DIRECTIONALBLUR_OPTIMIZATION;

typedef enum D2D1_DIRECTIONALBLUR_PROP {
    D2D1_DIRECTIONALBLUR_PROP_STANDARD_DEVIATION = 0,
    D2D1_DIRECTIONALBLUR_PROP_ANGLE              = 1,
    D2D1_DIRECTIONALBLUR_PROP_OPTIMIZATION       = 2,
    D2D1_DIRECTIONALBLUR_PROP_BORDER_MODE        = 3,
} D2D1_DIRECTIONALBLUR_PROP;

typedef enum D2D1_DISCRETETRANSFER_PROP {
    D2D1_DISCRETETRANSFER_PROP_RED_TABLE     = 0,
    D2D1_DISCRETETRANSFER_PROP_RED_DISABLE   = 1,
    D2D1_DISCRETETRANSFER_PROP_GREEN_TABLE   = 2,
    D2D1_DISCRETETRANSFER_PROP_GREEN_DISABLE = 3,
    D2D1_DISCRETETRANSFER_PROP_BLUE_TABLE    = 4,
    D2D1_DISCRETETRANSFER_PROP_BLUE_DISABLE  = 5,
    D2D1_DISCRETETRANSFER_PROP_ALPHA_TABLE   = 6,
    D2D1_DISCRETETRANSFER_PROP_ALPHA_DISABLE = 7,
    D2D1_DISCRETETRANSFER_PROP_CLAMP_OUTPUT  = 8,
} D2D1_DISCRETETRANSFER_PROP;

typedef enum D2D1_DISPLACEMENTMAP_PROP {
    D2D1_DISPLACEMENTMAP_PROP_SCALE            = 0,
    D2D1_DISPLACEMENTMAP_PROP_X_CHANNEL_SELECT = 1,
    D2D1_DISPLACEMENTMAP_PROP_Y_CHANNEL_SELECT = 2,
} D2D1_DISPLACEMENTMAP_PROP;

typedef enum D2D1_DISTANTDIFFUSE_PROP {
    D2D1_DISTANTDIFFUSE_PROP_AZIMUTH            = 0,
    D2D1_DISTANTDIFFUSE_PROP_ELEVATION          = 1,
    D2D1_DISTANTDIFFUSE_PROP_DIFFUSE_CONSTANT   = 2,
    D2D1_DISTANTDIFFUSE_PROP_SURFACE_SCALE      = 3,
    D2D1_DISTANTDIFFUSE_PROP_COLOR              = 4,
    D2D1_DISTANTDIFFUSE_PROP_KERNEL_UNIT_LENGTH = 5,
    D2D1_DISTANTDIFFUSE_PROP_SCALE_MODE         = 6,
} D2D1_DISTANTDIFFUSE_PROP;

typedef enum D2D1_DISTANTDIFFUSE_SCALE_MODE {
    D2D1_DISTANTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR    = 0,
    D2D1_DISTANTDIFFUSE_SCALE_MODE_LINEAR              = 1,
    D2D1_DISTANTDIFFUSE_SCALE_MODE_CUBIC               = 2,
    D2D1_DISTANTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3,
    D2D1_DISTANTDIFFUSE_SCALE_MODE_ANISOTROPIC         = 4,
    D2D1_DISTANTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC  = 5,
} D2D1_DISTANTDIFFUSE_SCALE_MODE;

typedef enum D2D1_DISTANTSPECULAR_PROP {
    D2D1_DISTANTSPECULAR_PROP_AZIMUTH            = 0,
    D2D1_DISTANTSPECULAR_PROP_ELEVATION          = 1,
    D2D1_DISTANTSPECULAR_PROP_SPECULAR_EXPONENT  = 2,
    D2D1_DISTANTSPECULAR_PROP_SPECULAR_CONSTANT  = 3,
    D2D1_DISTANTSPECULAR_PROP_SURFACE_SCALE      = 4,
    D2D1_DISTANTSPECULAR_PROP_COLOR              = 5,
    D2D1_DISTANTSPECULAR_PROP_KERNEL_UNIT_LENGTH = 6,
    D2D1_DISTANTSPECULAR_PROP_SCALE_MODE         = 7,
} D2D1_DISTANTSPECULAR_PROP;

typedef enum D2D1_DISTANTSPECULAR_SCALE_MODE {
    D2D1_DISTANTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR    = 0,
    D2D1_DISTANTSPECULAR_SCALE_MODE_LINEAR              = 1,
    D2D1_DISTANTSPECULAR_SCALE_MODE_CUBIC               = 2,
    D2D1_DISTANTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3,
    D2D1_DISTANTSPECULAR_SCALE_MODE_ANISOTROPIC         = 4,
    D2D1_DISTANTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC  = 5,
} D2D1_DISTANTSPECULAR_SCALE_MODE;

typedef enum D2D1_DPICOMPENSATION_INTERPOLATION_MODE {
    D2D1_DPICOMPENSATION_INTERPOLATION_MODE_NEAREST_NEIGHBOR    = 0,
    D2D1_DPICOMPENSATION_INTERPOLATION_MODE_LINEAR              = 1,
    D2D1_DPICOMPENSATION_INTERPOLATION_MODE_CUBIC               = 2,
    D2D1_DPICOMPENSATION_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 3,
    D2D1_DPICOMPENSATION_INTERPOLATION_MODE_ANISOTROPIC         = 4,
    D2D1_DPICOMPENSATION_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC  = 5,
} D2D1_DPICOMPENSATION_INTERPOLATION_MODE;

typedef enum D2D1_DPICOMPENSATION_PROP {
    D2D1_DPICOMPENSATION_PROP_INTERPOLATION_MODE = 0,
    D2D1_DPICOMPENSATION_PROP_BORDER_MODE        = 1,
    D2D1_DPICOMPENSATION_PROP_INPUT_DPI          = 2,
} D2D1_DPICOMPENSATION_PROP;

typedef enum D2D1_DRAW_TEXT_OPTIONS {
    D2D1_DRAW_TEXT_OPTIONS_NO_SNAP                       = 1,
    D2D1_DRAW_TEXT_OPTIONS_CLIP                          = 2,
    D2D1_DRAW_TEXT_OPTIONS_ENABLE_COLOR_FONT             = 4,
    D2D1_DRAW_TEXT_OPTIONS_DISABLE_COLOR_BITMAP_SNAPPING = 8,
    D2D1_DRAW_TEXT_OPTIONS_NONE                          = 0,
} D2D1_DRAW_TEXT_OPTIONS;

typedef enum D2D1_EDGEDETECTION_MODE {
    D2D1_EDGEDETECTION_MODE_SOBEL   = 0,
    D2D1_EDGEDETECTION_MODE_PREWITT = 1,
} D2D1_EDGEDETECTION_MODE;

typedef enum D2D1_EDGEDETECTION_PROP {
    D2D1_EDGEDETECTION_PROP_STRENGTH      = 0,
    D2D1_EDGEDETECTION_PROP_BLUR_RADIUS   = 1,
    D2D1_EDGEDETECTION_PROP_MODE          = 2,
    D2D1_EDGEDETECTION_PROP_OVERLAY_EDGES = 3,
    D2D1_EDGEDETECTION_PROP_ALPHA_MODE    = 4,
} D2D1_EDGEDETECTION_PROP;

typedef enum D2D1_EMBOSS_PROP {
    D2D1_EMBOSS_PROP_HEIGHT    = 0,
    D2D1_EMBOSS_PROP_DIRECTION = 1,
} D2D1_EMBOSS_PROP;

typedef enum D2D1_EXPOSURE_PROP {
    D2D1_EXPOSURE_PROP_EXPOSURE_VALUE = 0,
} D2D1_EXPOSURE_PROP;

typedef enum D2D1_EXTEND_MODE {
    D2D1_EXTEND_MODE_CLAMP  = 0,
    D2D1_EXTEND_MODE_WRAP   = 1,
    D2D1_EXTEND_MODE_MIRROR = 2,
} D2D1_EXTEND_MODE;

typedef enum D2D1_FACTORY_TYPE {
    D2D1_FACTORY_TYPE_SINGLE_THREADED = 0,
    D2D1_FACTORY_TYPE_MULTI_THREADED  = 1,
} D2D1_FACTORY_TYPE;

typedef enum D2D1_FEATURE {
    D2D1_FEATURE_DOUBLES                  = 0,
    D2D1_FEATURE_D3D10_X_HARDWARE_OPTIONS = 1,
} D2D1_FEATURE;

typedef enum D2D1_FEATURE_LEVEL {
    D2D1_FEATURE_LEVEL_DEFAULT = 0,
    D2D1_FEATURE_LEVEL_9       = 37120,
    D2D1_FEATURE_LEVEL_10      = 40960,
} D2D1_FEATURE_LEVEL;

typedef enum D2D1_FIGURE_BEGIN {
    D2D1_FIGURE_BEGIN_FILLED = 0,
    D2D1_FIGURE_BEGIN_HOLLOW = 1,
} D2D1_FIGURE_BEGIN;

typedef enum D2D1_FIGURE_END {
    D2D1_FIGURE_END_OPEN   = 0,
    D2D1_FIGURE_END_CLOSED = 1,
} D2D1_FIGURE_END;

typedef enum D2D1_FILL_MODE {
    D2D1_FILL_MODE_ALTERNATE = 0,
    D2D1_FILL_MODE_WINDING   = 1,
} D2D1_FILL_MODE;

typedef enum D2D1_FILTER {
    D2D1_FILTER_MIN_MAG_MIP_POINT               = 0,
    D2D1_FILTER_MIN_MAG_POINT_MIP_LINEAR        = 1,
    D2D1_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT  = 4,
    D2D1_FILTER_MIN_POINT_MAG_MIP_LINEAR        = 5,
    D2D1_FILTER_MIN_LINEAR_MAG_MIP_POINT        = 16,
    D2D1_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 17,
    D2D1_FILTER_MIN_MAG_LINEAR_MIP_POINT        = 20,
    D2D1_FILTER_MIN_MAG_MIP_LINEAR              = 21,
    D2D1_FILTER_ANISOTROPIC                     = 85,
} D2D1_FILTER;

typedef enum D2D1_FLOOD_PROP {
    D2D1_FLOOD_PROP_COLOR = 0,
} D2D1_FLOOD_PROP;

typedef enum D2D1_GAMMA {
    D2D1_GAMMA_2_2 = 0,
    D2D1_GAMMA_1_0 = 1,
} D2D1_GAMMA;

typedef enum D2D1_GAMMA1 {
    D2D1_GAMMA1_G22   = 0,
    D2D1_GAMMA1_G10   = 1,
    D2D1_GAMMA1_G2084 = 2,
} D2D1_GAMMA1;

typedef enum D2D1_GAMMATRANSFER_PROP {
    D2D1_GAMMATRANSFER_PROP_RED_AMPLITUDE   = 0,
    D2D1_GAMMATRANSFER_PROP_RED_EXPONENT    = 1,
    D2D1_GAMMATRANSFER_PROP_RED_OFFSET      = 2,
    D2D1_GAMMATRANSFER_PROP_RED_DISABLE     = 3,
    D2D1_GAMMATRANSFER_PROP_GREEN_AMPLITUDE = 4,
    D2D1_GAMMATRANSFER_PROP_GREEN_EXPONENT  = 5,
    D2D1_GAMMATRANSFER_PROP_GREEN_OFFSET    = 6,
    D2D1_GAMMATRANSFER_PROP_GREEN_DISABLE   = 7,
    D2D1_GAMMATRANSFER_PROP_BLUE_AMPLITUDE  = 8,
    D2D1_GAMMATRANSFER_PROP_BLUE_EXPONENT   = 9,
    D2D1_GAMMATRANSFER_PROP_BLUE_OFFSET     = 10,
    D2D1_GAMMATRANSFER_PROP_BLUE_DISABLE    = 11,
    D2D1_GAMMATRANSFER_PROP_ALPHA_AMPLITUDE = 12,
    D2D1_GAMMATRANSFER_PROP_ALPHA_EXPONENT  = 13,
    D2D1_GAMMATRANSFER_PROP_ALPHA_OFFSET    = 14,
    D2D1_GAMMATRANSFER_PROP_ALPHA_DISABLE   = 15,
    D2D1_GAMMATRANSFER_PROP_CLAMP_OUTPUT    = 16,
} D2D1_GAMMATRANSFER_PROP;

typedef enum D2D1_GAUSSIANBLUR_OPTIMIZATION {
    D2D1_GAUSSIANBLUR_OPTIMIZATION_SPEED    = 0,
    D2D1_GAUSSIANBLUR_OPTIMIZATION_BALANCED = 1,
    D2D1_GAUSSIANBLUR_OPTIMIZATION_QUALITY  = 2,
} D2D1_GAUSSIANBLUR_OPTIMIZATION;

typedef enum D2D1_GAUSSIANBLUR_PROP {
    D2D1_GAUSSIANBLUR_PROP_STANDARD_DEVIATION = 0,
    D2D1_GAUSSIANBLUR_PROP_OPTIMIZATION       = 1,
    D2D1_GAUSSIANBLUR_PROP_BORDER_MODE        = 2,
} D2D1_GAUSSIANBLUR_PROP;

typedef enum D2D1_GEOMETRY_RELATION {
    D2D1_GEOMETRY_RELATION_UNKNOWN      = 0,
    D2D1_GEOMETRY_RELATION_DISJOINT     = 1,
    D2D1_GEOMETRY_RELATION_IS_CONTAINED = 2,
    D2D1_GEOMETRY_RELATION_CONTAINS     = 3,
    D2D1_GEOMETRY_RELATION_OVERLAP      = 4,
} D2D1_GEOMETRY_RELATION;

typedef enum D2D1_GEOMETRY_SIMPLIFICATION_OPTION {
    D2D1_GEOMETRY_SIMPLIFICATION_OPTION_CUBICS_AND_LINES = 0,
    D2D1_GEOMETRY_SIMPLIFICATION_OPTION_LINES            = 1,
} D2D1_GEOMETRY_SIMPLIFICATION_OPTION;

typedef enum D2D1_HDRTONEMAP_DISPLAY_MODE {
    D2D1_HDRTONEMAP_DISPLAY_MODE_SDR = 0,
    D2D1_HDRTONEMAP_DISPLAY_MODE_HDR = 1,
} D2D1_HDRTONEMAP_DISPLAY_MODE;

typedef enum D2D1_HDRTONEMAP_PROP {
    D2D1_HDRTONEMAP_PROP_INPUT_MAX_LUMINANCE  = 0,
    D2D1_HDRTONEMAP_PROP_OUTPUT_MAX_LUMINANCE = 1,
    D2D1_HDRTONEMAP_PROP_DISPLAY_MODE         = 2,
} D2D1_HDRTONEMAP_PROP;

typedef enum D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA {
    D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA_LINEAR = 0,
    D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA_SRGB   = 1,
} D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA;

typedef enum D2D1_HIGHLIGHTSANDSHADOWS_PROP {
    D2D1_HIGHLIGHTSANDSHADOWS_PROP_HIGHLIGHTS       = 0,
    D2D1_HIGHLIGHTSANDSHADOWS_PROP_SHADOWS          = 1,
    D2D1_HIGHLIGHTSANDSHADOWS_PROP_CLARITY          = 2,
    D2D1_HIGHLIGHTSANDSHADOWS_PROP_INPUT_GAMMA      = 3,
    D2D1_HIGHLIGHTSANDSHADOWS_PROP_MASK_BLUR_RADIUS = 4,
} D2D1_HIGHLIGHTSANDSHADOWS_PROP;

typedef enum D2D1_HISTOGRAM_PROP {
    D2D1_HISTOGRAM_PROP_NUM_BINS         = 0,
    D2D1_HISTOGRAM_PROP_CHANNEL_SELECT   = 1,
    D2D1_HISTOGRAM_PROP_HISTOGRAM_OUTPUT = 2,
} D2D1_HISTOGRAM_PROP;

typedef enum D2D1_HUEROTATION_PROP {
    D2D1_HUEROTATION_PROP_ANGLE = 0,
} D2D1_HUEROTATION_PROP;

typedef enum D2D1_HUETORGB_INPUT_COLOR_SPACE {
    D2D1_HUETORGB_INPUT_COLOR_SPACE_HUE_SATURATION_VALUE     = 0,
    D2D1_HUETORGB_INPUT_COLOR_SPACE_HUE_SATURATION_LIGHTNESS = 1,
} D2D1_HUETORGB_INPUT_COLOR_SPACE;

typedef enum D2D1_HUETORGB_PROP {
    D2D1_HUETORGB_PROP_INPUT_COLOR_SPACE = 0,
} D2D1_HUETORGB_PROP;

typedef enum D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS {
    D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS_NONE                           = 0,
    D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS_LOW_QUALITY_PRIMARY_CONVERSION = 1,
} D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS;

typedef enum D2D1_IMAGE_SOURCE_LOADING_OPTIONS {
    D2D1_IMAGE_SOURCE_LOADING_OPTIONS_NONE            = 0,
    D2D1_IMAGE_SOURCE_LOADING_OPTIONS_RELEASE_SOURCE  = 1,
    D2D1_IMAGE_SOURCE_LOADING_OPTIONS_CACHE_ON_DEMAND = 2,
} D2D1_IMAGE_SOURCE_LOADING_OPTIONS;

typedef enum D2D1_INK_NIB_SHAPE {
    D2D1_INK_NIB_SHAPE_ROUND  = 0,
    D2D1_INK_NIB_SHAPE_SQUARE = 1,
} D2D1_INK_NIB_SHAPE;

typedef enum D2D1_INTERPOLATION_MODE {
    D2D1_INTERPOLATION_MODE_NEAREST_NEIGHBOR    = 0,
    D2D1_INTERPOLATION_MODE_LINEAR              = 1,
    D2D1_INTERPOLATION_MODE_CUBIC               = 2,
    D2D1_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 3,
    D2D1_INTERPOLATION_MODE_ANISOTROPIC         = 4,
    D2D1_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC  = 5,
} D2D1_INTERPOLATION_MODE;

typedef enum D2D1_INTERPOLATION_MODE_DEFINITION {
    D2D1_INTERPOLATION_MODE_DEFINITION_NEAREST_NEIGHBOR    = 0,
    D2D1_INTERPOLATION_MODE_DEFINITION_LINEAR              = 1,
    D2D1_INTERPOLATION_MODE_DEFINITION_CUBIC               = 2,
    D2D1_INTERPOLATION_MODE_DEFINITION_MULTI_SAMPLE_LINEAR = 3,
    D2D1_INTERPOLATION_MODE_DEFINITION_ANISOTROPIC         = 4,
    D2D1_INTERPOLATION_MODE_DEFINITION_HIGH_QUALITY_CUBIC  = 5,
    D2D1_INTERPOLATION_MODE_DEFINITION_FANT                = 6,
    D2D1_INTERPOLATION_MODE_DEFINITION_MIPMAP_LINEAR       = 7,
} D2D1_INTERPOLATION_MODE_DEFINITION;

typedef enum D2D1_LAYER_OPTIONS {
    D2D1_LAYER_OPTIONS_NONE                     = 0,
    D2D1_LAYER_OPTIONS_INITIALIZE_FOR_CLEARTYPE = 1,
} D2D1_LAYER_OPTIONS;

typedef enum D2D1_LAYER_OPTIONS1 {
    D2D1_LAYER_OPTIONS1_NONE                       = 0,
    D2D1_LAYER_OPTIONS1_INITIALIZE_FROM_BACKGROUND = 1,
    D2D1_LAYER_OPTIONS1_IGNORE_ALPHA               = 2,
} D2D1_LAYER_OPTIONS1;

typedef enum D2D1_LINE_JOIN {
    D2D1_LINE_JOIN_MITER          = 0,
    D2D1_LINE_JOIN_BEVEL          = 1,
    D2D1_LINE_JOIN_ROUND          = 2,
    D2D1_LINE_JOIN_MITER_OR_BEVEL = 3,
} D2D1_LINE_JOIN;

typedef enum D2D1_LINEARTRANSFER_PROP {
    D2D1_LINEARTRANSFER_PROP_RED_Y_INTERCEPT   = 0,
    D2D1_LINEARTRANSFER_PROP_RED_SLOPE         = 1,
    D2D1_LINEARTRANSFER_PROP_RED_DISABLE       = 2,
    D2D1_LINEARTRANSFER_PROP_GREEN_Y_INTERCEPT = 3,
    D2D1_LINEARTRANSFER_PROP_GREEN_SLOPE       = 4,
    D2D1_LINEARTRANSFER_PROP_GREEN_DISABLE     = 5,
    D2D1_LINEARTRANSFER_PROP_BLUE_Y_INTERCEPT  = 6,
    D2D1_LINEARTRANSFER_PROP_BLUE_SLOPE        = 7,
    D2D1_LINEARTRANSFER_PROP_BLUE_DISABLE      = 8,
    D2D1_LINEARTRANSFER_PROP_ALPHA_Y_INTERCEPT = 9,
    D2D1_LINEARTRANSFER_PROP_ALPHA_SLOPE       = 10,
    D2D1_LINEARTRANSFER_PROP_ALPHA_DISABLE     = 11,
    D2D1_LINEARTRANSFER_PROP_CLAMP_OUTPUT      = 12,
} D2D1_LINEARTRANSFER_PROP;

typedef enum D2D1_LOOKUPTABLE3D_PROP {
    D2D1_LOOKUPTABLE3D_PROP_LUT        = 0,
    D2D1_LOOKUPTABLE3D_PROP_ALPHA_MODE = 1,
} D2D1_LOOKUPTABLE3D_PROP;

typedef enum D2D1_MAP_OPTIONS {
    D2D1_MAP_OPTIONS_NONE    = 0,
    D2D1_MAP_OPTIONS_READ    = 1,
    D2D1_MAP_OPTIONS_WRITE   = 2,
    D2D1_MAP_OPTIONS_DISCARD = 4,
} D2D1_MAP_OPTIONS;

typedef enum D2D1_MORPHOLOGY_MODE {
    D2D1_MORPHOLOGY_MODE_ERODE  = 0,
    D2D1_MORPHOLOGY_MODE_DILATE = 1,
} D2D1_MORPHOLOGY_MODE;

typedef enum D2D1_MORPHOLOGY_PROP {
    D2D1_MORPHOLOGY_PROP_MODE   = 0,
    D2D1_MORPHOLOGY_PROP_WIDTH  = 1,
    D2D1_MORPHOLOGY_PROP_HEIGHT = 2,
} D2D1_MORPHOLOGY_PROP;

typedef enum D2D1_OPACITY_MASK_CONTENT {
    D2D1_OPACITY_MASK_CONTENT_GRAPHICS            = 0,
    D2D1_OPACITY_MASK_CONTENT_TEXT_NATURAL        = 1,
    D2D1_OPACITY_MASK_CONTENT_TEXT_GDI_COMPATIBLE = 2,
} D2D1_OPACITY_MASK_CONTENT;

typedef enum D2D1_OPACITY_PROP {
    D2D1_OPACITY_PROP_OPACITY = 0,
} D2D1_OPACITY_PROP;

typedef enum D2D1_OPACITYMETADATA_PROP {
    D2D1_OPACITYMETADATA_PROP_INPUT_OPAQUE_RECT = 0,
} D2D1_OPACITYMETADATA_PROP;

typedef enum D2D1_ORIENTATION {
    D2D1_ORIENTATION_DEFAULT                             = 1,
    D2D1_ORIENTATION_FLIP_HORIZONTAL                     = 2,
    D2D1_ORIENTATION_ROTATE_CLOCKWISE180                 = 3,
    D2D1_ORIENTATION_ROTATE_CLOCKWISE180_FLIP_HORIZONTAL = 4,
    D2D1_ORIENTATION_ROTATE_CLOCKWISE90_FLIP_HORIZONTAL  = 5,
    D2D1_ORIENTATION_ROTATE_CLOCKWISE270                 = 6,
    D2D1_ORIENTATION_ROTATE_CLOCKWISE270_FLIP_HORIZONTAL = 7,
    D2D1_ORIENTATION_ROTATE_CLOCKWISE90                  = 8,
} D2D1_ORIENTATION;

typedef enum D2D1_PATCH_EDGE_MODE {
    D2D1_PATCH_EDGE_MODE_ALIASED          = 0,
    D2D1_PATCH_EDGE_MODE_ANTIALIASED      = 1,
    D2D1_PATCH_EDGE_MODE_ALIASED_INFLATED = 2,
} D2D1_PATCH_EDGE_MODE;

typedef enum D2D1_PATH_SEGMENT {
    D2D1_PATH_SEGMENT_NONE                  = 0,
    D2D1_PATH_SEGMENT_FORCE_UNSTROKED       = 1,
    D2D1_PATH_SEGMENT_FORCE_ROUND_LINE_JOIN = 2,
} D2D1_PATH_SEGMENT;

typedef enum D2D1_PIXEL_OPTIONS {
    D2D1_PIXEL_OPTIONS_NONE             = 0,
    D2D1_PIXEL_OPTIONS_TRIVIAL_SAMPLING = 1,
} D2D1_PIXEL_OPTIONS;

typedef enum D2D1_POINTDIFFUSE_PROP {
    D2D1_POINTDIFFUSE_PROP_LIGHT_POSITION     = 0,
    D2D1_POINTDIFFUSE_PROP_DIFFUSE_CONSTANT   = 1,
    D2D1_POINTDIFFUSE_PROP_SURFACE_SCALE      = 2,
    D2D1_POINTDIFFUSE_PROP_COLOR              = 3,
    D2D1_POINTDIFFUSE_PROP_KERNEL_UNIT_LENGTH = 4,
    D2D1_POINTDIFFUSE_PROP_SCALE_MODE         = 5,
} D2D1_POINTDIFFUSE_PROP;

typedef enum D2D1_POINTDIFFUSE_SCALE_MODE {
    D2D1_POINTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR    = 0,
    D2D1_POINTDIFFUSE_SCALE_MODE_LINEAR              = 1,
    D2D1_POINTDIFFUSE_SCALE_MODE_CUBIC               = 2,
    D2D1_POINTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3,
    D2D1_POINTDIFFUSE_SCALE_MODE_ANISOTROPIC         = 4,
    D2D1_POINTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC  = 5,
} D2D1_POINTDIFFUSE_SCALE_MODE;

typedef enum D2D1_POINTSPECULAR_PROP {
    D2D1_POINTSPECULAR_PROP_LIGHT_POSITION     = 0,
    D2D1_POINTSPECULAR_PROP_SPECULAR_EXPONENT  = 1,
    D2D1_POINTSPECULAR_PROP_SPECULAR_CONSTANT  = 2,
    D2D1_POINTSPECULAR_PROP_SURFACE_SCALE      = 3,
    D2D1_POINTSPECULAR_PROP_COLOR              = 4,
    D2D1_POINTSPECULAR_PROP_KERNEL_UNIT_LENGTH = 5,
    D2D1_POINTSPECULAR_PROP_SCALE_MODE         = 6,
} D2D1_POINTSPECULAR_PROP;

typedef enum D2D1_POINTSPECULAR_SCALE_MODE {
    D2D1_POINTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR    = 0,
    D2D1_POINTSPECULAR_SCALE_MODE_LINEAR              = 1,
    D2D1_POINTSPECULAR_SCALE_MODE_CUBIC               = 2,
    D2D1_POINTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3,
    D2D1_POINTSPECULAR_SCALE_MODE_ANISOTROPIC         = 4,
    D2D1_POINTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC  = 5,
} D2D1_POINTSPECULAR_SCALE_MODE;

typedef enum D2D1_POSTERIZE_PROP {
    D2D1_POSTERIZE_PROP_RED_VALUE_COUNT   = 0,
    D2D1_POSTERIZE_PROP_GREEN_VALUE_COUNT = 1,
    D2D1_POSTERIZE_PROP_BLUE_VALUE_COUNT  = 2,
} D2D1_POSTERIZE_PROP;

typedef enum D2D1_PRESENT_OPTIONS {
    D2D1_PRESENT_OPTIONS_NONE            = 0,
    D2D1_PRESENT_OPTIONS_RETAIN_CONTENTS = 1,
    D2D1_PRESENT_OPTIONS_IMMEDIATELY     = 2,
} D2D1_PRESENT_OPTIONS;

typedef enum D2D1_PRIMITIVE_BLEND {
    D2D1_PRIMITIVE_BLEND_SOURCE_OVER = 0,
    D2D1_PRIMITIVE_BLEND_COPY        = 1,
    D2D1_PRIMITIVE_BLEND_MIN         = 2,
    D2D1_PRIMITIVE_BLEND_ADD         = 3,
    D2D1_PRIMITIVE_BLEND_MAX         = 4,
} D2D1_PRIMITIVE_BLEND;

typedef enum D2D1_PRINT_FONT_SUBSET_MODE {
    D2D1_PRINT_FONT_SUBSET_MODE_DEFAULT  = 0,
    D2D1_PRINT_FONT_SUBSET_MODE_EACHPAGE = 1,
    D2D1_PRINT_FONT_SUBSET_MODE_NONE     = 2,
} D2D1_PRINT_FONT_SUBSET_MODE;

typedef enum D2D1_PROPERTY {
    D2D1_PROPERTY_CLSID       = 0x80000000L,
    D2D1_PROPERTY_DISPLAYNAME = 0x80000001L,
    D2D1_PROPERTY_AUTHOR      = 0x80000002L,
    D2D1_PROPERTY_CATEGORY    = 0x80000003L,
    D2D1_PROPERTY_DESCRIPTION = 0x80000004L,
    D2D1_PROPERTY_INPUTS      = 0x80000005L,
    D2D1_PROPERTY_CACHED      = 0x80000006L,
    D2D1_PROPERTY_PRECISION   = 0x80000007L,
    D2D1_PROPERTY_MIN_INPUTS  = 0x80000008L,
    D2D1_PROPERTY_MAX_INPUTS  = 0x80000009L,
} D2D1_PROPERTY;

typedef enum D2D1_PROPERTY_TYPE {
    D2D1_PROPERTY_TYPE_UNKNOWN       = 0,
    D2D1_PROPERTY_TYPE_STRING        = 1,
    D2D1_PROPERTY_TYPE_BOOL          = 2,
    D2D1_PROPERTY_TYPE_UINT32        = 3,
    D2D1_PROPERTY_TYPE_INT32         = 4,
    D2D1_PROPERTY_TYPE_FLOAT         = 5,
    D2D1_PROPERTY_TYPE_VECTOR2       = 6,
    D2D1_PROPERTY_TYPE_VECTOR3       = 7,
    D2D1_PROPERTY_TYPE_VECTOR4       = 8,
    D2D1_PROPERTY_TYPE_BLOB          = 9,
    D2D1_PROPERTY_TYPE_IUNKNOWN      = 10,
    D2D1_PROPERTY_TYPE_ENUM          = 11,
    D2D1_PROPERTY_TYPE_ARRAY         = 12,
    D2D1_PROPERTY_TYPE_CLSID         = 13,
    D2D1_PROPERTY_TYPE_MATRIX_3X2    = 14,
    D2D1_PROPERTY_TYPE_MATRIX_4X3    = 15,
    D2D1_PROPERTY_TYPE_MATRIX_4X4    = 16,
    D2D1_PROPERTY_TYPE_MATRIX_5X4    = 17,
    D2D1_PROPERTY_TYPE_COLOR_CONTEXT = 18,
} D2D1_PROPERTY_TYPE;

typedef enum D2D1_RENDER_TARGET_TYPE {
    D2D1_RENDER_TARGET_TYPE_DEFAULT  = 0,
    D2D1_RENDER_TARGET_TYPE_SOFTWARE = 1,
    D2D1_RENDER_TARGET_TYPE_HARDWARE = 2,
} D2D1_RENDER_TARGET_TYPE;

typedef enum D2D1_RENDER_TARGET_USAGE {
    D2D1_RENDER_TARGET_USAGE_NONE                  = 0,
    D2D1_RENDER_TARGET_USAGE_FORCE_BITMAP_REMOTING = 1,
    D2D1_RENDER_TARGET_USAGE_GDI_COMPATIBLE        = 2,
} D2D1_RENDER_TARGET_USAGE;

typedef enum D2D1_RENDERING_PRIORITY {
    D2D1_RENDERING_PRIORITY_NORMAL = 0,
    D2D1_RENDERING_PRIORITY_LOW    = 1,
} D2D1_RENDERING_PRIORITY;

typedef enum D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE {
    D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE_HUE_SATURATION_VALUE     = 0,
    D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE_HUE_SATURATION_LIGHTNESS = 1,
} D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE;

typedef enum D2D1_RGBTOHUE_PROP {
    D2D1_RGBTOHUE_PROP_OUTPUT_COLOR_SPACE = 0,
} D2D1_RGBTOHUE_PROP;

typedef enum D2D1_SATURATION_PROP {
    D2D1_SATURATION_PROP_SATURATION = 0,
} D2D1_SATURATION_PROP;

typedef enum D2D1_SCALE_INTERPOLATION_MODE {
    D2D1_SCALE_INTERPOLATION_MODE_NEAREST_NEIGHBOR    = 0,
    D2D1_SCALE_INTERPOLATION_MODE_LINEAR              = 1,
    D2D1_SCALE_INTERPOLATION_MODE_CUBIC               = 2,
    D2D1_SCALE_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 3,
    D2D1_SCALE_INTERPOLATION_MODE_ANISOTROPIC         = 4,
    D2D1_SCALE_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC  = 5,
} D2D1_SCALE_INTERPOLATION_MODE;

typedef enum D2D1_SCALE_PROP {
    D2D1_SCALE_PROP_SCALE              = 0,
    D2D1_SCALE_PROP_CENTER_POINT       = 1,
    D2D1_SCALE_PROP_INTERPOLATION_MODE = 2,
    D2D1_SCALE_PROP_BORDER_MODE        = 3,
    D2D1_SCALE_PROP_SHARPNESS          = 4,
} D2D1_SCALE_PROP;

typedef enum D2D1_SEPIA_PROP {
    D2D1_SEPIA_PROP_INTENSITY  = 0,
    D2D1_SEPIA_PROP_ALPHA_MODE = 1,
} D2D1_SEPIA_PROP;

typedef enum D2D1_SHADOW_OPTIMIZATION {
    D2D1_SHADOW_OPTIMIZATION_SPEED    = 0,
    D2D1_SHADOW_OPTIMIZATION_BALANCED = 1,
    D2D1_SHADOW_OPTIMIZATION_QUALITY  = 2,
} D2D1_SHADOW_OPTIMIZATION;

typedef enum D2D1_SHADOW_PROP {
    D2D1_SHADOW_PROP_BLUR_STANDARD_DEVIATION = 0,
    D2D1_SHADOW_PROP_COLOR                   = 1,
    D2D1_SHADOW_PROP_OPTIMIZATION            = 2,
} D2D1_SHADOW_PROP;

typedef enum D2D1_SHARPEN_PROP {
    D2D1_SHARPEN_PROP_SHARPNESS = 0,
    D2D1_SHARPEN_PROP_THRESHOLD = 1,
} D2D1_SHARPEN_PROP;

typedef enum D2D1_SPOTDIFFUSE_PROP {
    D2D1_SPOTDIFFUSE_PROP_LIGHT_POSITION      = 0,
    D2D1_SPOTDIFFUSE_PROP_POINTS_AT           = 1,
    D2D1_SPOTDIFFUSE_PROP_FOCUS               = 2,
    D2D1_SPOTDIFFUSE_PROP_LIMITING_CONE_ANGLE = 3,
    D2D1_SPOTDIFFUSE_PROP_DIFFUSE_CONSTANT    = 4,
    D2D1_SPOTDIFFUSE_PROP_SURFACE_SCALE       = 5,
    D2D1_SPOTDIFFUSE_PROP_COLOR               = 6,
    D2D1_SPOTDIFFUSE_PROP_KERNEL_UNIT_LENGTH  = 7,
    D2D1_SPOTDIFFUSE_PROP_SCALE_MODE          = 8,
} D2D1_SPOTDIFFUSE_PROP;

typedef enum D2D1_SPOTDIFFUSE_SCALE_MODE {
    D2D1_SPOTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR    = 0,
    D2D1_SPOTDIFFUSE_SCALE_MODE_LINEAR              = 1,
    D2D1_SPOTDIFFUSE_SCALE_MODE_CUBIC               = 2,
    D2D1_SPOTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3,
    D2D1_SPOTDIFFUSE_SCALE_MODE_ANISOTROPIC         = 4,
    D2D1_SPOTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC  = 5,
} D2D1_SPOTDIFFUSE_SCALE_MODE;

typedef enum D2D1_SPOTSPECULAR_PROP {
    D2D1_SPOTSPECULAR_PROP_LIGHT_POSITION      = 0,
    D2D1_SPOTSPECULAR_PROP_POINTS_AT           = 1,
    D2D1_SPOTSPECULAR_PROP_FOCUS               = 2,
    D2D1_SPOTSPECULAR_PROP_LIMITING_CONE_ANGLE = 3,
    D2D1_SPOTSPECULAR_PROP_SPECULAR_EXPONENT   = 4,
    D2D1_SPOTSPECULAR_PROP_SPECULAR_CONSTANT   = 5,
    D2D1_SPOTSPECULAR_PROP_SURFACE_SCALE       = 6,
    D2D1_SPOTSPECULAR_PROP_COLOR               = 7,
    D2D1_SPOTSPECULAR_PROP_KERNEL_UNIT_LENGTH  = 8,
    D2D1_SPOTSPECULAR_PROP_SCALE_MODE          = 9,
} D2D1_SPOTSPECULAR_PROP;

typedef enum D2D1_SPOTSPECULAR_SCALE_MODE {
    D2D1_SPOTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR    = 0,
    D2D1_SPOTSPECULAR_SCALE_MODE_LINEAR              = 1,
    D2D1_SPOTSPECULAR_SCALE_MODE_CUBIC               = 2,
    D2D1_SPOTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3,
    D2D1_SPOTSPECULAR_SCALE_MODE_ANISOTROPIC         = 4,
    D2D1_SPOTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC  = 5,
} D2D1_SPOTSPECULAR_SCALE_MODE;

typedef enum D2D1_SPRITE_OPTIONS {
    D2D1_SPRITE_OPTIONS_NONE                      = 0,
    D2D1_SPRITE_OPTIONS_CLAMP_TO_SOURCE_RECTANGLE = 1,
} D2D1_SPRITE_OPTIONS;

typedef enum D2D1_STRAIGHTEN_PROP {
    D2D1_STRAIGHTEN_PROP_ANGLE         = 0,
    D2D1_STRAIGHTEN_PROP_MAINTAIN_SIZE = 1,
    D2D1_STRAIGHTEN_PROP_SCALE_MODE    = 2,
} D2D1_STRAIGHTEN_PROP;

typedef enum D2D1_STRAIGHTEN_SCALE_MODE {
    D2D1_STRAIGHTEN_SCALE_MODE_NEAREST_NEIGHBOR    = 0,
    D2D1_STRAIGHTEN_SCALE_MODE_LINEAR              = 1,
    D2D1_STRAIGHTEN_SCALE_MODE_CUBIC               = 2,
    D2D1_STRAIGHTEN_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3,
    D2D1_STRAIGHTEN_SCALE_MODE_ANISOTROPIC         = 4,
} D2D1_STRAIGHTEN_SCALE_MODE;

typedef enum D2D1_STROKE_TRANSFORM_TYPE {
    D2D1_STROKE_TRANSFORM_TYPE_NORMAL   = 0,
    D2D1_STROKE_TRANSFORM_TYPE_FIXED    = 1,
    D2D1_STROKE_TRANSFORM_TYPE_HAIRLINE = 2,
} D2D1_STROKE_TRANSFORM_TYPE;

typedef enum D2D1_SUBPROPERTY {
    D2D1_SUBPROPERTY_DISPLAYNAME = 0x80000000L,
    D2D1_SUBPROPERTY_ISREADONLY  = 0x80000001L,
    D2D1_SUBPROPERTY_MIN         = 0x80000002L,
    D2D1_SUBPROPERTY_MAX         = 0x80000003L,
    D2D1_SUBPROPERTY_DEFAULT     = 0x80000004L,
    D2D1_SUBPROPERTY_FIELDS      = 0x80000005L,
    D2D1_SUBPROPERTY_INDEX       = 0x80000006L,
} D2D1_SUBPROPERTY;

typedef enum D2D1_SVG_ASPECT_ALIGN {
    D2D1_SVG_ASPECT_ALIGN_NONE        = 0,
    D2D1_SVG_ASPECT_ALIGN_X_MIN_Y_MIN = 1,
    D2D1_SVG_ASPECT_ALIGN_X_MID_Y_MIN = 2,
    D2D1_SVG_ASPECT_ALIGN_X_MAX_Y_MIN = 3,
    D2D1_SVG_ASPECT_ALIGN_X_MIN_Y_MID = 4,
    D2D1_SVG_ASPECT_ALIGN_X_MID_Y_MID = 5,
    D2D1_SVG_ASPECT_ALIGN_X_MAX_Y_MID = 6,
    D2D1_SVG_ASPECT_ALIGN_X_MIN_Y_MAX = 7,
    D2D1_SVG_ASPECT_ALIGN_X_MID_Y_MAX = 8,
    D2D1_SVG_ASPECT_ALIGN_X_MAX_Y_MAX = 9,
} D2D1_SVG_ASPECT_ALIGN;

typedef enum D2D1_SVG_ASPECT_SCALING {
    D2D1_SVG_ASPECT_SCALING_MEET  = 0,
    D2D1_SVG_ASPECT_SCALING_SLICE = 1,
} D2D1_SVG_ASPECT_SCALING;

typedef enum D2D1_SVG_ATTRIBUTE_POD_TYPE {
    D2D1_SVG_ATTRIBUTE_POD_TYPE_FLOAT                 = 0,
    D2D1_SVG_ATTRIBUTE_POD_TYPE_COLOR                 = 1,
    D2D1_SVG_ATTRIBUTE_POD_TYPE_FILL_MODE             = 2,
    D2D1_SVG_ATTRIBUTE_POD_TYPE_DISPLAY               = 3,
    D2D1_SVG_ATTRIBUTE_POD_TYPE_OVERFLOW              = 4,
    D2D1_SVG_ATTRIBUTE_POD_TYPE_LINE_CAP              = 5,
    D2D1_SVG_ATTRIBUTE_POD_TYPE_LINE_JOIN             = 6,
    D2D1_SVG_ATTRIBUTE_POD_TYPE_VISIBILITY            = 7,
    D2D1_SVG_ATTRIBUTE_POD_TYPE_MATRIX                = 8,
    D2D1_SVG_ATTRIBUTE_POD_TYPE_UNIT_TYPE             = 9,
    D2D1_SVG_ATTRIBUTE_POD_TYPE_EXTEND_MODE           = 10,
    D2D1_SVG_ATTRIBUTE_POD_TYPE_PRESERVE_ASPECT_RATIO = 11,
    D2D1_SVG_ATTRIBUTE_POD_TYPE_VIEWBOX               = 12,
    D2D1_SVG_ATTRIBUTE_POD_TYPE_LENGTH                = 13,
} D2D1_SVG_ATTRIBUTE_POD_TYPE;

typedef enum D2D1_SVG_ATTRIBUTE_STRING_TYPE {
    D2D1_SVG_ATTRIBUTE_STRING_TYPE_SVG = 0,
    D2D1_SVG_ATTRIBUTE_STRING_TYPE_ID  = 1,
} D2D1_SVG_ATTRIBUTE_STRING_TYPE;

typedef enum D2D1_SVG_DISPLAY {
    D2D1_SVG_DISPLAY_INLINE = 0,
    D2D1_SVG_DISPLAY_NONE   = 1,
} D2D1_SVG_DISPLAY;

typedef enum D2D1_SVG_LENGTH_UNITS {
    D2D1_SVG_LENGTH_UNITS_NUMBER     = 0,
    D2D1_SVG_LENGTH_UNITS_PERCENTAGE = 1,
} D2D1_SVG_LENGTH_UNITS;

typedef enum D2D1_SVG_LINE_CAP {
    D2D1_SVG_LINE_CAP_BUTT   = 0,
    D2D1_SVG_LINE_CAP_SQUARE = 1,
    D2D1_SVG_LINE_CAP_ROUND  = 2,
} D2D1_SVG_LINE_CAP;

typedef enum D2D1_SVG_LINE_JOIN {
    D2D1_SVG_LINE_JOIN_BEVEL = 1,
    D2D1_SVG_LINE_JOIN_MITER = 3,
    D2D1_SVG_LINE_JOIN_ROUND = 2,
} D2D1_SVG_LINE_JOIN;

typedef enum D2D1_SVG_OVERFLOW {
    D2D1_SVG_OVERFLOW_VISIBLE = 0,
    D2D1_SVG_OVERFLOW_HIDDEN  = 1,
} D2D1_SVG_OVERFLOW;

typedef enum D2D1_SVG_PAINT_TYPE {
    D2D1_SVG_PAINT_TYPE_NONE              = 0,
    D2D1_SVG_PAINT_TYPE_COLOR             = 1,
    D2D1_SVG_PAINT_TYPE_CURRENT_COLOR     = 2,
    D2D1_SVG_PAINT_TYPE_URI               = 3,
    D2D1_SVG_PAINT_TYPE_URI_NONE          = 4,
    D2D1_SVG_PAINT_TYPE_URI_COLOR         = 5,
    D2D1_SVG_PAINT_TYPE_URI_CURRENT_COLOR = 6,
} D2D1_SVG_PAINT_TYPE;

typedef enum D2D1_SVG_PATH_COMMAND {
    D2D1_SVG_PATH_COMMAND_CLOSE_PATH                = 0,
    D2D1_SVG_PATH_COMMAND_MOVE_ABSOLUTE             = 1,
    D2D1_SVG_PATH_COMMAND_MOVE_RELATIVE             = 2,
    D2D1_SVG_PATH_COMMAND_LINE_ABSOLUTE             = 3,
    D2D1_SVG_PATH_COMMAND_LINE_RELATIVE             = 4,
    D2D1_SVG_PATH_COMMAND_CUBIC_ABSOLUTE            = 5,
    D2D1_SVG_PATH_COMMAND_CUBIC_RELATIVE            = 6,
    D2D1_SVG_PATH_COMMAND_QUADRADIC_ABSOLUTE        = 7,
    D2D1_SVG_PATH_COMMAND_QUADRADIC_RELATIVE        = 8,
    D2D1_SVG_PATH_COMMAND_ARC_ABSOLUTE              = 9,
    D2D1_SVG_PATH_COMMAND_ARC_RELATIVE              = 10,
    D2D1_SVG_PATH_COMMAND_HORIZONTAL_ABSOLUTE       = 11,
    D2D1_SVG_PATH_COMMAND_HORIZONTAL_RELATIVE       = 12,
    D2D1_SVG_PATH_COMMAND_VERTICAL_ABSOLUTE         = 13,
    D2D1_SVG_PATH_COMMAND_VERTICAL_RELATIVE         = 14,
    D2D1_SVG_PATH_COMMAND_CUBIC_SMOOTH_ABSOLUTE     = 15,
    D2D1_SVG_PATH_COMMAND_CUBIC_SMOOTH_RELATIVE     = 16,
    D2D1_SVG_PATH_COMMAND_QUADRADIC_SMOOTH_ABSOLUTE = 17,
    D2D1_SVG_PATH_COMMAND_QUADRADIC_SMOOTH_RELATIVE = 18,
} D2D1_SVG_PATH_COMMAND;

typedef enum D2D1_SVG_UNIT_TYPE {
    D2D1_SVG_UNIT_TYPE_USER_SPACE_ON_USE   = 0,
    D2D1_SVG_UNIT_TYPE_OBJECT_BOUNDING_BOX = 1,
} D2D1_SVG_UNIT_TYPE;

typedef enum D2D1_SVG_VISIBILITY {
    D2D1_SVG_VISIBILITY_VISIBLE = 0,
    D2D1_SVG_VISIBILITY_HIDDEN  = 1,
} D2D1_SVG_VISIBILITY;

typedef enum D2D1_SWEEP_DIRECTION {
    D2D1_SWEEP_DIRECTION_COUNTER_CLOCKWISE = 0,
    D2D1_SWEEP_DIRECTION_CLOCKWISE         = 1,
} D2D1_SWEEP_DIRECTION;

typedef enum D2D1_TABLETRANSFER_PROP {
    D2D1_TABLETRANSFER_PROP_RED_TABLE     = 0,
    D2D1_TABLETRANSFER_PROP_RED_DISABLE   = 1,
    D2D1_TABLETRANSFER_PROP_GREEN_TABLE   = 2,
    D2D1_TABLETRANSFER_PROP_GREEN_DISABLE = 3,
    D2D1_TABLETRANSFER_PROP_BLUE_TABLE    = 4,
    D2D1_TABLETRANSFER_PROP_BLUE_DISABLE  = 5,
    D2D1_TABLETRANSFER_PROP_ALPHA_TABLE   = 6,
    D2D1_TABLETRANSFER_PROP_ALPHA_DISABLE = 7,
    D2D1_TABLETRANSFER_PROP_CLAMP_OUTPUT  = 8,
} D2D1_TABLETRANSFER_PROP;

typedef enum D2D1_TEMPERATUREANDTINT_PROP {
    D2D1_TEMPERATUREANDTINT_PROP_TEMPERATURE = 0,
    D2D1_TEMPERATUREANDTINT_PROP_TINT        = 1,
} D2D1_TEMPERATUREANDTINT_PROP;

typedef enum D2D1_TEXT_ANTIALIAS_MODE {
    D2D1_TEXT_ANTIALIAS_MODE_DEFAULT   = 0,
    D2D1_TEXT_ANTIALIAS_MODE_CLEARTYPE = 1,
    D2D1_TEXT_ANTIALIAS_MODE_GRAYSCALE = 2,
    D2D1_TEXT_ANTIALIAS_MODE_ALIASED   = 3,
} D2D1_TEXT_ANTIALIAS_MODE;

typedef enum D2D1_THREADING_MODE {
    D2D1_THREADING_MODE_SINGLE_THREADED = 0,
    D2D1_THREADING_MODE_MULTI_THREADED  = 1,
} D2D1_THREADING_MODE;

typedef enum D2D1_TILE_PROP {
    D2D1_TILE_PROP_RECT = 0,
} D2D1_TILE_PROP;

typedef enum D2D1_TINT_PROP {
    D2D1_TINT_PROP_COLOR        = 0,
    D2D1_TINT_PROP_CLAMP_OUTPUT = 1,
} D2D1_TINT_PROP;

typedef enum D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS {
    D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS_NONE              = 0,
    D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS_DISABLE_DPI_SCALE = 1,
} D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS;

typedef enum D2D1_TURBULENCE_PROP {
    D2D1_TURBULENCE_PROP_OFFSET         = 0,
    D2D1_TURBULENCE_PROP_SIZE           = 1,
    D2D1_TURBULENCE_PROP_BASE_FREQUENCY = 2,
    D2D1_TURBULENCE_PROP_NUM_OCTAVES    = 3,
    D2D1_TURBULENCE_PROP_SEED           = 4,
    D2D1_TURBULENCE_PROP_NOISE          = 5,
    D2D1_TURBULENCE_PROP_STITCHABLE     = 6,
} D2D1_TURBULENCE_PROP;

typedef enum D2D1_UNIT_MODE {
    D2D1_UNIT_MODE_DIPS   = 0,
    D2D1_UNIT_MODE_PIXELS = 1,
} D2D1_UNIT_MODE;

typedef enum D2D1_VERTEX_OPTIONS {
    D2D1_VERTEX_OPTIONS_NONE              = 0,
    D2D1_VERTEX_OPTIONS_DO_NOT_CLEAR      = 1,
    D2D1_VERTEX_OPTIONS_USE_DEPTH_BUFFER  = 2,
    D2D1_VERTEX_OPTIONS_ASSUME_NO_OVERLAP = 4,
} D2D1_VERTEX_OPTIONS;

typedef enum D2D1_VERTEX_USAGE {
    D2D1_VERTEX_USAGE_STATIC  = 0,
    D2D1_VERTEX_USAGE_DYNAMIC = 1,
} D2D1_VERTEX_USAGE;

typedef enum D2D1_VIGNETTE_PROP {
    D2D1_VIGNETTE_PROP_COLOR           = 0,
    D2D1_VIGNETTE_PROP_TRANSITION_SIZE = 1,
    D2D1_VIGNETTE_PROP_STRENGTH        = 2,
} D2D1_VIGNETTE_PROP;

typedef enum D2D1_WHITELEVELADJUSTMENT_PROP {
    D2D1_WHITELEVELADJUSTMENT_PROP_INPUT_WHITE_LEVEL  = 0,
    D2D1_WHITELEVELADJUSTMENT_PROP_OUTPUT_WHITE_LEVEL = 1,
} D2D1_WHITELEVELADJUSTMENT_PROP;

typedef enum D2D1_WINDOW_STATE {
    D2D1_WINDOW_STATE_NONE     = 0,
    D2D1_WINDOW_STATE_OCCLUDED = 1,
} D2D1_WINDOW_STATE;

typedef enum D2D1_YCBCR_CHROMA_SUBSAMPLING {
    D2D1_YCBCR_CHROMA_SUBSAMPLING_AUTO = 0,
    D2D1_YCBCR_CHROMA_SUBSAMPLING_420  = 1,
    D2D1_YCBCR_CHROMA_SUBSAMPLING_422  = 2,
    D2D1_YCBCR_CHROMA_SUBSAMPLING_444  = 3,
    D2D1_YCBCR_CHROMA_SUBSAMPLING_440  = 4,
} D2D1_YCBCR_CHROMA_SUBSAMPLING;

typedef enum D2D1_YCBCR_INTERPOLATION_MODE {
    D2D1_YCBCR_INTERPOLATION_MODE_NEAREST_NEIGHBOR    = 0,
    D2D1_YCBCR_INTERPOLATION_MODE_LINEAR              = 1,
    D2D1_YCBCR_INTERPOLATION_MODE_CUBIC               = 2,
    D2D1_YCBCR_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 3,
    D2D1_YCBCR_INTERPOLATION_MODE_ANISOTROPIC         = 4,
    D2D1_YCBCR_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC  = 5,
} D2D1_YCBCR_INTERPOLATION_MODE;

typedef enum D2D1_YCBCR_PROP {
    D2D1_YCBCR_PROP_CHROMA_SUBSAMPLING = 0,
    D2D1_YCBCR_PROP_TRANSFORM_MATRIX   = 1,
    D2D1_YCBCR_PROP_INTERPOLATION_MODE = 2,
} D2D1_YCBCR_PROP;

// structs

typedef struct D2D1_ARC_SEGMENT {
    D2D_POINT_2F         point;
    D2D_SIZE_F           size;
    FLOAT                rotationAngle;
    D2D1_SWEEP_DIRECTION sweepDirection;
    D2D1_ARC_SIZE        arcSize;
} D2D1_ARC_SEGMENT;

typedef struct D2D1_BEZIER_SEGMENT {
    D2D_POINT_2F point1;
    D2D_POINT_2F point2;
    D2D_POINT_2F point3;
} D2D1_BEZIER_SEGMENT;

typedef struct D2D1_BITMAP_BRUSH_PROPERTIES {
    D2D1_EXTEND_MODE               extendModeX;
    D2D1_EXTEND_MODE               extendModeY;
    D2D1_BITMAP_INTERPOLATION_MODE interpolationMode;
} D2D1_BITMAP_BRUSH_PROPERTIES;

typedef struct D2D1_BITMAP_BRUSH_PROPERTIES1 {
    D2D1_EXTEND_MODE        extendModeX;
    D2D1_EXTEND_MODE        extendModeY;
    D2D1_INTERPOLATION_MODE interpolationMode;
} D2D1_BITMAP_BRUSH_PROPERTIES1;

typedef struct D2D1_BITMAP_PROPERTIES {
    D2D1_PIXEL_FORMAT pixelFormat;
    FLOAT             dpiX;
    FLOAT             dpiY;
} D2D1_BITMAP_PROPERTIES;

typedef struct D2D1_BITMAP_PROPERTIES1 {
    D2D1_PIXEL_FORMAT   pixelFormat;
    FLOAT               dpiX;
    FLOAT               dpiY;
    D2D1_BITMAP_OPTIONS bitmapOptions;
    ID2D1ColorContext*  colorContext;
} D2D1_BITMAP_PROPERTIES1;

typedef struct D2D1_BLEND_DESCRIPTION {
    D2D1_BLEND           sourceBlend;
    D2D1_BLEND           destinationBlend;
    D2D1_BLEND_OPERATION blendOperation;
    D2D1_BLEND           sourceBlendAlpha;
    D2D1_BLEND           destinationBlendAlpha;
    D2D1_BLEND_OPERATION blendOperationAlpha;
    FLOAT                blendFactor[4];
} D2D1_BLEND_DESCRIPTION;

typedef struct D2D1_BRUSH_PROPERTIES {
    FLOAT            opacity;
    D2D_MATRIX_3X2_F transform;
} D2D1_BRUSH_PROPERTIES;

typedef struct D2D1_CREATION_PROPERTIES {
    D2D1_THREADING_MODE         threadingMode;
    D2D1_DEBUG_LEVEL            debugLevel;
    D2D1_DEVICE_CONTEXT_OPTIONS options;
} D2D1_CREATION_PROPERTIES;

typedef struct D2D1_INPUT_ELEMENT_DESC {
    PSTR        semanticName;
    UINT32      semanticIndex;
    DXGI_FORMAT format;
    UINT32      inputSlot;
    UINT32      alignedByteOffset;
} D2D1_INPUT_ELEMENT_DESC;

typedef struct D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES {
    UINT8*                   shaderBufferWithInputSignature;
    UINT32                   shaderBufferSize;
    D2D1_INPUT_ELEMENT_DESC* inputElements;
    UINT32                   elementCount;
    UINT32                   stride;
} D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES;

typedef struct D2D1_DRAWING_STATE_DESCRIPTION {
    D2D1_ANTIALIAS_MODE      antialiasMode;
    D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode;
    UINT64                   tag1;
    UINT64                   tag2;
    D2D_MATRIX_3X2_F         transform;
} D2D1_DRAWING_STATE_DESCRIPTION;

typedef struct D2D1_DRAWING_STATE_DESCRIPTION1 {
    D2D1_ANTIALIAS_MODE      antialiasMode;
    D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode;
    UINT64                   tag1;
    UINT64                   tag2;
    D2D_MATRIX_3X2_F         transform;
    D2D1_PRIMITIVE_BLEND     primitiveBlend;
    D2D1_UNIT_MODE           unitMode;
} D2D1_DRAWING_STATE_DESCRIPTION1;

typedef struct D2D1_EFFECT_INPUT_DESCRIPTION {
    ID2D1Effect* effect;
    UINT32       inputIndex;
    D2D_RECT_F   inputRectangle;
} D2D1_EFFECT_INPUT_DESCRIPTION;

typedef struct D2D1_ELLIPSE {
    D2D_POINT_2F point;
    FLOAT        radiusX;
    FLOAT        radiusY;
} D2D1_ELLIPSE;

typedef struct D2D1_FACTORY_OPTIONS {
    D2D1_DEBUG_LEVEL debugLevel;
} D2D1_FACTORY_OPTIONS;

typedef struct D2D1_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS {
    BOOL computeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x;
} D2D1_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS;

typedef struct D2D1_FEATURE_DATA_DOUBLES {
    BOOL doublePrecisionFloatShaderOps;
} D2D1_FEATURE_DATA_DOUBLES;

typedef struct D2D1_GRADIENT_MESH_PATCH {
    D2D_POINT_2F         point00;
    D2D_POINT_2F         point01;
    D2D_POINT_2F         point02;
    D2D_POINT_2F         point03;
    D2D_POINT_2F         point10;
    D2D_POINT_2F         point11;
    D2D_POINT_2F         point12;
    D2D_POINT_2F         point13;
    D2D_POINT_2F         point20;
    D2D_POINT_2F         point21;
    D2D_POINT_2F         point22;
    D2D_POINT_2F         point23;
    D2D_POINT_2F         point30;
    D2D_POINT_2F         point31;
    D2D_POINT_2F         point32;
    D2D_POINT_2F         point33;
    D2D1_COLOR_F         color00;
    D2D1_COLOR_F         color03;
    D2D1_COLOR_F         color30;
    D2D1_COLOR_F         color33;
    D2D1_PATCH_EDGE_MODE topEdgeMode;
    D2D1_PATCH_EDGE_MODE leftEdgeMode;
    D2D1_PATCH_EDGE_MODE bottomEdgeMode;
    D2D1_PATCH_EDGE_MODE rightEdgeMode;
} D2D1_GRADIENT_MESH_PATCH;

typedef struct D2D1_GRADIENT_STOP {
    FLOAT        position;
    D2D1_COLOR_F color;
} D2D1_GRADIENT_STOP;

typedef struct D2D1_HWND_RENDER_TARGET_PROPERTIES {
    HWND                 hwnd;
    D2D_SIZE_U           pixelSize;
    D2D1_PRESENT_OPTIONS presentOptions;
} D2D1_HWND_RENDER_TARGET_PROPERTIES;

typedef struct D2D1_IMAGE_BRUSH_PROPERTIES {
    D2D_RECT_F              sourceRectangle;
    D2D1_EXTEND_MODE        extendModeX;
    D2D1_EXTEND_MODE        extendModeY;
    D2D1_INTERPOLATION_MODE interpolationMode;
} D2D1_IMAGE_BRUSH_PROPERTIES;

typedef struct D2D1_INK_POINT {
    FLOAT x;
    FLOAT y;
    FLOAT radius;
} D2D1_INK_POINT;

typedef struct D2D1_INK_BEZIER_SEGMENT {
    D2D1_INK_POINT point1;
    D2D1_INK_POINT point2;
    D2D1_INK_POINT point3;
} D2D1_INK_BEZIER_SEGMENT;

typedef struct D2D1_INK_STYLE_PROPERTIES {
    D2D1_INK_NIB_SHAPE nibShape;
    D2D_MATRIX_3X2_F   nibTransform;
} D2D1_INK_STYLE_PROPERTIES;

typedef struct D2D1_INPUT_DESCRIPTION {
    D2D1_FILTER filter;
    UINT32      levelOfDetailCount;
} D2D1_INPUT_DESCRIPTION;

typedef struct D2D1_LAYER_PARAMETERS {
    D2D_RECT_F          contentBounds;
    ID2D1Geometry*      geometricMask;
    D2D1_ANTIALIAS_MODE maskAntialiasMode;
    D2D_MATRIX_3X2_F    maskTransform;
    FLOAT               opacity;
    ID2D1Brush*         opacityBrush;
    D2D1_LAYER_OPTIONS  layerOptions;
} D2D1_LAYER_PARAMETERS;

typedef struct D2D1_LAYER_PARAMETERS1 {
    D2D_RECT_F          contentBounds;
    ID2D1Geometry*      geometricMask;
    D2D1_ANTIALIAS_MODE maskAntialiasMode;
    D2D_MATRIX_3X2_F    maskTransform;
    FLOAT               opacity;
    ID2D1Brush*         opacityBrush;
    D2D1_LAYER_OPTIONS1 layerOptions;
} D2D1_LAYER_PARAMETERS1;

typedef struct D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES {
    D2D_POINT_2F startPoint;
    D2D_POINT_2F endPoint;
} D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES;

typedef struct D2D1_MAPPED_RECT {
    UINT32 pitch;
    UINT8* bits;
} D2D1_MAPPED_RECT;

typedef struct D2D1_POINT_DESCRIPTION {
    D2D_POINT_2F point;
    D2D_POINT_2F unitTangentVector;
    UINT32       endSegment;
    UINT32       endFigure;
    FLOAT        lengthToEndSegment;
} D2D1_POINT_DESCRIPTION;

typedef struct D2D1_PRINT_CONTROL_PROPERTIES {
    D2D1_PRINT_FONT_SUBSET_MODE fontSubset;
    FLOAT                       rasterDPI;
    D2D1_COLOR_SPACE            colorSpace;
} D2D1_PRINT_CONTROL_PROPERTIES;

typedef struct D2D1_PROPERTY_BINDING {
    WCHAR*                      propertyName;
    PD2D1_PROPERTY_SET_FUNCTION setFunction;
    PD2D1_PROPERTY_GET_FUNCTION getFunction;
} D2D1_PROPERTY_BINDING;

typedef struct D2D1_QUADRATIC_BEZIER_SEGMENT {
    D2D_POINT_2F point1;
    D2D_POINT_2F point2;
} D2D1_QUADRATIC_BEZIER_SEGMENT;

typedef struct D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES {
    D2D_POINT_2F center;
    D2D_POINT_2F gradientOriginOffset;
    FLOAT        radiusX;
    FLOAT        radiusY;
} D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES;

typedef struct D2D1_RENDER_TARGET_PROPERTIES {
    D2D1_RENDER_TARGET_TYPE  type;
    D2D1_PIXEL_FORMAT        pixelFormat;
    FLOAT                    dpiX;
    FLOAT                    dpiY;
    D2D1_RENDER_TARGET_USAGE usage;
    D2D1_FEATURE_LEVEL       minLevel;
} D2D1_RENDER_TARGET_PROPERTIES;

typedef struct D2D1_RENDERING_CONTROLS {
    D2D1_BUFFER_PRECISION bufferPrecision;
    D2D_SIZE_U            tileSize;
} D2D1_RENDERING_CONTROLS;

typedef struct D2D1_RESOURCE_TEXTURE_PROPERTIES {
    UINT32*               extents;
    UINT32                dimensions;
    D2D1_BUFFER_PRECISION bufferPrecision;
    D2D1_CHANNEL_DEPTH    channelDepth;
    D2D1_FILTER           filter;
    D2D1_EXTEND_MODE*     extendModes;
} D2D1_RESOURCE_TEXTURE_PROPERTIES;

typedef struct D2D1_ROUNDED_RECT {
    D2D_RECT_F rect;
    FLOAT      radiusX;
    FLOAT      radiusY;
} D2D1_ROUNDED_RECT;

typedef struct D2D1_SIMPLE_COLOR_PROFILE {
    D2D_POINT_2F redPrimary;
    D2D_POINT_2F greenPrimary;
    D2D_POINT_2F bluePrimary;
    D2D_POINT_2F whitePointXZ;
    D2D1_GAMMA1  gamma;
} D2D1_SIMPLE_COLOR_PROFILE;

typedef struct D2D1_STROKE_STYLE_PROPERTIES {
    D2D1_CAP_STYLE  startCap;
    D2D1_CAP_STYLE  endCap;
    D2D1_CAP_STYLE  dashCap;
    D2D1_LINE_JOIN  lineJoin;
    FLOAT           miterLimit;
    D2D1_DASH_STYLE dashStyle;
    FLOAT           dashOffset;
} D2D1_STROKE_STYLE_PROPERTIES;

typedef struct D2D1_STROKE_STYLE_PROPERTIES1 {
    D2D1_CAP_STYLE             startCap;
    D2D1_CAP_STYLE             endCap;
    D2D1_CAP_STYLE             dashCap;
    D2D1_LINE_JOIN             lineJoin;
    FLOAT                      miterLimit;
    D2D1_DASH_STYLE            dashStyle;
    FLOAT                      dashOffset;
    D2D1_STROKE_TRANSFORM_TYPE transformType;
} D2D1_STROKE_STYLE_PROPERTIES1;

typedef struct D2D1_SVG_LENGTH {
    FLOAT                 value;
    D2D1_SVG_LENGTH_UNITS units;
} D2D1_SVG_LENGTH;

typedef struct D2D1_SVG_PRESERVE_ASPECT_RATIO {
    BOOL                    defer;
    D2D1_SVG_ASPECT_ALIGN   align;
    D2D1_SVG_ASPECT_SCALING meetOrSlice;
} D2D1_SVG_PRESERVE_ASPECT_RATIO;

typedef struct D2D1_SVG_VIEWBOX {
    FLOAT x;
    FLOAT y;
    FLOAT width;
    FLOAT height;
} D2D1_SVG_VIEWBOX;

typedef struct D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES {
    D2D1_ORIENTATION                      orientation;
    FLOAT                                 scaleX;
    FLOAT                                 scaleY;
    D2D1_INTERPOLATION_MODE               interpolationMode;
    D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS options;
} D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES;

typedef struct D2D1_TRIANGLE {
    D2D_POINT_2F point1;
    D2D_POINT_2F point2;
    D2D_POINT_2F point3;
} D2D1_TRIANGLE;

typedef struct D2D1_VERTEX_BUFFER_PROPERTIES {
    UINT32            inputCount;
    D2D1_VERTEX_USAGE usage;
    UINT8*            data;
    UINT32            byteWidth;
} D2D1_VERTEX_BUFFER_PROPERTIES;

typedef struct D2D1_VERTEX_RANGE {
    UINT32 startVertex;
    UINT32 vertexCount;
} D2D1_VERTEX_RANGE;

// methods

static inline HRESULT                           ID2D1AnalysisTransform_QueryInterface                        (ID2D1AnalysisTransform* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1AnalysisTransform*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1AnalysisTransform_AddRef                                (ID2D1AnalysisTransform* this) { return ((UINT32 (WINAPI*)(ID2D1AnalysisTransform*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1AnalysisTransform_Release                               (ID2D1AnalysisTransform* this) { return ((UINT32 (WINAPI*)(ID2D1AnalysisTransform*))this->v->tbl[2])(this); }
static inline HRESULT                           ID2D1AnalysisTransform_ProcessAnalysisResults                (ID2D1AnalysisTransform* this, const UINT8* analysisData, UINT32 analysisDataCount) { return ((HRESULT (WINAPI*)(ID2D1AnalysisTransform*, const UINT8*, UINT32))this->v->tbl[3])(this, analysisData, analysisDataCount); }

static inline HRESULT                           ID2D1Bitmap_QueryInterface                                   (ID2D1Bitmap* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1Bitmap*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1Bitmap_AddRef                                           (ID2D1Bitmap* this) { return ((UINT32 (WINAPI*)(ID2D1Bitmap*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1Bitmap_Release                                          (ID2D1Bitmap* this) { return ((UINT32 (WINAPI*)(ID2D1Bitmap*))this->v->tbl[2])(this); }
static inline void                              ID2D1Bitmap_GetFactory                                       (ID2D1Bitmap* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1Bitmap*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline D2D_SIZE_F                        ID2D1Bitmap_GetSize                                          (ID2D1Bitmap* this) { D2D_SIZE_F _return; ((void (WINAPI*)(ID2D1Bitmap*, D2D_SIZE_F*))this->v->tbl[4])(this, &_return); return _return; }
static inline D2D_SIZE_U                        ID2D1Bitmap_GetPixelSize                                     (ID2D1Bitmap* this) { D2D_SIZE_U _return; ((void (WINAPI*)(ID2D1Bitmap*, D2D_SIZE_U*))this->v->tbl[5])(this, &_return); return _return; }
static inline D2D1_PIXEL_FORMAT                 ID2D1Bitmap_GetPixelFormat                                   (ID2D1Bitmap* this) { D2D1_PIXEL_FORMAT _return; ((void (WINAPI*)(ID2D1Bitmap*, D2D1_PIXEL_FORMAT*))this->v->tbl[6])(this, &_return); return _return; }
static inline void                              ID2D1Bitmap_GetDpi                                           (ID2D1Bitmap* this, FLOAT* dpiX, FLOAT* dpiY) { ((void (WINAPI*)(ID2D1Bitmap*, FLOAT*, FLOAT*))this->v->tbl[7])(this, dpiX, dpiY); }
static inline HRESULT                           ID2D1Bitmap_CopyFromBitmap                                   (ID2D1Bitmap* this, const D2D_POINT_2U* destPoint, ID2D1Bitmap* bitmap, const D2D_RECT_U* srcRect) { return ((HRESULT (WINAPI*)(ID2D1Bitmap*, const D2D_POINT_2U*, ID2D1Bitmap*, const D2D_RECT_U*))this->v->tbl[8])(this, destPoint, bitmap, srcRect); }
static inline HRESULT                           ID2D1Bitmap_CopyFromRenderTarget                             (ID2D1Bitmap* this, const D2D_POINT_2U* destPoint, ID2D1RenderTarget* renderTarget, const D2D_RECT_U* srcRect) { return ((HRESULT (WINAPI*)(ID2D1Bitmap*, const D2D_POINT_2U*, ID2D1RenderTarget*, const D2D_RECT_U*))this->v->tbl[9])(this, destPoint, renderTarget, srcRect); }
static inline HRESULT                           ID2D1Bitmap_CopyFromMemory                                   (ID2D1Bitmap* this, const D2D_RECT_U* dstRect, const void* srcData, UINT32 pitch) { return ((HRESULT (WINAPI*)(ID2D1Bitmap*, const D2D_RECT_U*, const void*, UINT32))this->v->tbl[10])(this, dstRect, srcData, pitch); }

static inline HRESULT                           ID2D1Bitmap1_QueryInterface                                  (ID2D1Bitmap1* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1Bitmap1*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1Bitmap1_AddRef                                          (ID2D1Bitmap1* this) { return ((UINT32 (WINAPI*)(ID2D1Bitmap1*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1Bitmap1_Release                                         (ID2D1Bitmap1* this) { return ((UINT32 (WINAPI*)(ID2D1Bitmap1*))this->v->tbl[2])(this); }
static inline void                              ID2D1Bitmap1_GetFactory                                      (ID2D1Bitmap1* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1Bitmap1*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline D2D_SIZE_F                        ID2D1Bitmap1_GetSize                                         (ID2D1Bitmap1* this) { D2D_SIZE_F _return; ((void (WINAPI*)(ID2D1Bitmap1*, D2D_SIZE_F*))this->v->tbl[4])(this, &_return); return _return; }
static inline D2D_SIZE_U                        ID2D1Bitmap1_GetPixelSize                                    (ID2D1Bitmap1* this) { D2D_SIZE_U _return; ((void (WINAPI*)(ID2D1Bitmap1*, D2D_SIZE_U*))this->v->tbl[5])(this, &_return); return _return; }
static inline D2D1_PIXEL_FORMAT                 ID2D1Bitmap1_GetPixelFormat                                  (ID2D1Bitmap1* this) { D2D1_PIXEL_FORMAT _return; ((void (WINAPI*)(ID2D1Bitmap1*, D2D1_PIXEL_FORMAT*))this->v->tbl[6])(this, &_return); return _return; }
static inline void                              ID2D1Bitmap1_GetDpi                                          (ID2D1Bitmap1* this, FLOAT* dpiX, FLOAT* dpiY) { ((void (WINAPI*)(ID2D1Bitmap1*, FLOAT*, FLOAT*))this->v->tbl[7])(this, dpiX, dpiY); }
static inline HRESULT                           ID2D1Bitmap1_CopyFromBitmap                                  (ID2D1Bitmap1* this, const D2D_POINT_2U* destPoint, ID2D1Bitmap* bitmap, const D2D_RECT_U* srcRect) { return ((HRESULT (WINAPI*)(ID2D1Bitmap1*, const D2D_POINT_2U*, ID2D1Bitmap*, const D2D_RECT_U*))this->v->tbl[8])(this, destPoint, bitmap, srcRect); }
static inline HRESULT                           ID2D1Bitmap1_CopyFromRenderTarget                            (ID2D1Bitmap1* this, const D2D_POINT_2U* destPoint, ID2D1RenderTarget* renderTarget, const D2D_RECT_U* srcRect) { return ((HRESULT (WINAPI*)(ID2D1Bitmap1*, const D2D_POINT_2U*, ID2D1RenderTarget*, const D2D_RECT_U*))this->v->tbl[9])(this, destPoint, renderTarget, srcRect); }
static inline HRESULT                           ID2D1Bitmap1_CopyFromMemory                                  (ID2D1Bitmap1* this, const D2D_RECT_U* dstRect, const void* srcData, UINT32 pitch) { return ((HRESULT (WINAPI*)(ID2D1Bitmap1*, const D2D_RECT_U*, const void*, UINT32))this->v->tbl[10])(this, dstRect, srcData, pitch); }
static inline void                              ID2D1Bitmap1_GetColorContext                                 (ID2D1Bitmap1* this, ID2D1ColorContext** colorContext) { ((void (WINAPI*)(ID2D1Bitmap1*, ID2D1ColorContext**))this->v->tbl[11])(this, colorContext); }
static inline D2D1_BITMAP_OPTIONS               ID2D1Bitmap1_GetOptions                                      (ID2D1Bitmap1* this) { return ((D2D1_BITMAP_OPTIONS (WINAPI*)(ID2D1Bitmap1*))this->v->tbl[12])(this); }
static inline HRESULT                           ID2D1Bitmap1_GetSurface                                      (ID2D1Bitmap1* this, IDXGISurface** dxgiSurface) { return ((HRESULT (WINAPI*)(ID2D1Bitmap1*, IDXGISurface**))this->v->tbl[13])(this, dxgiSurface); }
static inline HRESULT                           ID2D1Bitmap1_Map                                             (ID2D1Bitmap1* this, D2D1_MAP_OPTIONS options, D2D1_MAPPED_RECT* mappedRect) { return ((HRESULT (WINAPI*)(ID2D1Bitmap1*, D2D1_MAP_OPTIONS, D2D1_MAPPED_RECT*))this->v->tbl[14])(this, options, mappedRect); }
static inline HRESULT                           ID2D1Bitmap1_Unmap                                           (ID2D1Bitmap1* this) { return ((HRESULT (WINAPI*)(ID2D1Bitmap1*))this->v->tbl[15])(this); }

static inline HRESULT                           ID2D1BitmapBrush_QueryInterface                              (ID2D1BitmapBrush* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1BitmapBrush*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1BitmapBrush_AddRef                                      (ID2D1BitmapBrush* this) { return ((UINT32 (WINAPI*)(ID2D1BitmapBrush*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1BitmapBrush_Release                                     (ID2D1BitmapBrush* this) { return ((UINT32 (WINAPI*)(ID2D1BitmapBrush*))this->v->tbl[2])(this); }
static inline void                              ID2D1BitmapBrush_GetFactory                                  (ID2D1BitmapBrush* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1BitmapBrush*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline void                              ID2D1BitmapBrush_SetOpacity                                  (ID2D1BitmapBrush* this, FLOAT opacity) { ((void (WINAPI*)(ID2D1BitmapBrush*, FLOAT))this->v->tbl[4])(this, opacity); }
static inline void                              ID2D1BitmapBrush_SetTransform                                (ID2D1BitmapBrush* this, const D2D_MATRIX_3X2_F* transform) { ((void (WINAPI*)(ID2D1BitmapBrush*, const D2D_MATRIX_3X2_F*))this->v->tbl[5])(this, transform); }
static inline FLOAT                             ID2D1BitmapBrush_GetOpacity                                  (ID2D1BitmapBrush* this) { return ((FLOAT (WINAPI*)(ID2D1BitmapBrush*))this->v->tbl[6])(this); }
static inline void                              ID2D1BitmapBrush_GetTransform                                (ID2D1BitmapBrush* this, D2D_MATRIX_3X2_F* transform) { ((void (WINAPI*)(ID2D1BitmapBrush*, D2D_MATRIX_3X2_F*))this->v->tbl[7])(this, transform); }
static inline void                              ID2D1BitmapBrush_SetExtendModeX                              (ID2D1BitmapBrush* this, D2D1_EXTEND_MODE extendModeX) { ((void (WINAPI*)(ID2D1BitmapBrush*, D2D1_EXTEND_MODE))this->v->tbl[8])(this, extendModeX); }
static inline void                              ID2D1BitmapBrush_SetExtendModeY                              (ID2D1BitmapBrush* this, D2D1_EXTEND_MODE extendModeY) { ((void (WINAPI*)(ID2D1BitmapBrush*, D2D1_EXTEND_MODE))this->v->tbl[9])(this, extendModeY); }
static inline void                              ID2D1BitmapBrush_SetInterpolationMode                        (ID2D1BitmapBrush* this, D2D1_BITMAP_INTERPOLATION_MODE interpolationMode) { ((void (WINAPI*)(ID2D1BitmapBrush*, D2D1_BITMAP_INTERPOLATION_MODE))this->v->tbl[10])(this, interpolationMode); }
static inline void                              ID2D1BitmapBrush_SetBitmap                                   (ID2D1BitmapBrush* this, ID2D1Bitmap* bitmap) { ((void (WINAPI*)(ID2D1BitmapBrush*, ID2D1Bitmap*))this->v->tbl[11])(this, bitmap); }
static inline D2D1_EXTEND_MODE                  ID2D1BitmapBrush_GetExtendModeX                              (ID2D1BitmapBrush* this) { return ((D2D1_EXTEND_MODE (WINAPI*)(ID2D1BitmapBrush*))this->v->tbl[12])(this); }
static inline D2D1_EXTEND_MODE                  ID2D1BitmapBrush_GetExtendModeY                              (ID2D1BitmapBrush* this) { return ((D2D1_EXTEND_MODE (WINAPI*)(ID2D1BitmapBrush*))this->v->tbl[13])(this); }
static inline D2D1_BITMAP_INTERPOLATION_MODE    ID2D1BitmapBrush_GetInterpolationMode                        (ID2D1BitmapBrush* this) { return ((D2D1_BITMAP_INTERPOLATION_MODE (WINAPI*)(ID2D1BitmapBrush*))this->v->tbl[14])(this); }
static inline void                              ID2D1BitmapBrush_GetBitmap                                   (ID2D1BitmapBrush* this, ID2D1Bitmap** bitmap) { ((void (WINAPI*)(ID2D1BitmapBrush*, ID2D1Bitmap**))this->v->tbl[15])(this, bitmap); }

static inline HRESULT                           ID2D1BitmapBrush1_QueryInterface                             (ID2D1BitmapBrush1* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1BitmapBrush1*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1BitmapBrush1_AddRef                                     (ID2D1BitmapBrush1* this) { return ((UINT32 (WINAPI*)(ID2D1BitmapBrush1*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1BitmapBrush1_Release                                    (ID2D1BitmapBrush1* this) { return ((UINT32 (WINAPI*)(ID2D1BitmapBrush1*))this->v->tbl[2])(this); }
static inline void                              ID2D1BitmapBrush1_GetFactory                                 (ID2D1BitmapBrush1* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1BitmapBrush1*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline void                              ID2D1BitmapBrush1_SetOpacity                                 (ID2D1BitmapBrush1* this, FLOAT opacity) { ((void (WINAPI*)(ID2D1BitmapBrush1*, FLOAT))this->v->tbl[4])(this, opacity); }
static inline void                              ID2D1BitmapBrush1_SetTransform                               (ID2D1BitmapBrush1* this, const D2D_MATRIX_3X2_F* transform) { ((void (WINAPI*)(ID2D1BitmapBrush1*, const D2D_MATRIX_3X2_F*))this->v->tbl[5])(this, transform); }
static inline FLOAT                             ID2D1BitmapBrush1_GetOpacity                                 (ID2D1BitmapBrush1* this) { return ((FLOAT (WINAPI*)(ID2D1BitmapBrush1*))this->v->tbl[6])(this); }
static inline void                              ID2D1BitmapBrush1_GetTransform                               (ID2D1BitmapBrush1* this, D2D_MATRIX_3X2_F* transform) { ((void (WINAPI*)(ID2D1BitmapBrush1*, D2D_MATRIX_3X2_F*))this->v->tbl[7])(this, transform); }
static inline void                              ID2D1BitmapBrush1_SetExtendModeX                             (ID2D1BitmapBrush1* this, D2D1_EXTEND_MODE extendModeX) { ((void (WINAPI*)(ID2D1BitmapBrush1*, D2D1_EXTEND_MODE))this->v->tbl[8])(this, extendModeX); }
static inline void                              ID2D1BitmapBrush1_SetExtendModeY                             (ID2D1BitmapBrush1* this, D2D1_EXTEND_MODE extendModeY) { ((void (WINAPI*)(ID2D1BitmapBrush1*, D2D1_EXTEND_MODE))this->v->tbl[9])(this, extendModeY); }
static inline void                              ID2D1BitmapBrush1_SetInterpolationMode                       (ID2D1BitmapBrush1* this, D2D1_BITMAP_INTERPOLATION_MODE interpolationMode) { ((void (WINAPI*)(ID2D1BitmapBrush1*, D2D1_BITMAP_INTERPOLATION_MODE))this->v->tbl[10])(this, interpolationMode); }
static inline void                              ID2D1BitmapBrush1_SetBitmap                                  (ID2D1BitmapBrush1* this, ID2D1Bitmap* bitmap) { ((void (WINAPI*)(ID2D1BitmapBrush1*, ID2D1Bitmap*))this->v->tbl[11])(this, bitmap); }
static inline D2D1_EXTEND_MODE                  ID2D1BitmapBrush1_GetExtendModeX                             (ID2D1BitmapBrush1* this) { return ((D2D1_EXTEND_MODE (WINAPI*)(ID2D1BitmapBrush1*))this->v->tbl[12])(this); }
static inline D2D1_EXTEND_MODE                  ID2D1BitmapBrush1_GetExtendModeY                             (ID2D1BitmapBrush1* this) { return ((D2D1_EXTEND_MODE (WINAPI*)(ID2D1BitmapBrush1*))this->v->tbl[13])(this); }
static inline D2D1_BITMAP_INTERPOLATION_MODE    ID2D1BitmapBrush1_GetInterpolationMode                       (ID2D1BitmapBrush1* this) { return ((D2D1_BITMAP_INTERPOLATION_MODE (WINAPI*)(ID2D1BitmapBrush1*))this->v->tbl[14])(this); }
static inline void                              ID2D1BitmapBrush1_GetBitmap                                  (ID2D1BitmapBrush1* this, ID2D1Bitmap** bitmap) { ((void (WINAPI*)(ID2D1BitmapBrush1*, ID2D1Bitmap**))this->v->tbl[15])(this, bitmap); }
static inline void                              ID2D1BitmapBrush1_SetInterpolationMode1                      (ID2D1BitmapBrush1* this, D2D1_INTERPOLATION_MODE interpolationMode) { ((void (WINAPI*)(ID2D1BitmapBrush1*, D2D1_INTERPOLATION_MODE))this->v->tbl[16])(this, interpolationMode); }
static inline D2D1_INTERPOLATION_MODE           ID2D1BitmapBrush1_GetInterpolationMode1                      (ID2D1BitmapBrush1* this) { return ((D2D1_INTERPOLATION_MODE (WINAPI*)(ID2D1BitmapBrush1*))this->v->tbl[17])(this); }

static inline HRESULT                           ID2D1BitmapRenderTarget_QueryInterface                       (ID2D1BitmapRenderTarget* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1BitmapRenderTarget*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1BitmapRenderTarget_AddRef                               (ID2D1BitmapRenderTarget* this) { return ((UINT32 (WINAPI*)(ID2D1BitmapRenderTarget*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1BitmapRenderTarget_Release                              (ID2D1BitmapRenderTarget* this) { return ((UINT32 (WINAPI*)(ID2D1BitmapRenderTarget*))this->v->tbl[2])(this); }
static inline void                              ID2D1BitmapRenderTarget_GetFactory                           (ID2D1BitmapRenderTarget* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1BitmapRenderTarget*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline HRESULT                           ID2D1BitmapRenderTarget_CreateBitmap                         (ID2D1BitmapRenderTarget* this, D2D_SIZE_U size, const void* srcData, UINT32 pitch, const D2D1_BITMAP_PROPERTIES* bitmapProperties, ID2D1Bitmap** bitmap) { return ((HRESULT (WINAPI*)(ID2D1BitmapRenderTarget*, D2D_SIZE_U, const void*, UINT32, const D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap**))this->v->tbl[4])(this, size, srcData, pitch, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1BitmapRenderTarget_CreateBitmapFromWicBitmap            (ID2D1BitmapRenderTarget* this, IWICBitmapSource* wicBitmapSource, const D2D1_BITMAP_PROPERTIES* bitmapProperties, ID2D1Bitmap** bitmap) { return ((HRESULT (WINAPI*)(ID2D1BitmapRenderTarget*, IWICBitmapSource*, const D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap**))this->v->tbl[5])(this, wicBitmapSource, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1BitmapRenderTarget_CreateSharedBitmap                   (ID2D1BitmapRenderTarget* this, const GUID* riid, void* data, const D2D1_BITMAP_PROPERTIES* bitmapProperties, ID2D1Bitmap** bitmap) { return ((HRESULT (WINAPI*)(ID2D1BitmapRenderTarget*, const GUID*, void*, const D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap**))this->v->tbl[6])(this, riid, data, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1BitmapRenderTarget_CreateBitmapBrush                    (ID2D1BitmapRenderTarget* this, ID2D1Bitmap* bitmap, const D2D1_BITMAP_BRUSH_PROPERTIES* bitmapBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1BitmapBrush** bitmapBrush) { return ((HRESULT (WINAPI*)(ID2D1BitmapRenderTarget*, ID2D1Bitmap*, const D2D1_BITMAP_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1BitmapBrush**))this->v->tbl[7])(this, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush); }
static inline HRESULT                           ID2D1BitmapRenderTarget_CreateSolidColorBrush                (ID2D1BitmapRenderTarget* this, const D2D1_COLOR_F* color, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1SolidColorBrush** solidColorBrush) { return ((HRESULT (WINAPI*)(ID2D1BitmapRenderTarget*, const D2D1_COLOR_F*, const D2D1_BRUSH_PROPERTIES*, ID2D1SolidColorBrush**))this->v->tbl[8])(this, color, brushProperties, solidColorBrush); }
static inline HRESULT                           ID2D1BitmapRenderTarget_CreateGradientStopCollection         (ID2D1BitmapRenderTarget* this, const D2D1_GRADIENT_STOP* gradientStops, UINT32 gradientStopsCount, D2D1_GAMMA colorInterpolationGamma, D2D1_EXTEND_MODE extendMode, ID2D1GradientStopCollection** gradientStopCollection) { return ((HRESULT (WINAPI*)(ID2D1BitmapRenderTarget*, const D2D1_GRADIENT_STOP*, UINT32, D2D1_GAMMA, D2D1_EXTEND_MODE, ID2D1GradientStopCollection**))this->v->tbl[9])(this, gradientStops, gradientStopsCount, colorInterpolationGamma, extendMode, gradientStopCollection); }
static inline HRESULT                           ID2D1BitmapRenderTarget_CreateLinearGradientBrush            (ID2D1BitmapRenderTarget* this, const D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES* linearGradientBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1GradientStopCollection* gradientStopCollection, ID2D1LinearGradientBrush** linearGradientBrush) { return ((HRESULT (WINAPI*)(ID2D1BitmapRenderTarget*, const D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection*, ID2D1LinearGradientBrush**))this->v->tbl[10])(this, linearGradientBrushProperties, brushProperties, gradientStopCollection, linearGradientBrush); }
static inline HRESULT                           ID2D1BitmapRenderTarget_CreateRadialGradientBrush            (ID2D1BitmapRenderTarget* this, const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES* radialGradientBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1GradientStopCollection* gradientStopCollection, ID2D1RadialGradientBrush** radialGradientBrush) { return ((HRESULT (WINAPI*)(ID2D1BitmapRenderTarget*, const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection*, ID2D1RadialGradientBrush**))this->v->tbl[11])(this, radialGradientBrushProperties, brushProperties, gradientStopCollection, radialGradientBrush); }
static inline HRESULT                           ID2D1BitmapRenderTarget_CreateCompatibleRenderTarget         (ID2D1BitmapRenderTarget* this, const D2D_SIZE_F* desiredSize, const D2D_SIZE_U* desiredPixelSize, const D2D1_PIXEL_FORMAT* desiredFormat, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS options, ID2D1BitmapRenderTarget** bitmapRenderTarget) { return ((HRESULT (WINAPI*)(ID2D1BitmapRenderTarget*, const D2D_SIZE_F*, const D2D_SIZE_U*, const D2D1_PIXEL_FORMAT*, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, ID2D1BitmapRenderTarget**))this->v->tbl[12])(this, desiredSize, desiredPixelSize, desiredFormat, options, bitmapRenderTarget); }
static inline HRESULT                           ID2D1BitmapRenderTarget_CreateLayer                          (ID2D1BitmapRenderTarget* this, const D2D_SIZE_F* size, ID2D1Layer** layer) { return ((HRESULT (WINAPI*)(ID2D1BitmapRenderTarget*, const D2D_SIZE_F*, ID2D1Layer**))this->v->tbl[13])(this, size, layer); }
static inline HRESULT                           ID2D1BitmapRenderTarget_CreateMesh                           (ID2D1BitmapRenderTarget* this, ID2D1Mesh** mesh) { return ((HRESULT (WINAPI*)(ID2D1BitmapRenderTarget*, ID2D1Mesh**))this->v->tbl[14])(this, mesh); }
static inline void                              ID2D1BitmapRenderTarget_DrawLine                             (ID2D1BitmapRenderTarget* this, D2D_POINT_2F point0, D2D_POINT_2F point1, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1BitmapRenderTarget*, D2D_POINT_2F, D2D_POINT_2F, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[15])(this, point0, point1, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1BitmapRenderTarget_DrawRectangle                        (ID2D1BitmapRenderTarget* this, const D2D_RECT_F* rect, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1BitmapRenderTarget*, const D2D_RECT_F*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[16])(this, rect, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1BitmapRenderTarget_FillRectangle                        (ID2D1BitmapRenderTarget* this, const D2D_RECT_F* rect, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1BitmapRenderTarget*, const D2D_RECT_F*, ID2D1Brush*))this->v->tbl[17])(this, rect, brush); }
static inline void                              ID2D1BitmapRenderTarget_DrawRoundedRectangle                 (ID2D1BitmapRenderTarget* this, const D2D1_ROUNDED_RECT* roundedRect, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1BitmapRenderTarget*, const D2D1_ROUNDED_RECT*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[18])(this, roundedRect, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1BitmapRenderTarget_FillRoundedRectangle                 (ID2D1BitmapRenderTarget* this, const D2D1_ROUNDED_RECT* roundedRect, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1BitmapRenderTarget*, const D2D1_ROUNDED_RECT*, ID2D1Brush*))this->v->tbl[19])(this, roundedRect, brush); }
static inline void                              ID2D1BitmapRenderTarget_DrawEllipse                          (ID2D1BitmapRenderTarget* this, const D2D1_ELLIPSE* ellipse, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1BitmapRenderTarget*, const D2D1_ELLIPSE*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[20])(this, ellipse, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1BitmapRenderTarget_FillEllipse                          (ID2D1BitmapRenderTarget* this, const D2D1_ELLIPSE* ellipse, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1BitmapRenderTarget*, const D2D1_ELLIPSE*, ID2D1Brush*))this->v->tbl[21])(this, ellipse, brush); }
static inline void                              ID2D1BitmapRenderTarget_DrawGeometry                         (ID2D1BitmapRenderTarget* this, ID2D1Geometry* geometry, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1BitmapRenderTarget*, ID2D1Geometry*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[22])(this, geometry, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1BitmapRenderTarget_FillGeometry                         (ID2D1BitmapRenderTarget* this, ID2D1Geometry* geometry, ID2D1Brush* brush, ID2D1Brush* opacityBrush) { ((void (WINAPI*)(ID2D1BitmapRenderTarget*, ID2D1Geometry*, ID2D1Brush*, ID2D1Brush*))this->v->tbl[23])(this, geometry, brush, opacityBrush); }
static inline void                              ID2D1BitmapRenderTarget_FillMesh                             (ID2D1BitmapRenderTarget* this, ID2D1Mesh* mesh, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1BitmapRenderTarget*, ID2D1Mesh*, ID2D1Brush*))this->v->tbl[24])(this, mesh, brush); }
static inline void                              ID2D1BitmapRenderTarget_FillOpacityMask                      (ID2D1BitmapRenderTarget* this, ID2D1Bitmap* opacityMask, ID2D1Brush* brush, D2D1_OPACITY_MASK_CONTENT content, const D2D_RECT_F* destinationRectangle, const D2D_RECT_F* sourceRectangle) { ((void (WINAPI*)(ID2D1BitmapRenderTarget*, ID2D1Bitmap*, ID2D1Brush*, D2D1_OPACITY_MASK_CONTENT, const D2D_RECT_F*, const D2D_RECT_F*))this->v->tbl[25])(this, opacityMask, brush, content, destinationRectangle, sourceRectangle); }
static inline void                              ID2D1BitmapRenderTarget_DrawBitmap                           (ID2D1BitmapRenderTarget* this, ID2D1Bitmap* bitmap, const D2D_RECT_F* destinationRectangle, FLOAT opacity, D2D1_BITMAP_INTERPOLATION_MODE interpolationMode, const D2D_RECT_F* sourceRectangle) { ((void (WINAPI*)(ID2D1BitmapRenderTarget*, ID2D1Bitmap*, const D2D_RECT_F*, FLOAT, D2D1_BITMAP_INTERPOLATION_MODE, const D2D_RECT_F*))this->v->tbl[26])(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle); }
static inline void                              ID2D1BitmapRenderTarget_DrawText                             (ID2D1BitmapRenderTarget* this, const WCHAR* string, UINT32 stringLength, IDWriteTextFormat* textFormat, const D2D_RECT_F* layoutRect, ID2D1Brush* defaultFillBrush, D2D1_DRAW_TEXT_OPTIONS options, DWRITE_MEASURING_MODE measuringMode) { ((void (WINAPI*)(ID2D1BitmapRenderTarget*, const WCHAR*, UINT32, IDWriteTextFormat*, const D2D_RECT_F*, ID2D1Brush*, D2D1_DRAW_TEXT_OPTIONS, DWRITE_MEASURING_MODE))this->v->tbl[27])(this, string, stringLength, textFormat, layoutRect, defaultFillBrush, options, measuringMode); }
static inline void                              ID2D1BitmapRenderTarget_DrawTextLayout                       (ID2D1BitmapRenderTarget* this, D2D_POINT_2F origin, IDWriteTextLayout* textLayout, ID2D1Brush* defaultFillBrush, D2D1_DRAW_TEXT_OPTIONS options) { ((void (WINAPI*)(ID2D1BitmapRenderTarget*, D2D_POINT_2F, IDWriteTextLayout*, ID2D1Brush*, D2D1_DRAW_TEXT_OPTIONS))this->v->tbl[28])(this, origin, textLayout, defaultFillBrush, options); }
static inline void                              ID2D1BitmapRenderTarget_DrawGlyphRun                         (ID2D1BitmapRenderTarget* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, ID2D1Brush* foregroundBrush, DWRITE_MEASURING_MODE measuringMode) { ((void (WINAPI*)(ID2D1BitmapRenderTarget*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, ID2D1Brush*, DWRITE_MEASURING_MODE))this->v->tbl[29])(this, baselineOrigin, glyphRun, foregroundBrush, measuringMode); }
static inline void                              ID2D1BitmapRenderTarget_SetTransform                         (ID2D1BitmapRenderTarget* this, const D2D_MATRIX_3X2_F* transform) { ((void (WINAPI*)(ID2D1BitmapRenderTarget*, const D2D_MATRIX_3X2_F*))this->v->tbl[30])(this, transform); }
static inline void                              ID2D1BitmapRenderTarget_GetTransform                         (ID2D1BitmapRenderTarget* this, D2D_MATRIX_3X2_F* transform) { ((void (WINAPI*)(ID2D1BitmapRenderTarget*, D2D_MATRIX_3X2_F*))this->v->tbl[31])(this, transform); }
static inline void                              ID2D1BitmapRenderTarget_SetAntialiasMode                     (ID2D1BitmapRenderTarget* this, D2D1_ANTIALIAS_MODE antialiasMode) { ((void (WINAPI*)(ID2D1BitmapRenderTarget*, D2D1_ANTIALIAS_MODE))this->v->tbl[32])(this, antialiasMode); }
static inline D2D1_ANTIALIAS_MODE               ID2D1BitmapRenderTarget_GetAntialiasMode                     (ID2D1BitmapRenderTarget* this) { return ((D2D1_ANTIALIAS_MODE (WINAPI*)(ID2D1BitmapRenderTarget*))this->v->tbl[33])(this); }
static inline void                              ID2D1BitmapRenderTarget_SetTextAntialiasMode                 (ID2D1BitmapRenderTarget* this, D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode) { ((void (WINAPI*)(ID2D1BitmapRenderTarget*, D2D1_TEXT_ANTIALIAS_MODE))this->v->tbl[34])(this, textAntialiasMode); }
static inline D2D1_TEXT_ANTIALIAS_MODE          ID2D1BitmapRenderTarget_GetTextAntialiasMode                 (ID2D1BitmapRenderTarget* this) { return ((D2D1_TEXT_ANTIALIAS_MODE (WINAPI*)(ID2D1BitmapRenderTarget*))this->v->tbl[35])(this); }
static inline void                              ID2D1BitmapRenderTarget_SetTextRenderingParams               (ID2D1BitmapRenderTarget* this, IDWriteRenderingParams* textRenderingParams) { ((void (WINAPI*)(ID2D1BitmapRenderTarget*, IDWriteRenderingParams*))this->v->tbl[36])(this, textRenderingParams); }
static inline void                              ID2D1BitmapRenderTarget_GetTextRenderingParams               (ID2D1BitmapRenderTarget* this, IDWriteRenderingParams** textRenderingParams) { ((void (WINAPI*)(ID2D1BitmapRenderTarget*, IDWriteRenderingParams**))this->v->tbl[37])(this, textRenderingParams); }
static inline void                              ID2D1BitmapRenderTarget_SetTags                              (ID2D1BitmapRenderTarget* this, UINT64 tag1, UINT64 tag2) { ((void (WINAPI*)(ID2D1BitmapRenderTarget*, UINT64, UINT64))this->v->tbl[38])(this, tag1, tag2); }
static inline void                              ID2D1BitmapRenderTarget_GetTags                              (ID2D1BitmapRenderTarget* this, UINT64* tag1, UINT64* tag2) { ((void (WINAPI*)(ID2D1BitmapRenderTarget*, UINT64*, UINT64*))this->v->tbl[39])(this, tag1, tag2); }
static inline void                              ID2D1BitmapRenderTarget_PushLayer                            (ID2D1BitmapRenderTarget* this, const D2D1_LAYER_PARAMETERS* layerParameters, ID2D1Layer* layer) { ((void (WINAPI*)(ID2D1BitmapRenderTarget*, const D2D1_LAYER_PARAMETERS*, ID2D1Layer*))this->v->tbl[40])(this, layerParameters, layer); }
static inline void                              ID2D1BitmapRenderTarget_PopLayer                             (ID2D1BitmapRenderTarget* this) { ((void (WINAPI*)(ID2D1BitmapRenderTarget*))this->v->tbl[41])(this); }
static inline HRESULT                           ID2D1BitmapRenderTarget_Flush                                (ID2D1BitmapRenderTarget* this, UINT64* tag1, UINT64* tag2) { return ((HRESULT (WINAPI*)(ID2D1BitmapRenderTarget*, UINT64*, UINT64*))this->v->tbl[42])(this, tag1, tag2); }
static inline void                              ID2D1BitmapRenderTarget_SaveDrawingState                     (ID2D1BitmapRenderTarget* this, ID2D1DrawingStateBlock* drawingStateBlock) { ((void (WINAPI*)(ID2D1BitmapRenderTarget*, ID2D1DrawingStateBlock*))this->v->tbl[43])(this, drawingStateBlock); }
static inline void                              ID2D1BitmapRenderTarget_RestoreDrawingState                  (ID2D1BitmapRenderTarget* this, ID2D1DrawingStateBlock* drawingStateBlock) { ((void (WINAPI*)(ID2D1BitmapRenderTarget*, ID2D1DrawingStateBlock*))this->v->tbl[44])(this, drawingStateBlock); }
static inline void                              ID2D1BitmapRenderTarget_PushAxisAlignedClip                  (ID2D1BitmapRenderTarget* this, const D2D_RECT_F* clipRect, D2D1_ANTIALIAS_MODE antialiasMode) { ((void (WINAPI*)(ID2D1BitmapRenderTarget*, const D2D_RECT_F*, D2D1_ANTIALIAS_MODE))this->v->tbl[45])(this, clipRect, antialiasMode); }
static inline void                              ID2D1BitmapRenderTarget_PopAxisAlignedClip                   (ID2D1BitmapRenderTarget* this) { ((void (WINAPI*)(ID2D1BitmapRenderTarget*))this->v->tbl[46])(this); }
static inline void                              ID2D1BitmapRenderTarget_Clear                                (ID2D1BitmapRenderTarget* this, const D2D1_COLOR_F* clearColor) { ((void (WINAPI*)(ID2D1BitmapRenderTarget*, const D2D1_COLOR_F*))this->v->tbl[47])(this, clearColor); }
static inline void                              ID2D1BitmapRenderTarget_BeginDraw                            (ID2D1BitmapRenderTarget* this) { ((void (WINAPI*)(ID2D1BitmapRenderTarget*))this->v->tbl[48])(this); }
static inline HRESULT                           ID2D1BitmapRenderTarget_EndDraw                              (ID2D1BitmapRenderTarget* this, UINT64* tag1, UINT64* tag2) { return ((HRESULT (WINAPI*)(ID2D1BitmapRenderTarget*, UINT64*, UINT64*))this->v->tbl[49])(this, tag1, tag2); }
static inline D2D1_PIXEL_FORMAT                 ID2D1BitmapRenderTarget_GetPixelFormat                       (ID2D1BitmapRenderTarget* this) { D2D1_PIXEL_FORMAT _return; ((void (WINAPI*)(ID2D1BitmapRenderTarget*, D2D1_PIXEL_FORMAT*))this->v->tbl[50])(this, &_return); return _return; }
static inline void                              ID2D1BitmapRenderTarget_SetDpi                               (ID2D1BitmapRenderTarget* this, FLOAT dpiX, FLOAT dpiY) { ((void (WINAPI*)(ID2D1BitmapRenderTarget*, FLOAT, FLOAT))this->v->tbl[51])(this, dpiX, dpiY); }
static inline void                              ID2D1BitmapRenderTarget_GetDpi                               (ID2D1BitmapRenderTarget* this, FLOAT* dpiX, FLOAT* dpiY) { ((void (WINAPI*)(ID2D1BitmapRenderTarget*, FLOAT*, FLOAT*))this->v->tbl[52])(this, dpiX, dpiY); }
static inline D2D_SIZE_F                        ID2D1BitmapRenderTarget_GetSize                              (ID2D1BitmapRenderTarget* this) { D2D_SIZE_F _return; ((void (WINAPI*)(ID2D1BitmapRenderTarget*, D2D_SIZE_F*))this->v->tbl[53])(this, &_return); return _return; }
static inline D2D_SIZE_U                        ID2D1BitmapRenderTarget_GetPixelSize                         (ID2D1BitmapRenderTarget* this) { D2D_SIZE_U _return; ((void (WINAPI*)(ID2D1BitmapRenderTarget*, D2D_SIZE_U*))this->v->tbl[54])(this, &_return); return _return; }
static inline UINT32                            ID2D1BitmapRenderTarget_GetMaximumBitmapSize                 (ID2D1BitmapRenderTarget* this) { return ((UINT32 (WINAPI*)(ID2D1BitmapRenderTarget*))this->v->tbl[55])(this); }
static inline BOOL                              ID2D1BitmapRenderTarget_IsSupported                          (ID2D1BitmapRenderTarget* this, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties) { return ((BOOL (WINAPI*)(ID2D1BitmapRenderTarget*, const D2D1_RENDER_TARGET_PROPERTIES*))this->v->tbl[56])(this, renderTargetProperties); }
static inline HRESULT                           ID2D1BitmapRenderTarget_GetBitmap                            (ID2D1BitmapRenderTarget* this, ID2D1Bitmap** bitmap) { return ((HRESULT (WINAPI*)(ID2D1BitmapRenderTarget*, ID2D1Bitmap**))this->v->tbl[57])(this, bitmap); }

static inline HRESULT                           ID2D1BlendTransform_QueryInterface                           (ID2D1BlendTransform* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1BlendTransform*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1BlendTransform_AddRef                                   (ID2D1BlendTransform* this) { return ((UINT32 (WINAPI*)(ID2D1BlendTransform*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1BlendTransform_Release                                  (ID2D1BlendTransform* this) { return ((UINT32 (WINAPI*)(ID2D1BlendTransform*))this->v->tbl[2])(this); }
static inline UINT32                            ID2D1BlendTransform_GetInputCount                            (ID2D1BlendTransform* this) { return ((UINT32 (WINAPI*)(ID2D1BlendTransform*))this->v->tbl[3])(this); }
static inline HRESULT                           ID2D1BlendTransform_SetOutputBuffer                          (ID2D1BlendTransform* this, D2D1_BUFFER_PRECISION bufferPrecision, D2D1_CHANNEL_DEPTH channelDepth) { return ((HRESULT (WINAPI*)(ID2D1BlendTransform*, D2D1_BUFFER_PRECISION, D2D1_CHANNEL_DEPTH))this->v->tbl[4])(this, bufferPrecision, channelDepth); }
static inline void                              ID2D1BlendTransform_SetCached                                (ID2D1BlendTransform* this, BOOL isCached) { ((void (WINAPI*)(ID2D1BlendTransform*, BOOL))this->v->tbl[5])(this, isCached); }
static inline void                              ID2D1BlendTransform_SetDescription                           (ID2D1BlendTransform* this, const D2D1_BLEND_DESCRIPTION* description) { ((void (WINAPI*)(ID2D1BlendTransform*, const D2D1_BLEND_DESCRIPTION*))this->v->tbl[6])(this, description); }
static inline void                              ID2D1BlendTransform_GetDescription                           (ID2D1BlendTransform* this, D2D1_BLEND_DESCRIPTION* description) { ((void (WINAPI*)(ID2D1BlendTransform*, D2D1_BLEND_DESCRIPTION*))this->v->tbl[7])(this, description); }

static inline HRESULT                           ID2D1BorderTransform_QueryInterface                          (ID2D1BorderTransform* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1BorderTransform*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1BorderTransform_AddRef                                  (ID2D1BorderTransform* this) { return ((UINT32 (WINAPI*)(ID2D1BorderTransform*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1BorderTransform_Release                                 (ID2D1BorderTransform* this) { return ((UINT32 (WINAPI*)(ID2D1BorderTransform*))this->v->tbl[2])(this); }
static inline UINT32                            ID2D1BorderTransform_GetInputCount                           (ID2D1BorderTransform* this) { return ((UINT32 (WINAPI*)(ID2D1BorderTransform*))this->v->tbl[3])(this); }
static inline HRESULT                           ID2D1BorderTransform_SetOutputBuffer                         (ID2D1BorderTransform* this, D2D1_BUFFER_PRECISION bufferPrecision, D2D1_CHANNEL_DEPTH channelDepth) { return ((HRESULT (WINAPI*)(ID2D1BorderTransform*, D2D1_BUFFER_PRECISION, D2D1_CHANNEL_DEPTH))this->v->tbl[4])(this, bufferPrecision, channelDepth); }
static inline void                              ID2D1BorderTransform_SetCached                               (ID2D1BorderTransform* this, BOOL isCached) { ((void (WINAPI*)(ID2D1BorderTransform*, BOOL))this->v->tbl[5])(this, isCached); }
static inline void                              ID2D1BorderTransform_SetExtendModeX                          (ID2D1BorderTransform* this, D2D1_EXTEND_MODE extendMode) { ((void (WINAPI*)(ID2D1BorderTransform*, D2D1_EXTEND_MODE))this->v->tbl[6])(this, extendMode); }
static inline void                              ID2D1BorderTransform_SetExtendModeY                          (ID2D1BorderTransform* this, D2D1_EXTEND_MODE extendMode) { ((void (WINAPI*)(ID2D1BorderTransform*, D2D1_EXTEND_MODE))this->v->tbl[7])(this, extendMode); }
static inline D2D1_EXTEND_MODE                  ID2D1BorderTransform_GetExtendModeX                          (ID2D1BorderTransform* this) { return ((D2D1_EXTEND_MODE (WINAPI*)(ID2D1BorderTransform*))this->v->tbl[8])(this); }
static inline D2D1_EXTEND_MODE                  ID2D1BorderTransform_GetExtendModeY                          (ID2D1BorderTransform* this) { return ((D2D1_EXTEND_MODE (WINAPI*)(ID2D1BorderTransform*))this->v->tbl[9])(this); }

static inline HRESULT                           ID2D1BoundsAdjustmentTransform_QueryInterface                (ID2D1BoundsAdjustmentTransform* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1BoundsAdjustmentTransform*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1BoundsAdjustmentTransform_AddRef                        (ID2D1BoundsAdjustmentTransform* this) { return ((UINT32 (WINAPI*)(ID2D1BoundsAdjustmentTransform*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1BoundsAdjustmentTransform_Release                       (ID2D1BoundsAdjustmentTransform* this) { return ((UINT32 (WINAPI*)(ID2D1BoundsAdjustmentTransform*))this->v->tbl[2])(this); }
static inline UINT32                            ID2D1BoundsAdjustmentTransform_GetInputCount                 (ID2D1BoundsAdjustmentTransform* this) { return ((UINT32 (WINAPI*)(ID2D1BoundsAdjustmentTransform*))this->v->tbl[3])(this); }
static inline void                              ID2D1BoundsAdjustmentTransform_SetOutputBounds               (ID2D1BoundsAdjustmentTransform* this, const RECT* outputBounds) { ((void (WINAPI*)(ID2D1BoundsAdjustmentTransform*, const RECT*))this->v->tbl[4])(this, outputBounds); }
static inline void                              ID2D1BoundsAdjustmentTransform_GetOutputBounds               (ID2D1BoundsAdjustmentTransform* this, RECT* outputBounds) { ((void (WINAPI*)(ID2D1BoundsAdjustmentTransform*, RECT*))this->v->tbl[5])(this, outputBounds); }

static inline HRESULT                           ID2D1Brush_QueryInterface                                    (ID2D1Brush* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1Brush*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1Brush_AddRef                                            (ID2D1Brush* this) { return ((UINT32 (WINAPI*)(ID2D1Brush*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1Brush_Release                                           (ID2D1Brush* this) { return ((UINT32 (WINAPI*)(ID2D1Brush*))this->v->tbl[2])(this); }
static inline void                              ID2D1Brush_GetFactory                                        (ID2D1Brush* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1Brush*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline void                              ID2D1Brush_SetOpacity                                        (ID2D1Brush* this, FLOAT opacity) { ((void (WINAPI*)(ID2D1Brush*, FLOAT))this->v->tbl[4])(this, opacity); }
static inline void                              ID2D1Brush_SetTransform                                      (ID2D1Brush* this, const D2D_MATRIX_3X2_F* transform) { ((void (WINAPI*)(ID2D1Brush*, const D2D_MATRIX_3X2_F*))this->v->tbl[5])(this, transform); }
static inline FLOAT                             ID2D1Brush_GetOpacity                                        (ID2D1Brush* this) { return ((FLOAT (WINAPI*)(ID2D1Brush*))this->v->tbl[6])(this); }
static inline void                              ID2D1Brush_GetTransform                                      (ID2D1Brush* this, D2D_MATRIX_3X2_F* transform) { ((void (WINAPI*)(ID2D1Brush*, D2D_MATRIX_3X2_F*))this->v->tbl[7])(this, transform); }

static inline HRESULT                           ID2D1ColorContext_QueryInterface                             (ID2D1ColorContext* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1ColorContext*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1ColorContext_AddRef                                     (ID2D1ColorContext* this) { return ((UINT32 (WINAPI*)(ID2D1ColorContext*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1ColorContext_Release                                    (ID2D1ColorContext* this) { return ((UINT32 (WINAPI*)(ID2D1ColorContext*))this->v->tbl[2])(this); }
static inline void                              ID2D1ColorContext_GetFactory                                 (ID2D1ColorContext* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1ColorContext*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline D2D1_COLOR_SPACE                  ID2D1ColorContext_GetColorSpace                              (ID2D1ColorContext* this) { return ((D2D1_COLOR_SPACE (WINAPI*)(ID2D1ColorContext*))this->v->tbl[4])(this); }
static inline UINT32                            ID2D1ColorContext_GetProfileSize                             (ID2D1ColorContext* this) { return ((UINT32 (WINAPI*)(ID2D1ColorContext*))this->v->tbl[5])(this); }
static inline HRESULT                           ID2D1ColorContext_GetProfile                                 (ID2D1ColorContext* this, UINT8* profile, UINT32 profileSize) { return ((HRESULT (WINAPI*)(ID2D1ColorContext*, UINT8*, UINT32))this->v->tbl[6])(this, profile, profileSize); }

static inline HRESULT                           ID2D1ColorContext1_QueryInterface                            (ID2D1ColorContext1* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1ColorContext1*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1ColorContext1_AddRef                                    (ID2D1ColorContext1* this) { return ((UINT32 (WINAPI*)(ID2D1ColorContext1*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1ColorContext1_Release                                   (ID2D1ColorContext1* this) { return ((UINT32 (WINAPI*)(ID2D1ColorContext1*))this->v->tbl[2])(this); }
static inline void                              ID2D1ColorContext1_GetFactory                                (ID2D1ColorContext1* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1ColorContext1*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline D2D1_COLOR_SPACE                  ID2D1ColorContext1_GetColorSpace                             (ID2D1ColorContext1* this) { return ((D2D1_COLOR_SPACE (WINAPI*)(ID2D1ColorContext1*))this->v->tbl[4])(this); }
static inline UINT32                            ID2D1ColorContext1_GetProfileSize                            (ID2D1ColorContext1* this) { return ((UINT32 (WINAPI*)(ID2D1ColorContext1*))this->v->tbl[5])(this); }
static inline HRESULT                           ID2D1ColorContext1_GetProfile                                (ID2D1ColorContext1* this, UINT8* profile, UINT32 profileSize) { return ((HRESULT (WINAPI*)(ID2D1ColorContext1*, UINT8*, UINT32))this->v->tbl[6])(this, profile, profileSize); }
static inline D2D1_COLOR_CONTEXT_TYPE           ID2D1ColorContext1_GetColorContextType                       (ID2D1ColorContext1* this) { return ((D2D1_COLOR_CONTEXT_TYPE (WINAPI*)(ID2D1ColorContext1*))this->v->tbl[7])(this); }
static inline DXGI_COLOR_SPACE_TYPE             ID2D1ColorContext1_GetDXGIColorSpace                         (ID2D1ColorContext1* this) { return ((DXGI_COLOR_SPACE_TYPE (WINAPI*)(ID2D1ColorContext1*))this->v->tbl[8])(this); }
static inline HRESULT                           ID2D1ColorContext1_GetSimpleColorProfile                     (ID2D1ColorContext1* this, D2D1_SIMPLE_COLOR_PROFILE* simpleProfile) { return ((HRESULT (WINAPI*)(ID2D1ColorContext1*, D2D1_SIMPLE_COLOR_PROFILE*))this->v->tbl[9])(this, simpleProfile); }

static inline HRESULT                           ID2D1CommandList_QueryInterface                              (ID2D1CommandList* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1CommandList*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1CommandList_AddRef                                      (ID2D1CommandList* this) { return ((UINT32 (WINAPI*)(ID2D1CommandList*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1CommandList_Release                                     (ID2D1CommandList* this) { return ((UINT32 (WINAPI*)(ID2D1CommandList*))this->v->tbl[2])(this); }
static inline void                              ID2D1CommandList_GetFactory                                  (ID2D1CommandList* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1CommandList*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline HRESULT                           ID2D1CommandList_Stream                                      (ID2D1CommandList* this, ID2D1CommandSink* sink) { return ((HRESULT (WINAPI*)(ID2D1CommandList*, ID2D1CommandSink*))this->v->tbl[4])(this, sink); }
static inline HRESULT                           ID2D1CommandList_Close                                       (ID2D1CommandList* this) { return ((HRESULT (WINAPI*)(ID2D1CommandList*))this->v->tbl[5])(this); }

static inline HRESULT                           ID2D1CommandSink_QueryInterface                              (ID2D1CommandSink* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1CommandSink*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1CommandSink_AddRef                                      (ID2D1CommandSink* this) { return ((UINT32 (WINAPI*)(ID2D1CommandSink*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1CommandSink_Release                                     (ID2D1CommandSink* this) { return ((UINT32 (WINAPI*)(ID2D1CommandSink*))this->v->tbl[2])(this); }
static inline HRESULT                           ID2D1CommandSink_BeginDraw                                   (ID2D1CommandSink* this) { return ((HRESULT (WINAPI*)(ID2D1CommandSink*))this->v->tbl[3])(this); }
static inline HRESULT                           ID2D1CommandSink_EndDraw                                     (ID2D1CommandSink* this) { return ((HRESULT (WINAPI*)(ID2D1CommandSink*))this->v->tbl[4])(this); }
static inline HRESULT                           ID2D1CommandSink_SetAntialiasMode                            (ID2D1CommandSink* this, D2D1_ANTIALIAS_MODE antialiasMode) { return ((HRESULT (WINAPI*)(ID2D1CommandSink*, D2D1_ANTIALIAS_MODE))this->v->tbl[5])(this, antialiasMode); }
static inline HRESULT                           ID2D1CommandSink_SetTags                                     (ID2D1CommandSink* this, UINT64 tag1, UINT64 tag2) { return ((HRESULT (WINAPI*)(ID2D1CommandSink*, UINT64, UINT64))this->v->tbl[6])(this, tag1, tag2); }
static inline HRESULT                           ID2D1CommandSink_SetTextAntialiasMode                        (ID2D1CommandSink* this, D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode) { return ((HRESULT (WINAPI*)(ID2D1CommandSink*, D2D1_TEXT_ANTIALIAS_MODE))this->v->tbl[7])(this, textAntialiasMode); }
static inline HRESULT                           ID2D1CommandSink_SetTextRenderingParams                      (ID2D1CommandSink* this, IDWriteRenderingParams* textRenderingParams) { return ((HRESULT (WINAPI*)(ID2D1CommandSink*, IDWriteRenderingParams*))this->v->tbl[8])(this, textRenderingParams); }
static inline HRESULT                           ID2D1CommandSink_SetTransform                                (ID2D1CommandSink* this, const D2D_MATRIX_3X2_F* transform) { return ((HRESULT (WINAPI*)(ID2D1CommandSink*, const D2D_MATRIX_3X2_F*))this->v->tbl[9])(this, transform); }
static inline HRESULT                           ID2D1CommandSink_SetPrimitiveBlend                           (ID2D1CommandSink* this, D2D1_PRIMITIVE_BLEND primitiveBlend) { return ((HRESULT (WINAPI*)(ID2D1CommandSink*, D2D1_PRIMITIVE_BLEND))this->v->tbl[10])(this, primitiveBlend); }
static inline HRESULT                           ID2D1CommandSink_SetUnitMode                                 (ID2D1CommandSink* this, D2D1_UNIT_MODE unitMode) { return ((HRESULT (WINAPI*)(ID2D1CommandSink*, D2D1_UNIT_MODE))this->v->tbl[11])(this, unitMode); }
static inline HRESULT                           ID2D1CommandSink_Clear                                       (ID2D1CommandSink* this, const D2D1_COLOR_F* color) { return ((HRESULT (WINAPI*)(ID2D1CommandSink*, const D2D1_COLOR_F*))this->v->tbl[12])(this, color); }
static inline HRESULT                           ID2D1CommandSink_DrawGlyphRun                                (ID2D1CommandSink* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, const DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription, ID2D1Brush* foregroundBrush, DWRITE_MEASURING_MODE measuringMode) { return ((HRESULT (WINAPI*)(ID2D1CommandSink*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, const DWRITE_GLYPH_RUN_DESCRIPTION*, ID2D1Brush*, DWRITE_MEASURING_MODE))this->v->tbl[13])(this, baselineOrigin, glyphRun, glyphRunDescription, foregroundBrush, measuringMode); }
static inline HRESULT                           ID2D1CommandSink_DrawLine                                    (ID2D1CommandSink* this, D2D_POINT_2F point0, D2D_POINT_2F point1, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { return ((HRESULT (WINAPI*)(ID2D1CommandSink*, D2D_POINT_2F, D2D_POINT_2F, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[14])(this, point0, point1, brush, strokeWidth, strokeStyle); }
static inline HRESULT                           ID2D1CommandSink_DrawGeometry                                (ID2D1CommandSink* this, ID2D1Geometry* geometry, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { return ((HRESULT (WINAPI*)(ID2D1CommandSink*, ID2D1Geometry*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[15])(this, geometry, brush, strokeWidth, strokeStyle); }
static inline HRESULT                           ID2D1CommandSink_DrawRectangle                               (ID2D1CommandSink* this, const D2D_RECT_F* rect, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { return ((HRESULT (WINAPI*)(ID2D1CommandSink*, const D2D_RECT_F*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[16])(this, rect, brush, strokeWidth, strokeStyle); }
static inline HRESULT                           ID2D1CommandSink_DrawBitmap                                  (ID2D1CommandSink* this, ID2D1Bitmap* bitmap, const D2D_RECT_F* destinationRectangle, FLOAT opacity, D2D1_INTERPOLATION_MODE interpolationMode, const D2D_RECT_F* sourceRectangle, const D2D_MATRIX_4X4_F* perspectiveTransform) { return ((HRESULT (WINAPI*)(ID2D1CommandSink*, ID2D1Bitmap*, const D2D_RECT_F*, FLOAT, D2D1_INTERPOLATION_MODE, const D2D_RECT_F*, const D2D_MATRIX_4X4_F*))this->v->tbl[17])(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle, perspectiveTransform); }
static inline HRESULT                           ID2D1CommandSink_DrawImage                                   (ID2D1CommandSink* this, ID2D1Image* image, const D2D_POINT_2F* targetOffset, const D2D_RECT_F* imageRectangle, D2D1_INTERPOLATION_MODE interpolationMode, D2D1_COMPOSITE_MODE compositeMode) { return ((HRESULT (WINAPI*)(ID2D1CommandSink*, ID2D1Image*, const D2D_POINT_2F*, const D2D_RECT_F*, D2D1_INTERPOLATION_MODE, D2D1_COMPOSITE_MODE))this->v->tbl[18])(this, image, targetOffset, imageRectangle, interpolationMode, compositeMode); }
static inline HRESULT                           ID2D1CommandSink_DrawGdiMetafile                             (ID2D1CommandSink* this, ID2D1GdiMetafile* gdiMetafile, const D2D_POINT_2F* targetOffset) { return ((HRESULT (WINAPI*)(ID2D1CommandSink*, ID2D1GdiMetafile*, const D2D_POINT_2F*))this->v->tbl[19])(this, gdiMetafile, targetOffset); }
static inline HRESULT                           ID2D1CommandSink_FillMesh                                    (ID2D1CommandSink* this, ID2D1Mesh* mesh, ID2D1Brush* brush) { return ((HRESULT (WINAPI*)(ID2D1CommandSink*, ID2D1Mesh*, ID2D1Brush*))this->v->tbl[20])(this, mesh, brush); }
static inline HRESULT                           ID2D1CommandSink_FillOpacityMask                             (ID2D1CommandSink* this, ID2D1Bitmap* opacityMask, ID2D1Brush* brush, const D2D_RECT_F* destinationRectangle, const D2D_RECT_F* sourceRectangle) { return ((HRESULT (WINAPI*)(ID2D1CommandSink*, ID2D1Bitmap*, ID2D1Brush*, const D2D_RECT_F*, const D2D_RECT_F*))this->v->tbl[21])(this, opacityMask, brush, destinationRectangle, sourceRectangle); }
static inline HRESULT                           ID2D1CommandSink_FillGeometry                                (ID2D1CommandSink* this, ID2D1Geometry* geometry, ID2D1Brush* brush, ID2D1Brush* opacityBrush) { return ((HRESULT (WINAPI*)(ID2D1CommandSink*, ID2D1Geometry*, ID2D1Brush*, ID2D1Brush*))this->v->tbl[22])(this, geometry, brush, opacityBrush); }
static inline HRESULT                           ID2D1CommandSink_FillRectangle                               (ID2D1CommandSink* this, const D2D_RECT_F* rect, ID2D1Brush* brush) { return ((HRESULT (WINAPI*)(ID2D1CommandSink*, const D2D_RECT_F*, ID2D1Brush*))this->v->tbl[23])(this, rect, brush); }
static inline HRESULT                           ID2D1CommandSink_PushAxisAlignedClip                         (ID2D1CommandSink* this, const D2D_RECT_F* clipRect, D2D1_ANTIALIAS_MODE antialiasMode) { return ((HRESULT (WINAPI*)(ID2D1CommandSink*, const D2D_RECT_F*, D2D1_ANTIALIAS_MODE))this->v->tbl[24])(this, clipRect, antialiasMode); }
static inline HRESULT                           ID2D1CommandSink_PushLayer                                   (ID2D1CommandSink* this, const D2D1_LAYER_PARAMETERS1* layerParameters1, ID2D1Layer* layer) { return ((HRESULT (WINAPI*)(ID2D1CommandSink*, const D2D1_LAYER_PARAMETERS1*, ID2D1Layer*))this->v->tbl[25])(this, layerParameters1, layer); }
static inline HRESULT                           ID2D1CommandSink_PopAxisAlignedClip                          (ID2D1CommandSink* this) { return ((HRESULT (WINAPI*)(ID2D1CommandSink*))this->v->tbl[26])(this); }
static inline HRESULT                           ID2D1CommandSink_PopLayer                                    (ID2D1CommandSink* this) { return ((HRESULT (WINAPI*)(ID2D1CommandSink*))this->v->tbl[27])(this); }

static inline HRESULT                           ID2D1CommandSink1_QueryInterface                             (ID2D1CommandSink1* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1CommandSink1*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1CommandSink1_AddRef                                     (ID2D1CommandSink1* this) { return ((UINT32 (WINAPI*)(ID2D1CommandSink1*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1CommandSink1_Release                                    (ID2D1CommandSink1* this) { return ((UINT32 (WINAPI*)(ID2D1CommandSink1*))this->v->tbl[2])(this); }
static inline HRESULT                           ID2D1CommandSink1_BeginDraw                                  (ID2D1CommandSink1* this) { return ((HRESULT (WINAPI*)(ID2D1CommandSink1*))this->v->tbl[3])(this); }
static inline HRESULT                           ID2D1CommandSink1_EndDraw                                    (ID2D1CommandSink1* this) { return ((HRESULT (WINAPI*)(ID2D1CommandSink1*))this->v->tbl[4])(this); }
static inline HRESULT                           ID2D1CommandSink1_SetAntialiasMode                           (ID2D1CommandSink1* this, D2D1_ANTIALIAS_MODE antialiasMode) { return ((HRESULT (WINAPI*)(ID2D1CommandSink1*, D2D1_ANTIALIAS_MODE))this->v->tbl[5])(this, antialiasMode); }
static inline HRESULT                           ID2D1CommandSink1_SetTags                                    (ID2D1CommandSink1* this, UINT64 tag1, UINT64 tag2) { return ((HRESULT (WINAPI*)(ID2D1CommandSink1*, UINT64, UINT64))this->v->tbl[6])(this, tag1, tag2); }
static inline HRESULT                           ID2D1CommandSink1_SetTextAntialiasMode                       (ID2D1CommandSink1* this, D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode) { return ((HRESULT (WINAPI*)(ID2D1CommandSink1*, D2D1_TEXT_ANTIALIAS_MODE))this->v->tbl[7])(this, textAntialiasMode); }
static inline HRESULT                           ID2D1CommandSink1_SetTextRenderingParams                     (ID2D1CommandSink1* this, IDWriteRenderingParams* textRenderingParams) { return ((HRESULT (WINAPI*)(ID2D1CommandSink1*, IDWriteRenderingParams*))this->v->tbl[8])(this, textRenderingParams); }
static inline HRESULT                           ID2D1CommandSink1_SetTransform                               (ID2D1CommandSink1* this, const D2D_MATRIX_3X2_F* transform) { return ((HRESULT (WINAPI*)(ID2D1CommandSink1*, const D2D_MATRIX_3X2_F*))this->v->tbl[9])(this, transform); }
static inline HRESULT                           ID2D1CommandSink1_SetPrimitiveBlend                          (ID2D1CommandSink1* this, D2D1_PRIMITIVE_BLEND primitiveBlend) { return ((HRESULT (WINAPI*)(ID2D1CommandSink1*, D2D1_PRIMITIVE_BLEND))this->v->tbl[10])(this, primitiveBlend); }
static inline HRESULT                           ID2D1CommandSink1_SetUnitMode                                (ID2D1CommandSink1* this, D2D1_UNIT_MODE unitMode) { return ((HRESULT (WINAPI*)(ID2D1CommandSink1*, D2D1_UNIT_MODE))this->v->tbl[11])(this, unitMode); }
static inline HRESULT                           ID2D1CommandSink1_Clear                                      (ID2D1CommandSink1* this, const D2D1_COLOR_F* color) { return ((HRESULT (WINAPI*)(ID2D1CommandSink1*, const D2D1_COLOR_F*))this->v->tbl[12])(this, color); }
static inline HRESULT                           ID2D1CommandSink1_DrawGlyphRun                               (ID2D1CommandSink1* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, const DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription, ID2D1Brush* foregroundBrush, DWRITE_MEASURING_MODE measuringMode) { return ((HRESULT (WINAPI*)(ID2D1CommandSink1*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, const DWRITE_GLYPH_RUN_DESCRIPTION*, ID2D1Brush*, DWRITE_MEASURING_MODE))this->v->tbl[13])(this, baselineOrigin, glyphRun, glyphRunDescription, foregroundBrush, measuringMode); }
static inline HRESULT                           ID2D1CommandSink1_DrawLine                                   (ID2D1CommandSink1* this, D2D_POINT_2F point0, D2D_POINT_2F point1, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { return ((HRESULT (WINAPI*)(ID2D1CommandSink1*, D2D_POINT_2F, D2D_POINT_2F, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[14])(this, point0, point1, brush, strokeWidth, strokeStyle); }
static inline HRESULT                           ID2D1CommandSink1_DrawGeometry                               (ID2D1CommandSink1* this, ID2D1Geometry* geometry, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { return ((HRESULT (WINAPI*)(ID2D1CommandSink1*, ID2D1Geometry*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[15])(this, geometry, brush, strokeWidth, strokeStyle); }
static inline HRESULT                           ID2D1CommandSink1_DrawRectangle                              (ID2D1CommandSink1* this, const D2D_RECT_F* rect, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { return ((HRESULT (WINAPI*)(ID2D1CommandSink1*, const D2D_RECT_F*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[16])(this, rect, brush, strokeWidth, strokeStyle); }
static inline HRESULT                           ID2D1CommandSink1_DrawBitmap                                 (ID2D1CommandSink1* this, ID2D1Bitmap* bitmap, const D2D_RECT_F* destinationRectangle, FLOAT opacity, D2D1_INTERPOLATION_MODE interpolationMode, const D2D_RECT_F* sourceRectangle, const D2D_MATRIX_4X4_F* perspectiveTransform) { return ((HRESULT (WINAPI*)(ID2D1CommandSink1*, ID2D1Bitmap*, const D2D_RECT_F*, FLOAT, D2D1_INTERPOLATION_MODE, const D2D_RECT_F*, const D2D_MATRIX_4X4_F*))this->v->tbl[17])(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle, perspectiveTransform); }
static inline HRESULT                           ID2D1CommandSink1_DrawImage                                  (ID2D1CommandSink1* this, ID2D1Image* image, const D2D_POINT_2F* targetOffset, const D2D_RECT_F* imageRectangle, D2D1_INTERPOLATION_MODE interpolationMode, D2D1_COMPOSITE_MODE compositeMode) { return ((HRESULT (WINAPI*)(ID2D1CommandSink1*, ID2D1Image*, const D2D_POINT_2F*, const D2D_RECT_F*, D2D1_INTERPOLATION_MODE, D2D1_COMPOSITE_MODE))this->v->tbl[18])(this, image, targetOffset, imageRectangle, interpolationMode, compositeMode); }
static inline HRESULT                           ID2D1CommandSink1_DrawGdiMetafile                            (ID2D1CommandSink1* this, ID2D1GdiMetafile* gdiMetafile, const D2D_POINT_2F* targetOffset) { return ((HRESULT (WINAPI*)(ID2D1CommandSink1*, ID2D1GdiMetafile*, const D2D_POINT_2F*))this->v->tbl[19])(this, gdiMetafile, targetOffset); }
static inline HRESULT                           ID2D1CommandSink1_FillMesh                                   (ID2D1CommandSink1* this, ID2D1Mesh* mesh, ID2D1Brush* brush) { return ((HRESULT (WINAPI*)(ID2D1CommandSink1*, ID2D1Mesh*, ID2D1Brush*))this->v->tbl[20])(this, mesh, brush); }
static inline HRESULT                           ID2D1CommandSink1_FillOpacityMask                            (ID2D1CommandSink1* this, ID2D1Bitmap* opacityMask, ID2D1Brush* brush, const D2D_RECT_F* destinationRectangle, const D2D_RECT_F* sourceRectangle) { return ((HRESULT (WINAPI*)(ID2D1CommandSink1*, ID2D1Bitmap*, ID2D1Brush*, const D2D_RECT_F*, const D2D_RECT_F*))this->v->tbl[21])(this, opacityMask, brush, destinationRectangle, sourceRectangle); }
static inline HRESULT                           ID2D1CommandSink1_FillGeometry                               (ID2D1CommandSink1* this, ID2D1Geometry* geometry, ID2D1Brush* brush, ID2D1Brush* opacityBrush) { return ((HRESULT (WINAPI*)(ID2D1CommandSink1*, ID2D1Geometry*, ID2D1Brush*, ID2D1Brush*))this->v->tbl[22])(this, geometry, brush, opacityBrush); }
static inline HRESULT                           ID2D1CommandSink1_FillRectangle                              (ID2D1CommandSink1* this, const D2D_RECT_F* rect, ID2D1Brush* brush) { return ((HRESULT (WINAPI*)(ID2D1CommandSink1*, const D2D_RECT_F*, ID2D1Brush*))this->v->tbl[23])(this, rect, brush); }
static inline HRESULT                           ID2D1CommandSink1_PushAxisAlignedClip                        (ID2D1CommandSink1* this, const D2D_RECT_F* clipRect, D2D1_ANTIALIAS_MODE antialiasMode) { return ((HRESULT (WINAPI*)(ID2D1CommandSink1*, const D2D_RECT_F*, D2D1_ANTIALIAS_MODE))this->v->tbl[24])(this, clipRect, antialiasMode); }
static inline HRESULT                           ID2D1CommandSink1_PushLayer                                  (ID2D1CommandSink1* this, const D2D1_LAYER_PARAMETERS1* layerParameters1, ID2D1Layer* layer) { return ((HRESULT (WINAPI*)(ID2D1CommandSink1*, const D2D1_LAYER_PARAMETERS1*, ID2D1Layer*))this->v->tbl[25])(this, layerParameters1, layer); }
static inline HRESULT                           ID2D1CommandSink1_PopAxisAlignedClip                         (ID2D1CommandSink1* this) { return ((HRESULT (WINAPI*)(ID2D1CommandSink1*))this->v->tbl[26])(this); }
static inline HRESULT                           ID2D1CommandSink1_PopLayer                                   (ID2D1CommandSink1* this) { return ((HRESULT (WINAPI*)(ID2D1CommandSink1*))this->v->tbl[27])(this); }
static inline HRESULT                           ID2D1CommandSink1_SetPrimitiveBlend1                         (ID2D1CommandSink1* this, D2D1_PRIMITIVE_BLEND primitiveBlend) { return ((HRESULT (WINAPI*)(ID2D1CommandSink1*, D2D1_PRIMITIVE_BLEND))this->v->tbl[28])(this, primitiveBlend); }

static inline HRESULT                           ID2D1CommandSink2_QueryInterface                             (ID2D1CommandSink2* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1CommandSink2*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1CommandSink2_AddRef                                     (ID2D1CommandSink2* this) { return ((UINT32 (WINAPI*)(ID2D1CommandSink2*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1CommandSink2_Release                                    (ID2D1CommandSink2* this) { return ((UINT32 (WINAPI*)(ID2D1CommandSink2*))this->v->tbl[2])(this); }
static inline HRESULT                           ID2D1CommandSink2_BeginDraw                                  (ID2D1CommandSink2* this) { return ((HRESULT (WINAPI*)(ID2D1CommandSink2*))this->v->tbl[3])(this); }
static inline HRESULT                           ID2D1CommandSink2_EndDraw                                    (ID2D1CommandSink2* this) { return ((HRESULT (WINAPI*)(ID2D1CommandSink2*))this->v->tbl[4])(this); }
static inline HRESULT                           ID2D1CommandSink2_SetAntialiasMode                           (ID2D1CommandSink2* this, D2D1_ANTIALIAS_MODE antialiasMode) { return ((HRESULT (WINAPI*)(ID2D1CommandSink2*, D2D1_ANTIALIAS_MODE))this->v->tbl[5])(this, antialiasMode); }
static inline HRESULT                           ID2D1CommandSink2_SetTags                                    (ID2D1CommandSink2* this, UINT64 tag1, UINT64 tag2) { return ((HRESULT (WINAPI*)(ID2D1CommandSink2*, UINT64, UINT64))this->v->tbl[6])(this, tag1, tag2); }
static inline HRESULT                           ID2D1CommandSink2_SetTextAntialiasMode                       (ID2D1CommandSink2* this, D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode) { return ((HRESULT (WINAPI*)(ID2D1CommandSink2*, D2D1_TEXT_ANTIALIAS_MODE))this->v->tbl[7])(this, textAntialiasMode); }
static inline HRESULT                           ID2D1CommandSink2_SetTextRenderingParams                     (ID2D1CommandSink2* this, IDWriteRenderingParams* textRenderingParams) { return ((HRESULT (WINAPI*)(ID2D1CommandSink2*, IDWriteRenderingParams*))this->v->tbl[8])(this, textRenderingParams); }
static inline HRESULT                           ID2D1CommandSink2_SetTransform                               (ID2D1CommandSink2* this, const D2D_MATRIX_3X2_F* transform) { return ((HRESULT (WINAPI*)(ID2D1CommandSink2*, const D2D_MATRIX_3X2_F*))this->v->tbl[9])(this, transform); }
static inline HRESULT                           ID2D1CommandSink2_SetPrimitiveBlend                          (ID2D1CommandSink2* this, D2D1_PRIMITIVE_BLEND primitiveBlend) { return ((HRESULT (WINAPI*)(ID2D1CommandSink2*, D2D1_PRIMITIVE_BLEND))this->v->tbl[10])(this, primitiveBlend); }
static inline HRESULT                           ID2D1CommandSink2_SetUnitMode                                (ID2D1CommandSink2* this, D2D1_UNIT_MODE unitMode) { return ((HRESULT (WINAPI*)(ID2D1CommandSink2*, D2D1_UNIT_MODE))this->v->tbl[11])(this, unitMode); }
static inline HRESULT                           ID2D1CommandSink2_Clear                                      (ID2D1CommandSink2* this, const D2D1_COLOR_F* color) { return ((HRESULT (WINAPI*)(ID2D1CommandSink2*, const D2D1_COLOR_F*))this->v->tbl[12])(this, color); }
static inline HRESULT                           ID2D1CommandSink2_DrawGlyphRun                               (ID2D1CommandSink2* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, const DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription, ID2D1Brush* foregroundBrush, DWRITE_MEASURING_MODE measuringMode) { return ((HRESULT (WINAPI*)(ID2D1CommandSink2*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, const DWRITE_GLYPH_RUN_DESCRIPTION*, ID2D1Brush*, DWRITE_MEASURING_MODE))this->v->tbl[13])(this, baselineOrigin, glyphRun, glyphRunDescription, foregroundBrush, measuringMode); }
static inline HRESULT                           ID2D1CommandSink2_DrawLine                                   (ID2D1CommandSink2* this, D2D_POINT_2F point0, D2D_POINT_2F point1, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { return ((HRESULT (WINAPI*)(ID2D1CommandSink2*, D2D_POINT_2F, D2D_POINT_2F, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[14])(this, point0, point1, brush, strokeWidth, strokeStyle); }
static inline HRESULT                           ID2D1CommandSink2_DrawGeometry                               (ID2D1CommandSink2* this, ID2D1Geometry* geometry, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { return ((HRESULT (WINAPI*)(ID2D1CommandSink2*, ID2D1Geometry*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[15])(this, geometry, brush, strokeWidth, strokeStyle); }
static inline HRESULT                           ID2D1CommandSink2_DrawRectangle                              (ID2D1CommandSink2* this, const D2D_RECT_F* rect, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { return ((HRESULT (WINAPI*)(ID2D1CommandSink2*, const D2D_RECT_F*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[16])(this, rect, brush, strokeWidth, strokeStyle); }
static inline HRESULT                           ID2D1CommandSink2_DrawBitmap                                 (ID2D1CommandSink2* this, ID2D1Bitmap* bitmap, const D2D_RECT_F* destinationRectangle, FLOAT opacity, D2D1_INTERPOLATION_MODE interpolationMode, const D2D_RECT_F* sourceRectangle, const D2D_MATRIX_4X4_F* perspectiveTransform) { return ((HRESULT (WINAPI*)(ID2D1CommandSink2*, ID2D1Bitmap*, const D2D_RECT_F*, FLOAT, D2D1_INTERPOLATION_MODE, const D2D_RECT_F*, const D2D_MATRIX_4X4_F*))this->v->tbl[17])(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle, perspectiveTransform); }
static inline HRESULT                           ID2D1CommandSink2_DrawImage                                  (ID2D1CommandSink2* this, ID2D1Image* image, const D2D_POINT_2F* targetOffset, const D2D_RECT_F* imageRectangle, D2D1_INTERPOLATION_MODE interpolationMode, D2D1_COMPOSITE_MODE compositeMode) { return ((HRESULT (WINAPI*)(ID2D1CommandSink2*, ID2D1Image*, const D2D_POINT_2F*, const D2D_RECT_F*, D2D1_INTERPOLATION_MODE, D2D1_COMPOSITE_MODE))this->v->tbl[18])(this, image, targetOffset, imageRectangle, interpolationMode, compositeMode); }
static inline HRESULT                           ID2D1CommandSink2_DrawGdiMetafile                            (ID2D1CommandSink2* this, ID2D1GdiMetafile* gdiMetafile, const D2D_POINT_2F* targetOffset) { return ((HRESULT (WINAPI*)(ID2D1CommandSink2*, ID2D1GdiMetafile*, const D2D_POINT_2F*))this->v->tbl[19])(this, gdiMetafile, targetOffset); }
static inline HRESULT                           ID2D1CommandSink2_FillMesh                                   (ID2D1CommandSink2* this, ID2D1Mesh* mesh, ID2D1Brush* brush) { return ((HRESULT (WINAPI*)(ID2D1CommandSink2*, ID2D1Mesh*, ID2D1Brush*))this->v->tbl[20])(this, mesh, brush); }
static inline HRESULT                           ID2D1CommandSink2_FillOpacityMask                            (ID2D1CommandSink2* this, ID2D1Bitmap* opacityMask, ID2D1Brush* brush, const D2D_RECT_F* destinationRectangle, const D2D_RECT_F* sourceRectangle) { return ((HRESULT (WINAPI*)(ID2D1CommandSink2*, ID2D1Bitmap*, ID2D1Brush*, const D2D_RECT_F*, const D2D_RECT_F*))this->v->tbl[21])(this, opacityMask, brush, destinationRectangle, sourceRectangle); }
static inline HRESULT                           ID2D1CommandSink2_FillGeometry                               (ID2D1CommandSink2* this, ID2D1Geometry* geometry, ID2D1Brush* brush, ID2D1Brush* opacityBrush) { return ((HRESULT (WINAPI*)(ID2D1CommandSink2*, ID2D1Geometry*, ID2D1Brush*, ID2D1Brush*))this->v->tbl[22])(this, geometry, brush, opacityBrush); }
static inline HRESULT                           ID2D1CommandSink2_FillRectangle                              (ID2D1CommandSink2* this, const D2D_RECT_F* rect, ID2D1Brush* brush) { return ((HRESULT (WINAPI*)(ID2D1CommandSink2*, const D2D_RECT_F*, ID2D1Brush*))this->v->tbl[23])(this, rect, brush); }
static inline HRESULT                           ID2D1CommandSink2_PushAxisAlignedClip                        (ID2D1CommandSink2* this, const D2D_RECT_F* clipRect, D2D1_ANTIALIAS_MODE antialiasMode) { return ((HRESULT (WINAPI*)(ID2D1CommandSink2*, const D2D_RECT_F*, D2D1_ANTIALIAS_MODE))this->v->tbl[24])(this, clipRect, antialiasMode); }
static inline HRESULT                           ID2D1CommandSink2_PushLayer                                  (ID2D1CommandSink2* this, const D2D1_LAYER_PARAMETERS1* layerParameters1, ID2D1Layer* layer) { return ((HRESULT (WINAPI*)(ID2D1CommandSink2*, const D2D1_LAYER_PARAMETERS1*, ID2D1Layer*))this->v->tbl[25])(this, layerParameters1, layer); }
static inline HRESULT                           ID2D1CommandSink2_PopAxisAlignedClip                         (ID2D1CommandSink2* this) { return ((HRESULT (WINAPI*)(ID2D1CommandSink2*))this->v->tbl[26])(this); }
static inline HRESULT                           ID2D1CommandSink2_PopLayer                                   (ID2D1CommandSink2* this) { return ((HRESULT (WINAPI*)(ID2D1CommandSink2*))this->v->tbl[27])(this); }
static inline HRESULT                           ID2D1CommandSink2_SetPrimitiveBlend1                         (ID2D1CommandSink2* this, D2D1_PRIMITIVE_BLEND primitiveBlend) { return ((HRESULT (WINAPI*)(ID2D1CommandSink2*, D2D1_PRIMITIVE_BLEND))this->v->tbl[28])(this, primitiveBlend); }
static inline HRESULT                           ID2D1CommandSink2_DrawInk                                    (ID2D1CommandSink2* this, ID2D1Ink* ink, ID2D1Brush* brush, ID2D1InkStyle* inkStyle) { return ((HRESULT (WINAPI*)(ID2D1CommandSink2*, ID2D1Ink*, ID2D1Brush*, ID2D1InkStyle*))this->v->tbl[29])(this, ink, brush, inkStyle); }
static inline HRESULT                           ID2D1CommandSink2_DrawGradientMesh                           (ID2D1CommandSink2* this, ID2D1GradientMesh* gradientMesh) { return ((HRESULT (WINAPI*)(ID2D1CommandSink2*, ID2D1GradientMesh*))this->v->tbl[30])(this, gradientMesh); }
static inline HRESULT                           ID2D1CommandSink2_DrawGdiMetafile1                           (ID2D1CommandSink2* this, ID2D1GdiMetafile* gdiMetafile, const D2D_RECT_F* destinationRectangle, const D2D_RECT_F* sourceRectangle) { return ((HRESULT (WINAPI*)(ID2D1CommandSink2*, ID2D1GdiMetafile*, const D2D_RECT_F*, const D2D_RECT_F*))this->v->tbl[31])(this, gdiMetafile, destinationRectangle, sourceRectangle); }

static inline HRESULT                           ID2D1CommandSink3_QueryInterface                             (ID2D1CommandSink3* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1CommandSink3*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1CommandSink3_AddRef                                     (ID2D1CommandSink3* this) { return ((UINT32 (WINAPI*)(ID2D1CommandSink3*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1CommandSink3_Release                                    (ID2D1CommandSink3* this) { return ((UINT32 (WINAPI*)(ID2D1CommandSink3*))this->v->tbl[2])(this); }
static inline HRESULT                           ID2D1CommandSink3_BeginDraw                                  (ID2D1CommandSink3* this) { return ((HRESULT (WINAPI*)(ID2D1CommandSink3*))this->v->tbl[3])(this); }
static inline HRESULT                           ID2D1CommandSink3_EndDraw                                    (ID2D1CommandSink3* this) { return ((HRESULT (WINAPI*)(ID2D1CommandSink3*))this->v->tbl[4])(this); }
static inline HRESULT                           ID2D1CommandSink3_SetAntialiasMode                           (ID2D1CommandSink3* this, D2D1_ANTIALIAS_MODE antialiasMode) { return ((HRESULT (WINAPI*)(ID2D1CommandSink3*, D2D1_ANTIALIAS_MODE))this->v->tbl[5])(this, antialiasMode); }
static inline HRESULT                           ID2D1CommandSink3_SetTags                                    (ID2D1CommandSink3* this, UINT64 tag1, UINT64 tag2) { return ((HRESULT (WINAPI*)(ID2D1CommandSink3*, UINT64, UINT64))this->v->tbl[6])(this, tag1, tag2); }
static inline HRESULT                           ID2D1CommandSink3_SetTextAntialiasMode                       (ID2D1CommandSink3* this, D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode) { return ((HRESULT (WINAPI*)(ID2D1CommandSink3*, D2D1_TEXT_ANTIALIAS_MODE))this->v->tbl[7])(this, textAntialiasMode); }
static inline HRESULT                           ID2D1CommandSink3_SetTextRenderingParams                     (ID2D1CommandSink3* this, IDWriteRenderingParams* textRenderingParams) { return ((HRESULT (WINAPI*)(ID2D1CommandSink3*, IDWriteRenderingParams*))this->v->tbl[8])(this, textRenderingParams); }
static inline HRESULT                           ID2D1CommandSink3_SetTransform                               (ID2D1CommandSink3* this, const D2D_MATRIX_3X2_F* transform) { return ((HRESULT (WINAPI*)(ID2D1CommandSink3*, const D2D_MATRIX_3X2_F*))this->v->tbl[9])(this, transform); }
static inline HRESULT                           ID2D1CommandSink3_SetPrimitiveBlend                          (ID2D1CommandSink3* this, D2D1_PRIMITIVE_BLEND primitiveBlend) { return ((HRESULT (WINAPI*)(ID2D1CommandSink3*, D2D1_PRIMITIVE_BLEND))this->v->tbl[10])(this, primitiveBlend); }
static inline HRESULT                           ID2D1CommandSink3_SetUnitMode                                (ID2D1CommandSink3* this, D2D1_UNIT_MODE unitMode) { return ((HRESULT (WINAPI*)(ID2D1CommandSink3*, D2D1_UNIT_MODE))this->v->tbl[11])(this, unitMode); }
static inline HRESULT                           ID2D1CommandSink3_Clear                                      (ID2D1CommandSink3* this, const D2D1_COLOR_F* color) { return ((HRESULT (WINAPI*)(ID2D1CommandSink3*, const D2D1_COLOR_F*))this->v->tbl[12])(this, color); }
static inline HRESULT                           ID2D1CommandSink3_DrawGlyphRun                               (ID2D1CommandSink3* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, const DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription, ID2D1Brush* foregroundBrush, DWRITE_MEASURING_MODE measuringMode) { return ((HRESULT (WINAPI*)(ID2D1CommandSink3*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, const DWRITE_GLYPH_RUN_DESCRIPTION*, ID2D1Brush*, DWRITE_MEASURING_MODE))this->v->tbl[13])(this, baselineOrigin, glyphRun, glyphRunDescription, foregroundBrush, measuringMode); }
static inline HRESULT                           ID2D1CommandSink3_DrawLine                                   (ID2D1CommandSink3* this, D2D_POINT_2F point0, D2D_POINT_2F point1, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { return ((HRESULT (WINAPI*)(ID2D1CommandSink3*, D2D_POINT_2F, D2D_POINT_2F, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[14])(this, point0, point1, brush, strokeWidth, strokeStyle); }
static inline HRESULT                           ID2D1CommandSink3_DrawGeometry                               (ID2D1CommandSink3* this, ID2D1Geometry* geometry, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { return ((HRESULT (WINAPI*)(ID2D1CommandSink3*, ID2D1Geometry*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[15])(this, geometry, brush, strokeWidth, strokeStyle); }
static inline HRESULT                           ID2D1CommandSink3_DrawRectangle                              (ID2D1CommandSink3* this, const D2D_RECT_F* rect, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { return ((HRESULT (WINAPI*)(ID2D1CommandSink3*, const D2D_RECT_F*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[16])(this, rect, brush, strokeWidth, strokeStyle); }
static inline HRESULT                           ID2D1CommandSink3_DrawBitmap                                 (ID2D1CommandSink3* this, ID2D1Bitmap* bitmap, const D2D_RECT_F* destinationRectangle, FLOAT opacity, D2D1_INTERPOLATION_MODE interpolationMode, const D2D_RECT_F* sourceRectangle, const D2D_MATRIX_4X4_F* perspectiveTransform) { return ((HRESULT (WINAPI*)(ID2D1CommandSink3*, ID2D1Bitmap*, const D2D_RECT_F*, FLOAT, D2D1_INTERPOLATION_MODE, const D2D_RECT_F*, const D2D_MATRIX_4X4_F*))this->v->tbl[17])(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle, perspectiveTransform); }
static inline HRESULT                           ID2D1CommandSink3_DrawImage                                  (ID2D1CommandSink3* this, ID2D1Image* image, const D2D_POINT_2F* targetOffset, const D2D_RECT_F* imageRectangle, D2D1_INTERPOLATION_MODE interpolationMode, D2D1_COMPOSITE_MODE compositeMode) { return ((HRESULT (WINAPI*)(ID2D1CommandSink3*, ID2D1Image*, const D2D_POINT_2F*, const D2D_RECT_F*, D2D1_INTERPOLATION_MODE, D2D1_COMPOSITE_MODE))this->v->tbl[18])(this, image, targetOffset, imageRectangle, interpolationMode, compositeMode); }
static inline HRESULT                           ID2D1CommandSink3_DrawGdiMetafile                            (ID2D1CommandSink3* this, ID2D1GdiMetafile* gdiMetafile, const D2D_POINT_2F* targetOffset) { return ((HRESULT (WINAPI*)(ID2D1CommandSink3*, ID2D1GdiMetafile*, const D2D_POINT_2F*))this->v->tbl[19])(this, gdiMetafile, targetOffset); }
static inline HRESULT                           ID2D1CommandSink3_FillMesh                                   (ID2D1CommandSink3* this, ID2D1Mesh* mesh, ID2D1Brush* brush) { return ((HRESULT (WINAPI*)(ID2D1CommandSink3*, ID2D1Mesh*, ID2D1Brush*))this->v->tbl[20])(this, mesh, brush); }
static inline HRESULT                           ID2D1CommandSink3_FillOpacityMask                            (ID2D1CommandSink3* this, ID2D1Bitmap* opacityMask, ID2D1Brush* brush, const D2D_RECT_F* destinationRectangle, const D2D_RECT_F* sourceRectangle) { return ((HRESULT (WINAPI*)(ID2D1CommandSink3*, ID2D1Bitmap*, ID2D1Brush*, const D2D_RECT_F*, const D2D_RECT_F*))this->v->tbl[21])(this, opacityMask, brush, destinationRectangle, sourceRectangle); }
static inline HRESULT                           ID2D1CommandSink3_FillGeometry                               (ID2D1CommandSink3* this, ID2D1Geometry* geometry, ID2D1Brush* brush, ID2D1Brush* opacityBrush) { return ((HRESULT (WINAPI*)(ID2D1CommandSink3*, ID2D1Geometry*, ID2D1Brush*, ID2D1Brush*))this->v->tbl[22])(this, geometry, brush, opacityBrush); }
static inline HRESULT                           ID2D1CommandSink3_FillRectangle                              (ID2D1CommandSink3* this, const D2D_RECT_F* rect, ID2D1Brush* brush) { return ((HRESULT (WINAPI*)(ID2D1CommandSink3*, const D2D_RECT_F*, ID2D1Brush*))this->v->tbl[23])(this, rect, brush); }
static inline HRESULT                           ID2D1CommandSink3_PushAxisAlignedClip                        (ID2D1CommandSink3* this, const D2D_RECT_F* clipRect, D2D1_ANTIALIAS_MODE antialiasMode) { return ((HRESULT (WINAPI*)(ID2D1CommandSink3*, const D2D_RECT_F*, D2D1_ANTIALIAS_MODE))this->v->tbl[24])(this, clipRect, antialiasMode); }
static inline HRESULT                           ID2D1CommandSink3_PushLayer                                  (ID2D1CommandSink3* this, const D2D1_LAYER_PARAMETERS1* layerParameters1, ID2D1Layer* layer) { return ((HRESULT (WINAPI*)(ID2D1CommandSink3*, const D2D1_LAYER_PARAMETERS1*, ID2D1Layer*))this->v->tbl[25])(this, layerParameters1, layer); }
static inline HRESULT                           ID2D1CommandSink3_PopAxisAlignedClip                         (ID2D1CommandSink3* this) { return ((HRESULT (WINAPI*)(ID2D1CommandSink3*))this->v->tbl[26])(this); }
static inline HRESULT                           ID2D1CommandSink3_PopLayer                                   (ID2D1CommandSink3* this) { return ((HRESULT (WINAPI*)(ID2D1CommandSink3*))this->v->tbl[27])(this); }
static inline HRESULT                           ID2D1CommandSink3_SetPrimitiveBlend1                         (ID2D1CommandSink3* this, D2D1_PRIMITIVE_BLEND primitiveBlend) { return ((HRESULT (WINAPI*)(ID2D1CommandSink3*, D2D1_PRIMITIVE_BLEND))this->v->tbl[28])(this, primitiveBlend); }
static inline HRESULT                           ID2D1CommandSink3_DrawInk                                    (ID2D1CommandSink3* this, ID2D1Ink* ink, ID2D1Brush* brush, ID2D1InkStyle* inkStyle) { return ((HRESULT (WINAPI*)(ID2D1CommandSink3*, ID2D1Ink*, ID2D1Brush*, ID2D1InkStyle*))this->v->tbl[29])(this, ink, brush, inkStyle); }
static inline HRESULT                           ID2D1CommandSink3_DrawGradientMesh                           (ID2D1CommandSink3* this, ID2D1GradientMesh* gradientMesh) { return ((HRESULT (WINAPI*)(ID2D1CommandSink3*, ID2D1GradientMesh*))this->v->tbl[30])(this, gradientMesh); }
static inline HRESULT                           ID2D1CommandSink3_DrawGdiMetafile1                           (ID2D1CommandSink3* this, ID2D1GdiMetafile* gdiMetafile, const D2D_RECT_F* destinationRectangle, const D2D_RECT_F* sourceRectangle) { return ((HRESULT (WINAPI*)(ID2D1CommandSink3*, ID2D1GdiMetafile*, const D2D_RECT_F*, const D2D_RECT_F*))this->v->tbl[31])(this, gdiMetafile, destinationRectangle, sourceRectangle); }
static inline HRESULT                           ID2D1CommandSink3_DrawSpriteBatch                            (ID2D1CommandSink3* this, ID2D1SpriteBatch* spriteBatch, UINT32 startIndex, UINT32 spriteCount, ID2D1Bitmap* bitmap, D2D1_BITMAP_INTERPOLATION_MODE interpolationMode, D2D1_SPRITE_OPTIONS spriteOptions) { return ((HRESULT (WINAPI*)(ID2D1CommandSink3*, ID2D1SpriteBatch*, UINT32, UINT32, ID2D1Bitmap*, D2D1_BITMAP_INTERPOLATION_MODE, D2D1_SPRITE_OPTIONS))this->v->tbl[32])(this, spriteBatch, startIndex, spriteCount, bitmap, interpolationMode, spriteOptions); }

static inline HRESULT                           ID2D1CommandSink4_QueryInterface                             (ID2D1CommandSink4* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1CommandSink4*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1CommandSink4_AddRef                                     (ID2D1CommandSink4* this) { return ((UINT32 (WINAPI*)(ID2D1CommandSink4*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1CommandSink4_Release                                    (ID2D1CommandSink4* this) { return ((UINT32 (WINAPI*)(ID2D1CommandSink4*))this->v->tbl[2])(this); }
static inline HRESULT                           ID2D1CommandSink4_BeginDraw                                  (ID2D1CommandSink4* this) { return ((HRESULT (WINAPI*)(ID2D1CommandSink4*))this->v->tbl[3])(this); }
static inline HRESULT                           ID2D1CommandSink4_EndDraw                                    (ID2D1CommandSink4* this) { return ((HRESULT (WINAPI*)(ID2D1CommandSink4*))this->v->tbl[4])(this); }
static inline HRESULT                           ID2D1CommandSink4_SetAntialiasMode                           (ID2D1CommandSink4* this, D2D1_ANTIALIAS_MODE antialiasMode) { return ((HRESULT (WINAPI*)(ID2D1CommandSink4*, D2D1_ANTIALIAS_MODE))this->v->tbl[5])(this, antialiasMode); }
static inline HRESULT                           ID2D1CommandSink4_SetTags                                    (ID2D1CommandSink4* this, UINT64 tag1, UINT64 tag2) { return ((HRESULT (WINAPI*)(ID2D1CommandSink4*, UINT64, UINT64))this->v->tbl[6])(this, tag1, tag2); }
static inline HRESULT                           ID2D1CommandSink4_SetTextAntialiasMode                       (ID2D1CommandSink4* this, D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode) { return ((HRESULT (WINAPI*)(ID2D1CommandSink4*, D2D1_TEXT_ANTIALIAS_MODE))this->v->tbl[7])(this, textAntialiasMode); }
static inline HRESULT                           ID2D1CommandSink4_SetTextRenderingParams                     (ID2D1CommandSink4* this, IDWriteRenderingParams* textRenderingParams) { return ((HRESULT (WINAPI*)(ID2D1CommandSink4*, IDWriteRenderingParams*))this->v->tbl[8])(this, textRenderingParams); }
static inline HRESULT                           ID2D1CommandSink4_SetTransform                               (ID2D1CommandSink4* this, const D2D_MATRIX_3X2_F* transform) { return ((HRESULT (WINAPI*)(ID2D1CommandSink4*, const D2D_MATRIX_3X2_F*))this->v->tbl[9])(this, transform); }
static inline HRESULT                           ID2D1CommandSink4_SetPrimitiveBlend                          (ID2D1CommandSink4* this, D2D1_PRIMITIVE_BLEND primitiveBlend) { return ((HRESULT (WINAPI*)(ID2D1CommandSink4*, D2D1_PRIMITIVE_BLEND))this->v->tbl[10])(this, primitiveBlend); }
static inline HRESULT                           ID2D1CommandSink4_SetUnitMode                                (ID2D1CommandSink4* this, D2D1_UNIT_MODE unitMode) { return ((HRESULT (WINAPI*)(ID2D1CommandSink4*, D2D1_UNIT_MODE))this->v->tbl[11])(this, unitMode); }
static inline HRESULT                           ID2D1CommandSink4_Clear                                      (ID2D1CommandSink4* this, const D2D1_COLOR_F* color) { return ((HRESULT (WINAPI*)(ID2D1CommandSink4*, const D2D1_COLOR_F*))this->v->tbl[12])(this, color); }
static inline HRESULT                           ID2D1CommandSink4_DrawGlyphRun                               (ID2D1CommandSink4* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, const DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription, ID2D1Brush* foregroundBrush, DWRITE_MEASURING_MODE measuringMode) { return ((HRESULT (WINAPI*)(ID2D1CommandSink4*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, const DWRITE_GLYPH_RUN_DESCRIPTION*, ID2D1Brush*, DWRITE_MEASURING_MODE))this->v->tbl[13])(this, baselineOrigin, glyphRun, glyphRunDescription, foregroundBrush, measuringMode); }
static inline HRESULT                           ID2D1CommandSink4_DrawLine                                   (ID2D1CommandSink4* this, D2D_POINT_2F point0, D2D_POINT_2F point1, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { return ((HRESULT (WINAPI*)(ID2D1CommandSink4*, D2D_POINT_2F, D2D_POINT_2F, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[14])(this, point0, point1, brush, strokeWidth, strokeStyle); }
static inline HRESULT                           ID2D1CommandSink4_DrawGeometry                               (ID2D1CommandSink4* this, ID2D1Geometry* geometry, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { return ((HRESULT (WINAPI*)(ID2D1CommandSink4*, ID2D1Geometry*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[15])(this, geometry, brush, strokeWidth, strokeStyle); }
static inline HRESULT                           ID2D1CommandSink4_DrawRectangle                              (ID2D1CommandSink4* this, const D2D_RECT_F* rect, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { return ((HRESULT (WINAPI*)(ID2D1CommandSink4*, const D2D_RECT_F*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[16])(this, rect, brush, strokeWidth, strokeStyle); }
static inline HRESULT                           ID2D1CommandSink4_DrawBitmap                                 (ID2D1CommandSink4* this, ID2D1Bitmap* bitmap, const D2D_RECT_F* destinationRectangle, FLOAT opacity, D2D1_INTERPOLATION_MODE interpolationMode, const D2D_RECT_F* sourceRectangle, const D2D_MATRIX_4X4_F* perspectiveTransform) { return ((HRESULT (WINAPI*)(ID2D1CommandSink4*, ID2D1Bitmap*, const D2D_RECT_F*, FLOAT, D2D1_INTERPOLATION_MODE, const D2D_RECT_F*, const D2D_MATRIX_4X4_F*))this->v->tbl[17])(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle, perspectiveTransform); }
static inline HRESULT                           ID2D1CommandSink4_DrawImage                                  (ID2D1CommandSink4* this, ID2D1Image* image, const D2D_POINT_2F* targetOffset, const D2D_RECT_F* imageRectangle, D2D1_INTERPOLATION_MODE interpolationMode, D2D1_COMPOSITE_MODE compositeMode) { return ((HRESULT (WINAPI*)(ID2D1CommandSink4*, ID2D1Image*, const D2D_POINT_2F*, const D2D_RECT_F*, D2D1_INTERPOLATION_MODE, D2D1_COMPOSITE_MODE))this->v->tbl[18])(this, image, targetOffset, imageRectangle, interpolationMode, compositeMode); }
static inline HRESULT                           ID2D1CommandSink4_DrawGdiMetafile                            (ID2D1CommandSink4* this, ID2D1GdiMetafile* gdiMetafile, const D2D_POINT_2F* targetOffset) { return ((HRESULT (WINAPI*)(ID2D1CommandSink4*, ID2D1GdiMetafile*, const D2D_POINT_2F*))this->v->tbl[19])(this, gdiMetafile, targetOffset); }
static inline HRESULT                           ID2D1CommandSink4_FillMesh                                   (ID2D1CommandSink4* this, ID2D1Mesh* mesh, ID2D1Brush* brush) { return ((HRESULT (WINAPI*)(ID2D1CommandSink4*, ID2D1Mesh*, ID2D1Brush*))this->v->tbl[20])(this, mesh, brush); }
static inline HRESULT                           ID2D1CommandSink4_FillOpacityMask                            (ID2D1CommandSink4* this, ID2D1Bitmap* opacityMask, ID2D1Brush* brush, const D2D_RECT_F* destinationRectangle, const D2D_RECT_F* sourceRectangle) { return ((HRESULT (WINAPI*)(ID2D1CommandSink4*, ID2D1Bitmap*, ID2D1Brush*, const D2D_RECT_F*, const D2D_RECT_F*))this->v->tbl[21])(this, opacityMask, brush, destinationRectangle, sourceRectangle); }
static inline HRESULT                           ID2D1CommandSink4_FillGeometry                               (ID2D1CommandSink4* this, ID2D1Geometry* geometry, ID2D1Brush* brush, ID2D1Brush* opacityBrush) { return ((HRESULT (WINAPI*)(ID2D1CommandSink4*, ID2D1Geometry*, ID2D1Brush*, ID2D1Brush*))this->v->tbl[22])(this, geometry, brush, opacityBrush); }
static inline HRESULT                           ID2D1CommandSink4_FillRectangle                              (ID2D1CommandSink4* this, const D2D_RECT_F* rect, ID2D1Brush* brush) { return ((HRESULT (WINAPI*)(ID2D1CommandSink4*, const D2D_RECT_F*, ID2D1Brush*))this->v->tbl[23])(this, rect, brush); }
static inline HRESULT                           ID2D1CommandSink4_PushAxisAlignedClip                        (ID2D1CommandSink4* this, const D2D_RECT_F* clipRect, D2D1_ANTIALIAS_MODE antialiasMode) { return ((HRESULT (WINAPI*)(ID2D1CommandSink4*, const D2D_RECT_F*, D2D1_ANTIALIAS_MODE))this->v->tbl[24])(this, clipRect, antialiasMode); }
static inline HRESULT                           ID2D1CommandSink4_PushLayer                                  (ID2D1CommandSink4* this, const D2D1_LAYER_PARAMETERS1* layerParameters1, ID2D1Layer* layer) { return ((HRESULT (WINAPI*)(ID2D1CommandSink4*, const D2D1_LAYER_PARAMETERS1*, ID2D1Layer*))this->v->tbl[25])(this, layerParameters1, layer); }
static inline HRESULT                           ID2D1CommandSink4_PopAxisAlignedClip                         (ID2D1CommandSink4* this) { return ((HRESULT (WINAPI*)(ID2D1CommandSink4*))this->v->tbl[26])(this); }
static inline HRESULT                           ID2D1CommandSink4_PopLayer                                   (ID2D1CommandSink4* this) { return ((HRESULT (WINAPI*)(ID2D1CommandSink4*))this->v->tbl[27])(this); }
static inline HRESULT                           ID2D1CommandSink4_SetPrimitiveBlend1                         (ID2D1CommandSink4* this, D2D1_PRIMITIVE_BLEND primitiveBlend) { return ((HRESULT (WINAPI*)(ID2D1CommandSink4*, D2D1_PRIMITIVE_BLEND))this->v->tbl[28])(this, primitiveBlend); }
static inline HRESULT                           ID2D1CommandSink4_DrawInk                                    (ID2D1CommandSink4* this, ID2D1Ink* ink, ID2D1Brush* brush, ID2D1InkStyle* inkStyle) { return ((HRESULT (WINAPI*)(ID2D1CommandSink4*, ID2D1Ink*, ID2D1Brush*, ID2D1InkStyle*))this->v->tbl[29])(this, ink, brush, inkStyle); }
static inline HRESULT                           ID2D1CommandSink4_DrawGradientMesh                           (ID2D1CommandSink4* this, ID2D1GradientMesh* gradientMesh) { return ((HRESULT (WINAPI*)(ID2D1CommandSink4*, ID2D1GradientMesh*))this->v->tbl[30])(this, gradientMesh); }
static inline HRESULT                           ID2D1CommandSink4_DrawGdiMetafile1                           (ID2D1CommandSink4* this, ID2D1GdiMetafile* gdiMetafile, const D2D_RECT_F* destinationRectangle, const D2D_RECT_F* sourceRectangle) { return ((HRESULT (WINAPI*)(ID2D1CommandSink4*, ID2D1GdiMetafile*, const D2D_RECT_F*, const D2D_RECT_F*))this->v->tbl[31])(this, gdiMetafile, destinationRectangle, sourceRectangle); }
static inline HRESULT                           ID2D1CommandSink4_DrawSpriteBatch                            (ID2D1CommandSink4* this, ID2D1SpriteBatch* spriteBatch, UINT32 startIndex, UINT32 spriteCount, ID2D1Bitmap* bitmap, D2D1_BITMAP_INTERPOLATION_MODE interpolationMode, D2D1_SPRITE_OPTIONS spriteOptions) { return ((HRESULT (WINAPI*)(ID2D1CommandSink4*, ID2D1SpriteBatch*, UINT32, UINT32, ID2D1Bitmap*, D2D1_BITMAP_INTERPOLATION_MODE, D2D1_SPRITE_OPTIONS))this->v->tbl[32])(this, spriteBatch, startIndex, spriteCount, bitmap, interpolationMode, spriteOptions); }
static inline HRESULT                           ID2D1CommandSink4_SetPrimitiveBlend2                         (ID2D1CommandSink4* this, D2D1_PRIMITIVE_BLEND primitiveBlend) { return ((HRESULT (WINAPI*)(ID2D1CommandSink4*, D2D1_PRIMITIVE_BLEND))this->v->tbl[33])(this, primitiveBlend); }

static inline HRESULT                           ID2D1CommandSink5_QueryInterface                             (ID2D1CommandSink5* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1CommandSink5*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1CommandSink5_AddRef                                     (ID2D1CommandSink5* this) { return ((UINT32 (WINAPI*)(ID2D1CommandSink5*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1CommandSink5_Release                                    (ID2D1CommandSink5* this) { return ((UINT32 (WINAPI*)(ID2D1CommandSink5*))this->v->tbl[2])(this); }
static inline HRESULT                           ID2D1CommandSink5_BeginDraw                                  (ID2D1CommandSink5* this) { return ((HRESULT (WINAPI*)(ID2D1CommandSink5*))this->v->tbl[3])(this); }
static inline HRESULT                           ID2D1CommandSink5_EndDraw                                    (ID2D1CommandSink5* this) { return ((HRESULT (WINAPI*)(ID2D1CommandSink5*))this->v->tbl[4])(this); }
static inline HRESULT                           ID2D1CommandSink5_SetAntialiasMode                           (ID2D1CommandSink5* this, D2D1_ANTIALIAS_MODE antialiasMode) { return ((HRESULT (WINAPI*)(ID2D1CommandSink5*, D2D1_ANTIALIAS_MODE))this->v->tbl[5])(this, antialiasMode); }
static inline HRESULT                           ID2D1CommandSink5_SetTags                                    (ID2D1CommandSink5* this, UINT64 tag1, UINT64 tag2) { return ((HRESULT (WINAPI*)(ID2D1CommandSink5*, UINT64, UINT64))this->v->tbl[6])(this, tag1, tag2); }
static inline HRESULT                           ID2D1CommandSink5_SetTextAntialiasMode                       (ID2D1CommandSink5* this, D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode) { return ((HRESULT (WINAPI*)(ID2D1CommandSink5*, D2D1_TEXT_ANTIALIAS_MODE))this->v->tbl[7])(this, textAntialiasMode); }
static inline HRESULT                           ID2D1CommandSink5_SetTextRenderingParams                     (ID2D1CommandSink5* this, IDWriteRenderingParams* textRenderingParams) { return ((HRESULT (WINAPI*)(ID2D1CommandSink5*, IDWriteRenderingParams*))this->v->tbl[8])(this, textRenderingParams); }
static inline HRESULT                           ID2D1CommandSink5_SetTransform                               (ID2D1CommandSink5* this, const D2D_MATRIX_3X2_F* transform) { return ((HRESULT (WINAPI*)(ID2D1CommandSink5*, const D2D_MATRIX_3X2_F*))this->v->tbl[9])(this, transform); }
static inline HRESULT                           ID2D1CommandSink5_SetPrimitiveBlend                          (ID2D1CommandSink5* this, D2D1_PRIMITIVE_BLEND primitiveBlend) { return ((HRESULT (WINAPI*)(ID2D1CommandSink5*, D2D1_PRIMITIVE_BLEND))this->v->tbl[10])(this, primitiveBlend); }
static inline HRESULT                           ID2D1CommandSink5_SetUnitMode                                (ID2D1CommandSink5* this, D2D1_UNIT_MODE unitMode) { return ((HRESULT (WINAPI*)(ID2D1CommandSink5*, D2D1_UNIT_MODE))this->v->tbl[11])(this, unitMode); }
static inline HRESULT                           ID2D1CommandSink5_Clear                                      (ID2D1CommandSink5* this, const D2D1_COLOR_F* color) { return ((HRESULT (WINAPI*)(ID2D1CommandSink5*, const D2D1_COLOR_F*))this->v->tbl[12])(this, color); }
static inline HRESULT                           ID2D1CommandSink5_DrawGlyphRun                               (ID2D1CommandSink5* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, const DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription, ID2D1Brush* foregroundBrush, DWRITE_MEASURING_MODE measuringMode) { return ((HRESULT (WINAPI*)(ID2D1CommandSink5*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, const DWRITE_GLYPH_RUN_DESCRIPTION*, ID2D1Brush*, DWRITE_MEASURING_MODE))this->v->tbl[13])(this, baselineOrigin, glyphRun, glyphRunDescription, foregroundBrush, measuringMode); }
static inline HRESULT                           ID2D1CommandSink5_DrawLine                                   (ID2D1CommandSink5* this, D2D_POINT_2F point0, D2D_POINT_2F point1, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { return ((HRESULT (WINAPI*)(ID2D1CommandSink5*, D2D_POINT_2F, D2D_POINT_2F, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[14])(this, point0, point1, brush, strokeWidth, strokeStyle); }
static inline HRESULT                           ID2D1CommandSink5_DrawGeometry                               (ID2D1CommandSink5* this, ID2D1Geometry* geometry, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { return ((HRESULT (WINAPI*)(ID2D1CommandSink5*, ID2D1Geometry*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[15])(this, geometry, brush, strokeWidth, strokeStyle); }
static inline HRESULT                           ID2D1CommandSink5_DrawRectangle                              (ID2D1CommandSink5* this, const D2D_RECT_F* rect, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { return ((HRESULT (WINAPI*)(ID2D1CommandSink5*, const D2D_RECT_F*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[16])(this, rect, brush, strokeWidth, strokeStyle); }
static inline HRESULT                           ID2D1CommandSink5_DrawBitmap                                 (ID2D1CommandSink5* this, ID2D1Bitmap* bitmap, const D2D_RECT_F* destinationRectangle, FLOAT opacity, D2D1_INTERPOLATION_MODE interpolationMode, const D2D_RECT_F* sourceRectangle, const D2D_MATRIX_4X4_F* perspectiveTransform) { return ((HRESULT (WINAPI*)(ID2D1CommandSink5*, ID2D1Bitmap*, const D2D_RECT_F*, FLOAT, D2D1_INTERPOLATION_MODE, const D2D_RECT_F*, const D2D_MATRIX_4X4_F*))this->v->tbl[17])(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle, perspectiveTransform); }
static inline HRESULT                           ID2D1CommandSink5_DrawImage                                  (ID2D1CommandSink5* this, ID2D1Image* image, const D2D_POINT_2F* targetOffset, const D2D_RECT_F* imageRectangle, D2D1_INTERPOLATION_MODE interpolationMode, D2D1_COMPOSITE_MODE compositeMode) { return ((HRESULT (WINAPI*)(ID2D1CommandSink5*, ID2D1Image*, const D2D_POINT_2F*, const D2D_RECT_F*, D2D1_INTERPOLATION_MODE, D2D1_COMPOSITE_MODE))this->v->tbl[18])(this, image, targetOffset, imageRectangle, interpolationMode, compositeMode); }
static inline HRESULT                           ID2D1CommandSink5_DrawGdiMetafile                            (ID2D1CommandSink5* this, ID2D1GdiMetafile* gdiMetafile, const D2D_POINT_2F* targetOffset) { return ((HRESULT (WINAPI*)(ID2D1CommandSink5*, ID2D1GdiMetafile*, const D2D_POINT_2F*))this->v->tbl[19])(this, gdiMetafile, targetOffset); }
static inline HRESULT                           ID2D1CommandSink5_FillMesh                                   (ID2D1CommandSink5* this, ID2D1Mesh* mesh, ID2D1Brush* brush) { return ((HRESULT (WINAPI*)(ID2D1CommandSink5*, ID2D1Mesh*, ID2D1Brush*))this->v->tbl[20])(this, mesh, brush); }
static inline HRESULT                           ID2D1CommandSink5_FillOpacityMask                            (ID2D1CommandSink5* this, ID2D1Bitmap* opacityMask, ID2D1Brush* brush, const D2D_RECT_F* destinationRectangle, const D2D_RECT_F* sourceRectangle) { return ((HRESULT (WINAPI*)(ID2D1CommandSink5*, ID2D1Bitmap*, ID2D1Brush*, const D2D_RECT_F*, const D2D_RECT_F*))this->v->tbl[21])(this, opacityMask, brush, destinationRectangle, sourceRectangle); }
static inline HRESULT                           ID2D1CommandSink5_FillGeometry                               (ID2D1CommandSink5* this, ID2D1Geometry* geometry, ID2D1Brush* brush, ID2D1Brush* opacityBrush) { return ((HRESULT (WINAPI*)(ID2D1CommandSink5*, ID2D1Geometry*, ID2D1Brush*, ID2D1Brush*))this->v->tbl[22])(this, geometry, brush, opacityBrush); }
static inline HRESULT                           ID2D1CommandSink5_FillRectangle                              (ID2D1CommandSink5* this, const D2D_RECT_F* rect, ID2D1Brush* brush) { return ((HRESULT (WINAPI*)(ID2D1CommandSink5*, const D2D_RECT_F*, ID2D1Brush*))this->v->tbl[23])(this, rect, brush); }
static inline HRESULT                           ID2D1CommandSink5_PushAxisAlignedClip                        (ID2D1CommandSink5* this, const D2D_RECT_F* clipRect, D2D1_ANTIALIAS_MODE antialiasMode) { return ((HRESULT (WINAPI*)(ID2D1CommandSink5*, const D2D_RECT_F*, D2D1_ANTIALIAS_MODE))this->v->tbl[24])(this, clipRect, antialiasMode); }
static inline HRESULT                           ID2D1CommandSink5_PushLayer                                  (ID2D1CommandSink5* this, const D2D1_LAYER_PARAMETERS1* layerParameters1, ID2D1Layer* layer) { return ((HRESULT (WINAPI*)(ID2D1CommandSink5*, const D2D1_LAYER_PARAMETERS1*, ID2D1Layer*))this->v->tbl[25])(this, layerParameters1, layer); }
static inline HRESULT                           ID2D1CommandSink5_PopAxisAlignedClip                         (ID2D1CommandSink5* this) { return ((HRESULT (WINAPI*)(ID2D1CommandSink5*))this->v->tbl[26])(this); }
static inline HRESULT                           ID2D1CommandSink5_PopLayer                                   (ID2D1CommandSink5* this) { return ((HRESULT (WINAPI*)(ID2D1CommandSink5*))this->v->tbl[27])(this); }
static inline HRESULT                           ID2D1CommandSink5_SetPrimitiveBlend1                         (ID2D1CommandSink5* this, D2D1_PRIMITIVE_BLEND primitiveBlend) { return ((HRESULT (WINAPI*)(ID2D1CommandSink5*, D2D1_PRIMITIVE_BLEND))this->v->tbl[28])(this, primitiveBlend); }
static inline HRESULT                           ID2D1CommandSink5_DrawInk                                    (ID2D1CommandSink5* this, ID2D1Ink* ink, ID2D1Brush* brush, ID2D1InkStyle* inkStyle) { return ((HRESULT (WINAPI*)(ID2D1CommandSink5*, ID2D1Ink*, ID2D1Brush*, ID2D1InkStyle*))this->v->tbl[29])(this, ink, brush, inkStyle); }
static inline HRESULT                           ID2D1CommandSink5_DrawGradientMesh                           (ID2D1CommandSink5* this, ID2D1GradientMesh* gradientMesh) { return ((HRESULT (WINAPI*)(ID2D1CommandSink5*, ID2D1GradientMesh*))this->v->tbl[30])(this, gradientMesh); }
static inline HRESULT                           ID2D1CommandSink5_DrawGdiMetafile1                           (ID2D1CommandSink5* this, ID2D1GdiMetafile* gdiMetafile, const D2D_RECT_F* destinationRectangle, const D2D_RECT_F* sourceRectangle) { return ((HRESULT (WINAPI*)(ID2D1CommandSink5*, ID2D1GdiMetafile*, const D2D_RECT_F*, const D2D_RECT_F*))this->v->tbl[31])(this, gdiMetafile, destinationRectangle, sourceRectangle); }
static inline HRESULT                           ID2D1CommandSink5_DrawSpriteBatch                            (ID2D1CommandSink5* this, ID2D1SpriteBatch* spriteBatch, UINT32 startIndex, UINT32 spriteCount, ID2D1Bitmap* bitmap, D2D1_BITMAP_INTERPOLATION_MODE interpolationMode, D2D1_SPRITE_OPTIONS spriteOptions) { return ((HRESULT (WINAPI*)(ID2D1CommandSink5*, ID2D1SpriteBatch*, UINT32, UINT32, ID2D1Bitmap*, D2D1_BITMAP_INTERPOLATION_MODE, D2D1_SPRITE_OPTIONS))this->v->tbl[32])(this, spriteBatch, startIndex, spriteCount, bitmap, interpolationMode, spriteOptions); }
static inline HRESULT                           ID2D1CommandSink5_SetPrimitiveBlend2                         (ID2D1CommandSink5* this, D2D1_PRIMITIVE_BLEND primitiveBlend) { return ((HRESULT (WINAPI*)(ID2D1CommandSink5*, D2D1_PRIMITIVE_BLEND))this->v->tbl[33])(this, primitiveBlend); }
static inline HRESULT                           ID2D1CommandSink5_BlendImage                                 (ID2D1CommandSink5* this, ID2D1Image* image, D2D1_BLEND_MODE blendMode, const D2D_POINT_2F* targetOffset, const D2D_RECT_F* imageRectangle, D2D1_INTERPOLATION_MODE interpolationMode) { return ((HRESULT (WINAPI*)(ID2D1CommandSink5*, ID2D1Image*, D2D1_BLEND_MODE, const D2D_POINT_2F*, const D2D_RECT_F*, D2D1_INTERPOLATION_MODE))this->v->tbl[34])(this, image, blendMode, targetOffset, imageRectangle, interpolationMode); }

static inline HRESULT                           ID2D1ComputeInfo_QueryInterface                              (ID2D1ComputeInfo* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1ComputeInfo*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1ComputeInfo_AddRef                                      (ID2D1ComputeInfo* this) { return ((UINT32 (WINAPI*)(ID2D1ComputeInfo*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1ComputeInfo_Release                                     (ID2D1ComputeInfo* this) { return ((UINT32 (WINAPI*)(ID2D1ComputeInfo*))this->v->tbl[2])(this); }
static inline HRESULT                           ID2D1ComputeInfo_SetInputDescription                         (ID2D1ComputeInfo* this, UINT32 inputIndex, D2D1_INPUT_DESCRIPTION inputDescription) { return ((HRESULT (WINAPI*)(ID2D1ComputeInfo*, UINT32, D2D1_INPUT_DESCRIPTION))this->v->tbl[3])(this, inputIndex, inputDescription); }
static inline HRESULT                           ID2D1ComputeInfo_SetOutputBuffer                             (ID2D1ComputeInfo* this, D2D1_BUFFER_PRECISION bufferPrecision, D2D1_CHANNEL_DEPTH channelDepth) { return ((HRESULT (WINAPI*)(ID2D1ComputeInfo*, D2D1_BUFFER_PRECISION, D2D1_CHANNEL_DEPTH))this->v->tbl[4])(this, bufferPrecision, channelDepth); }
static inline void                              ID2D1ComputeInfo_SetCached                                   (ID2D1ComputeInfo* this, BOOL isCached) { ((void (WINAPI*)(ID2D1ComputeInfo*, BOOL))this->v->tbl[5])(this, isCached); }
static inline void                              ID2D1ComputeInfo_SetInstructionCountHint                     (ID2D1ComputeInfo* this, UINT32 instructionCount) { ((void (WINAPI*)(ID2D1ComputeInfo*, UINT32))this->v->tbl[6])(this, instructionCount); }
static inline HRESULT                           ID2D1ComputeInfo_SetComputeShaderConstantBuffer              (ID2D1ComputeInfo* this, const UINT8* buffer, UINT32 bufferCount) { return ((HRESULT (WINAPI*)(ID2D1ComputeInfo*, const UINT8*, UINT32))this->v->tbl[7])(this, buffer, bufferCount); }
static inline HRESULT                           ID2D1ComputeInfo_SetComputeShader                            (ID2D1ComputeInfo* this, const GUID* shaderId) { return ((HRESULT (WINAPI*)(ID2D1ComputeInfo*, const GUID*))this->v->tbl[8])(this, shaderId); }
static inline HRESULT                           ID2D1ComputeInfo_SetResourceTexture                          (ID2D1ComputeInfo* this, UINT32 textureIndex, ID2D1ResourceTexture* resourceTexture) { return ((HRESULT (WINAPI*)(ID2D1ComputeInfo*, UINT32, ID2D1ResourceTexture*))this->v->tbl[9])(this, textureIndex, resourceTexture); }

static inline HRESULT                           ID2D1ComputeTransform_QueryInterface                         (ID2D1ComputeTransform* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1ComputeTransform*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1ComputeTransform_AddRef                                 (ID2D1ComputeTransform* this) { return ((UINT32 (WINAPI*)(ID2D1ComputeTransform*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1ComputeTransform_Release                                (ID2D1ComputeTransform* this) { return ((UINT32 (WINAPI*)(ID2D1ComputeTransform*))this->v->tbl[2])(this); }
static inline UINT32                            ID2D1ComputeTransform_GetInputCount                          (ID2D1ComputeTransform* this) { return ((UINT32 (WINAPI*)(ID2D1ComputeTransform*))this->v->tbl[3])(this); }
static inline HRESULT                           ID2D1ComputeTransform_MapOutputRectToInputRects              (ID2D1ComputeTransform* this, const RECT* outputRect, RECT* inputRects, UINT32 inputRectsCount) { return ((HRESULT (WINAPI*)(ID2D1ComputeTransform*, const RECT*, RECT*, UINT32))this->v->tbl[4])(this, outputRect, inputRects, inputRectsCount); }
static inline HRESULT                           ID2D1ComputeTransform_MapInputRectsToOutputRect              (ID2D1ComputeTransform* this, const RECT* inputRects, const RECT* inputOpaqueSubRects, UINT32 inputRectCount, RECT* outputRect, RECT* outputOpaqueSubRect) { return ((HRESULT (WINAPI*)(ID2D1ComputeTransform*, const RECT*, const RECT*, UINT32, RECT*, RECT*))this->v->tbl[5])(this, inputRects, inputOpaqueSubRects, inputRectCount, outputRect, outputOpaqueSubRect); }
static inline HRESULT                           ID2D1ComputeTransform_MapInvalidRect                         (ID2D1ComputeTransform* this, UINT32 inputIndex, RECT invalidInputRect, RECT* invalidOutputRect) { return ((HRESULT (WINAPI*)(ID2D1ComputeTransform*, UINT32, RECT, RECT*))this->v->tbl[6])(this, inputIndex, invalidInputRect, invalidOutputRect); }
static inline HRESULT                           ID2D1ComputeTransform_SetComputeInfo                         (ID2D1ComputeTransform* this, ID2D1ComputeInfo* computeInfo) { return ((HRESULT (WINAPI*)(ID2D1ComputeTransform*, ID2D1ComputeInfo*))this->v->tbl[7])(this, computeInfo); }
static inline HRESULT                           ID2D1ComputeTransform_CalculateThreadgroups                  (ID2D1ComputeTransform* this, const RECT* outputRect, UINT32* dimensionX, UINT32* dimensionY, UINT32* dimensionZ) { return ((HRESULT (WINAPI*)(ID2D1ComputeTransform*, const RECT*, UINT32*, UINT32*, UINT32*))this->v->tbl[8])(this, outputRect, dimensionX, dimensionY, dimensionZ); }

static inline HRESULT                           ID2D1ConcreteTransform_QueryInterface                        (ID2D1ConcreteTransform* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1ConcreteTransform*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1ConcreteTransform_AddRef                                (ID2D1ConcreteTransform* this) { return ((UINT32 (WINAPI*)(ID2D1ConcreteTransform*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1ConcreteTransform_Release                               (ID2D1ConcreteTransform* this) { return ((UINT32 (WINAPI*)(ID2D1ConcreteTransform*))this->v->tbl[2])(this); }
static inline UINT32                            ID2D1ConcreteTransform_GetInputCount                         (ID2D1ConcreteTransform* this) { return ((UINT32 (WINAPI*)(ID2D1ConcreteTransform*))this->v->tbl[3])(this); }
static inline HRESULT                           ID2D1ConcreteTransform_SetOutputBuffer                       (ID2D1ConcreteTransform* this, D2D1_BUFFER_PRECISION bufferPrecision, D2D1_CHANNEL_DEPTH channelDepth) { return ((HRESULT (WINAPI*)(ID2D1ConcreteTransform*, D2D1_BUFFER_PRECISION, D2D1_CHANNEL_DEPTH))this->v->tbl[4])(this, bufferPrecision, channelDepth); }
static inline void                              ID2D1ConcreteTransform_SetCached                             (ID2D1ConcreteTransform* this, BOOL isCached) { ((void (WINAPI*)(ID2D1ConcreteTransform*, BOOL))this->v->tbl[5])(this, isCached); }

static inline HRESULT                           ID2D1DCRenderTarget_QueryInterface                           (ID2D1DCRenderTarget* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1DCRenderTarget*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1DCRenderTarget_AddRef                                   (ID2D1DCRenderTarget* this) { return ((UINT32 (WINAPI*)(ID2D1DCRenderTarget*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1DCRenderTarget_Release                                  (ID2D1DCRenderTarget* this) { return ((UINT32 (WINAPI*)(ID2D1DCRenderTarget*))this->v->tbl[2])(this); }
static inline void                              ID2D1DCRenderTarget_GetFactory                               (ID2D1DCRenderTarget* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1DCRenderTarget*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline HRESULT                           ID2D1DCRenderTarget_CreateBitmap                             (ID2D1DCRenderTarget* this, D2D_SIZE_U size, const void* srcData, UINT32 pitch, const D2D1_BITMAP_PROPERTIES* bitmapProperties, ID2D1Bitmap** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DCRenderTarget*, D2D_SIZE_U, const void*, UINT32, const D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap**))this->v->tbl[4])(this, size, srcData, pitch, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DCRenderTarget_CreateBitmapFromWicBitmap                (ID2D1DCRenderTarget* this, IWICBitmapSource* wicBitmapSource, const D2D1_BITMAP_PROPERTIES* bitmapProperties, ID2D1Bitmap** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DCRenderTarget*, IWICBitmapSource*, const D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap**))this->v->tbl[5])(this, wicBitmapSource, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DCRenderTarget_CreateSharedBitmap                       (ID2D1DCRenderTarget* this, const GUID* riid, void* data, const D2D1_BITMAP_PROPERTIES* bitmapProperties, ID2D1Bitmap** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DCRenderTarget*, const GUID*, void*, const D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap**))this->v->tbl[6])(this, riid, data, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DCRenderTarget_CreateBitmapBrush                        (ID2D1DCRenderTarget* this, ID2D1Bitmap* bitmap, const D2D1_BITMAP_BRUSH_PROPERTIES* bitmapBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1BitmapBrush** bitmapBrush) { return ((HRESULT (WINAPI*)(ID2D1DCRenderTarget*, ID2D1Bitmap*, const D2D1_BITMAP_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1BitmapBrush**))this->v->tbl[7])(this, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush); }
static inline HRESULT                           ID2D1DCRenderTarget_CreateSolidColorBrush                    (ID2D1DCRenderTarget* this, const D2D1_COLOR_F* color, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1SolidColorBrush** solidColorBrush) { return ((HRESULT (WINAPI*)(ID2D1DCRenderTarget*, const D2D1_COLOR_F*, const D2D1_BRUSH_PROPERTIES*, ID2D1SolidColorBrush**))this->v->tbl[8])(this, color, brushProperties, solidColorBrush); }
static inline HRESULT                           ID2D1DCRenderTarget_CreateGradientStopCollection             (ID2D1DCRenderTarget* this, const D2D1_GRADIENT_STOP* gradientStops, UINT32 gradientStopsCount, D2D1_GAMMA colorInterpolationGamma, D2D1_EXTEND_MODE extendMode, ID2D1GradientStopCollection** gradientStopCollection) { return ((HRESULT (WINAPI*)(ID2D1DCRenderTarget*, const D2D1_GRADIENT_STOP*, UINT32, D2D1_GAMMA, D2D1_EXTEND_MODE, ID2D1GradientStopCollection**))this->v->tbl[9])(this, gradientStops, gradientStopsCount, colorInterpolationGamma, extendMode, gradientStopCollection); }
static inline HRESULT                           ID2D1DCRenderTarget_CreateLinearGradientBrush                (ID2D1DCRenderTarget* this, const D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES* linearGradientBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1GradientStopCollection* gradientStopCollection, ID2D1LinearGradientBrush** linearGradientBrush) { return ((HRESULT (WINAPI*)(ID2D1DCRenderTarget*, const D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection*, ID2D1LinearGradientBrush**))this->v->tbl[10])(this, linearGradientBrushProperties, brushProperties, gradientStopCollection, linearGradientBrush); }
static inline HRESULT                           ID2D1DCRenderTarget_CreateRadialGradientBrush                (ID2D1DCRenderTarget* this, const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES* radialGradientBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1GradientStopCollection* gradientStopCollection, ID2D1RadialGradientBrush** radialGradientBrush) { return ((HRESULT (WINAPI*)(ID2D1DCRenderTarget*, const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection*, ID2D1RadialGradientBrush**))this->v->tbl[11])(this, radialGradientBrushProperties, brushProperties, gradientStopCollection, radialGradientBrush); }
static inline HRESULT                           ID2D1DCRenderTarget_CreateCompatibleRenderTarget             (ID2D1DCRenderTarget* this, const D2D_SIZE_F* desiredSize, const D2D_SIZE_U* desiredPixelSize, const D2D1_PIXEL_FORMAT* desiredFormat, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS options, ID2D1BitmapRenderTarget** bitmapRenderTarget) { return ((HRESULT (WINAPI*)(ID2D1DCRenderTarget*, const D2D_SIZE_F*, const D2D_SIZE_U*, const D2D1_PIXEL_FORMAT*, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, ID2D1BitmapRenderTarget**))this->v->tbl[12])(this, desiredSize, desiredPixelSize, desiredFormat, options, bitmapRenderTarget); }
static inline HRESULT                           ID2D1DCRenderTarget_CreateLayer                              (ID2D1DCRenderTarget* this, const D2D_SIZE_F* size, ID2D1Layer** layer) { return ((HRESULT (WINAPI*)(ID2D1DCRenderTarget*, const D2D_SIZE_F*, ID2D1Layer**))this->v->tbl[13])(this, size, layer); }
static inline HRESULT                           ID2D1DCRenderTarget_CreateMesh                               (ID2D1DCRenderTarget* this, ID2D1Mesh** mesh) { return ((HRESULT (WINAPI*)(ID2D1DCRenderTarget*, ID2D1Mesh**))this->v->tbl[14])(this, mesh); }
static inline void                              ID2D1DCRenderTarget_DrawLine                                 (ID2D1DCRenderTarget* this, D2D_POINT_2F point0, D2D_POINT_2F point1, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DCRenderTarget*, D2D_POINT_2F, D2D_POINT_2F, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[15])(this, point0, point1, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DCRenderTarget_DrawRectangle                            (ID2D1DCRenderTarget* this, const D2D_RECT_F* rect, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DCRenderTarget*, const D2D_RECT_F*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[16])(this, rect, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DCRenderTarget_FillRectangle                            (ID2D1DCRenderTarget* this, const D2D_RECT_F* rect, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1DCRenderTarget*, const D2D_RECT_F*, ID2D1Brush*))this->v->tbl[17])(this, rect, brush); }
static inline void                              ID2D1DCRenderTarget_DrawRoundedRectangle                     (ID2D1DCRenderTarget* this, const D2D1_ROUNDED_RECT* roundedRect, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DCRenderTarget*, const D2D1_ROUNDED_RECT*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[18])(this, roundedRect, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DCRenderTarget_FillRoundedRectangle                     (ID2D1DCRenderTarget* this, const D2D1_ROUNDED_RECT* roundedRect, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1DCRenderTarget*, const D2D1_ROUNDED_RECT*, ID2D1Brush*))this->v->tbl[19])(this, roundedRect, brush); }
static inline void                              ID2D1DCRenderTarget_DrawEllipse                              (ID2D1DCRenderTarget* this, const D2D1_ELLIPSE* ellipse, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DCRenderTarget*, const D2D1_ELLIPSE*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[20])(this, ellipse, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DCRenderTarget_FillEllipse                              (ID2D1DCRenderTarget* this, const D2D1_ELLIPSE* ellipse, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1DCRenderTarget*, const D2D1_ELLIPSE*, ID2D1Brush*))this->v->tbl[21])(this, ellipse, brush); }
static inline void                              ID2D1DCRenderTarget_DrawGeometry                             (ID2D1DCRenderTarget* this, ID2D1Geometry* geometry, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DCRenderTarget*, ID2D1Geometry*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[22])(this, geometry, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DCRenderTarget_FillGeometry                             (ID2D1DCRenderTarget* this, ID2D1Geometry* geometry, ID2D1Brush* brush, ID2D1Brush* opacityBrush) { ((void (WINAPI*)(ID2D1DCRenderTarget*, ID2D1Geometry*, ID2D1Brush*, ID2D1Brush*))this->v->tbl[23])(this, geometry, brush, opacityBrush); }
static inline void                              ID2D1DCRenderTarget_FillMesh                                 (ID2D1DCRenderTarget* this, ID2D1Mesh* mesh, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1DCRenderTarget*, ID2D1Mesh*, ID2D1Brush*))this->v->tbl[24])(this, mesh, brush); }
static inline void                              ID2D1DCRenderTarget_FillOpacityMask                          (ID2D1DCRenderTarget* this, ID2D1Bitmap* opacityMask, ID2D1Brush* brush, D2D1_OPACITY_MASK_CONTENT content, const D2D_RECT_F* destinationRectangle, const D2D_RECT_F* sourceRectangle) { ((void (WINAPI*)(ID2D1DCRenderTarget*, ID2D1Bitmap*, ID2D1Brush*, D2D1_OPACITY_MASK_CONTENT, const D2D_RECT_F*, const D2D_RECT_F*))this->v->tbl[25])(this, opacityMask, brush, content, destinationRectangle, sourceRectangle); }
static inline void                              ID2D1DCRenderTarget_DrawBitmap                               (ID2D1DCRenderTarget* this, ID2D1Bitmap* bitmap, const D2D_RECT_F* destinationRectangle, FLOAT opacity, D2D1_BITMAP_INTERPOLATION_MODE interpolationMode, const D2D_RECT_F* sourceRectangle) { ((void (WINAPI*)(ID2D1DCRenderTarget*, ID2D1Bitmap*, const D2D_RECT_F*, FLOAT, D2D1_BITMAP_INTERPOLATION_MODE, const D2D_RECT_F*))this->v->tbl[26])(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle); }
static inline void                              ID2D1DCRenderTarget_DrawText                                 (ID2D1DCRenderTarget* this, const WCHAR* string, UINT32 stringLength, IDWriteTextFormat* textFormat, const D2D_RECT_F* layoutRect, ID2D1Brush* defaultFillBrush, D2D1_DRAW_TEXT_OPTIONS options, DWRITE_MEASURING_MODE measuringMode) { ((void (WINAPI*)(ID2D1DCRenderTarget*, const WCHAR*, UINT32, IDWriteTextFormat*, const D2D_RECT_F*, ID2D1Brush*, D2D1_DRAW_TEXT_OPTIONS, DWRITE_MEASURING_MODE))this->v->tbl[27])(this, string, stringLength, textFormat, layoutRect, defaultFillBrush, options, measuringMode); }
static inline void                              ID2D1DCRenderTarget_DrawTextLayout                           (ID2D1DCRenderTarget* this, D2D_POINT_2F origin, IDWriteTextLayout* textLayout, ID2D1Brush* defaultFillBrush, D2D1_DRAW_TEXT_OPTIONS options) { ((void (WINAPI*)(ID2D1DCRenderTarget*, D2D_POINT_2F, IDWriteTextLayout*, ID2D1Brush*, D2D1_DRAW_TEXT_OPTIONS))this->v->tbl[28])(this, origin, textLayout, defaultFillBrush, options); }
static inline void                              ID2D1DCRenderTarget_DrawGlyphRun                             (ID2D1DCRenderTarget* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, ID2D1Brush* foregroundBrush, DWRITE_MEASURING_MODE measuringMode) { ((void (WINAPI*)(ID2D1DCRenderTarget*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, ID2D1Brush*, DWRITE_MEASURING_MODE))this->v->tbl[29])(this, baselineOrigin, glyphRun, foregroundBrush, measuringMode); }
static inline void                              ID2D1DCRenderTarget_SetTransform                             (ID2D1DCRenderTarget* this, const D2D_MATRIX_3X2_F* transform) { ((void (WINAPI*)(ID2D1DCRenderTarget*, const D2D_MATRIX_3X2_F*))this->v->tbl[30])(this, transform); }
static inline void                              ID2D1DCRenderTarget_GetTransform                             (ID2D1DCRenderTarget* this, D2D_MATRIX_3X2_F* transform) { ((void (WINAPI*)(ID2D1DCRenderTarget*, D2D_MATRIX_3X2_F*))this->v->tbl[31])(this, transform); }
static inline void                              ID2D1DCRenderTarget_SetAntialiasMode                         (ID2D1DCRenderTarget* this, D2D1_ANTIALIAS_MODE antialiasMode) { ((void (WINAPI*)(ID2D1DCRenderTarget*, D2D1_ANTIALIAS_MODE))this->v->tbl[32])(this, antialiasMode); }
static inline D2D1_ANTIALIAS_MODE               ID2D1DCRenderTarget_GetAntialiasMode                         (ID2D1DCRenderTarget* this) { return ((D2D1_ANTIALIAS_MODE (WINAPI*)(ID2D1DCRenderTarget*))this->v->tbl[33])(this); }
static inline void                              ID2D1DCRenderTarget_SetTextAntialiasMode                     (ID2D1DCRenderTarget* this, D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode) { ((void (WINAPI*)(ID2D1DCRenderTarget*, D2D1_TEXT_ANTIALIAS_MODE))this->v->tbl[34])(this, textAntialiasMode); }
static inline D2D1_TEXT_ANTIALIAS_MODE          ID2D1DCRenderTarget_GetTextAntialiasMode                     (ID2D1DCRenderTarget* this) { return ((D2D1_TEXT_ANTIALIAS_MODE (WINAPI*)(ID2D1DCRenderTarget*))this->v->tbl[35])(this); }
static inline void                              ID2D1DCRenderTarget_SetTextRenderingParams                   (ID2D1DCRenderTarget* this, IDWriteRenderingParams* textRenderingParams) { ((void (WINAPI*)(ID2D1DCRenderTarget*, IDWriteRenderingParams*))this->v->tbl[36])(this, textRenderingParams); }
static inline void                              ID2D1DCRenderTarget_GetTextRenderingParams                   (ID2D1DCRenderTarget* this, IDWriteRenderingParams** textRenderingParams) { ((void (WINAPI*)(ID2D1DCRenderTarget*, IDWriteRenderingParams**))this->v->tbl[37])(this, textRenderingParams); }
static inline void                              ID2D1DCRenderTarget_SetTags                                  (ID2D1DCRenderTarget* this, UINT64 tag1, UINT64 tag2) { ((void (WINAPI*)(ID2D1DCRenderTarget*, UINT64, UINT64))this->v->tbl[38])(this, tag1, tag2); }
static inline void                              ID2D1DCRenderTarget_GetTags                                  (ID2D1DCRenderTarget* this, UINT64* tag1, UINT64* tag2) { ((void (WINAPI*)(ID2D1DCRenderTarget*, UINT64*, UINT64*))this->v->tbl[39])(this, tag1, tag2); }
static inline void                              ID2D1DCRenderTarget_PushLayer                                (ID2D1DCRenderTarget* this, const D2D1_LAYER_PARAMETERS* layerParameters, ID2D1Layer* layer) { ((void (WINAPI*)(ID2D1DCRenderTarget*, const D2D1_LAYER_PARAMETERS*, ID2D1Layer*))this->v->tbl[40])(this, layerParameters, layer); }
static inline void                              ID2D1DCRenderTarget_PopLayer                                 (ID2D1DCRenderTarget* this) { ((void (WINAPI*)(ID2D1DCRenderTarget*))this->v->tbl[41])(this); }
static inline HRESULT                           ID2D1DCRenderTarget_Flush                                    (ID2D1DCRenderTarget* this, UINT64* tag1, UINT64* tag2) { return ((HRESULT (WINAPI*)(ID2D1DCRenderTarget*, UINT64*, UINT64*))this->v->tbl[42])(this, tag1, tag2); }
static inline void                              ID2D1DCRenderTarget_SaveDrawingState                         (ID2D1DCRenderTarget* this, ID2D1DrawingStateBlock* drawingStateBlock) { ((void (WINAPI*)(ID2D1DCRenderTarget*, ID2D1DrawingStateBlock*))this->v->tbl[43])(this, drawingStateBlock); }
static inline void                              ID2D1DCRenderTarget_RestoreDrawingState                      (ID2D1DCRenderTarget* this, ID2D1DrawingStateBlock* drawingStateBlock) { ((void (WINAPI*)(ID2D1DCRenderTarget*, ID2D1DrawingStateBlock*))this->v->tbl[44])(this, drawingStateBlock); }
static inline void                              ID2D1DCRenderTarget_PushAxisAlignedClip                      (ID2D1DCRenderTarget* this, const D2D_RECT_F* clipRect, D2D1_ANTIALIAS_MODE antialiasMode) { ((void (WINAPI*)(ID2D1DCRenderTarget*, const D2D_RECT_F*, D2D1_ANTIALIAS_MODE))this->v->tbl[45])(this, clipRect, antialiasMode); }
static inline void                              ID2D1DCRenderTarget_PopAxisAlignedClip                       (ID2D1DCRenderTarget* this) { ((void (WINAPI*)(ID2D1DCRenderTarget*))this->v->tbl[46])(this); }
static inline void                              ID2D1DCRenderTarget_Clear                                    (ID2D1DCRenderTarget* this, const D2D1_COLOR_F* clearColor) { ((void (WINAPI*)(ID2D1DCRenderTarget*, const D2D1_COLOR_F*))this->v->tbl[47])(this, clearColor); }
static inline void                              ID2D1DCRenderTarget_BeginDraw                                (ID2D1DCRenderTarget* this) { ((void (WINAPI*)(ID2D1DCRenderTarget*))this->v->tbl[48])(this); }
static inline HRESULT                           ID2D1DCRenderTarget_EndDraw                                  (ID2D1DCRenderTarget* this, UINT64* tag1, UINT64* tag2) { return ((HRESULT (WINAPI*)(ID2D1DCRenderTarget*, UINT64*, UINT64*))this->v->tbl[49])(this, tag1, tag2); }
static inline D2D1_PIXEL_FORMAT                 ID2D1DCRenderTarget_GetPixelFormat                           (ID2D1DCRenderTarget* this) { D2D1_PIXEL_FORMAT _return; ((void (WINAPI*)(ID2D1DCRenderTarget*, D2D1_PIXEL_FORMAT*))this->v->tbl[50])(this, &_return); return _return; }
static inline void                              ID2D1DCRenderTarget_SetDpi                                   (ID2D1DCRenderTarget* this, FLOAT dpiX, FLOAT dpiY) { ((void (WINAPI*)(ID2D1DCRenderTarget*, FLOAT, FLOAT))this->v->tbl[51])(this, dpiX, dpiY); }
static inline void                              ID2D1DCRenderTarget_GetDpi                                   (ID2D1DCRenderTarget* this, FLOAT* dpiX, FLOAT* dpiY) { ((void (WINAPI*)(ID2D1DCRenderTarget*, FLOAT*, FLOAT*))this->v->tbl[52])(this, dpiX, dpiY); }
static inline D2D_SIZE_F                        ID2D1DCRenderTarget_GetSize                                  (ID2D1DCRenderTarget* this) { D2D_SIZE_F _return; ((void (WINAPI*)(ID2D1DCRenderTarget*, D2D_SIZE_F*))this->v->tbl[53])(this, &_return); return _return; }
static inline D2D_SIZE_U                        ID2D1DCRenderTarget_GetPixelSize                             (ID2D1DCRenderTarget* this) { D2D_SIZE_U _return; ((void (WINAPI*)(ID2D1DCRenderTarget*, D2D_SIZE_U*))this->v->tbl[54])(this, &_return); return _return; }
static inline UINT32                            ID2D1DCRenderTarget_GetMaximumBitmapSize                     (ID2D1DCRenderTarget* this) { return ((UINT32 (WINAPI*)(ID2D1DCRenderTarget*))this->v->tbl[55])(this); }
static inline BOOL                              ID2D1DCRenderTarget_IsSupported                              (ID2D1DCRenderTarget* this, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties) { return ((BOOL (WINAPI*)(ID2D1DCRenderTarget*, const D2D1_RENDER_TARGET_PROPERTIES*))this->v->tbl[56])(this, renderTargetProperties); }
static inline HRESULT                           ID2D1DCRenderTarget_BindDC                                   (ID2D1DCRenderTarget* this, const HDC hDC, const RECT* pSubRect) { return ((HRESULT (WINAPI*)(ID2D1DCRenderTarget*, const HDC, const RECT*))this->v->tbl[57])(this, hDC, pSubRect); }

static inline HRESULT                           ID2D1Device_QueryInterface                                   (ID2D1Device* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1Device*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1Device_AddRef                                           (ID2D1Device* this) { return ((UINT32 (WINAPI*)(ID2D1Device*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1Device_Release                                          (ID2D1Device* this) { return ((UINT32 (WINAPI*)(ID2D1Device*))this->v->tbl[2])(this); }
static inline void                              ID2D1Device_GetFactory                                       (ID2D1Device* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1Device*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline HRESULT                           ID2D1Device_CreateDeviceContext                              (ID2D1Device* this, D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext** deviceContext) { return ((HRESULT (WINAPI*)(ID2D1Device*, D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext**))this->v->tbl[4])(this, options, deviceContext); }
static inline HRESULT                           ID2D1Device_CreatePrintControl                               (ID2D1Device* this, IWICImagingFactory* wicFactory, IPrintDocumentPackageTarget* documentTarget, const D2D1_PRINT_CONTROL_PROPERTIES* printControlProperties, ID2D1PrintControl** printControl) { return ((HRESULT (WINAPI*)(ID2D1Device*, IWICImagingFactory*, IPrintDocumentPackageTarget*, const D2D1_PRINT_CONTROL_PROPERTIES*, ID2D1PrintControl**))this->v->tbl[5])(this, wicFactory, documentTarget, printControlProperties, printControl); }
static inline void                              ID2D1Device_SetMaximumTextureMemory                          (ID2D1Device* this, UINT64 maximumInBytes) { ((void (WINAPI*)(ID2D1Device*, UINT64))this->v->tbl[6])(this, maximumInBytes); }
static inline UINT64                            ID2D1Device_GetMaximumTextureMemory                          (ID2D1Device* this) { return ((UINT64 (WINAPI*)(ID2D1Device*))this->v->tbl[7])(this); }
static inline void                              ID2D1Device_ClearResources                                   (ID2D1Device* this, UINT32 millisecondsSinceUse) { ((void (WINAPI*)(ID2D1Device*, UINT32))this->v->tbl[8])(this, millisecondsSinceUse); }

static inline HRESULT                           ID2D1Device1_QueryInterface                                  (ID2D1Device1* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1Device1*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1Device1_AddRef                                          (ID2D1Device1* this) { return ((UINT32 (WINAPI*)(ID2D1Device1*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1Device1_Release                                         (ID2D1Device1* this) { return ((UINT32 (WINAPI*)(ID2D1Device1*))this->v->tbl[2])(this); }
static inline void                              ID2D1Device1_GetFactory                                      (ID2D1Device1* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1Device1*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline HRESULT                           ID2D1Device1_CreateDeviceContext                             (ID2D1Device1* this, D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext** deviceContext) { return ((HRESULT (WINAPI*)(ID2D1Device1*, D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext**))this->v->tbl[4])(this, options, deviceContext); }
static inline HRESULT                           ID2D1Device1_CreatePrintControl                              (ID2D1Device1* this, IWICImagingFactory* wicFactory, IPrintDocumentPackageTarget* documentTarget, const D2D1_PRINT_CONTROL_PROPERTIES* printControlProperties, ID2D1PrintControl** printControl) { return ((HRESULT (WINAPI*)(ID2D1Device1*, IWICImagingFactory*, IPrintDocumentPackageTarget*, const D2D1_PRINT_CONTROL_PROPERTIES*, ID2D1PrintControl**))this->v->tbl[5])(this, wicFactory, documentTarget, printControlProperties, printControl); }
static inline void                              ID2D1Device1_SetMaximumTextureMemory                         (ID2D1Device1* this, UINT64 maximumInBytes) { ((void (WINAPI*)(ID2D1Device1*, UINT64))this->v->tbl[6])(this, maximumInBytes); }
static inline UINT64                            ID2D1Device1_GetMaximumTextureMemory                         (ID2D1Device1* this) { return ((UINT64 (WINAPI*)(ID2D1Device1*))this->v->tbl[7])(this); }
static inline void                              ID2D1Device1_ClearResources                                  (ID2D1Device1* this, UINT32 millisecondsSinceUse) { ((void (WINAPI*)(ID2D1Device1*, UINT32))this->v->tbl[8])(this, millisecondsSinceUse); }
static inline D2D1_RENDERING_PRIORITY           ID2D1Device1_GetRenderingPriority                            (ID2D1Device1* this) { return ((D2D1_RENDERING_PRIORITY (WINAPI*)(ID2D1Device1*))this->v->tbl[9])(this); }
static inline void                              ID2D1Device1_SetRenderingPriority                            (ID2D1Device1* this, D2D1_RENDERING_PRIORITY renderingPriority) { ((void (WINAPI*)(ID2D1Device1*, D2D1_RENDERING_PRIORITY))this->v->tbl[10])(this, renderingPriority); }
static inline HRESULT                           ID2D1Device1_CreateDeviceContext1                            (ID2D1Device1* this, D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext1** deviceContext1) { return ((HRESULT (WINAPI*)(ID2D1Device1*, D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext1**))this->v->tbl[11])(this, options, deviceContext1); }

static inline HRESULT                           ID2D1Device2_QueryInterface                                  (ID2D1Device2* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1Device2*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1Device2_AddRef                                          (ID2D1Device2* this) { return ((UINT32 (WINAPI*)(ID2D1Device2*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1Device2_Release                                         (ID2D1Device2* this) { return ((UINT32 (WINAPI*)(ID2D1Device2*))this->v->tbl[2])(this); }
static inline void                              ID2D1Device2_GetFactory                                      (ID2D1Device2* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1Device2*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline HRESULT                           ID2D1Device2_CreateDeviceContext                             (ID2D1Device2* this, D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext** deviceContext) { return ((HRESULT (WINAPI*)(ID2D1Device2*, D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext**))this->v->tbl[4])(this, options, deviceContext); }
static inline HRESULT                           ID2D1Device2_CreatePrintControl                              (ID2D1Device2* this, IWICImagingFactory* wicFactory, IPrintDocumentPackageTarget* documentTarget, const D2D1_PRINT_CONTROL_PROPERTIES* printControlProperties, ID2D1PrintControl** printControl) { return ((HRESULT (WINAPI*)(ID2D1Device2*, IWICImagingFactory*, IPrintDocumentPackageTarget*, const D2D1_PRINT_CONTROL_PROPERTIES*, ID2D1PrintControl**))this->v->tbl[5])(this, wicFactory, documentTarget, printControlProperties, printControl); }
static inline void                              ID2D1Device2_SetMaximumTextureMemory                         (ID2D1Device2* this, UINT64 maximumInBytes) { ((void (WINAPI*)(ID2D1Device2*, UINT64))this->v->tbl[6])(this, maximumInBytes); }
static inline UINT64                            ID2D1Device2_GetMaximumTextureMemory                         (ID2D1Device2* this) { return ((UINT64 (WINAPI*)(ID2D1Device2*))this->v->tbl[7])(this); }
static inline void                              ID2D1Device2_ClearResources                                  (ID2D1Device2* this, UINT32 millisecondsSinceUse) { ((void (WINAPI*)(ID2D1Device2*, UINT32))this->v->tbl[8])(this, millisecondsSinceUse); }
static inline D2D1_RENDERING_PRIORITY           ID2D1Device2_GetRenderingPriority                            (ID2D1Device2* this) { return ((D2D1_RENDERING_PRIORITY (WINAPI*)(ID2D1Device2*))this->v->tbl[9])(this); }
static inline void                              ID2D1Device2_SetRenderingPriority                            (ID2D1Device2* this, D2D1_RENDERING_PRIORITY renderingPriority) { ((void (WINAPI*)(ID2D1Device2*, D2D1_RENDERING_PRIORITY))this->v->tbl[10])(this, renderingPriority); }
static inline HRESULT                           ID2D1Device2_CreateDeviceContext1                            (ID2D1Device2* this, D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext1** deviceContext1) { return ((HRESULT (WINAPI*)(ID2D1Device2*, D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext1**))this->v->tbl[11])(this, options, deviceContext1); }
static inline HRESULT                           ID2D1Device2_CreateDeviceContext2                            (ID2D1Device2* this, D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext2** deviceContext2) { return ((HRESULT (WINAPI*)(ID2D1Device2*, D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext2**))this->v->tbl[12])(this, options, deviceContext2); }
static inline void                              ID2D1Device2_FlushDeviceContexts                             (ID2D1Device2* this, ID2D1Bitmap* bitmap) { ((void (WINAPI*)(ID2D1Device2*, ID2D1Bitmap*))this->v->tbl[13])(this, bitmap); }
static inline HRESULT                           ID2D1Device2_GetDxgiDevice                                   (ID2D1Device2* this, IDXGIDevice** dxgiDevice) { return ((HRESULT (WINAPI*)(ID2D1Device2*, IDXGIDevice**))this->v->tbl[14])(this, dxgiDevice); }

static inline HRESULT                           ID2D1Device3_QueryInterface                                  (ID2D1Device3* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1Device3*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1Device3_AddRef                                          (ID2D1Device3* this) { return ((UINT32 (WINAPI*)(ID2D1Device3*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1Device3_Release                                         (ID2D1Device3* this) { return ((UINT32 (WINAPI*)(ID2D1Device3*))this->v->tbl[2])(this); }
static inline void                              ID2D1Device3_GetFactory                                      (ID2D1Device3* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1Device3*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline HRESULT                           ID2D1Device3_CreateDeviceContext                             (ID2D1Device3* this, D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext** deviceContext) { return ((HRESULT (WINAPI*)(ID2D1Device3*, D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext**))this->v->tbl[4])(this, options, deviceContext); }
static inline HRESULT                           ID2D1Device3_CreatePrintControl                              (ID2D1Device3* this, IWICImagingFactory* wicFactory, IPrintDocumentPackageTarget* documentTarget, const D2D1_PRINT_CONTROL_PROPERTIES* printControlProperties, ID2D1PrintControl** printControl) { return ((HRESULT (WINAPI*)(ID2D1Device3*, IWICImagingFactory*, IPrintDocumentPackageTarget*, const D2D1_PRINT_CONTROL_PROPERTIES*, ID2D1PrintControl**))this->v->tbl[5])(this, wicFactory, documentTarget, printControlProperties, printControl); }
static inline void                              ID2D1Device3_SetMaximumTextureMemory                         (ID2D1Device3* this, UINT64 maximumInBytes) { ((void (WINAPI*)(ID2D1Device3*, UINT64))this->v->tbl[6])(this, maximumInBytes); }
static inline UINT64                            ID2D1Device3_GetMaximumTextureMemory                         (ID2D1Device3* this) { return ((UINT64 (WINAPI*)(ID2D1Device3*))this->v->tbl[7])(this); }
static inline void                              ID2D1Device3_ClearResources                                  (ID2D1Device3* this, UINT32 millisecondsSinceUse) { ((void (WINAPI*)(ID2D1Device3*, UINT32))this->v->tbl[8])(this, millisecondsSinceUse); }
static inline D2D1_RENDERING_PRIORITY           ID2D1Device3_GetRenderingPriority                            (ID2D1Device3* this) { return ((D2D1_RENDERING_PRIORITY (WINAPI*)(ID2D1Device3*))this->v->tbl[9])(this); }
static inline void                              ID2D1Device3_SetRenderingPriority                            (ID2D1Device3* this, D2D1_RENDERING_PRIORITY renderingPriority) { ((void (WINAPI*)(ID2D1Device3*, D2D1_RENDERING_PRIORITY))this->v->tbl[10])(this, renderingPriority); }
static inline HRESULT                           ID2D1Device3_CreateDeviceContext1                            (ID2D1Device3* this, D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext1** deviceContext1) { return ((HRESULT (WINAPI*)(ID2D1Device3*, D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext1**))this->v->tbl[11])(this, options, deviceContext1); }
static inline HRESULT                           ID2D1Device3_CreateDeviceContext2                            (ID2D1Device3* this, D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext2** deviceContext2) { return ((HRESULT (WINAPI*)(ID2D1Device3*, D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext2**))this->v->tbl[12])(this, options, deviceContext2); }
static inline void                              ID2D1Device3_FlushDeviceContexts                             (ID2D1Device3* this, ID2D1Bitmap* bitmap) { ((void (WINAPI*)(ID2D1Device3*, ID2D1Bitmap*))this->v->tbl[13])(this, bitmap); }
static inline HRESULT                           ID2D1Device3_GetDxgiDevice                                   (ID2D1Device3* this, IDXGIDevice** dxgiDevice) { return ((HRESULT (WINAPI*)(ID2D1Device3*, IDXGIDevice**))this->v->tbl[14])(this, dxgiDevice); }
static inline HRESULT                           ID2D1Device3_CreateDeviceContext3                            (ID2D1Device3* this, D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext3** deviceContext3) { return ((HRESULT (WINAPI*)(ID2D1Device3*, D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext3**))this->v->tbl[15])(this, options, deviceContext3); }

static inline HRESULT                           ID2D1Device4_QueryInterface                                  (ID2D1Device4* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1Device4*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1Device4_AddRef                                          (ID2D1Device4* this) { return ((UINT32 (WINAPI*)(ID2D1Device4*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1Device4_Release                                         (ID2D1Device4* this) { return ((UINT32 (WINAPI*)(ID2D1Device4*))this->v->tbl[2])(this); }
static inline void                              ID2D1Device4_GetFactory                                      (ID2D1Device4* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1Device4*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline HRESULT                           ID2D1Device4_CreateDeviceContext                             (ID2D1Device4* this, D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext** deviceContext) { return ((HRESULT (WINAPI*)(ID2D1Device4*, D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext**))this->v->tbl[4])(this, options, deviceContext); }
static inline HRESULT                           ID2D1Device4_CreatePrintControl                              (ID2D1Device4* this, IWICImagingFactory* wicFactory, IPrintDocumentPackageTarget* documentTarget, const D2D1_PRINT_CONTROL_PROPERTIES* printControlProperties, ID2D1PrintControl** printControl) { return ((HRESULT (WINAPI*)(ID2D1Device4*, IWICImagingFactory*, IPrintDocumentPackageTarget*, const D2D1_PRINT_CONTROL_PROPERTIES*, ID2D1PrintControl**))this->v->tbl[5])(this, wicFactory, documentTarget, printControlProperties, printControl); }
static inline void                              ID2D1Device4_SetMaximumTextureMemory                         (ID2D1Device4* this, UINT64 maximumInBytes) { ((void (WINAPI*)(ID2D1Device4*, UINT64))this->v->tbl[6])(this, maximumInBytes); }
static inline UINT64                            ID2D1Device4_GetMaximumTextureMemory                         (ID2D1Device4* this) { return ((UINT64 (WINAPI*)(ID2D1Device4*))this->v->tbl[7])(this); }
static inline void                              ID2D1Device4_ClearResources                                  (ID2D1Device4* this, UINT32 millisecondsSinceUse) { ((void (WINAPI*)(ID2D1Device4*, UINT32))this->v->tbl[8])(this, millisecondsSinceUse); }
static inline D2D1_RENDERING_PRIORITY           ID2D1Device4_GetRenderingPriority                            (ID2D1Device4* this) { return ((D2D1_RENDERING_PRIORITY (WINAPI*)(ID2D1Device4*))this->v->tbl[9])(this); }
static inline void                              ID2D1Device4_SetRenderingPriority                            (ID2D1Device4* this, D2D1_RENDERING_PRIORITY renderingPriority) { ((void (WINAPI*)(ID2D1Device4*, D2D1_RENDERING_PRIORITY))this->v->tbl[10])(this, renderingPriority); }
static inline HRESULT                           ID2D1Device4_CreateDeviceContext1                            (ID2D1Device4* this, D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext1** deviceContext1) { return ((HRESULT (WINAPI*)(ID2D1Device4*, D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext1**))this->v->tbl[11])(this, options, deviceContext1); }
static inline HRESULT                           ID2D1Device4_CreateDeviceContext2                            (ID2D1Device4* this, D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext2** deviceContext2) { return ((HRESULT (WINAPI*)(ID2D1Device4*, D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext2**))this->v->tbl[12])(this, options, deviceContext2); }
static inline void                              ID2D1Device4_FlushDeviceContexts                             (ID2D1Device4* this, ID2D1Bitmap* bitmap) { ((void (WINAPI*)(ID2D1Device4*, ID2D1Bitmap*))this->v->tbl[13])(this, bitmap); }
static inline HRESULT                           ID2D1Device4_GetDxgiDevice                                   (ID2D1Device4* this, IDXGIDevice** dxgiDevice) { return ((HRESULT (WINAPI*)(ID2D1Device4*, IDXGIDevice**))this->v->tbl[14])(this, dxgiDevice); }
static inline HRESULT                           ID2D1Device4_CreateDeviceContext3                            (ID2D1Device4* this, D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext3** deviceContext3) { return ((HRESULT (WINAPI*)(ID2D1Device4*, D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext3**))this->v->tbl[15])(this, options, deviceContext3); }
static inline HRESULT                           ID2D1Device4_CreateDeviceContext4                            (ID2D1Device4* this, D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext4** deviceContext4) { return ((HRESULT (WINAPI*)(ID2D1Device4*, D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext4**))this->v->tbl[16])(this, options, deviceContext4); }
static inline void                              ID2D1Device4_SetMaximumColorGlyphCacheMemory                 (ID2D1Device4* this, UINT64 maximumInBytes) { ((void (WINAPI*)(ID2D1Device4*, UINT64))this->v->tbl[17])(this, maximumInBytes); }
static inline UINT64                            ID2D1Device4_GetMaximumColorGlyphCacheMemory                 (ID2D1Device4* this) { return ((UINT64 (WINAPI*)(ID2D1Device4*))this->v->tbl[18])(this); }

static inline HRESULT                           ID2D1Device5_QueryInterface                                  (ID2D1Device5* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1Device5*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1Device5_AddRef                                          (ID2D1Device5* this) { return ((UINT32 (WINAPI*)(ID2D1Device5*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1Device5_Release                                         (ID2D1Device5* this) { return ((UINT32 (WINAPI*)(ID2D1Device5*))this->v->tbl[2])(this); }
static inline void                              ID2D1Device5_GetFactory                                      (ID2D1Device5* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1Device5*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline HRESULT                           ID2D1Device5_CreateDeviceContext                             (ID2D1Device5* this, D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext** deviceContext) { return ((HRESULT (WINAPI*)(ID2D1Device5*, D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext**))this->v->tbl[4])(this, options, deviceContext); }
static inline HRESULT                           ID2D1Device5_CreatePrintControl                              (ID2D1Device5* this, IWICImagingFactory* wicFactory, IPrintDocumentPackageTarget* documentTarget, const D2D1_PRINT_CONTROL_PROPERTIES* printControlProperties, ID2D1PrintControl** printControl) { return ((HRESULT (WINAPI*)(ID2D1Device5*, IWICImagingFactory*, IPrintDocumentPackageTarget*, const D2D1_PRINT_CONTROL_PROPERTIES*, ID2D1PrintControl**))this->v->tbl[5])(this, wicFactory, documentTarget, printControlProperties, printControl); }
static inline void                              ID2D1Device5_SetMaximumTextureMemory                         (ID2D1Device5* this, UINT64 maximumInBytes) { ((void (WINAPI*)(ID2D1Device5*, UINT64))this->v->tbl[6])(this, maximumInBytes); }
static inline UINT64                            ID2D1Device5_GetMaximumTextureMemory                         (ID2D1Device5* this) { return ((UINT64 (WINAPI*)(ID2D1Device5*))this->v->tbl[7])(this); }
static inline void                              ID2D1Device5_ClearResources                                  (ID2D1Device5* this, UINT32 millisecondsSinceUse) { ((void (WINAPI*)(ID2D1Device5*, UINT32))this->v->tbl[8])(this, millisecondsSinceUse); }
static inline D2D1_RENDERING_PRIORITY           ID2D1Device5_GetRenderingPriority                            (ID2D1Device5* this) { return ((D2D1_RENDERING_PRIORITY (WINAPI*)(ID2D1Device5*))this->v->tbl[9])(this); }
static inline void                              ID2D1Device5_SetRenderingPriority                            (ID2D1Device5* this, D2D1_RENDERING_PRIORITY renderingPriority) { ((void (WINAPI*)(ID2D1Device5*, D2D1_RENDERING_PRIORITY))this->v->tbl[10])(this, renderingPriority); }
static inline HRESULT                           ID2D1Device5_CreateDeviceContext1                            (ID2D1Device5* this, D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext1** deviceContext1) { return ((HRESULT (WINAPI*)(ID2D1Device5*, D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext1**))this->v->tbl[11])(this, options, deviceContext1); }
static inline HRESULT                           ID2D1Device5_CreateDeviceContext2                            (ID2D1Device5* this, D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext2** deviceContext2) { return ((HRESULT (WINAPI*)(ID2D1Device5*, D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext2**))this->v->tbl[12])(this, options, deviceContext2); }
static inline void                              ID2D1Device5_FlushDeviceContexts                             (ID2D1Device5* this, ID2D1Bitmap* bitmap) { ((void (WINAPI*)(ID2D1Device5*, ID2D1Bitmap*))this->v->tbl[13])(this, bitmap); }
static inline HRESULT                           ID2D1Device5_GetDxgiDevice                                   (ID2D1Device5* this, IDXGIDevice** dxgiDevice) { return ((HRESULT (WINAPI*)(ID2D1Device5*, IDXGIDevice**))this->v->tbl[14])(this, dxgiDevice); }
static inline HRESULT                           ID2D1Device5_CreateDeviceContext3                            (ID2D1Device5* this, D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext3** deviceContext3) { return ((HRESULT (WINAPI*)(ID2D1Device5*, D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext3**))this->v->tbl[15])(this, options, deviceContext3); }
static inline HRESULT                           ID2D1Device5_CreateDeviceContext4                            (ID2D1Device5* this, D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext4** deviceContext4) { return ((HRESULT (WINAPI*)(ID2D1Device5*, D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext4**))this->v->tbl[16])(this, options, deviceContext4); }
static inline void                              ID2D1Device5_SetMaximumColorGlyphCacheMemory                 (ID2D1Device5* this, UINT64 maximumInBytes) { ((void (WINAPI*)(ID2D1Device5*, UINT64))this->v->tbl[17])(this, maximumInBytes); }
static inline UINT64                            ID2D1Device5_GetMaximumColorGlyphCacheMemory                 (ID2D1Device5* this) { return ((UINT64 (WINAPI*)(ID2D1Device5*))this->v->tbl[18])(this); }
static inline HRESULT                           ID2D1Device5_CreateDeviceContext5                            (ID2D1Device5* this, D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext5** deviceContext5) { return ((HRESULT (WINAPI*)(ID2D1Device5*, D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext5**))this->v->tbl[19])(this, options, deviceContext5); }

static inline HRESULT                           ID2D1Device6_QueryInterface                                  (ID2D1Device6* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1Device6*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1Device6_AddRef                                          (ID2D1Device6* this) { return ((UINT32 (WINAPI*)(ID2D1Device6*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1Device6_Release                                         (ID2D1Device6* this) { return ((UINT32 (WINAPI*)(ID2D1Device6*))this->v->tbl[2])(this); }
static inline void                              ID2D1Device6_GetFactory                                      (ID2D1Device6* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1Device6*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline HRESULT                           ID2D1Device6_CreateDeviceContext                             (ID2D1Device6* this, D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext** deviceContext) { return ((HRESULT (WINAPI*)(ID2D1Device6*, D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext**))this->v->tbl[4])(this, options, deviceContext); }
static inline HRESULT                           ID2D1Device6_CreatePrintControl                              (ID2D1Device6* this, IWICImagingFactory* wicFactory, IPrintDocumentPackageTarget* documentTarget, const D2D1_PRINT_CONTROL_PROPERTIES* printControlProperties, ID2D1PrintControl** printControl) { return ((HRESULT (WINAPI*)(ID2D1Device6*, IWICImagingFactory*, IPrintDocumentPackageTarget*, const D2D1_PRINT_CONTROL_PROPERTIES*, ID2D1PrintControl**))this->v->tbl[5])(this, wicFactory, documentTarget, printControlProperties, printControl); }
static inline void                              ID2D1Device6_SetMaximumTextureMemory                         (ID2D1Device6* this, UINT64 maximumInBytes) { ((void (WINAPI*)(ID2D1Device6*, UINT64))this->v->tbl[6])(this, maximumInBytes); }
static inline UINT64                            ID2D1Device6_GetMaximumTextureMemory                         (ID2D1Device6* this) { return ((UINT64 (WINAPI*)(ID2D1Device6*))this->v->tbl[7])(this); }
static inline void                              ID2D1Device6_ClearResources                                  (ID2D1Device6* this, UINT32 millisecondsSinceUse) { ((void (WINAPI*)(ID2D1Device6*, UINT32))this->v->tbl[8])(this, millisecondsSinceUse); }
static inline D2D1_RENDERING_PRIORITY           ID2D1Device6_GetRenderingPriority                            (ID2D1Device6* this) { return ((D2D1_RENDERING_PRIORITY (WINAPI*)(ID2D1Device6*))this->v->tbl[9])(this); }
static inline void                              ID2D1Device6_SetRenderingPriority                            (ID2D1Device6* this, D2D1_RENDERING_PRIORITY renderingPriority) { ((void (WINAPI*)(ID2D1Device6*, D2D1_RENDERING_PRIORITY))this->v->tbl[10])(this, renderingPriority); }
static inline HRESULT                           ID2D1Device6_CreateDeviceContext1                            (ID2D1Device6* this, D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext1** deviceContext1) { return ((HRESULT (WINAPI*)(ID2D1Device6*, D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext1**))this->v->tbl[11])(this, options, deviceContext1); }
static inline HRESULT                           ID2D1Device6_CreateDeviceContext2                            (ID2D1Device6* this, D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext2** deviceContext2) { return ((HRESULT (WINAPI*)(ID2D1Device6*, D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext2**))this->v->tbl[12])(this, options, deviceContext2); }
static inline void                              ID2D1Device6_FlushDeviceContexts                             (ID2D1Device6* this, ID2D1Bitmap* bitmap) { ((void (WINAPI*)(ID2D1Device6*, ID2D1Bitmap*))this->v->tbl[13])(this, bitmap); }
static inline HRESULT                           ID2D1Device6_GetDxgiDevice                                   (ID2D1Device6* this, IDXGIDevice** dxgiDevice) { return ((HRESULT (WINAPI*)(ID2D1Device6*, IDXGIDevice**))this->v->tbl[14])(this, dxgiDevice); }
static inline HRESULT                           ID2D1Device6_CreateDeviceContext3                            (ID2D1Device6* this, D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext3** deviceContext3) { return ((HRESULT (WINAPI*)(ID2D1Device6*, D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext3**))this->v->tbl[15])(this, options, deviceContext3); }
static inline HRESULT                           ID2D1Device6_CreateDeviceContext4                            (ID2D1Device6* this, D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext4** deviceContext4) { return ((HRESULT (WINAPI*)(ID2D1Device6*, D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext4**))this->v->tbl[16])(this, options, deviceContext4); }
static inline void                              ID2D1Device6_SetMaximumColorGlyphCacheMemory                 (ID2D1Device6* this, UINT64 maximumInBytes) { ((void (WINAPI*)(ID2D1Device6*, UINT64))this->v->tbl[17])(this, maximumInBytes); }
static inline UINT64                            ID2D1Device6_GetMaximumColorGlyphCacheMemory                 (ID2D1Device6* this) { return ((UINT64 (WINAPI*)(ID2D1Device6*))this->v->tbl[18])(this); }
static inline HRESULT                           ID2D1Device6_CreateDeviceContext5                            (ID2D1Device6* this, D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext5** deviceContext5) { return ((HRESULT (WINAPI*)(ID2D1Device6*, D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext5**))this->v->tbl[19])(this, options, deviceContext5); }
static inline HRESULT                           ID2D1Device6_CreateDeviceContext6                            (ID2D1Device6* this, D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext6** deviceContext6) { return ((HRESULT (WINAPI*)(ID2D1Device6*, D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext6**))this->v->tbl[20])(this, options, deviceContext6); }

static inline HRESULT                           ID2D1Device7_QueryInterface                                  (ID2D1Device7* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1Device7*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1Device7_AddRef                                          (ID2D1Device7* this) { return ((UINT32 (WINAPI*)(ID2D1Device7*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1Device7_Release                                         (ID2D1Device7* this) { return ((UINT32 (WINAPI*)(ID2D1Device7*))this->v->tbl[2])(this); }
static inline void                              ID2D1Device7_GetFactory                                      (ID2D1Device7* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1Device7*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline HRESULT                           ID2D1Device7_CreateDeviceContext                             (ID2D1Device7* this, D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext** deviceContext) { return ((HRESULT (WINAPI*)(ID2D1Device7*, D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext**))this->v->tbl[4])(this, options, deviceContext); }
static inline HRESULT                           ID2D1Device7_CreatePrintControl                              (ID2D1Device7* this, IWICImagingFactory* wicFactory, IPrintDocumentPackageTarget* documentTarget, const D2D1_PRINT_CONTROL_PROPERTIES* printControlProperties, ID2D1PrintControl** printControl) { return ((HRESULT (WINAPI*)(ID2D1Device7*, IWICImagingFactory*, IPrintDocumentPackageTarget*, const D2D1_PRINT_CONTROL_PROPERTIES*, ID2D1PrintControl**))this->v->tbl[5])(this, wicFactory, documentTarget, printControlProperties, printControl); }
static inline void                              ID2D1Device7_SetMaximumTextureMemory                         (ID2D1Device7* this, UINT64 maximumInBytes) { ((void (WINAPI*)(ID2D1Device7*, UINT64))this->v->tbl[6])(this, maximumInBytes); }
static inline UINT64                            ID2D1Device7_GetMaximumTextureMemory                         (ID2D1Device7* this) { return ((UINT64 (WINAPI*)(ID2D1Device7*))this->v->tbl[7])(this); }
static inline void                              ID2D1Device7_ClearResources                                  (ID2D1Device7* this, UINT32 millisecondsSinceUse) { ((void (WINAPI*)(ID2D1Device7*, UINT32))this->v->tbl[8])(this, millisecondsSinceUse); }
static inline D2D1_RENDERING_PRIORITY           ID2D1Device7_GetRenderingPriority                            (ID2D1Device7* this) { return ((D2D1_RENDERING_PRIORITY (WINAPI*)(ID2D1Device7*))this->v->tbl[9])(this); }
static inline void                              ID2D1Device7_SetRenderingPriority                            (ID2D1Device7* this, D2D1_RENDERING_PRIORITY renderingPriority) { ((void (WINAPI*)(ID2D1Device7*, D2D1_RENDERING_PRIORITY))this->v->tbl[10])(this, renderingPriority); }
static inline HRESULT                           ID2D1Device7_CreateDeviceContext1                            (ID2D1Device7* this, D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext1** deviceContext1) { return ((HRESULT (WINAPI*)(ID2D1Device7*, D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext1**))this->v->tbl[11])(this, options, deviceContext1); }
static inline HRESULT                           ID2D1Device7_CreateDeviceContext2                            (ID2D1Device7* this, D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext2** deviceContext2) { return ((HRESULT (WINAPI*)(ID2D1Device7*, D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext2**))this->v->tbl[12])(this, options, deviceContext2); }
static inline void                              ID2D1Device7_FlushDeviceContexts                             (ID2D1Device7* this, ID2D1Bitmap* bitmap) { ((void (WINAPI*)(ID2D1Device7*, ID2D1Bitmap*))this->v->tbl[13])(this, bitmap); }
static inline HRESULT                           ID2D1Device7_GetDxgiDevice                                   (ID2D1Device7* this, IDXGIDevice** dxgiDevice) { return ((HRESULT (WINAPI*)(ID2D1Device7*, IDXGIDevice**))this->v->tbl[14])(this, dxgiDevice); }
static inline HRESULT                           ID2D1Device7_CreateDeviceContext3                            (ID2D1Device7* this, D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext3** deviceContext3) { return ((HRESULT (WINAPI*)(ID2D1Device7*, D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext3**))this->v->tbl[15])(this, options, deviceContext3); }
static inline HRESULT                           ID2D1Device7_CreateDeviceContext4                            (ID2D1Device7* this, D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext4** deviceContext4) { return ((HRESULT (WINAPI*)(ID2D1Device7*, D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext4**))this->v->tbl[16])(this, options, deviceContext4); }
static inline void                              ID2D1Device7_SetMaximumColorGlyphCacheMemory                 (ID2D1Device7* this, UINT64 maximumInBytes) { ((void (WINAPI*)(ID2D1Device7*, UINT64))this->v->tbl[17])(this, maximumInBytes); }
static inline UINT64                            ID2D1Device7_GetMaximumColorGlyphCacheMemory                 (ID2D1Device7* this) { return ((UINT64 (WINAPI*)(ID2D1Device7*))this->v->tbl[18])(this); }
static inline HRESULT                           ID2D1Device7_CreateDeviceContext5                            (ID2D1Device7* this, D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext5** deviceContext5) { return ((HRESULT (WINAPI*)(ID2D1Device7*, D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext5**))this->v->tbl[19])(this, options, deviceContext5); }
static inline HRESULT                           ID2D1Device7_CreateDeviceContext6                            (ID2D1Device7* this, D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext6** deviceContext6) { return ((HRESULT (WINAPI*)(ID2D1Device7*, D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext6**))this->v->tbl[20])(this, options, deviceContext6); }
static inline HRESULT                           ID2D1Device7_CreateDeviceContext7                            (ID2D1Device7* this, D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext7** deviceContext) { return ((HRESULT (WINAPI*)(ID2D1Device7*, D2D1_DEVICE_CONTEXT_OPTIONS, ID2D1DeviceContext7**))this->v->tbl[21])(this, options, deviceContext); }

static inline HRESULT                           ID2D1DeviceContext_QueryInterface                            (ID2D1DeviceContext* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1DeviceContext_AddRef                                    (ID2D1DeviceContext* this) { return ((UINT32 (WINAPI*)(ID2D1DeviceContext*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1DeviceContext_Release                                   (ID2D1DeviceContext* this) { return ((UINT32 (WINAPI*)(ID2D1DeviceContext*))this->v->tbl[2])(this); }
static inline void                              ID2D1DeviceContext_GetFactory                                (ID2D1DeviceContext* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1DeviceContext*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline HRESULT                           ID2D1DeviceContext_CreateBitmap                              (ID2D1DeviceContext* this, D2D_SIZE_U size, const void* srcData, UINT32 pitch, const D2D1_BITMAP_PROPERTIES* bitmapProperties, ID2D1Bitmap** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext*, D2D_SIZE_U, const void*, UINT32, const D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap**))this->v->tbl[4])(this, size, srcData, pitch, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext_CreateBitmapFromWicBitmap                 (ID2D1DeviceContext* this, IWICBitmapSource* wicBitmapSource, const D2D1_BITMAP_PROPERTIES* bitmapProperties, ID2D1Bitmap** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext*, IWICBitmapSource*, const D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap**))this->v->tbl[5])(this, wicBitmapSource, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext_CreateSharedBitmap                        (ID2D1DeviceContext* this, const GUID* riid, void* data, const D2D1_BITMAP_PROPERTIES* bitmapProperties, ID2D1Bitmap** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext*, const GUID*, void*, const D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap**))this->v->tbl[6])(this, riid, data, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext_CreateBitmapBrush                         (ID2D1DeviceContext* this, ID2D1Bitmap* bitmap, const D2D1_BITMAP_BRUSH_PROPERTIES* bitmapBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1BitmapBrush** bitmapBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext*, ID2D1Bitmap*, const D2D1_BITMAP_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1BitmapBrush**))this->v->tbl[7])(this, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush); }
static inline HRESULT                           ID2D1DeviceContext_CreateSolidColorBrush                     (ID2D1DeviceContext* this, const D2D1_COLOR_F* color, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1SolidColorBrush** solidColorBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext*, const D2D1_COLOR_F*, const D2D1_BRUSH_PROPERTIES*, ID2D1SolidColorBrush**))this->v->tbl[8])(this, color, brushProperties, solidColorBrush); }
static inline HRESULT                           ID2D1DeviceContext_CreateGradientStopCollection              (ID2D1DeviceContext* this, const D2D1_GRADIENT_STOP* gradientStops, UINT32 gradientStopsCount, D2D1_GAMMA colorInterpolationGamma, D2D1_EXTEND_MODE extendMode, ID2D1GradientStopCollection** gradientStopCollection) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext*, const D2D1_GRADIENT_STOP*, UINT32, D2D1_GAMMA, D2D1_EXTEND_MODE, ID2D1GradientStopCollection**))this->v->tbl[9])(this, gradientStops, gradientStopsCount, colorInterpolationGamma, extendMode, gradientStopCollection); }
static inline HRESULT                           ID2D1DeviceContext_CreateLinearGradientBrush                 (ID2D1DeviceContext* this, const D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES* linearGradientBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1GradientStopCollection* gradientStopCollection, ID2D1LinearGradientBrush** linearGradientBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext*, const D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection*, ID2D1LinearGradientBrush**))this->v->tbl[10])(this, linearGradientBrushProperties, brushProperties, gradientStopCollection, linearGradientBrush); }
static inline HRESULT                           ID2D1DeviceContext_CreateRadialGradientBrush                 (ID2D1DeviceContext* this, const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES* radialGradientBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1GradientStopCollection* gradientStopCollection, ID2D1RadialGradientBrush** radialGradientBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext*, const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection*, ID2D1RadialGradientBrush**))this->v->tbl[11])(this, radialGradientBrushProperties, brushProperties, gradientStopCollection, radialGradientBrush); }
static inline HRESULT                           ID2D1DeviceContext_CreateCompatibleRenderTarget              (ID2D1DeviceContext* this, const D2D_SIZE_F* desiredSize, const D2D_SIZE_U* desiredPixelSize, const D2D1_PIXEL_FORMAT* desiredFormat, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS options, ID2D1BitmapRenderTarget** bitmapRenderTarget) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext*, const D2D_SIZE_F*, const D2D_SIZE_U*, const D2D1_PIXEL_FORMAT*, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, ID2D1BitmapRenderTarget**))this->v->tbl[12])(this, desiredSize, desiredPixelSize, desiredFormat, options, bitmapRenderTarget); }
static inline HRESULT                           ID2D1DeviceContext_CreateLayer                               (ID2D1DeviceContext* this, const D2D_SIZE_F* size, ID2D1Layer** layer) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext*, const D2D_SIZE_F*, ID2D1Layer**))this->v->tbl[13])(this, size, layer); }
static inline HRESULT                           ID2D1DeviceContext_CreateMesh                                (ID2D1DeviceContext* this, ID2D1Mesh** mesh) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext*, ID2D1Mesh**))this->v->tbl[14])(this, mesh); }
static inline void                              ID2D1DeviceContext_DrawLine                                  (ID2D1DeviceContext* this, D2D_POINT_2F point0, D2D_POINT_2F point1, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DeviceContext*, D2D_POINT_2F, D2D_POINT_2F, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[15])(this, point0, point1, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DeviceContext_DrawRectangle                             (ID2D1DeviceContext* this, const D2D_RECT_F* rect, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DeviceContext*, const D2D_RECT_F*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[16])(this, rect, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DeviceContext_FillRectangle                             (ID2D1DeviceContext* this, const D2D_RECT_F* rect, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1DeviceContext*, const D2D_RECT_F*, ID2D1Brush*))this->v->tbl[17])(this, rect, brush); }
static inline void                              ID2D1DeviceContext_DrawRoundedRectangle                      (ID2D1DeviceContext* this, const D2D1_ROUNDED_RECT* roundedRect, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DeviceContext*, const D2D1_ROUNDED_RECT*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[18])(this, roundedRect, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DeviceContext_FillRoundedRectangle                      (ID2D1DeviceContext* this, const D2D1_ROUNDED_RECT* roundedRect, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1DeviceContext*, const D2D1_ROUNDED_RECT*, ID2D1Brush*))this->v->tbl[19])(this, roundedRect, brush); }
static inline void                              ID2D1DeviceContext_DrawEllipse                               (ID2D1DeviceContext* this, const D2D1_ELLIPSE* ellipse, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DeviceContext*, const D2D1_ELLIPSE*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[20])(this, ellipse, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DeviceContext_FillEllipse                               (ID2D1DeviceContext* this, const D2D1_ELLIPSE* ellipse, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1DeviceContext*, const D2D1_ELLIPSE*, ID2D1Brush*))this->v->tbl[21])(this, ellipse, brush); }
static inline void                              ID2D1DeviceContext_DrawGeometry                              (ID2D1DeviceContext* this, ID2D1Geometry* geometry, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DeviceContext*, ID2D1Geometry*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[22])(this, geometry, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DeviceContext_FillGeometry                              (ID2D1DeviceContext* this, ID2D1Geometry* geometry, ID2D1Brush* brush, ID2D1Brush* opacityBrush) { ((void (WINAPI*)(ID2D1DeviceContext*, ID2D1Geometry*, ID2D1Brush*, ID2D1Brush*))this->v->tbl[23])(this, geometry, brush, opacityBrush); }
static inline void                              ID2D1DeviceContext_FillMesh                                  (ID2D1DeviceContext* this, ID2D1Mesh* mesh, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1DeviceContext*, ID2D1Mesh*, ID2D1Brush*))this->v->tbl[24])(this, mesh, brush); }
static inline void                              ID2D1DeviceContext_FillOpacityMask                           (ID2D1DeviceContext* this, ID2D1Bitmap* opacityMask, ID2D1Brush* brush, D2D1_OPACITY_MASK_CONTENT content, const D2D_RECT_F* destinationRectangle, const D2D_RECT_F* sourceRectangle) { ((void (WINAPI*)(ID2D1DeviceContext*, ID2D1Bitmap*, ID2D1Brush*, D2D1_OPACITY_MASK_CONTENT, const D2D_RECT_F*, const D2D_RECT_F*))this->v->tbl[25])(this, opacityMask, brush, content, destinationRectangle, sourceRectangle); }
static inline void                              ID2D1DeviceContext_DrawBitmap                                (ID2D1DeviceContext* this, ID2D1Bitmap* bitmap, const D2D_RECT_F* destinationRectangle, FLOAT opacity, D2D1_BITMAP_INTERPOLATION_MODE interpolationMode, const D2D_RECT_F* sourceRectangle) { ((void (WINAPI*)(ID2D1DeviceContext*, ID2D1Bitmap*, const D2D_RECT_F*, FLOAT, D2D1_BITMAP_INTERPOLATION_MODE, const D2D_RECT_F*))this->v->tbl[26])(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle); }
static inline void                              ID2D1DeviceContext_DrawText                                  (ID2D1DeviceContext* this, const WCHAR* string, UINT32 stringLength, IDWriteTextFormat* textFormat, const D2D_RECT_F* layoutRect, ID2D1Brush* defaultFillBrush, D2D1_DRAW_TEXT_OPTIONS options, DWRITE_MEASURING_MODE measuringMode) { ((void (WINAPI*)(ID2D1DeviceContext*, const WCHAR*, UINT32, IDWriteTextFormat*, const D2D_RECT_F*, ID2D1Brush*, D2D1_DRAW_TEXT_OPTIONS, DWRITE_MEASURING_MODE))this->v->tbl[27])(this, string, stringLength, textFormat, layoutRect, defaultFillBrush, options, measuringMode); }
static inline void                              ID2D1DeviceContext_DrawTextLayout                            (ID2D1DeviceContext* this, D2D_POINT_2F origin, IDWriteTextLayout* textLayout, ID2D1Brush* defaultFillBrush, D2D1_DRAW_TEXT_OPTIONS options) { ((void (WINAPI*)(ID2D1DeviceContext*, D2D_POINT_2F, IDWriteTextLayout*, ID2D1Brush*, D2D1_DRAW_TEXT_OPTIONS))this->v->tbl[28])(this, origin, textLayout, defaultFillBrush, options); }
static inline void                              ID2D1DeviceContext_DrawGlyphRun                              (ID2D1DeviceContext* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, ID2D1Brush* foregroundBrush, DWRITE_MEASURING_MODE measuringMode) { ((void (WINAPI*)(ID2D1DeviceContext*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, ID2D1Brush*, DWRITE_MEASURING_MODE))this->v->tbl[29])(this, baselineOrigin, glyphRun, foregroundBrush, measuringMode); }
static inline void                              ID2D1DeviceContext_SetTransform                              (ID2D1DeviceContext* this, const D2D_MATRIX_3X2_F* transform) { ((void (WINAPI*)(ID2D1DeviceContext*, const D2D_MATRIX_3X2_F*))this->v->tbl[30])(this, transform); }
static inline void                              ID2D1DeviceContext_GetTransform                              (ID2D1DeviceContext* this, D2D_MATRIX_3X2_F* transform) { ((void (WINAPI*)(ID2D1DeviceContext*, D2D_MATRIX_3X2_F*))this->v->tbl[31])(this, transform); }
static inline void                              ID2D1DeviceContext_SetAntialiasMode                          (ID2D1DeviceContext* this, D2D1_ANTIALIAS_MODE antialiasMode) { ((void (WINAPI*)(ID2D1DeviceContext*, D2D1_ANTIALIAS_MODE))this->v->tbl[32])(this, antialiasMode); }
static inline D2D1_ANTIALIAS_MODE               ID2D1DeviceContext_GetAntialiasMode                          (ID2D1DeviceContext* this) { return ((D2D1_ANTIALIAS_MODE (WINAPI*)(ID2D1DeviceContext*))this->v->tbl[33])(this); }
static inline void                              ID2D1DeviceContext_SetTextAntialiasMode                      (ID2D1DeviceContext* this, D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode) { ((void (WINAPI*)(ID2D1DeviceContext*, D2D1_TEXT_ANTIALIAS_MODE))this->v->tbl[34])(this, textAntialiasMode); }
static inline D2D1_TEXT_ANTIALIAS_MODE          ID2D1DeviceContext_GetTextAntialiasMode                      (ID2D1DeviceContext* this) { return ((D2D1_TEXT_ANTIALIAS_MODE (WINAPI*)(ID2D1DeviceContext*))this->v->tbl[35])(this); }
static inline void                              ID2D1DeviceContext_SetTextRenderingParams                    (ID2D1DeviceContext* this, IDWriteRenderingParams* textRenderingParams) { ((void (WINAPI*)(ID2D1DeviceContext*, IDWriteRenderingParams*))this->v->tbl[36])(this, textRenderingParams); }
static inline void                              ID2D1DeviceContext_GetTextRenderingParams                    (ID2D1DeviceContext* this, IDWriteRenderingParams** textRenderingParams) { ((void (WINAPI*)(ID2D1DeviceContext*, IDWriteRenderingParams**))this->v->tbl[37])(this, textRenderingParams); }
static inline void                              ID2D1DeviceContext_SetTags                                   (ID2D1DeviceContext* this, UINT64 tag1, UINT64 tag2) { ((void (WINAPI*)(ID2D1DeviceContext*, UINT64, UINT64))this->v->tbl[38])(this, tag1, tag2); }
static inline void                              ID2D1DeviceContext_GetTags                                   (ID2D1DeviceContext* this, UINT64* tag1, UINT64* tag2) { ((void (WINAPI*)(ID2D1DeviceContext*, UINT64*, UINT64*))this->v->tbl[39])(this, tag1, tag2); }
static inline void                              ID2D1DeviceContext_PushLayer                                 (ID2D1DeviceContext* this, const D2D1_LAYER_PARAMETERS* layerParameters, ID2D1Layer* layer) { ((void (WINAPI*)(ID2D1DeviceContext*, const D2D1_LAYER_PARAMETERS*, ID2D1Layer*))this->v->tbl[40])(this, layerParameters, layer); }
static inline void                              ID2D1DeviceContext_PopLayer                                  (ID2D1DeviceContext* this) { ((void (WINAPI*)(ID2D1DeviceContext*))this->v->tbl[41])(this); }
static inline HRESULT                           ID2D1DeviceContext_Flush                                     (ID2D1DeviceContext* this, UINT64* tag1, UINT64* tag2) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext*, UINT64*, UINT64*))this->v->tbl[42])(this, tag1, tag2); }
static inline void                              ID2D1DeviceContext_SaveDrawingState                          (ID2D1DeviceContext* this, ID2D1DrawingStateBlock* drawingStateBlock) { ((void (WINAPI*)(ID2D1DeviceContext*, ID2D1DrawingStateBlock*))this->v->tbl[43])(this, drawingStateBlock); }
static inline void                              ID2D1DeviceContext_RestoreDrawingState                       (ID2D1DeviceContext* this, ID2D1DrawingStateBlock* drawingStateBlock) { ((void (WINAPI*)(ID2D1DeviceContext*, ID2D1DrawingStateBlock*))this->v->tbl[44])(this, drawingStateBlock); }
static inline void                              ID2D1DeviceContext_PushAxisAlignedClip                       (ID2D1DeviceContext* this, const D2D_RECT_F* clipRect, D2D1_ANTIALIAS_MODE antialiasMode) { ((void (WINAPI*)(ID2D1DeviceContext*, const D2D_RECT_F*, D2D1_ANTIALIAS_MODE))this->v->tbl[45])(this, clipRect, antialiasMode); }
static inline void                              ID2D1DeviceContext_PopAxisAlignedClip                        (ID2D1DeviceContext* this) { ((void (WINAPI*)(ID2D1DeviceContext*))this->v->tbl[46])(this); }
static inline void                              ID2D1DeviceContext_Clear                                     (ID2D1DeviceContext* this, const D2D1_COLOR_F* clearColor) { ((void (WINAPI*)(ID2D1DeviceContext*, const D2D1_COLOR_F*))this->v->tbl[47])(this, clearColor); }
static inline void                              ID2D1DeviceContext_BeginDraw                                 (ID2D1DeviceContext* this) { ((void (WINAPI*)(ID2D1DeviceContext*))this->v->tbl[48])(this); }
static inline HRESULT                           ID2D1DeviceContext_EndDraw                                   (ID2D1DeviceContext* this, UINT64* tag1, UINT64* tag2) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext*, UINT64*, UINT64*))this->v->tbl[49])(this, tag1, tag2); }
static inline D2D1_PIXEL_FORMAT                 ID2D1DeviceContext_GetPixelFormat                            (ID2D1DeviceContext* this) { D2D1_PIXEL_FORMAT _return; ((void (WINAPI*)(ID2D1DeviceContext*, D2D1_PIXEL_FORMAT*))this->v->tbl[50])(this, &_return); return _return; }
static inline void                              ID2D1DeviceContext_SetDpi                                    (ID2D1DeviceContext* this, FLOAT dpiX, FLOAT dpiY) { ((void (WINAPI*)(ID2D1DeviceContext*, FLOAT, FLOAT))this->v->tbl[51])(this, dpiX, dpiY); }
static inline void                              ID2D1DeviceContext_GetDpi                                    (ID2D1DeviceContext* this, FLOAT* dpiX, FLOAT* dpiY) { ((void (WINAPI*)(ID2D1DeviceContext*, FLOAT*, FLOAT*))this->v->tbl[52])(this, dpiX, dpiY); }
static inline D2D_SIZE_F                        ID2D1DeviceContext_GetSize                                   (ID2D1DeviceContext* this) { D2D_SIZE_F _return; ((void (WINAPI*)(ID2D1DeviceContext*, D2D_SIZE_F*))this->v->tbl[53])(this, &_return); return _return; }
static inline D2D_SIZE_U                        ID2D1DeviceContext_GetPixelSize                              (ID2D1DeviceContext* this) { D2D_SIZE_U _return; ((void (WINAPI*)(ID2D1DeviceContext*, D2D_SIZE_U*))this->v->tbl[54])(this, &_return); return _return; }
static inline UINT32                            ID2D1DeviceContext_GetMaximumBitmapSize                      (ID2D1DeviceContext* this) { return ((UINT32 (WINAPI*)(ID2D1DeviceContext*))this->v->tbl[55])(this); }
static inline BOOL                              ID2D1DeviceContext_IsSupported                               (ID2D1DeviceContext* this, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties) { return ((BOOL (WINAPI*)(ID2D1DeviceContext*, const D2D1_RENDER_TARGET_PROPERTIES*))this->v->tbl[56])(this, renderTargetProperties); }
static inline HRESULT                           ID2D1DeviceContext_CreateBitmap1                             (ID2D1DeviceContext* this, D2D_SIZE_U size, const void* sourceData, UINT32 pitch, const D2D1_BITMAP_PROPERTIES1* bitmapProperties, ID2D1Bitmap1** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext*, D2D_SIZE_U, const void*, UINT32, const D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1**))this->v->tbl[57])(this, size, sourceData, pitch, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext_CreateBitmapFromWicBitmap1                (ID2D1DeviceContext* this, IWICBitmapSource* wicBitmapSource, const D2D1_BITMAP_PROPERTIES1* bitmapProperties, ID2D1Bitmap1** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext*, IWICBitmapSource*, const D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1**))this->v->tbl[58])(this, wicBitmapSource, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext_CreateColorContext                        (ID2D1DeviceContext* this, D2D1_COLOR_SPACE space, const UINT8* profile, UINT32 profileSize, ID2D1ColorContext** colorContext) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext*, D2D1_COLOR_SPACE, const UINT8*, UINT32, ID2D1ColorContext**))this->v->tbl[59])(this, space, profile, profileSize, colorContext); }
static inline HRESULT                           ID2D1DeviceContext_CreateColorContextFromFilename            (ID2D1DeviceContext* this, const WCHAR* filename, ID2D1ColorContext** colorContext) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext*, const WCHAR*, ID2D1ColorContext**))this->v->tbl[60])(this, filename, colorContext); }
static inline HRESULT                           ID2D1DeviceContext_CreateColorContextFromWicColorContext     (ID2D1DeviceContext* this, IWICColorContext* wicColorContext, ID2D1ColorContext** colorContext) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext*, IWICColorContext*, ID2D1ColorContext**))this->v->tbl[61])(this, wicColorContext, colorContext); }
static inline HRESULT                           ID2D1DeviceContext_CreateBitmapFromDxgiSurface               (ID2D1DeviceContext* this, IDXGISurface* surface, const D2D1_BITMAP_PROPERTIES1* bitmapProperties, ID2D1Bitmap1** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext*, IDXGISurface*, const D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1**))this->v->tbl[62])(this, surface, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext_CreateEffect                              (ID2D1DeviceContext* this, const GUID* effectId, ID2D1Effect** effect) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext*, const GUID*, ID2D1Effect**))this->v->tbl[63])(this, effectId, effect); }
static inline HRESULT                           ID2D1DeviceContext_CreateGradientStopCollection1             (ID2D1DeviceContext* this, const D2D1_GRADIENT_STOP* straightAlphaGradientStops, UINT32 straightAlphaGradientStopsCount, D2D1_COLOR_SPACE preInterpolationSpace, D2D1_COLOR_SPACE postInterpolationSpace, D2D1_BUFFER_PRECISION bufferPrecision, D2D1_EXTEND_MODE extendMode, D2D1_COLOR_INTERPOLATION_MODE colorInterpolationMode, ID2D1GradientStopCollection1** gradientStopCollection1) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext*, const D2D1_GRADIENT_STOP*, UINT32, D2D1_COLOR_SPACE, D2D1_COLOR_SPACE, D2D1_BUFFER_PRECISION, D2D1_EXTEND_MODE, D2D1_COLOR_INTERPOLATION_MODE, ID2D1GradientStopCollection1**))this->v->tbl[64])(this, straightAlphaGradientStops, straightAlphaGradientStopsCount, preInterpolationSpace, postInterpolationSpace, bufferPrecision, extendMode, colorInterpolationMode, gradientStopCollection1); }
static inline HRESULT                           ID2D1DeviceContext_CreateImageBrush                          (ID2D1DeviceContext* this, ID2D1Image* image, const D2D1_IMAGE_BRUSH_PROPERTIES* imageBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1ImageBrush** imageBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext*, ID2D1Image*, const D2D1_IMAGE_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1ImageBrush**))this->v->tbl[65])(this, image, imageBrushProperties, brushProperties, imageBrush); }
static inline HRESULT                           ID2D1DeviceContext_CreateBitmapBrush1                        (ID2D1DeviceContext* this, ID2D1Bitmap* bitmap, const D2D1_BITMAP_BRUSH_PROPERTIES1* bitmapBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1BitmapBrush1** bitmapBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext*, ID2D1Bitmap*, const D2D1_BITMAP_BRUSH_PROPERTIES1*, const D2D1_BRUSH_PROPERTIES*, ID2D1BitmapBrush1**))this->v->tbl[66])(this, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush); }
static inline HRESULT                           ID2D1DeviceContext_CreateCommandList                         (ID2D1DeviceContext* this, ID2D1CommandList** commandList) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext*, ID2D1CommandList**))this->v->tbl[67])(this, commandList); }
static inline BOOL                              ID2D1DeviceContext_IsDxgiFormatSupported                     (ID2D1DeviceContext* this, DXGI_FORMAT format) { return ((BOOL (WINAPI*)(ID2D1DeviceContext*, DXGI_FORMAT))this->v->tbl[68])(this, format); }
static inline BOOL                              ID2D1DeviceContext_IsBufferPrecisionSupported                (ID2D1DeviceContext* this, D2D1_BUFFER_PRECISION bufferPrecision) { return ((BOOL (WINAPI*)(ID2D1DeviceContext*, D2D1_BUFFER_PRECISION))this->v->tbl[69])(this, bufferPrecision); }
static inline HRESULT                           ID2D1DeviceContext_GetImageLocalBounds                       (ID2D1DeviceContext* this, ID2D1Image* image, D2D_RECT_F* localBounds) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext*, ID2D1Image*, D2D_RECT_F*))this->v->tbl[70])(this, image, localBounds); }
static inline HRESULT                           ID2D1DeviceContext_GetImageWorldBounds                       (ID2D1DeviceContext* this, ID2D1Image* image, D2D_RECT_F* worldBounds) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext*, ID2D1Image*, D2D_RECT_F*))this->v->tbl[71])(this, image, worldBounds); }
static inline HRESULT                           ID2D1DeviceContext_GetGlyphRunWorldBounds                    (ID2D1DeviceContext* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, DWRITE_MEASURING_MODE measuringMode, D2D_RECT_F* bounds) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, DWRITE_MEASURING_MODE, D2D_RECT_F*))this->v->tbl[72])(this, baselineOrigin, glyphRun, measuringMode, bounds); }
static inline void                              ID2D1DeviceContext_GetDevice                                 (ID2D1DeviceContext* this, ID2D1Device** device) { ((void (WINAPI*)(ID2D1DeviceContext*, ID2D1Device**))this->v->tbl[73])(this, device); }
static inline void                              ID2D1DeviceContext_SetTarget                                 (ID2D1DeviceContext* this, ID2D1Image* image) { ((void (WINAPI*)(ID2D1DeviceContext*, ID2D1Image*))this->v->tbl[74])(this, image); }
static inline void                              ID2D1DeviceContext_GetTarget                                 (ID2D1DeviceContext* this, ID2D1Image** image) { ((void (WINAPI*)(ID2D1DeviceContext*, ID2D1Image**))this->v->tbl[75])(this, image); }
static inline void                              ID2D1DeviceContext_SetRenderingControls                      (ID2D1DeviceContext* this, const D2D1_RENDERING_CONTROLS* renderingControls) { ((void (WINAPI*)(ID2D1DeviceContext*, const D2D1_RENDERING_CONTROLS*))this->v->tbl[76])(this, renderingControls); }
static inline void                              ID2D1DeviceContext_GetRenderingControls                      (ID2D1DeviceContext* this, D2D1_RENDERING_CONTROLS* renderingControls) { ((void (WINAPI*)(ID2D1DeviceContext*, D2D1_RENDERING_CONTROLS*))this->v->tbl[77])(this, renderingControls); }
static inline void                              ID2D1DeviceContext_SetPrimitiveBlend                         (ID2D1DeviceContext* this, D2D1_PRIMITIVE_BLEND primitiveBlend) { ((void (WINAPI*)(ID2D1DeviceContext*, D2D1_PRIMITIVE_BLEND))this->v->tbl[78])(this, primitiveBlend); }
static inline D2D1_PRIMITIVE_BLEND              ID2D1DeviceContext_GetPrimitiveBlend                         (ID2D1DeviceContext* this) { return ((D2D1_PRIMITIVE_BLEND (WINAPI*)(ID2D1DeviceContext*))this->v->tbl[79])(this); }
static inline void                              ID2D1DeviceContext_SetUnitMode                               (ID2D1DeviceContext* this, D2D1_UNIT_MODE unitMode) { ((void (WINAPI*)(ID2D1DeviceContext*, D2D1_UNIT_MODE))this->v->tbl[80])(this, unitMode); }
static inline D2D1_UNIT_MODE                    ID2D1DeviceContext_GetUnitMode                               (ID2D1DeviceContext* this) { return ((D2D1_UNIT_MODE (WINAPI*)(ID2D1DeviceContext*))this->v->tbl[81])(this); }
static inline void                              ID2D1DeviceContext_DrawGlyphRun1                             (ID2D1DeviceContext* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, const DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription, ID2D1Brush* foregroundBrush, DWRITE_MEASURING_MODE measuringMode) { ((void (WINAPI*)(ID2D1DeviceContext*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, const DWRITE_GLYPH_RUN_DESCRIPTION*, ID2D1Brush*, DWRITE_MEASURING_MODE))this->v->tbl[82])(this, baselineOrigin, glyphRun, glyphRunDescription, foregroundBrush, measuringMode); }
static inline void                              ID2D1DeviceContext_DrawImage                                 (ID2D1DeviceContext* this, ID2D1Image* image, const D2D_POINT_2F* targetOffset, const D2D_RECT_F* imageRectangle, D2D1_INTERPOLATION_MODE interpolationMode, D2D1_COMPOSITE_MODE compositeMode) { ((void (WINAPI*)(ID2D1DeviceContext*, ID2D1Image*, const D2D_POINT_2F*, const D2D_RECT_F*, D2D1_INTERPOLATION_MODE, D2D1_COMPOSITE_MODE))this->v->tbl[83])(this, image, targetOffset, imageRectangle, interpolationMode, compositeMode); }
static inline void                              ID2D1DeviceContext_DrawGdiMetafile                           (ID2D1DeviceContext* this, ID2D1GdiMetafile* gdiMetafile, const D2D_POINT_2F* targetOffset) { ((void (WINAPI*)(ID2D1DeviceContext*, ID2D1GdiMetafile*, const D2D_POINT_2F*))this->v->tbl[84])(this, gdiMetafile, targetOffset); }
static inline void                              ID2D1DeviceContext_DrawBitmap1                               (ID2D1DeviceContext* this, ID2D1Bitmap* bitmap, const D2D_RECT_F* destinationRectangle, FLOAT opacity, D2D1_INTERPOLATION_MODE interpolationMode, const D2D_RECT_F* sourceRectangle, const D2D_MATRIX_4X4_F* perspectiveTransform) { ((void (WINAPI*)(ID2D1DeviceContext*, ID2D1Bitmap*, const D2D_RECT_F*, FLOAT, D2D1_INTERPOLATION_MODE, const D2D_RECT_F*, const D2D_MATRIX_4X4_F*))this->v->tbl[85])(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle, perspectiveTransform); }
static inline void                              ID2D1DeviceContext_PushLayer1                                (ID2D1DeviceContext* this, const D2D1_LAYER_PARAMETERS1* layerParameters, ID2D1Layer* layer) { ((void (WINAPI*)(ID2D1DeviceContext*, const D2D1_LAYER_PARAMETERS1*, ID2D1Layer*))this->v->tbl[86])(this, layerParameters, layer); }
static inline HRESULT                           ID2D1DeviceContext_InvalidateEffectInputRectangle            (ID2D1DeviceContext* this, ID2D1Effect* effect, UINT32 input, const D2D_RECT_F* inputRectangle) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext*, ID2D1Effect*, UINT32, const D2D_RECT_F*))this->v->tbl[87])(this, effect, input, inputRectangle); }
static inline HRESULT                           ID2D1DeviceContext_GetEffectInvalidRectangleCount            (ID2D1DeviceContext* this, ID2D1Effect* effect, UINT32* rectangleCount) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext*, ID2D1Effect*, UINT32*))this->v->tbl[88])(this, effect, rectangleCount); }
static inline HRESULT                           ID2D1DeviceContext_GetEffectInvalidRectangles                (ID2D1DeviceContext* this, ID2D1Effect* effect, D2D_RECT_F* rectangles, UINT32 rectanglesCount) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext*, ID2D1Effect*, D2D_RECT_F*, UINT32))this->v->tbl[89])(this, effect, rectangles, rectanglesCount); }
static inline HRESULT                           ID2D1DeviceContext_GetEffectRequiredInputRectangles          (ID2D1DeviceContext* this, ID2D1Effect* renderEffect, const D2D_RECT_F* renderImageRectangle, const D2D1_EFFECT_INPUT_DESCRIPTION* inputDescriptions, D2D_RECT_F* requiredInputRects, UINT32 inputCount) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext*, ID2D1Effect*, const D2D_RECT_F*, const D2D1_EFFECT_INPUT_DESCRIPTION*, D2D_RECT_F*, UINT32))this->v->tbl[90])(this, renderEffect, renderImageRectangle, inputDescriptions, requiredInputRects, inputCount); }
static inline void                              ID2D1DeviceContext_FillOpacityMask1                          (ID2D1DeviceContext* this, ID2D1Bitmap* opacityMask, ID2D1Brush* brush, const D2D_RECT_F* destinationRectangle, const D2D_RECT_F* sourceRectangle) { ((void (WINAPI*)(ID2D1DeviceContext*, ID2D1Bitmap*, ID2D1Brush*, const D2D_RECT_F*, const D2D_RECT_F*))this->v->tbl[91])(this, opacityMask, brush, destinationRectangle, sourceRectangle); }

static inline HRESULT                           ID2D1DeviceContext1_QueryInterface                           (ID2D1DeviceContext1* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext1*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1DeviceContext1_AddRef                                   (ID2D1DeviceContext1* this) { return ((UINT32 (WINAPI*)(ID2D1DeviceContext1*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1DeviceContext1_Release                                  (ID2D1DeviceContext1* this) { return ((UINT32 (WINAPI*)(ID2D1DeviceContext1*))this->v->tbl[2])(this); }
static inline void                              ID2D1DeviceContext1_GetFactory                               (ID2D1DeviceContext1* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1DeviceContext1*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline HRESULT                           ID2D1DeviceContext1_CreateBitmap                             (ID2D1DeviceContext1* this, D2D_SIZE_U size, const void* srcData, UINT32 pitch, const D2D1_BITMAP_PROPERTIES* bitmapProperties, ID2D1Bitmap** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext1*, D2D_SIZE_U, const void*, UINT32, const D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap**))this->v->tbl[4])(this, size, srcData, pitch, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext1_CreateBitmapFromWicBitmap                (ID2D1DeviceContext1* this, IWICBitmapSource* wicBitmapSource, const D2D1_BITMAP_PROPERTIES* bitmapProperties, ID2D1Bitmap** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext1*, IWICBitmapSource*, const D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap**))this->v->tbl[5])(this, wicBitmapSource, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext1_CreateSharedBitmap                       (ID2D1DeviceContext1* this, const GUID* riid, void* data, const D2D1_BITMAP_PROPERTIES* bitmapProperties, ID2D1Bitmap** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext1*, const GUID*, void*, const D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap**))this->v->tbl[6])(this, riid, data, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext1_CreateBitmapBrush                        (ID2D1DeviceContext1* this, ID2D1Bitmap* bitmap, const D2D1_BITMAP_BRUSH_PROPERTIES* bitmapBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1BitmapBrush** bitmapBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext1*, ID2D1Bitmap*, const D2D1_BITMAP_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1BitmapBrush**))this->v->tbl[7])(this, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush); }
static inline HRESULT                           ID2D1DeviceContext1_CreateSolidColorBrush                    (ID2D1DeviceContext1* this, const D2D1_COLOR_F* color, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1SolidColorBrush** solidColorBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext1*, const D2D1_COLOR_F*, const D2D1_BRUSH_PROPERTIES*, ID2D1SolidColorBrush**))this->v->tbl[8])(this, color, brushProperties, solidColorBrush); }
static inline HRESULT                           ID2D1DeviceContext1_CreateGradientStopCollection             (ID2D1DeviceContext1* this, const D2D1_GRADIENT_STOP* gradientStops, UINT32 gradientStopsCount, D2D1_GAMMA colorInterpolationGamma, D2D1_EXTEND_MODE extendMode, ID2D1GradientStopCollection** gradientStopCollection) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext1*, const D2D1_GRADIENT_STOP*, UINT32, D2D1_GAMMA, D2D1_EXTEND_MODE, ID2D1GradientStopCollection**))this->v->tbl[9])(this, gradientStops, gradientStopsCount, colorInterpolationGamma, extendMode, gradientStopCollection); }
static inline HRESULT                           ID2D1DeviceContext1_CreateLinearGradientBrush                (ID2D1DeviceContext1* this, const D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES* linearGradientBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1GradientStopCollection* gradientStopCollection, ID2D1LinearGradientBrush** linearGradientBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext1*, const D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection*, ID2D1LinearGradientBrush**))this->v->tbl[10])(this, linearGradientBrushProperties, brushProperties, gradientStopCollection, linearGradientBrush); }
static inline HRESULT                           ID2D1DeviceContext1_CreateRadialGradientBrush                (ID2D1DeviceContext1* this, const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES* radialGradientBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1GradientStopCollection* gradientStopCollection, ID2D1RadialGradientBrush** radialGradientBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext1*, const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection*, ID2D1RadialGradientBrush**))this->v->tbl[11])(this, radialGradientBrushProperties, brushProperties, gradientStopCollection, radialGradientBrush); }
static inline HRESULT                           ID2D1DeviceContext1_CreateCompatibleRenderTarget             (ID2D1DeviceContext1* this, const D2D_SIZE_F* desiredSize, const D2D_SIZE_U* desiredPixelSize, const D2D1_PIXEL_FORMAT* desiredFormat, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS options, ID2D1BitmapRenderTarget** bitmapRenderTarget) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext1*, const D2D_SIZE_F*, const D2D_SIZE_U*, const D2D1_PIXEL_FORMAT*, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, ID2D1BitmapRenderTarget**))this->v->tbl[12])(this, desiredSize, desiredPixelSize, desiredFormat, options, bitmapRenderTarget); }
static inline HRESULT                           ID2D1DeviceContext1_CreateLayer                              (ID2D1DeviceContext1* this, const D2D_SIZE_F* size, ID2D1Layer** layer) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext1*, const D2D_SIZE_F*, ID2D1Layer**))this->v->tbl[13])(this, size, layer); }
static inline HRESULT                           ID2D1DeviceContext1_CreateMesh                               (ID2D1DeviceContext1* this, ID2D1Mesh** mesh) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext1*, ID2D1Mesh**))this->v->tbl[14])(this, mesh); }
static inline void                              ID2D1DeviceContext1_DrawLine                                 (ID2D1DeviceContext1* this, D2D_POINT_2F point0, D2D_POINT_2F point1, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DeviceContext1*, D2D_POINT_2F, D2D_POINT_2F, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[15])(this, point0, point1, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DeviceContext1_DrawRectangle                            (ID2D1DeviceContext1* this, const D2D_RECT_F* rect, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DeviceContext1*, const D2D_RECT_F*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[16])(this, rect, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DeviceContext1_FillRectangle                            (ID2D1DeviceContext1* this, const D2D_RECT_F* rect, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1DeviceContext1*, const D2D_RECT_F*, ID2D1Brush*))this->v->tbl[17])(this, rect, brush); }
static inline void                              ID2D1DeviceContext1_DrawRoundedRectangle                     (ID2D1DeviceContext1* this, const D2D1_ROUNDED_RECT* roundedRect, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DeviceContext1*, const D2D1_ROUNDED_RECT*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[18])(this, roundedRect, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DeviceContext1_FillRoundedRectangle                     (ID2D1DeviceContext1* this, const D2D1_ROUNDED_RECT* roundedRect, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1DeviceContext1*, const D2D1_ROUNDED_RECT*, ID2D1Brush*))this->v->tbl[19])(this, roundedRect, brush); }
static inline void                              ID2D1DeviceContext1_DrawEllipse                              (ID2D1DeviceContext1* this, const D2D1_ELLIPSE* ellipse, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DeviceContext1*, const D2D1_ELLIPSE*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[20])(this, ellipse, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DeviceContext1_FillEllipse                              (ID2D1DeviceContext1* this, const D2D1_ELLIPSE* ellipse, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1DeviceContext1*, const D2D1_ELLIPSE*, ID2D1Brush*))this->v->tbl[21])(this, ellipse, brush); }
static inline void                              ID2D1DeviceContext1_DrawGeometry                             (ID2D1DeviceContext1* this, ID2D1Geometry* geometry, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DeviceContext1*, ID2D1Geometry*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[22])(this, geometry, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DeviceContext1_FillGeometry                             (ID2D1DeviceContext1* this, ID2D1Geometry* geometry, ID2D1Brush* brush, ID2D1Brush* opacityBrush) { ((void (WINAPI*)(ID2D1DeviceContext1*, ID2D1Geometry*, ID2D1Brush*, ID2D1Brush*))this->v->tbl[23])(this, geometry, brush, opacityBrush); }
static inline void                              ID2D1DeviceContext1_FillMesh                                 (ID2D1DeviceContext1* this, ID2D1Mesh* mesh, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1DeviceContext1*, ID2D1Mesh*, ID2D1Brush*))this->v->tbl[24])(this, mesh, brush); }
static inline void                              ID2D1DeviceContext1_FillOpacityMask                          (ID2D1DeviceContext1* this, ID2D1Bitmap* opacityMask, ID2D1Brush* brush, D2D1_OPACITY_MASK_CONTENT content, const D2D_RECT_F* destinationRectangle, const D2D_RECT_F* sourceRectangle) { ((void (WINAPI*)(ID2D1DeviceContext1*, ID2D1Bitmap*, ID2D1Brush*, D2D1_OPACITY_MASK_CONTENT, const D2D_RECT_F*, const D2D_RECT_F*))this->v->tbl[25])(this, opacityMask, brush, content, destinationRectangle, sourceRectangle); }
static inline void                              ID2D1DeviceContext1_DrawBitmap                               (ID2D1DeviceContext1* this, ID2D1Bitmap* bitmap, const D2D_RECT_F* destinationRectangle, FLOAT opacity, D2D1_BITMAP_INTERPOLATION_MODE interpolationMode, const D2D_RECT_F* sourceRectangle) { ((void (WINAPI*)(ID2D1DeviceContext1*, ID2D1Bitmap*, const D2D_RECT_F*, FLOAT, D2D1_BITMAP_INTERPOLATION_MODE, const D2D_RECT_F*))this->v->tbl[26])(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle); }
static inline void                              ID2D1DeviceContext1_DrawText                                 (ID2D1DeviceContext1* this, const WCHAR* string, UINT32 stringLength, IDWriteTextFormat* textFormat, const D2D_RECT_F* layoutRect, ID2D1Brush* defaultFillBrush, D2D1_DRAW_TEXT_OPTIONS options, DWRITE_MEASURING_MODE measuringMode) { ((void (WINAPI*)(ID2D1DeviceContext1*, const WCHAR*, UINT32, IDWriteTextFormat*, const D2D_RECT_F*, ID2D1Brush*, D2D1_DRAW_TEXT_OPTIONS, DWRITE_MEASURING_MODE))this->v->tbl[27])(this, string, stringLength, textFormat, layoutRect, defaultFillBrush, options, measuringMode); }
static inline void                              ID2D1DeviceContext1_DrawTextLayout                           (ID2D1DeviceContext1* this, D2D_POINT_2F origin, IDWriteTextLayout* textLayout, ID2D1Brush* defaultFillBrush, D2D1_DRAW_TEXT_OPTIONS options) { ((void (WINAPI*)(ID2D1DeviceContext1*, D2D_POINT_2F, IDWriteTextLayout*, ID2D1Brush*, D2D1_DRAW_TEXT_OPTIONS))this->v->tbl[28])(this, origin, textLayout, defaultFillBrush, options); }
static inline void                              ID2D1DeviceContext1_DrawGlyphRun                             (ID2D1DeviceContext1* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, ID2D1Brush* foregroundBrush, DWRITE_MEASURING_MODE measuringMode) { ((void (WINAPI*)(ID2D1DeviceContext1*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, ID2D1Brush*, DWRITE_MEASURING_MODE))this->v->tbl[29])(this, baselineOrigin, glyphRun, foregroundBrush, measuringMode); }
static inline void                              ID2D1DeviceContext1_SetTransform                             (ID2D1DeviceContext1* this, const D2D_MATRIX_3X2_F* transform) { ((void (WINAPI*)(ID2D1DeviceContext1*, const D2D_MATRIX_3X2_F*))this->v->tbl[30])(this, transform); }
static inline void                              ID2D1DeviceContext1_GetTransform                             (ID2D1DeviceContext1* this, D2D_MATRIX_3X2_F* transform) { ((void (WINAPI*)(ID2D1DeviceContext1*, D2D_MATRIX_3X2_F*))this->v->tbl[31])(this, transform); }
static inline void                              ID2D1DeviceContext1_SetAntialiasMode                         (ID2D1DeviceContext1* this, D2D1_ANTIALIAS_MODE antialiasMode) { ((void (WINAPI*)(ID2D1DeviceContext1*, D2D1_ANTIALIAS_MODE))this->v->tbl[32])(this, antialiasMode); }
static inline D2D1_ANTIALIAS_MODE               ID2D1DeviceContext1_GetAntialiasMode                         (ID2D1DeviceContext1* this) { return ((D2D1_ANTIALIAS_MODE (WINAPI*)(ID2D1DeviceContext1*))this->v->tbl[33])(this); }
static inline void                              ID2D1DeviceContext1_SetTextAntialiasMode                     (ID2D1DeviceContext1* this, D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode) { ((void (WINAPI*)(ID2D1DeviceContext1*, D2D1_TEXT_ANTIALIAS_MODE))this->v->tbl[34])(this, textAntialiasMode); }
static inline D2D1_TEXT_ANTIALIAS_MODE          ID2D1DeviceContext1_GetTextAntialiasMode                     (ID2D1DeviceContext1* this) { return ((D2D1_TEXT_ANTIALIAS_MODE (WINAPI*)(ID2D1DeviceContext1*))this->v->tbl[35])(this); }
static inline void                              ID2D1DeviceContext1_SetTextRenderingParams                   (ID2D1DeviceContext1* this, IDWriteRenderingParams* textRenderingParams) { ((void (WINAPI*)(ID2D1DeviceContext1*, IDWriteRenderingParams*))this->v->tbl[36])(this, textRenderingParams); }
static inline void                              ID2D1DeviceContext1_GetTextRenderingParams                   (ID2D1DeviceContext1* this, IDWriteRenderingParams** textRenderingParams) { ((void (WINAPI*)(ID2D1DeviceContext1*, IDWriteRenderingParams**))this->v->tbl[37])(this, textRenderingParams); }
static inline void                              ID2D1DeviceContext1_SetTags                                  (ID2D1DeviceContext1* this, UINT64 tag1, UINT64 tag2) { ((void (WINAPI*)(ID2D1DeviceContext1*, UINT64, UINT64))this->v->tbl[38])(this, tag1, tag2); }
static inline void                              ID2D1DeviceContext1_GetTags                                  (ID2D1DeviceContext1* this, UINT64* tag1, UINT64* tag2) { ((void (WINAPI*)(ID2D1DeviceContext1*, UINT64*, UINT64*))this->v->tbl[39])(this, tag1, tag2); }
static inline void                              ID2D1DeviceContext1_PushLayer                                (ID2D1DeviceContext1* this, const D2D1_LAYER_PARAMETERS* layerParameters, ID2D1Layer* layer) { ((void (WINAPI*)(ID2D1DeviceContext1*, const D2D1_LAYER_PARAMETERS*, ID2D1Layer*))this->v->tbl[40])(this, layerParameters, layer); }
static inline void                              ID2D1DeviceContext1_PopLayer                                 (ID2D1DeviceContext1* this) { ((void (WINAPI*)(ID2D1DeviceContext1*))this->v->tbl[41])(this); }
static inline HRESULT                           ID2D1DeviceContext1_Flush                                    (ID2D1DeviceContext1* this, UINT64* tag1, UINT64* tag2) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext1*, UINT64*, UINT64*))this->v->tbl[42])(this, tag1, tag2); }
static inline void                              ID2D1DeviceContext1_SaveDrawingState                         (ID2D1DeviceContext1* this, ID2D1DrawingStateBlock* drawingStateBlock) { ((void (WINAPI*)(ID2D1DeviceContext1*, ID2D1DrawingStateBlock*))this->v->tbl[43])(this, drawingStateBlock); }
static inline void                              ID2D1DeviceContext1_RestoreDrawingState                      (ID2D1DeviceContext1* this, ID2D1DrawingStateBlock* drawingStateBlock) { ((void (WINAPI*)(ID2D1DeviceContext1*, ID2D1DrawingStateBlock*))this->v->tbl[44])(this, drawingStateBlock); }
static inline void                              ID2D1DeviceContext1_PushAxisAlignedClip                      (ID2D1DeviceContext1* this, const D2D_RECT_F* clipRect, D2D1_ANTIALIAS_MODE antialiasMode) { ((void (WINAPI*)(ID2D1DeviceContext1*, const D2D_RECT_F*, D2D1_ANTIALIAS_MODE))this->v->tbl[45])(this, clipRect, antialiasMode); }
static inline void                              ID2D1DeviceContext1_PopAxisAlignedClip                       (ID2D1DeviceContext1* this) { ((void (WINAPI*)(ID2D1DeviceContext1*))this->v->tbl[46])(this); }
static inline void                              ID2D1DeviceContext1_Clear                                    (ID2D1DeviceContext1* this, const D2D1_COLOR_F* clearColor) { ((void (WINAPI*)(ID2D1DeviceContext1*, const D2D1_COLOR_F*))this->v->tbl[47])(this, clearColor); }
static inline void                              ID2D1DeviceContext1_BeginDraw                                (ID2D1DeviceContext1* this) { ((void (WINAPI*)(ID2D1DeviceContext1*))this->v->tbl[48])(this); }
static inline HRESULT                           ID2D1DeviceContext1_EndDraw                                  (ID2D1DeviceContext1* this, UINT64* tag1, UINT64* tag2) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext1*, UINT64*, UINT64*))this->v->tbl[49])(this, tag1, tag2); }
static inline D2D1_PIXEL_FORMAT                 ID2D1DeviceContext1_GetPixelFormat                           (ID2D1DeviceContext1* this) { D2D1_PIXEL_FORMAT _return; ((void (WINAPI*)(ID2D1DeviceContext1*, D2D1_PIXEL_FORMAT*))this->v->tbl[50])(this, &_return); return _return; }
static inline void                              ID2D1DeviceContext1_SetDpi                                   (ID2D1DeviceContext1* this, FLOAT dpiX, FLOAT dpiY) { ((void (WINAPI*)(ID2D1DeviceContext1*, FLOAT, FLOAT))this->v->tbl[51])(this, dpiX, dpiY); }
static inline void                              ID2D1DeviceContext1_GetDpi                                   (ID2D1DeviceContext1* this, FLOAT* dpiX, FLOAT* dpiY) { ((void (WINAPI*)(ID2D1DeviceContext1*, FLOAT*, FLOAT*))this->v->tbl[52])(this, dpiX, dpiY); }
static inline D2D_SIZE_F                        ID2D1DeviceContext1_GetSize                                  (ID2D1DeviceContext1* this) { D2D_SIZE_F _return; ((void (WINAPI*)(ID2D1DeviceContext1*, D2D_SIZE_F*))this->v->tbl[53])(this, &_return); return _return; }
static inline D2D_SIZE_U                        ID2D1DeviceContext1_GetPixelSize                             (ID2D1DeviceContext1* this) { D2D_SIZE_U _return; ((void (WINAPI*)(ID2D1DeviceContext1*, D2D_SIZE_U*))this->v->tbl[54])(this, &_return); return _return; }
static inline UINT32                            ID2D1DeviceContext1_GetMaximumBitmapSize                     (ID2D1DeviceContext1* this) { return ((UINT32 (WINAPI*)(ID2D1DeviceContext1*))this->v->tbl[55])(this); }
static inline BOOL                              ID2D1DeviceContext1_IsSupported                              (ID2D1DeviceContext1* this, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties) { return ((BOOL (WINAPI*)(ID2D1DeviceContext1*, const D2D1_RENDER_TARGET_PROPERTIES*))this->v->tbl[56])(this, renderTargetProperties); }
static inline HRESULT                           ID2D1DeviceContext1_CreateBitmap1                            (ID2D1DeviceContext1* this, D2D_SIZE_U size, const void* sourceData, UINT32 pitch, const D2D1_BITMAP_PROPERTIES1* bitmapProperties, ID2D1Bitmap1** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext1*, D2D_SIZE_U, const void*, UINT32, const D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1**))this->v->tbl[57])(this, size, sourceData, pitch, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext1_CreateBitmapFromWicBitmap1               (ID2D1DeviceContext1* this, IWICBitmapSource* wicBitmapSource, const D2D1_BITMAP_PROPERTIES1* bitmapProperties, ID2D1Bitmap1** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext1*, IWICBitmapSource*, const D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1**))this->v->tbl[58])(this, wicBitmapSource, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext1_CreateColorContext                       (ID2D1DeviceContext1* this, D2D1_COLOR_SPACE space, const UINT8* profile, UINT32 profileSize, ID2D1ColorContext** colorContext) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext1*, D2D1_COLOR_SPACE, const UINT8*, UINT32, ID2D1ColorContext**))this->v->tbl[59])(this, space, profile, profileSize, colorContext); }
static inline HRESULT                           ID2D1DeviceContext1_CreateColorContextFromFilename           (ID2D1DeviceContext1* this, const WCHAR* filename, ID2D1ColorContext** colorContext) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext1*, const WCHAR*, ID2D1ColorContext**))this->v->tbl[60])(this, filename, colorContext); }
static inline HRESULT                           ID2D1DeviceContext1_CreateColorContextFromWicColorContext    (ID2D1DeviceContext1* this, IWICColorContext* wicColorContext, ID2D1ColorContext** colorContext) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext1*, IWICColorContext*, ID2D1ColorContext**))this->v->tbl[61])(this, wicColorContext, colorContext); }
static inline HRESULT                           ID2D1DeviceContext1_CreateBitmapFromDxgiSurface              (ID2D1DeviceContext1* this, IDXGISurface* surface, const D2D1_BITMAP_PROPERTIES1* bitmapProperties, ID2D1Bitmap1** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext1*, IDXGISurface*, const D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1**))this->v->tbl[62])(this, surface, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext1_CreateEffect                             (ID2D1DeviceContext1* this, const GUID* effectId, ID2D1Effect** effect) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext1*, const GUID*, ID2D1Effect**))this->v->tbl[63])(this, effectId, effect); }
static inline HRESULT                           ID2D1DeviceContext1_CreateGradientStopCollection1            (ID2D1DeviceContext1* this, const D2D1_GRADIENT_STOP* straightAlphaGradientStops, UINT32 straightAlphaGradientStopsCount, D2D1_COLOR_SPACE preInterpolationSpace, D2D1_COLOR_SPACE postInterpolationSpace, D2D1_BUFFER_PRECISION bufferPrecision, D2D1_EXTEND_MODE extendMode, D2D1_COLOR_INTERPOLATION_MODE colorInterpolationMode, ID2D1GradientStopCollection1** gradientStopCollection1) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext1*, const D2D1_GRADIENT_STOP*, UINT32, D2D1_COLOR_SPACE, D2D1_COLOR_SPACE, D2D1_BUFFER_PRECISION, D2D1_EXTEND_MODE, D2D1_COLOR_INTERPOLATION_MODE, ID2D1GradientStopCollection1**))this->v->tbl[64])(this, straightAlphaGradientStops, straightAlphaGradientStopsCount, preInterpolationSpace, postInterpolationSpace, bufferPrecision, extendMode, colorInterpolationMode, gradientStopCollection1); }
static inline HRESULT                           ID2D1DeviceContext1_CreateImageBrush                         (ID2D1DeviceContext1* this, ID2D1Image* image, const D2D1_IMAGE_BRUSH_PROPERTIES* imageBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1ImageBrush** imageBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext1*, ID2D1Image*, const D2D1_IMAGE_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1ImageBrush**))this->v->tbl[65])(this, image, imageBrushProperties, brushProperties, imageBrush); }
static inline HRESULT                           ID2D1DeviceContext1_CreateBitmapBrush1                       (ID2D1DeviceContext1* this, ID2D1Bitmap* bitmap, const D2D1_BITMAP_BRUSH_PROPERTIES1* bitmapBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1BitmapBrush1** bitmapBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext1*, ID2D1Bitmap*, const D2D1_BITMAP_BRUSH_PROPERTIES1*, const D2D1_BRUSH_PROPERTIES*, ID2D1BitmapBrush1**))this->v->tbl[66])(this, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush); }
static inline HRESULT                           ID2D1DeviceContext1_CreateCommandList                        (ID2D1DeviceContext1* this, ID2D1CommandList** commandList) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext1*, ID2D1CommandList**))this->v->tbl[67])(this, commandList); }
static inline BOOL                              ID2D1DeviceContext1_IsDxgiFormatSupported                    (ID2D1DeviceContext1* this, DXGI_FORMAT format) { return ((BOOL (WINAPI*)(ID2D1DeviceContext1*, DXGI_FORMAT))this->v->tbl[68])(this, format); }
static inline BOOL                              ID2D1DeviceContext1_IsBufferPrecisionSupported               (ID2D1DeviceContext1* this, D2D1_BUFFER_PRECISION bufferPrecision) { return ((BOOL (WINAPI*)(ID2D1DeviceContext1*, D2D1_BUFFER_PRECISION))this->v->tbl[69])(this, bufferPrecision); }
static inline HRESULT                           ID2D1DeviceContext1_GetImageLocalBounds                      (ID2D1DeviceContext1* this, ID2D1Image* image, D2D_RECT_F* localBounds) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext1*, ID2D1Image*, D2D_RECT_F*))this->v->tbl[70])(this, image, localBounds); }
static inline HRESULT                           ID2D1DeviceContext1_GetImageWorldBounds                      (ID2D1DeviceContext1* this, ID2D1Image* image, D2D_RECT_F* worldBounds) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext1*, ID2D1Image*, D2D_RECT_F*))this->v->tbl[71])(this, image, worldBounds); }
static inline HRESULT                           ID2D1DeviceContext1_GetGlyphRunWorldBounds                   (ID2D1DeviceContext1* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, DWRITE_MEASURING_MODE measuringMode, D2D_RECT_F* bounds) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext1*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, DWRITE_MEASURING_MODE, D2D_RECT_F*))this->v->tbl[72])(this, baselineOrigin, glyphRun, measuringMode, bounds); }
static inline void                              ID2D1DeviceContext1_GetDevice                                (ID2D1DeviceContext1* this, ID2D1Device** device) { ((void (WINAPI*)(ID2D1DeviceContext1*, ID2D1Device**))this->v->tbl[73])(this, device); }
static inline void                              ID2D1DeviceContext1_SetTarget                                (ID2D1DeviceContext1* this, ID2D1Image* image) { ((void (WINAPI*)(ID2D1DeviceContext1*, ID2D1Image*))this->v->tbl[74])(this, image); }
static inline void                              ID2D1DeviceContext1_GetTarget                                (ID2D1DeviceContext1* this, ID2D1Image** image) { ((void (WINAPI*)(ID2D1DeviceContext1*, ID2D1Image**))this->v->tbl[75])(this, image); }
static inline void                              ID2D1DeviceContext1_SetRenderingControls                     (ID2D1DeviceContext1* this, const D2D1_RENDERING_CONTROLS* renderingControls) { ((void (WINAPI*)(ID2D1DeviceContext1*, const D2D1_RENDERING_CONTROLS*))this->v->tbl[76])(this, renderingControls); }
static inline void                              ID2D1DeviceContext1_GetRenderingControls                     (ID2D1DeviceContext1* this, D2D1_RENDERING_CONTROLS* renderingControls) { ((void (WINAPI*)(ID2D1DeviceContext1*, D2D1_RENDERING_CONTROLS*))this->v->tbl[77])(this, renderingControls); }
static inline void                              ID2D1DeviceContext1_SetPrimitiveBlend                        (ID2D1DeviceContext1* this, D2D1_PRIMITIVE_BLEND primitiveBlend) { ((void (WINAPI*)(ID2D1DeviceContext1*, D2D1_PRIMITIVE_BLEND))this->v->tbl[78])(this, primitiveBlend); }
static inline D2D1_PRIMITIVE_BLEND              ID2D1DeviceContext1_GetPrimitiveBlend                        (ID2D1DeviceContext1* this) { return ((D2D1_PRIMITIVE_BLEND (WINAPI*)(ID2D1DeviceContext1*))this->v->tbl[79])(this); }
static inline void                              ID2D1DeviceContext1_SetUnitMode                              (ID2D1DeviceContext1* this, D2D1_UNIT_MODE unitMode) { ((void (WINAPI*)(ID2D1DeviceContext1*, D2D1_UNIT_MODE))this->v->tbl[80])(this, unitMode); }
static inline D2D1_UNIT_MODE                    ID2D1DeviceContext1_GetUnitMode                              (ID2D1DeviceContext1* this) { return ((D2D1_UNIT_MODE (WINAPI*)(ID2D1DeviceContext1*))this->v->tbl[81])(this); }
static inline void                              ID2D1DeviceContext1_DrawGlyphRun1                            (ID2D1DeviceContext1* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, const DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription, ID2D1Brush* foregroundBrush, DWRITE_MEASURING_MODE measuringMode) { ((void (WINAPI*)(ID2D1DeviceContext1*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, const DWRITE_GLYPH_RUN_DESCRIPTION*, ID2D1Brush*, DWRITE_MEASURING_MODE))this->v->tbl[82])(this, baselineOrigin, glyphRun, glyphRunDescription, foregroundBrush, measuringMode); }
static inline void                              ID2D1DeviceContext1_DrawImage                                (ID2D1DeviceContext1* this, ID2D1Image* image, const D2D_POINT_2F* targetOffset, const D2D_RECT_F* imageRectangle, D2D1_INTERPOLATION_MODE interpolationMode, D2D1_COMPOSITE_MODE compositeMode) { ((void (WINAPI*)(ID2D1DeviceContext1*, ID2D1Image*, const D2D_POINT_2F*, const D2D_RECT_F*, D2D1_INTERPOLATION_MODE, D2D1_COMPOSITE_MODE))this->v->tbl[83])(this, image, targetOffset, imageRectangle, interpolationMode, compositeMode); }
static inline void                              ID2D1DeviceContext1_DrawGdiMetafile                          (ID2D1DeviceContext1* this, ID2D1GdiMetafile* gdiMetafile, const D2D_POINT_2F* targetOffset) { ((void (WINAPI*)(ID2D1DeviceContext1*, ID2D1GdiMetafile*, const D2D_POINT_2F*))this->v->tbl[84])(this, gdiMetafile, targetOffset); }
static inline void                              ID2D1DeviceContext1_DrawBitmap1                              (ID2D1DeviceContext1* this, ID2D1Bitmap* bitmap, const D2D_RECT_F* destinationRectangle, FLOAT opacity, D2D1_INTERPOLATION_MODE interpolationMode, const D2D_RECT_F* sourceRectangle, const D2D_MATRIX_4X4_F* perspectiveTransform) { ((void (WINAPI*)(ID2D1DeviceContext1*, ID2D1Bitmap*, const D2D_RECT_F*, FLOAT, D2D1_INTERPOLATION_MODE, const D2D_RECT_F*, const D2D_MATRIX_4X4_F*))this->v->tbl[85])(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle, perspectiveTransform); }
static inline void                              ID2D1DeviceContext1_PushLayer1                               (ID2D1DeviceContext1* this, const D2D1_LAYER_PARAMETERS1* layerParameters, ID2D1Layer* layer) { ((void (WINAPI*)(ID2D1DeviceContext1*, const D2D1_LAYER_PARAMETERS1*, ID2D1Layer*))this->v->tbl[86])(this, layerParameters, layer); }
static inline HRESULT                           ID2D1DeviceContext1_InvalidateEffectInputRectangle           (ID2D1DeviceContext1* this, ID2D1Effect* effect, UINT32 input, const D2D_RECT_F* inputRectangle) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext1*, ID2D1Effect*, UINT32, const D2D_RECT_F*))this->v->tbl[87])(this, effect, input, inputRectangle); }
static inline HRESULT                           ID2D1DeviceContext1_GetEffectInvalidRectangleCount           (ID2D1DeviceContext1* this, ID2D1Effect* effect, UINT32* rectangleCount) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext1*, ID2D1Effect*, UINT32*))this->v->tbl[88])(this, effect, rectangleCount); }
static inline HRESULT                           ID2D1DeviceContext1_GetEffectInvalidRectangles               (ID2D1DeviceContext1* this, ID2D1Effect* effect, D2D_RECT_F* rectangles, UINT32 rectanglesCount) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext1*, ID2D1Effect*, D2D_RECT_F*, UINT32))this->v->tbl[89])(this, effect, rectangles, rectanglesCount); }
static inline HRESULT                           ID2D1DeviceContext1_GetEffectRequiredInputRectangles         (ID2D1DeviceContext1* this, ID2D1Effect* renderEffect, const D2D_RECT_F* renderImageRectangle, const D2D1_EFFECT_INPUT_DESCRIPTION* inputDescriptions, D2D_RECT_F* requiredInputRects, UINT32 inputCount) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext1*, ID2D1Effect*, const D2D_RECT_F*, const D2D1_EFFECT_INPUT_DESCRIPTION*, D2D_RECT_F*, UINT32))this->v->tbl[90])(this, renderEffect, renderImageRectangle, inputDescriptions, requiredInputRects, inputCount); }
static inline void                              ID2D1DeviceContext1_FillOpacityMask1                         (ID2D1DeviceContext1* this, ID2D1Bitmap* opacityMask, ID2D1Brush* brush, const D2D_RECT_F* destinationRectangle, const D2D_RECT_F* sourceRectangle) { ((void (WINAPI*)(ID2D1DeviceContext1*, ID2D1Bitmap*, ID2D1Brush*, const D2D_RECT_F*, const D2D_RECT_F*))this->v->tbl[91])(this, opacityMask, brush, destinationRectangle, sourceRectangle); }
static inline HRESULT                           ID2D1DeviceContext1_CreateFilledGeometryRealization          (ID2D1DeviceContext1* this, ID2D1Geometry* geometry, FLOAT flatteningTolerance, ID2D1GeometryRealization** geometryRealization) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext1*, ID2D1Geometry*, FLOAT, ID2D1GeometryRealization**))this->v->tbl[92])(this, geometry, flatteningTolerance, geometryRealization); }
static inline HRESULT                           ID2D1DeviceContext1_CreateStrokedGeometryRealization         (ID2D1DeviceContext1* this, ID2D1Geometry* geometry, FLOAT flatteningTolerance, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle, ID2D1GeometryRealization** geometryRealization) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext1*, ID2D1Geometry*, FLOAT, FLOAT, ID2D1StrokeStyle*, ID2D1GeometryRealization**))this->v->tbl[93])(this, geometry, flatteningTolerance, strokeWidth, strokeStyle, geometryRealization); }
static inline void                              ID2D1DeviceContext1_DrawGeometryRealization                  (ID2D1DeviceContext1* this, ID2D1GeometryRealization* geometryRealization, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1DeviceContext1*, ID2D1GeometryRealization*, ID2D1Brush*))this->v->tbl[94])(this, geometryRealization, brush); }

static inline HRESULT                           ID2D1DeviceContext2_QueryInterface                           (ID2D1DeviceContext2* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext2*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1DeviceContext2_AddRef                                   (ID2D1DeviceContext2* this) { return ((UINT32 (WINAPI*)(ID2D1DeviceContext2*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1DeviceContext2_Release                                  (ID2D1DeviceContext2* this) { return ((UINT32 (WINAPI*)(ID2D1DeviceContext2*))this->v->tbl[2])(this); }
static inline void                              ID2D1DeviceContext2_GetFactory                               (ID2D1DeviceContext2* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1DeviceContext2*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline HRESULT                           ID2D1DeviceContext2_CreateBitmap                             (ID2D1DeviceContext2* this, D2D_SIZE_U size, const void* srcData, UINT32 pitch, const D2D1_BITMAP_PROPERTIES* bitmapProperties, ID2D1Bitmap** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext2*, D2D_SIZE_U, const void*, UINT32, const D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap**))this->v->tbl[4])(this, size, srcData, pitch, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext2_CreateBitmapFromWicBitmap                (ID2D1DeviceContext2* this, IWICBitmapSource* wicBitmapSource, const D2D1_BITMAP_PROPERTIES* bitmapProperties, ID2D1Bitmap** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext2*, IWICBitmapSource*, const D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap**))this->v->tbl[5])(this, wicBitmapSource, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext2_CreateSharedBitmap                       (ID2D1DeviceContext2* this, const GUID* riid, void* data, const D2D1_BITMAP_PROPERTIES* bitmapProperties, ID2D1Bitmap** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext2*, const GUID*, void*, const D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap**))this->v->tbl[6])(this, riid, data, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext2_CreateBitmapBrush                        (ID2D1DeviceContext2* this, ID2D1Bitmap* bitmap, const D2D1_BITMAP_BRUSH_PROPERTIES* bitmapBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1BitmapBrush** bitmapBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext2*, ID2D1Bitmap*, const D2D1_BITMAP_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1BitmapBrush**))this->v->tbl[7])(this, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush); }
static inline HRESULT                           ID2D1DeviceContext2_CreateSolidColorBrush                    (ID2D1DeviceContext2* this, const D2D1_COLOR_F* color, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1SolidColorBrush** solidColorBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext2*, const D2D1_COLOR_F*, const D2D1_BRUSH_PROPERTIES*, ID2D1SolidColorBrush**))this->v->tbl[8])(this, color, brushProperties, solidColorBrush); }
static inline HRESULT                           ID2D1DeviceContext2_CreateGradientStopCollection             (ID2D1DeviceContext2* this, const D2D1_GRADIENT_STOP* gradientStops, UINT32 gradientStopsCount, D2D1_GAMMA colorInterpolationGamma, D2D1_EXTEND_MODE extendMode, ID2D1GradientStopCollection** gradientStopCollection) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext2*, const D2D1_GRADIENT_STOP*, UINT32, D2D1_GAMMA, D2D1_EXTEND_MODE, ID2D1GradientStopCollection**))this->v->tbl[9])(this, gradientStops, gradientStopsCount, colorInterpolationGamma, extendMode, gradientStopCollection); }
static inline HRESULT                           ID2D1DeviceContext2_CreateLinearGradientBrush                (ID2D1DeviceContext2* this, const D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES* linearGradientBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1GradientStopCollection* gradientStopCollection, ID2D1LinearGradientBrush** linearGradientBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext2*, const D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection*, ID2D1LinearGradientBrush**))this->v->tbl[10])(this, linearGradientBrushProperties, brushProperties, gradientStopCollection, linearGradientBrush); }
static inline HRESULT                           ID2D1DeviceContext2_CreateRadialGradientBrush                (ID2D1DeviceContext2* this, const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES* radialGradientBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1GradientStopCollection* gradientStopCollection, ID2D1RadialGradientBrush** radialGradientBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext2*, const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection*, ID2D1RadialGradientBrush**))this->v->tbl[11])(this, radialGradientBrushProperties, brushProperties, gradientStopCollection, radialGradientBrush); }
static inline HRESULT                           ID2D1DeviceContext2_CreateCompatibleRenderTarget             (ID2D1DeviceContext2* this, const D2D_SIZE_F* desiredSize, const D2D_SIZE_U* desiredPixelSize, const D2D1_PIXEL_FORMAT* desiredFormat, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS options, ID2D1BitmapRenderTarget** bitmapRenderTarget) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext2*, const D2D_SIZE_F*, const D2D_SIZE_U*, const D2D1_PIXEL_FORMAT*, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, ID2D1BitmapRenderTarget**))this->v->tbl[12])(this, desiredSize, desiredPixelSize, desiredFormat, options, bitmapRenderTarget); }
static inline HRESULT                           ID2D1DeviceContext2_CreateLayer                              (ID2D1DeviceContext2* this, const D2D_SIZE_F* size, ID2D1Layer** layer) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext2*, const D2D_SIZE_F*, ID2D1Layer**))this->v->tbl[13])(this, size, layer); }
static inline HRESULT                           ID2D1DeviceContext2_CreateMesh                               (ID2D1DeviceContext2* this, ID2D1Mesh** mesh) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext2*, ID2D1Mesh**))this->v->tbl[14])(this, mesh); }
static inline void                              ID2D1DeviceContext2_DrawLine                                 (ID2D1DeviceContext2* this, D2D_POINT_2F point0, D2D_POINT_2F point1, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DeviceContext2*, D2D_POINT_2F, D2D_POINT_2F, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[15])(this, point0, point1, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DeviceContext2_DrawRectangle                            (ID2D1DeviceContext2* this, const D2D_RECT_F* rect, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DeviceContext2*, const D2D_RECT_F*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[16])(this, rect, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DeviceContext2_FillRectangle                            (ID2D1DeviceContext2* this, const D2D_RECT_F* rect, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1DeviceContext2*, const D2D_RECT_F*, ID2D1Brush*))this->v->tbl[17])(this, rect, brush); }
static inline void                              ID2D1DeviceContext2_DrawRoundedRectangle                     (ID2D1DeviceContext2* this, const D2D1_ROUNDED_RECT* roundedRect, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DeviceContext2*, const D2D1_ROUNDED_RECT*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[18])(this, roundedRect, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DeviceContext2_FillRoundedRectangle                     (ID2D1DeviceContext2* this, const D2D1_ROUNDED_RECT* roundedRect, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1DeviceContext2*, const D2D1_ROUNDED_RECT*, ID2D1Brush*))this->v->tbl[19])(this, roundedRect, brush); }
static inline void                              ID2D1DeviceContext2_DrawEllipse                              (ID2D1DeviceContext2* this, const D2D1_ELLIPSE* ellipse, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DeviceContext2*, const D2D1_ELLIPSE*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[20])(this, ellipse, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DeviceContext2_FillEllipse                              (ID2D1DeviceContext2* this, const D2D1_ELLIPSE* ellipse, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1DeviceContext2*, const D2D1_ELLIPSE*, ID2D1Brush*))this->v->tbl[21])(this, ellipse, brush); }
static inline void                              ID2D1DeviceContext2_DrawGeometry                             (ID2D1DeviceContext2* this, ID2D1Geometry* geometry, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DeviceContext2*, ID2D1Geometry*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[22])(this, geometry, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DeviceContext2_FillGeometry                             (ID2D1DeviceContext2* this, ID2D1Geometry* geometry, ID2D1Brush* brush, ID2D1Brush* opacityBrush) { ((void (WINAPI*)(ID2D1DeviceContext2*, ID2D1Geometry*, ID2D1Brush*, ID2D1Brush*))this->v->tbl[23])(this, geometry, brush, opacityBrush); }
static inline void                              ID2D1DeviceContext2_FillMesh                                 (ID2D1DeviceContext2* this, ID2D1Mesh* mesh, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1DeviceContext2*, ID2D1Mesh*, ID2D1Brush*))this->v->tbl[24])(this, mesh, brush); }
static inline void                              ID2D1DeviceContext2_FillOpacityMask                          (ID2D1DeviceContext2* this, ID2D1Bitmap* opacityMask, ID2D1Brush* brush, D2D1_OPACITY_MASK_CONTENT content, const D2D_RECT_F* destinationRectangle, const D2D_RECT_F* sourceRectangle) { ((void (WINAPI*)(ID2D1DeviceContext2*, ID2D1Bitmap*, ID2D1Brush*, D2D1_OPACITY_MASK_CONTENT, const D2D_RECT_F*, const D2D_RECT_F*))this->v->tbl[25])(this, opacityMask, brush, content, destinationRectangle, sourceRectangle); }
static inline void                              ID2D1DeviceContext2_DrawBitmap                               (ID2D1DeviceContext2* this, ID2D1Bitmap* bitmap, const D2D_RECT_F* destinationRectangle, FLOAT opacity, D2D1_BITMAP_INTERPOLATION_MODE interpolationMode, const D2D_RECT_F* sourceRectangle) { ((void (WINAPI*)(ID2D1DeviceContext2*, ID2D1Bitmap*, const D2D_RECT_F*, FLOAT, D2D1_BITMAP_INTERPOLATION_MODE, const D2D_RECT_F*))this->v->tbl[26])(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle); }
static inline void                              ID2D1DeviceContext2_DrawText                                 (ID2D1DeviceContext2* this, const WCHAR* string, UINT32 stringLength, IDWriteTextFormat* textFormat, const D2D_RECT_F* layoutRect, ID2D1Brush* defaultFillBrush, D2D1_DRAW_TEXT_OPTIONS options, DWRITE_MEASURING_MODE measuringMode) { ((void (WINAPI*)(ID2D1DeviceContext2*, const WCHAR*, UINT32, IDWriteTextFormat*, const D2D_RECT_F*, ID2D1Brush*, D2D1_DRAW_TEXT_OPTIONS, DWRITE_MEASURING_MODE))this->v->tbl[27])(this, string, stringLength, textFormat, layoutRect, defaultFillBrush, options, measuringMode); }
static inline void                              ID2D1DeviceContext2_DrawTextLayout                           (ID2D1DeviceContext2* this, D2D_POINT_2F origin, IDWriteTextLayout* textLayout, ID2D1Brush* defaultFillBrush, D2D1_DRAW_TEXT_OPTIONS options) { ((void (WINAPI*)(ID2D1DeviceContext2*, D2D_POINT_2F, IDWriteTextLayout*, ID2D1Brush*, D2D1_DRAW_TEXT_OPTIONS))this->v->tbl[28])(this, origin, textLayout, defaultFillBrush, options); }
static inline void                              ID2D1DeviceContext2_DrawGlyphRun                             (ID2D1DeviceContext2* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, ID2D1Brush* foregroundBrush, DWRITE_MEASURING_MODE measuringMode) { ((void (WINAPI*)(ID2D1DeviceContext2*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, ID2D1Brush*, DWRITE_MEASURING_MODE))this->v->tbl[29])(this, baselineOrigin, glyphRun, foregroundBrush, measuringMode); }
static inline void                              ID2D1DeviceContext2_SetTransform                             (ID2D1DeviceContext2* this, const D2D_MATRIX_3X2_F* transform) { ((void (WINAPI*)(ID2D1DeviceContext2*, const D2D_MATRIX_3X2_F*))this->v->tbl[30])(this, transform); }
static inline void                              ID2D1DeviceContext2_GetTransform                             (ID2D1DeviceContext2* this, D2D_MATRIX_3X2_F* transform) { ((void (WINAPI*)(ID2D1DeviceContext2*, D2D_MATRIX_3X2_F*))this->v->tbl[31])(this, transform); }
static inline void                              ID2D1DeviceContext2_SetAntialiasMode                         (ID2D1DeviceContext2* this, D2D1_ANTIALIAS_MODE antialiasMode) { ((void (WINAPI*)(ID2D1DeviceContext2*, D2D1_ANTIALIAS_MODE))this->v->tbl[32])(this, antialiasMode); }
static inline D2D1_ANTIALIAS_MODE               ID2D1DeviceContext2_GetAntialiasMode                         (ID2D1DeviceContext2* this) { return ((D2D1_ANTIALIAS_MODE (WINAPI*)(ID2D1DeviceContext2*))this->v->tbl[33])(this); }
static inline void                              ID2D1DeviceContext2_SetTextAntialiasMode                     (ID2D1DeviceContext2* this, D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode) { ((void (WINAPI*)(ID2D1DeviceContext2*, D2D1_TEXT_ANTIALIAS_MODE))this->v->tbl[34])(this, textAntialiasMode); }
static inline D2D1_TEXT_ANTIALIAS_MODE          ID2D1DeviceContext2_GetTextAntialiasMode                     (ID2D1DeviceContext2* this) { return ((D2D1_TEXT_ANTIALIAS_MODE (WINAPI*)(ID2D1DeviceContext2*))this->v->tbl[35])(this); }
static inline void                              ID2D1DeviceContext2_SetTextRenderingParams                   (ID2D1DeviceContext2* this, IDWriteRenderingParams* textRenderingParams) { ((void (WINAPI*)(ID2D1DeviceContext2*, IDWriteRenderingParams*))this->v->tbl[36])(this, textRenderingParams); }
static inline void                              ID2D1DeviceContext2_GetTextRenderingParams                   (ID2D1DeviceContext2* this, IDWriteRenderingParams** textRenderingParams) { ((void (WINAPI*)(ID2D1DeviceContext2*, IDWriteRenderingParams**))this->v->tbl[37])(this, textRenderingParams); }
static inline void                              ID2D1DeviceContext2_SetTags                                  (ID2D1DeviceContext2* this, UINT64 tag1, UINT64 tag2) { ((void (WINAPI*)(ID2D1DeviceContext2*, UINT64, UINT64))this->v->tbl[38])(this, tag1, tag2); }
static inline void                              ID2D1DeviceContext2_GetTags                                  (ID2D1DeviceContext2* this, UINT64* tag1, UINT64* tag2) { ((void (WINAPI*)(ID2D1DeviceContext2*, UINT64*, UINT64*))this->v->tbl[39])(this, tag1, tag2); }
static inline void                              ID2D1DeviceContext2_PushLayer                                (ID2D1DeviceContext2* this, const D2D1_LAYER_PARAMETERS* layerParameters, ID2D1Layer* layer) { ((void (WINAPI*)(ID2D1DeviceContext2*, const D2D1_LAYER_PARAMETERS*, ID2D1Layer*))this->v->tbl[40])(this, layerParameters, layer); }
static inline void                              ID2D1DeviceContext2_PopLayer                                 (ID2D1DeviceContext2* this) { ((void (WINAPI*)(ID2D1DeviceContext2*))this->v->tbl[41])(this); }
static inline HRESULT                           ID2D1DeviceContext2_Flush                                    (ID2D1DeviceContext2* this, UINT64* tag1, UINT64* tag2) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext2*, UINT64*, UINT64*))this->v->tbl[42])(this, tag1, tag2); }
static inline void                              ID2D1DeviceContext2_SaveDrawingState                         (ID2D1DeviceContext2* this, ID2D1DrawingStateBlock* drawingStateBlock) { ((void (WINAPI*)(ID2D1DeviceContext2*, ID2D1DrawingStateBlock*))this->v->tbl[43])(this, drawingStateBlock); }
static inline void                              ID2D1DeviceContext2_RestoreDrawingState                      (ID2D1DeviceContext2* this, ID2D1DrawingStateBlock* drawingStateBlock) { ((void (WINAPI*)(ID2D1DeviceContext2*, ID2D1DrawingStateBlock*))this->v->tbl[44])(this, drawingStateBlock); }
static inline void                              ID2D1DeviceContext2_PushAxisAlignedClip                      (ID2D1DeviceContext2* this, const D2D_RECT_F* clipRect, D2D1_ANTIALIAS_MODE antialiasMode) { ((void (WINAPI*)(ID2D1DeviceContext2*, const D2D_RECT_F*, D2D1_ANTIALIAS_MODE))this->v->tbl[45])(this, clipRect, antialiasMode); }
static inline void                              ID2D1DeviceContext2_PopAxisAlignedClip                       (ID2D1DeviceContext2* this) { ((void (WINAPI*)(ID2D1DeviceContext2*))this->v->tbl[46])(this); }
static inline void                              ID2D1DeviceContext2_Clear                                    (ID2D1DeviceContext2* this, const D2D1_COLOR_F* clearColor) { ((void (WINAPI*)(ID2D1DeviceContext2*, const D2D1_COLOR_F*))this->v->tbl[47])(this, clearColor); }
static inline void                              ID2D1DeviceContext2_BeginDraw                                (ID2D1DeviceContext2* this) { ((void (WINAPI*)(ID2D1DeviceContext2*))this->v->tbl[48])(this); }
static inline HRESULT                           ID2D1DeviceContext2_EndDraw                                  (ID2D1DeviceContext2* this, UINT64* tag1, UINT64* tag2) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext2*, UINT64*, UINT64*))this->v->tbl[49])(this, tag1, tag2); }
static inline D2D1_PIXEL_FORMAT                 ID2D1DeviceContext2_GetPixelFormat                           (ID2D1DeviceContext2* this) { D2D1_PIXEL_FORMAT _return; ((void (WINAPI*)(ID2D1DeviceContext2*, D2D1_PIXEL_FORMAT*))this->v->tbl[50])(this, &_return); return _return; }
static inline void                              ID2D1DeviceContext2_SetDpi                                   (ID2D1DeviceContext2* this, FLOAT dpiX, FLOAT dpiY) { ((void (WINAPI*)(ID2D1DeviceContext2*, FLOAT, FLOAT))this->v->tbl[51])(this, dpiX, dpiY); }
static inline void                              ID2D1DeviceContext2_GetDpi                                   (ID2D1DeviceContext2* this, FLOAT* dpiX, FLOAT* dpiY) { ((void (WINAPI*)(ID2D1DeviceContext2*, FLOAT*, FLOAT*))this->v->tbl[52])(this, dpiX, dpiY); }
static inline D2D_SIZE_F                        ID2D1DeviceContext2_GetSize                                  (ID2D1DeviceContext2* this) { D2D_SIZE_F _return; ((void (WINAPI*)(ID2D1DeviceContext2*, D2D_SIZE_F*))this->v->tbl[53])(this, &_return); return _return; }
static inline D2D_SIZE_U                        ID2D1DeviceContext2_GetPixelSize                             (ID2D1DeviceContext2* this) { D2D_SIZE_U _return; ((void (WINAPI*)(ID2D1DeviceContext2*, D2D_SIZE_U*))this->v->tbl[54])(this, &_return); return _return; }
static inline UINT32                            ID2D1DeviceContext2_GetMaximumBitmapSize                     (ID2D1DeviceContext2* this) { return ((UINT32 (WINAPI*)(ID2D1DeviceContext2*))this->v->tbl[55])(this); }
static inline BOOL                              ID2D1DeviceContext2_IsSupported                              (ID2D1DeviceContext2* this, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties) { return ((BOOL (WINAPI*)(ID2D1DeviceContext2*, const D2D1_RENDER_TARGET_PROPERTIES*))this->v->tbl[56])(this, renderTargetProperties); }
static inline HRESULT                           ID2D1DeviceContext2_CreateBitmap1                            (ID2D1DeviceContext2* this, D2D_SIZE_U size, const void* sourceData, UINT32 pitch, const D2D1_BITMAP_PROPERTIES1* bitmapProperties, ID2D1Bitmap1** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext2*, D2D_SIZE_U, const void*, UINT32, const D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1**))this->v->tbl[57])(this, size, sourceData, pitch, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext2_CreateBitmapFromWicBitmap1               (ID2D1DeviceContext2* this, IWICBitmapSource* wicBitmapSource, const D2D1_BITMAP_PROPERTIES1* bitmapProperties, ID2D1Bitmap1** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext2*, IWICBitmapSource*, const D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1**))this->v->tbl[58])(this, wicBitmapSource, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext2_CreateColorContext                       (ID2D1DeviceContext2* this, D2D1_COLOR_SPACE space, const UINT8* profile, UINT32 profileSize, ID2D1ColorContext** colorContext) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext2*, D2D1_COLOR_SPACE, const UINT8*, UINT32, ID2D1ColorContext**))this->v->tbl[59])(this, space, profile, profileSize, colorContext); }
static inline HRESULT                           ID2D1DeviceContext2_CreateColorContextFromFilename           (ID2D1DeviceContext2* this, const WCHAR* filename, ID2D1ColorContext** colorContext) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext2*, const WCHAR*, ID2D1ColorContext**))this->v->tbl[60])(this, filename, colorContext); }
static inline HRESULT                           ID2D1DeviceContext2_CreateColorContextFromWicColorContext    (ID2D1DeviceContext2* this, IWICColorContext* wicColorContext, ID2D1ColorContext** colorContext) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext2*, IWICColorContext*, ID2D1ColorContext**))this->v->tbl[61])(this, wicColorContext, colorContext); }
static inline HRESULT                           ID2D1DeviceContext2_CreateBitmapFromDxgiSurface              (ID2D1DeviceContext2* this, IDXGISurface* surface, const D2D1_BITMAP_PROPERTIES1* bitmapProperties, ID2D1Bitmap1** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext2*, IDXGISurface*, const D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1**))this->v->tbl[62])(this, surface, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext2_CreateEffect                             (ID2D1DeviceContext2* this, const GUID* effectId, ID2D1Effect** effect) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext2*, const GUID*, ID2D1Effect**))this->v->tbl[63])(this, effectId, effect); }
static inline HRESULT                           ID2D1DeviceContext2_CreateGradientStopCollection1            (ID2D1DeviceContext2* this, const D2D1_GRADIENT_STOP* straightAlphaGradientStops, UINT32 straightAlphaGradientStopsCount, D2D1_COLOR_SPACE preInterpolationSpace, D2D1_COLOR_SPACE postInterpolationSpace, D2D1_BUFFER_PRECISION bufferPrecision, D2D1_EXTEND_MODE extendMode, D2D1_COLOR_INTERPOLATION_MODE colorInterpolationMode, ID2D1GradientStopCollection1** gradientStopCollection1) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext2*, const D2D1_GRADIENT_STOP*, UINT32, D2D1_COLOR_SPACE, D2D1_COLOR_SPACE, D2D1_BUFFER_PRECISION, D2D1_EXTEND_MODE, D2D1_COLOR_INTERPOLATION_MODE, ID2D1GradientStopCollection1**))this->v->tbl[64])(this, straightAlphaGradientStops, straightAlphaGradientStopsCount, preInterpolationSpace, postInterpolationSpace, bufferPrecision, extendMode, colorInterpolationMode, gradientStopCollection1); }
static inline HRESULT                           ID2D1DeviceContext2_CreateImageBrush                         (ID2D1DeviceContext2* this, ID2D1Image* image, const D2D1_IMAGE_BRUSH_PROPERTIES* imageBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1ImageBrush** imageBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext2*, ID2D1Image*, const D2D1_IMAGE_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1ImageBrush**))this->v->tbl[65])(this, image, imageBrushProperties, brushProperties, imageBrush); }
static inline HRESULT                           ID2D1DeviceContext2_CreateBitmapBrush1                       (ID2D1DeviceContext2* this, ID2D1Bitmap* bitmap, const D2D1_BITMAP_BRUSH_PROPERTIES1* bitmapBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1BitmapBrush1** bitmapBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext2*, ID2D1Bitmap*, const D2D1_BITMAP_BRUSH_PROPERTIES1*, const D2D1_BRUSH_PROPERTIES*, ID2D1BitmapBrush1**))this->v->tbl[66])(this, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush); }
static inline HRESULT                           ID2D1DeviceContext2_CreateCommandList                        (ID2D1DeviceContext2* this, ID2D1CommandList** commandList) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext2*, ID2D1CommandList**))this->v->tbl[67])(this, commandList); }
static inline BOOL                              ID2D1DeviceContext2_IsDxgiFormatSupported                    (ID2D1DeviceContext2* this, DXGI_FORMAT format) { return ((BOOL (WINAPI*)(ID2D1DeviceContext2*, DXGI_FORMAT))this->v->tbl[68])(this, format); }
static inline BOOL                              ID2D1DeviceContext2_IsBufferPrecisionSupported               (ID2D1DeviceContext2* this, D2D1_BUFFER_PRECISION bufferPrecision) { return ((BOOL (WINAPI*)(ID2D1DeviceContext2*, D2D1_BUFFER_PRECISION))this->v->tbl[69])(this, bufferPrecision); }
static inline HRESULT                           ID2D1DeviceContext2_GetImageLocalBounds                      (ID2D1DeviceContext2* this, ID2D1Image* image, D2D_RECT_F* localBounds) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext2*, ID2D1Image*, D2D_RECT_F*))this->v->tbl[70])(this, image, localBounds); }
static inline HRESULT                           ID2D1DeviceContext2_GetImageWorldBounds                      (ID2D1DeviceContext2* this, ID2D1Image* image, D2D_RECT_F* worldBounds) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext2*, ID2D1Image*, D2D_RECT_F*))this->v->tbl[71])(this, image, worldBounds); }
static inline HRESULT                           ID2D1DeviceContext2_GetGlyphRunWorldBounds                   (ID2D1DeviceContext2* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, DWRITE_MEASURING_MODE measuringMode, D2D_RECT_F* bounds) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext2*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, DWRITE_MEASURING_MODE, D2D_RECT_F*))this->v->tbl[72])(this, baselineOrigin, glyphRun, measuringMode, bounds); }
static inline void                              ID2D1DeviceContext2_GetDevice                                (ID2D1DeviceContext2* this, ID2D1Device** device) { ((void (WINAPI*)(ID2D1DeviceContext2*, ID2D1Device**))this->v->tbl[73])(this, device); }
static inline void                              ID2D1DeviceContext2_SetTarget                                (ID2D1DeviceContext2* this, ID2D1Image* image) { ((void (WINAPI*)(ID2D1DeviceContext2*, ID2D1Image*))this->v->tbl[74])(this, image); }
static inline void                              ID2D1DeviceContext2_GetTarget                                (ID2D1DeviceContext2* this, ID2D1Image** image) { ((void (WINAPI*)(ID2D1DeviceContext2*, ID2D1Image**))this->v->tbl[75])(this, image); }
static inline void                              ID2D1DeviceContext2_SetRenderingControls                     (ID2D1DeviceContext2* this, const D2D1_RENDERING_CONTROLS* renderingControls) { ((void (WINAPI*)(ID2D1DeviceContext2*, const D2D1_RENDERING_CONTROLS*))this->v->tbl[76])(this, renderingControls); }
static inline void                              ID2D1DeviceContext2_GetRenderingControls                     (ID2D1DeviceContext2* this, D2D1_RENDERING_CONTROLS* renderingControls) { ((void (WINAPI*)(ID2D1DeviceContext2*, D2D1_RENDERING_CONTROLS*))this->v->tbl[77])(this, renderingControls); }
static inline void                              ID2D1DeviceContext2_SetPrimitiveBlend                        (ID2D1DeviceContext2* this, D2D1_PRIMITIVE_BLEND primitiveBlend) { ((void (WINAPI*)(ID2D1DeviceContext2*, D2D1_PRIMITIVE_BLEND))this->v->tbl[78])(this, primitiveBlend); }
static inline D2D1_PRIMITIVE_BLEND              ID2D1DeviceContext2_GetPrimitiveBlend                        (ID2D1DeviceContext2* this) { return ((D2D1_PRIMITIVE_BLEND (WINAPI*)(ID2D1DeviceContext2*))this->v->tbl[79])(this); }
static inline void                              ID2D1DeviceContext2_SetUnitMode                              (ID2D1DeviceContext2* this, D2D1_UNIT_MODE unitMode) { ((void (WINAPI*)(ID2D1DeviceContext2*, D2D1_UNIT_MODE))this->v->tbl[80])(this, unitMode); }
static inline D2D1_UNIT_MODE                    ID2D1DeviceContext2_GetUnitMode                              (ID2D1DeviceContext2* this) { return ((D2D1_UNIT_MODE (WINAPI*)(ID2D1DeviceContext2*))this->v->tbl[81])(this); }
static inline void                              ID2D1DeviceContext2_DrawGlyphRun1                            (ID2D1DeviceContext2* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, const DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription, ID2D1Brush* foregroundBrush, DWRITE_MEASURING_MODE measuringMode) { ((void (WINAPI*)(ID2D1DeviceContext2*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, const DWRITE_GLYPH_RUN_DESCRIPTION*, ID2D1Brush*, DWRITE_MEASURING_MODE))this->v->tbl[82])(this, baselineOrigin, glyphRun, glyphRunDescription, foregroundBrush, measuringMode); }
static inline void                              ID2D1DeviceContext2_DrawImage                                (ID2D1DeviceContext2* this, ID2D1Image* image, const D2D_POINT_2F* targetOffset, const D2D_RECT_F* imageRectangle, D2D1_INTERPOLATION_MODE interpolationMode, D2D1_COMPOSITE_MODE compositeMode) { ((void (WINAPI*)(ID2D1DeviceContext2*, ID2D1Image*, const D2D_POINT_2F*, const D2D_RECT_F*, D2D1_INTERPOLATION_MODE, D2D1_COMPOSITE_MODE))this->v->tbl[83])(this, image, targetOffset, imageRectangle, interpolationMode, compositeMode); }
static inline void                              ID2D1DeviceContext2_DrawGdiMetafile                          (ID2D1DeviceContext2* this, ID2D1GdiMetafile* gdiMetafile, const D2D_POINT_2F* targetOffset) { ((void (WINAPI*)(ID2D1DeviceContext2*, ID2D1GdiMetafile*, const D2D_POINT_2F*))this->v->tbl[84])(this, gdiMetafile, targetOffset); }
static inline void                              ID2D1DeviceContext2_DrawBitmap1                              (ID2D1DeviceContext2* this, ID2D1Bitmap* bitmap, const D2D_RECT_F* destinationRectangle, FLOAT opacity, D2D1_INTERPOLATION_MODE interpolationMode, const D2D_RECT_F* sourceRectangle, const D2D_MATRIX_4X4_F* perspectiveTransform) { ((void (WINAPI*)(ID2D1DeviceContext2*, ID2D1Bitmap*, const D2D_RECT_F*, FLOAT, D2D1_INTERPOLATION_MODE, const D2D_RECT_F*, const D2D_MATRIX_4X4_F*))this->v->tbl[85])(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle, perspectiveTransform); }
static inline void                              ID2D1DeviceContext2_PushLayer1                               (ID2D1DeviceContext2* this, const D2D1_LAYER_PARAMETERS1* layerParameters, ID2D1Layer* layer) { ((void (WINAPI*)(ID2D1DeviceContext2*, const D2D1_LAYER_PARAMETERS1*, ID2D1Layer*))this->v->tbl[86])(this, layerParameters, layer); }
static inline HRESULT                           ID2D1DeviceContext2_InvalidateEffectInputRectangle           (ID2D1DeviceContext2* this, ID2D1Effect* effect, UINT32 input, const D2D_RECT_F* inputRectangle) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext2*, ID2D1Effect*, UINT32, const D2D_RECT_F*))this->v->tbl[87])(this, effect, input, inputRectangle); }
static inline HRESULT                           ID2D1DeviceContext2_GetEffectInvalidRectangleCount           (ID2D1DeviceContext2* this, ID2D1Effect* effect, UINT32* rectangleCount) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext2*, ID2D1Effect*, UINT32*))this->v->tbl[88])(this, effect, rectangleCount); }
static inline HRESULT                           ID2D1DeviceContext2_GetEffectInvalidRectangles               (ID2D1DeviceContext2* this, ID2D1Effect* effect, D2D_RECT_F* rectangles, UINT32 rectanglesCount) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext2*, ID2D1Effect*, D2D_RECT_F*, UINT32))this->v->tbl[89])(this, effect, rectangles, rectanglesCount); }
static inline HRESULT                           ID2D1DeviceContext2_GetEffectRequiredInputRectangles         (ID2D1DeviceContext2* this, ID2D1Effect* renderEffect, const D2D_RECT_F* renderImageRectangle, const D2D1_EFFECT_INPUT_DESCRIPTION* inputDescriptions, D2D_RECT_F* requiredInputRects, UINT32 inputCount) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext2*, ID2D1Effect*, const D2D_RECT_F*, const D2D1_EFFECT_INPUT_DESCRIPTION*, D2D_RECT_F*, UINT32))this->v->tbl[90])(this, renderEffect, renderImageRectangle, inputDescriptions, requiredInputRects, inputCount); }
static inline void                              ID2D1DeviceContext2_FillOpacityMask1                         (ID2D1DeviceContext2* this, ID2D1Bitmap* opacityMask, ID2D1Brush* brush, const D2D_RECT_F* destinationRectangle, const D2D_RECT_F* sourceRectangle) { ((void (WINAPI*)(ID2D1DeviceContext2*, ID2D1Bitmap*, ID2D1Brush*, const D2D_RECT_F*, const D2D_RECT_F*))this->v->tbl[91])(this, opacityMask, brush, destinationRectangle, sourceRectangle); }
static inline HRESULT                           ID2D1DeviceContext2_CreateFilledGeometryRealization          (ID2D1DeviceContext2* this, ID2D1Geometry* geometry, FLOAT flatteningTolerance, ID2D1GeometryRealization** geometryRealization) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext2*, ID2D1Geometry*, FLOAT, ID2D1GeometryRealization**))this->v->tbl[92])(this, geometry, flatteningTolerance, geometryRealization); }
static inline HRESULT                           ID2D1DeviceContext2_CreateStrokedGeometryRealization         (ID2D1DeviceContext2* this, ID2D1Geometry* geometry, FLOAT flatteningTolerance, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle, ID2D1GeometryRealization** geometryRealization) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext2*, ID2D1Geometry*, FLOAT, FLOAT, ID2D1StrokeStyle*, ID2D1GeometryRealization**))this->v->tbl[93])(this, geometry, flatteningTolerance, strokeWidth, strokeStyle, geometryRealization); }
static inline void                              ID2D1DeviceContext2_DrawGeometryRealization                  (ID2D1DeviceContext2* this, ID2D1GeometryRealization* geometryRealization, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1DeviceContext2*, ID2D1GeometryRealization*, ID2D1Brush*))this->v->tbl[94])(this, geometryRealization, brush); }
static inline HRESULT                           ID2D1DeviceContext2_CreateInk                                (ID2D1DeviceContext2* this, const D2D1_INK_POINT* startPoint, ID2D1Ink** ink) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext2*, const D2D1_INK_POINT*, ID2D1Ink**))this->v->tbl[95])(this, startPoint, ink); }
static inline HRESULT                           ID2D1DeviceContext2_CreateInkStyle                           (ID2D1DeviceContext2* this, const D2D1_INK_STYLE_PROPERTIES* inkStyleProperties, ID2D1InkStyle** inkStyle) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext2*, const D2D1_INK_STYLE_PROPERTIES*, ID2D1InkStyle**))this->v->tbl[96])(this, inkStyleProperties, inkStyle); }
static inline HRESULT                           ID2D1DeviceContext2_CreateGradientMesh                       (ID2D1DeviceContext2* this, const D2D1_GRADIENT_MESH_PATCH* patches, UINT32 patchesCount, ID2D1GradientMesh** gradientMesh) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext2*, const D2D1_GRADIENT_MESH_PATCH*, UINT32, ID2D1GradientMesh**))this->v->tbl[97])(this, patches, patchesCount, gradientMesh); }
static inline HRESULT                           ID2D1DeviceContext2_CreateImageSourceFromWic                 (ID2D1DeviceContext2* this, IWICBitmapSource* wicBitmapSource, D2D1_IMAGE_SOURCE_LOADING_OPTIONS loadingOptions, D2D1_ALPHA_MODE alphaMode, ID2D1ImageSourceFromWic** imageSource) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext2*, IWICBitmapSource*, D2D1_IMAGE_SOURCE_LOADING_OPTIONS, D2D1_ALPHA_MODE, ID2D1ImageSourceFromWic**))this->v->tbl[98])(this, wicBitmapSource, loadingOptions, alphaMode, imageSource); }
static inline HRESULT                           ID2D1DeviceContext2_CreateLookupTable3D                      (ID2D1DeviceContext2* this, D2D1_BUFFER_PRECISION precision, const UINT32* extents, const UINT8* data, UINT32 dataCount, const UINT32* strides, ID2D1LookupTable3D** lookupTable) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext2*, D2D1_BUFFER_PRECISION, const UINT32*, const UINT8*, UINT32, const UINT32*, ID2D1LookupTable3D**))this->v->tbl[99])(this, precision, extents, data, dataCount, strides, lookupTable); }
static inline HRESULT                           ID2D1DeviceContext2_CreateImageSourceFromDxgi                (ID2D1DeviceContext2* this, IDXGISurface** surfaces, UINT32 surfaceCount, DXGI_COLOR_SPACE_TYPE colorSpace, D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS options, ID2D1ImageSource** imageSource) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext2*, IDXGISurface**, UINT32, DXGI_COLOR_SPACE_TYPE, D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS, ID2D1ImageSource**))this->v->tbl[100])(this, surfaces, surfaceCount, colorSpace, options, imageSource); }
static inline HRESULT                           ID2D1DeviceContext2_GetGradientMeshWorldBounds               (ID2D1DeviceContext2* this, ID2D1GradientMesh* gradientMesh, D2D_RECT_F* pBounds) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext2*, ID2D1GradientMesh*, D2D_RECT_F*))this->v->tbl[101])(this, gradientMesh, pBounds); }
static inline void                              ID2D1DeviceContext2_DrawInk                                  (ID2D1DeviceContext2* this, ID2D1Ink* ink, ID2D1Brush* brush, ID2D1InkStyle* inkStyle) { ((void (WINAPI*)(ID2D1DeviceContext2*, ID2D1Ink*, ID2D1Brush*, ID2D1InkStyle*))this->v->tbl[102])(this, ink, brush, inkStyle); }
static inline void                              ID2D1DeviceContext2_DrawGradientMesh                         (ID2D1DeviceContext2* this, ID2D1GradientMesh* gradientMesh) { ((void (WINAPI*)(ID2D1DeviceContext2*, ID2D1GradientMesh*))this->v->tbl[103])(this, gradientMesh); }
static inline void                              ID2D1DeviceContext2_DrawGdiMetafile1                         (ID2D1DeviceContext2* this, ID2D1GdiMetafile* gdiMetafile, const D2D_RECT_F* destinationRectangle, const D2D_RECT_F* sourceRectangle) { ((void (WINAPI*)(ID2D1DeviceContext2*, ID2D1GdiMetafile*, const D2D_RECT_F*, const D2D_RECT_F*))this->v->tbl[104])(this, gdiMetafile, destinationRectangle, sourceRectangle); }
static inline HRESULT                           ID2D1DeviceContext2_CreateTransformedImageSource             (ID2D1DeviceContext2* this, ID2D1ImageSource* imageSource, const D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES* properties, ID2D1TransformedImageSource** transformedImageSource) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext2*, ID2D1ImageSource*, const D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES*, ID2D1TransformedImageSource**))this->v->tbl[105])(this, imageSource, properties, transformedImageSource); }

static inline HRESULT                           ID2D1DeviceContext3_QueryInterface                           (ID2D1DeviceContext3* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext3*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1DeviceContext3_AddRef                                   (ID2D1DeviceContext3* this) { return ((UINT32 (WINAPI*)(ID2D1DeviceContext3*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1DeviceContext3_Release                                  (ID2D1DeviceContext3* this) { return ((UINT32 (WINAPI*)(ID2D1DeviceContext3*))this->v->tbl[2])(this); }
static inline void                              ID2D1DeviceContext3_GetFactory                               (ID2D1DeviceContext3* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1DeviceContext3*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline HRESULT                           ID2D1DeviceContext3_CreateBitmap                             (ID2D1DeviceContext3* this, D2D_SIZE_U size, const void* srcData, UINT32 pitch, const D2D1_BITMAP_PROPERTIES* bitmapProperties, ID2D1Bitmap** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext3*, D2D_SIZE_U, const void*, UINT32, const D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap**))this->v->tbl[4])(this, size, srcData, pitch, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext3_CreateBitmapFromWicBitmap                (ID2D1DeviceContext3* this, IWICBitmapSource* wicBitmapSource, const D2D1_BITMAP_PROPERTIES* bitmapProperties, ID2D1Bitmap** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext3*, IWICBitmapSource*, const D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap**))this->v->tbl[5])(this, wicBitmapSource, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext3_CreateSharedBitmap                       (ID2D1DeviceContext3* this, const GUID* riid, void* data, const D2D1_BITMAP_PROPERTIES* bitmapProperties, ID2D1Bitmap** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext3*, const GUID*, void*, const D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap**))this->v->tbl[6])(this, riid, data, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext3_CreateBitmapBrush                        (ID2D1DeviceContext3* this, ID2D1Bitmap* bitmap, const D2D1_BITMAP_BRUSH_PROPERTIES* bitmapBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1BitmapBrush** bitmapBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext3*, ID2D1Bitmap*, const D2D1_BITMAP_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1BitmapBrush**))this->v->tbl[7])(this, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush); }
static inline HRESULT                           ID2D1DeviceContext3_CreateSolidColorBrush                    (ID2D1DeviceContext3* this, const D2D1_COLOR_F* color, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1SolidColorBrush** solidColorBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext3*, const D2D1_COLOR_F*, const D2D1_BRUSH_PROPERTIES*, ID2D1SolidColorBrush**))this->v->tbl[8])(this, color, brushProperties, solidColorBrush); }
static inline HRESULT                           ID2D1DeviceContext3_CreateGradientStopCollection             (ID2D1DeviceContext3* this, const D2D1_GRADIENT_STOP* gradientStops, UINT32 gradientStopsCount, D2D1_GAMMA colorInterpolationGamma, D2D1_EXTEND_MODE extendMode, ID2D1GradientStopCollection** gradientStopCollection) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext3*, const D2D1_GRADIENT_STOP*, UINT32, D2D1_GAMMA, D2D1_EXTEND_MODE, ID2D1GradientStopCollection**))this->v->tbl[9])(this, gradientStops, gradientStopsCount, colorInterpolationGamma, extendMode, gradientStopCollection); }
static inline HRESULT                           ID2D1DeviceContext3_CreateLinearGradientBrush                (ID2D1DeviceContext3* this, const D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES* linearGradientBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1GradientStopCollection* gradientStopCollection, ID2D1LinearGradientBrush** linearGradientBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext3*, const D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection*, ID2D1LinearGradientBrush**))this->v->tbl[10])(this, linearGradientBrushProperties, brushProperties, gradientStopCollection, linearGradientBrush); }
static inline HRESULT                           ID2D1DeviceContext3_CreateRadialGradientBrush                (ID2D1DeviceContext3* this, const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES* radialGradientBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1GradientStopCollection* gradientStopCollection, ID2D1RadialGradientBrush** radialGradientBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext3*, const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection*, ID2D1RadialGradientBrush**))this->v->tbl[11])(this, radialGradientBrushProperties, brushProperties, gradientStopCollection, radialGradientBrush); }
static inline HRESULT                           ID2D1DeviceContext3_CreateCompatibleRenderTarget             (ID2D1DeviceContext3* this, const D2D_SIZE_F* desiredSize, const D2D_SIZE_U* desiredPixelSize, const D2D1_PIXEL_FORMAT* desiredFormat, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS options, ID2D1BitmapRenderTarget** bitmapRenderTarget) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext3*, const D2D_SIZE_F*, const D2D_SIZE_U*, const D2D1_PIXEL_FORMAT*, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, ID2D1BitmapRenderTarget**))this->v->tbl[12])(this, desiredSize, desiredPixelSize, desiredFormat, options, bitmapRenderTarget); }
static inline HRESULT                           ID2D1DeviceContext3_CreateLayer                              (ID2D1DeviceContext3* this, const D2D_SIZE_F* size, ID2D1Layer** layer) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext3*, const D2D_SIZE_F*, ID2D1Layer**))this->v->tbl[13])(this, size, layer); }
static inline HRESULT                           ID2D1DeviceContext3_CreateMesh                               (ID2D1DeviceContext3* this, ID2D1Mesh** mesh) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext3*, ID2D1Mesh**))this->v->tbl[14])(this, mesh); }
static inline void                              ID2D1DeviceContext3_DrawLine                                 (ID2D1DeviceContext3* this, D2D_POINT_2F point0, D2D_POINT_2F point1, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DeviceContext3*, D2D_POINT_2F, D2D_POINT_2F, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[15])(this, point0, point1, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DeviceContext3_DrawRectangle                            (ID2D1DeviceContext3* this, const D2D_RECT_F* rect, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DeviceContext3*, const D2D_RECT_F*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[16])(this, rect, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DeviceContext3_FillRectangle                            (ID2D1DeviceContext3* this, const D2D_RECT_F* rect, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1DeviceContext3*, const D2D_RECT_F*, ID2D1Brush*))this->v->tbl[17])(this, rect, brush); }
static inline void                              ID2D1DeviceContext3_DrawRoundedRectangle                     (ID2D1DeviceContext3* this, const D2D1_ROUNDED_RECT* roundedRect, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DeviceContext3*, const D2D1_ROUNDED_RECT*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[18])(this, roundedRect, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DeviceContext3_FillRoundedRectangle                     (ID2D1DeviceContext3* this, const D2D1_ROUNDED_RECT* roundedRect, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1DeviceContext3*, const D2D1_ROUNDED_RECT*, ID2D1Brush*))this->v->tbl[19])(this, roundedRect, brush); }
static inline void                              ID2D1DeviceContext3_DrawEllipse                              (ID2D1DeviceContext3* this, const D2D1_ELLIPSE* ellipse, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DeviceContext3*, const D2D1_ELLIPSE*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[20])(this, ellipse, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DeviceContext3_FillEllipse                              (ID2D1DeviceContext3* this, const D2D1_ELLIPSE* ellipse, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1DeviceContext3*, const D2D1_ELLIPSE*, ID2D1Brush*))this->v->tbl[21])(this, ellipse, brush); }
static inline void                              ID2D1DeviceContext3_DrawGeometry                             (ID2D1DeviceContext3* this, ID2D1Geometry* geometry, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DeviceContext3*, ID2D1Geometry*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[22])(this, geometry, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DeviceContext3_FillGeometry                             (ID2D1DeviceContext3* this, ID2D1Geometry* geometry, ID2D1Brush* brush, ID2D1Brush* opacityBrush) { ((void (WINAPI*)(ID2D1DeviceContext3*, ID2D1Geometry*, ID2D1Brush*, ID2D1Brush*))this->v->tbl[23])(this, geometry, brush, opacityBrush); }
static inline void                              ID2D1DeviceContext3_FillMesh                                 (ID2D1DeviceContext3* this, ID2D1Mesh* mesh, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1DeviceContext3*, ID2D1Mesh*, ID2D1Brush*))this->v->tbl[24])(this, mesh, brush); }
static inline void                              ID2D1DeviceContext3_FillOpacityMask                          (ID2D1DeviceContext3* this, ID2D1Bitmap* opacityMask, ID2D1Brush* brush, D2D1_OPACITY_MASK_CONTENT content, const D2D_RECT_F* destinationRectangle, const D2D_RECT_F* sourceRectangle) { ((void (WINAPI*)(ID2D1DeviceContext3*, ID2D1Bitmap*, ID2D1Brush*, D2D1_OPACITY_MASK_CONTENT, const D2D_RECT_F*, const D2D_RECT_F*))this->v->tbl[25])(this, opacityMask, brush, content, destinationRectangle, sourceRectangle); }
static inline void                              ID2D1DeviceContext3_DrawBitmap                               (ID2D1DeviceContext3* this, ID2D1Bitmap* bitmap, const D2D_RECT_F* destinationRectangle, FLOAT opacity, D2D1_BITMAP_INTERPOLATION_MODE interpolationMode, const D2D_RECT_F* sourceRectangle) { ((void (WINAPI*)(ID2D1DeviceContext3*, ID2D1Bitmap*, const D2D_RECT_F*, FLOAT, D2D1_BITMAP_INTERPOLATION_MODE, const D2D_RECT_F*))this->v->tbl[26])(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle); }
static inline void                              ID2D1DeviceContext3_DrawText                                 (ID2D1DeviceContext3* this, const WCHAR* string, UINT32 stringLength, IDWriteTextFormat* textFormat, const D2D_RECT_F* layoutRect, ID2D1Brush* defaultFillBrush, D2D1_DRAW_TEXT_OPTIONS options, DWRITE_MEASURING_MODE measuringMode) { ((void (WINAPI*)(ID2D1DeviceContext3*, const WCHAR*, UINT32, IDWriteTextFormat*, const D2D_RECT_F*, ID2D1Brush*, D2D1_DRAW_TEXT_OPTIONS, DWRITE_MEASURING_MODE))this->v->tbl[27])(this, string, stringLength, textFormat, layoutRect, defaultFillBrush, options, measuringMode); }
static inline void                              ID2D1DeviceContext3_DrawTextLayout                           (ID2D1DeviceContext3* this, D2D_POINT_2F origin, IDWriteTextLayout* textLayout, ID2D1Brush* defaultFillBrush, D2D1_DRAW_TEXT_OPTIONS options) { ((void (WINAPI*)(ID2D1DeviceContext3*, D2D_POINT_2F, IDWriteTextLayout*, ID2D1Brush*, D2D1_DRAW_TEXT_OPTIONS))this->v->tbl[28])(this, origin, textLayout, defaultFillBrush, options); }
static inline void                              ID2D1DeviceContext3_DrawGlyphRun                             (ID2D1DeviceContext3* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, ID2D1Brush* foregroundBrush, DWRITE_MEASURING_MODE measuringMode) { ((void (WINAPI*)(ID2D1DeviceContext3*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, ID2D1Brush*, DWRITE_MEASURING_MODE))this->v->tbl[29])(this, baselineOrigin, glyphRun, foregroundBrush, measuringMode); }
static inline void                              ID2D1DeviceContext3_SetTransform                             (ID2D1DeviceContext3* this, const D2D_MATRIX_3X2_F* transform) { ((void (WINAPI*)(ID2D1DeviceContext3*, const D2D_MATRIX_3X2_F*))this->v->tbl[30])(this, transform); }
static inline void                              ID2D1DeviceContext3_GetTransform                             (ID2D1DeviceContext3* this, D2D_MATRIX_3X2_F* transform) { ((void (WINAPI*)(ID2D1DeviceContext3*, D2D_MATRIX_3X2_F*))this->v->tbl[31])(this, transform); }
static inline void                              ID2D1DeviceContext3_SetAntialiasMode                         (ID2D1DeviceContext3* this, D2D1_ANTIALIAS_MODE antialiasMode) { ((void (WINAPI*)(ID2D1DeviceContext3*, D2D1_ANTIALIAS_MODE))this->v->tbl[32])(this, antialiasMode); }
static inline D2D1_ANTIALIAS_MODE               ID2D1DeviceContext3_GetAntialiasMode                         (ID2D1DeviceContext3* this) { return ((D2D1_ANTIALIAS_MODE (WINAPI*)(ID2D1DeviceContext3*))this->v->tbl[33])(this); }
static inline void                              ID2D1DeviceContext3_SetTextAntialiasMode                     (ID2D1DeviceContext3* this, D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode) { ((void (WINAPI*)(ID2D1DeviceContext3*, D2D1_TEXT_ANTIALIAS_MODE))this->v->tbl[34])(this, textAntialiasMode); }
static inline D2D1_TEXT_ANTIALIAS_MODE          ID2D1DeviceContext3_GetTextAntialiasMode                     (ID2D1DeviceContext3* this) { return ((D2D1_TEXT_ANTIALIAS_MODE (WINAPI*)(ID2D1DeviceContext3*))this->v->tbl[35])(this); }
static inline void                              ID2D1DeviceContext3_SetTextRenderingParams                   (ID2D1DeviceContext3* this, IDWriteRenderingParams* textRenderingParams) { ((void (WINAPI*)(ID2D1DeviceContext3*, IDWriteRenderingParams*))this->v->tbl[36])(this, textRenderingParams); }
static inline void                              ID2D1DeviceContext3_GetTextRenderingParams                   (ID2D1DeviceContext3* this, IDWriteRenderingParams** textRenderingParams) { ((void (WINAPI*)(ID2D1DeviceContext3*, IDWriteRenderingParams**))this->v->tbl[37])(this, textRenderingParams); }
static inline void                              ID2D1DeviceContext3_SetTags                                  (ID2D1DeviceContext3* this, UINT64 tag1, UINT64 tag2) { ((void (WINAPI*)(ID2D1DeviceContext3*, UINT64, UINT64))this->v->tbl[38])(this, tag1, tag2); }
static inline void                              ID2D1DeviceContext3_GetTags                                  (ID2D1DeviceContext3* this, UINT64* tag1, UINT64* tag2) { ((void (WINAPI*)(ID2D1DeviceContext3*, UINT64*, UINT64*))this->v->tbl[39])(this, tag1, tag2); }
static inline void                              ID2D1DeviceContext3_PushLayer                                (ID2D1DeviceContext3* this, const D2D1_LAYER_PARAMETERS* layerParameters, ID2D1Layer* layer) { ((void (WINAPI*)(ID2D1DeviceContext3*, const D2D1_LAYER_PARAMETERS*, ID2D1Layer*))this->v->tbl[40])(this, layerParameters, layer); }
static inline void                              ID2D1DeviceContext3_PopLayer                                 (ID2D1DeviceContext3* this) { ((void (WINAPI*)(ID2D1DeviceContext3*))this->v->tbl[41])(this); }
static inline HRESULT                           ID2D1DeviceContext3_Flush                                    (ID2D1DeviceContext3* this, UINT64* tag1, UINT64* tag2) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext3*, UINT64*, UINT64*))this->v->tbl[42])(this, tag1, tag2); }
static inline void                              ID2D1DeviceContext3_SaveDrawingState                         (ID2D1DeviceContext3* this, ID2D1DrawingStateBlock* drawingStateBlock) { ((void (WINAPI*)(ID2D1DeviceContext3*, ID2D1DrawingStateBlock*))this->v->tbl[43])(this, drawingStateBlock); }
static inline void                              ID2D1DeviceContext3_RestoreDrawingState                      (ID2D1DeviceContext3* this, ID2D1DrawingStateBlock* drawingStateBlock) { ((void (WINAPI*)(ID2D1DeviceContext3*, ID2D1DrawingStateBlock*))this->v->tbl[44])(this, drawingStateBlock); }
static inline void                              ID2D1DeviceContext3_PushAxisAlignedClip                      (ID2D1DeviceContext3* this, const D2D_RECT_F* clipRect, D2D1_ANTIALIAS_MODE antialiasMode) { ((void (WINAPI*)(ID2D1DeviceContext3*, const D2D_RECT_F*, D2D1_ANTIALIAS_MODE))this->v->tbl[45])(this, clipRect, antialiasMode); }
static inline void                              ID2D1DeviceContext3_PopAxisAlignedClip                       (ID2D1DeviceContext3* this) { ((void (WINAPI*)(ID2D1DeviceContext3*))this->v->tbl[46])(this); }
static inline void                              ID2D1DeviceContext3_Clear                                    (ID2D1DeviceContext3* this, const D2D1_COLOR_F* clearColor) { ((void (WINAPI*)(ID2D1DeviceContext3*, const D2D1_COLOR_F*))this->v->tbl[47])(this, clearColor); }
static inline void                              ID2D1DeviceContext3_BeginDraw                                (ID2D1DeviceContext3* this) { ((void (WINAPI*)(ID2D1DeviceContext3*))this->v->tbl[48])(this); }
static inline HRESULT                           ID2D1DeviceContext3_EndDraw                                  (ID2D1DeviceContext3* this, UINT64* tag1, UINT64* tag2) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext3*, UINT64*, UINT64*))this->v->tbl[49])(this, tag1, tag2); }
static inline D2D1_PIXEL_FORMAT                 ID2D1DeviceContext3_GetPixelFormat                           (ID2D1DeviceContext3* this) { D2D1_PIXEL_FORMAT _return; ((void (WINAPI*)(ID2D1DeviceContext3*, D2D1_PIXEL_FORMAT*))this->v->tbl[50])(this, &_return); return _return; }
static inline void                              ID2D1DeviceContext3_SetDpi                                   (ID2D1DeviceContext3* this, FLOAT dpiX, FLOAT dpiY) { ((void (WINAPI*)(ID2D1DeviceContext3*, FLOAT, FLOAT))this->v->tbl[51])(this, dpiX, dpiY); }
static inline void                              ID2D1DeviceContext3_GetDpi                                   (ID2D1DeviceContext3* this, FLOAT* dpiX, FLOAT* dpiY) { ((void (WINAPI*)(ID2D1DeviceContext3*, FLOAT*, FLOAT*))this->v->tbl[52])(this, dpiX, dpiY); }
static inline D2D_SIZE_F                        ID2D1DeviceContext3_GetSize                                  (ID2D1DeviceContext3* this) { D2D_SIZE_F _return; ((void (WINAPI*)(ID2D1DeviceContext3*, D2D_SIZE_F*))this->v->tbl[53])(this, &_return); return _return; }
static inline D2D_SIZE_U                        ID2D1DeviceContext3_GetPixelSize                             (ID2D1DeviceContext3* this) { D2D_SIZE_U _return; ((void (WINAPI*)(ID2D1DeviceContext3*, D2D_SIZE_U*))this->v->tbl[54])(this, &_return); return _return; }
static inline UINT32                            ID2D1DeviceContext3_GetMaximumBitmapSize                     (ID2D1DeviceContext3* this) { return ((UINT32 (WINAPI*)(ID2D1DeviceContext3*))this->v->tbl[55])(this); }
static inline BOOL                              ID2D1DeviceContext3_IsSupported                              (ID2D1DeviceContext3* this, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties) { return ((BOOL (WINAPI*)(ID2D1DeviceContext3*, const D2D1_RENDER_TARGET_PROPERTIES*))this->v->tbl[56])(this, renderTargetProperties); }
static inline HRESULT                           ID2D1DeviceContext3_CreateBitmap1                            (ID2D1DeviceContext3* this, D2D_SIZE_U size, const void* sourceData, UINT32 pitch, const D2D1_BITMAP_PROPERTIES1* bitmapProperties, ID2D1Bitmap1** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext3*, D2D_SIZE_U, const void*, UINT32, const D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1**))this->v->tbl[57])(this, size, sourceData, pitch, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext3_CreateBitmapFromWicBitmap1               (ID2D1DeviceContext3* this, IWICBitmapSource* wicBitmapSource, const D2D1_BITMAP_PROPERTIES1* bitmapProperties, ID2D1Bitmap1** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext3*, IWICBitmapSource*, const D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1**))this->v->tbl[58])(this, wicBitmapSource, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext3_CreateColorContext                       (ID2D1DeviceContext3* this, D2D1_COLOR_SPACE space, const UINT8* profile, UINT32 profileSize, ID2D1ColorContext** colorContext) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext3*, D2D1_COLOR_SPACE, const UINT8*, UINT32, ID2D1ColorContext**))this->v->tbl[59])(this, space, profile, profileSize, colorContext); }
static inline HRESULT                           ID2D1DeviceContext3_CreateColorContextFromFilename           (ID2D1DeviceContext3* this, const WCHAR* filename, ID2D1ColorContext** colorContext) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext3*, const WCHAR*, ID2D1ColorContext**))this->v->tbl[60])(this, filename, colorContext); }
static inline HRESULT                           ID2D1DeviceContext3_CreateColorContextFromWicColorContext    (ID2D1DeviceContext3* this, IWICColorContext* wicColorContext, ID2D1ColorContext** colorContext) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext3*, IWICColorContext*, ID2D1ColorContext**))this->v->tbl[61])(this, wicColorContext, colorContext); }
static inline HRESULT                           ID2D1DeviceContext3_CreateBitmapFromDxgiSurface              (ID2D1DeviceContext3* this, IDXGISurface* surface, const D2D1_BITMAP_PROPERTIES1* bitmapProperties, ID2D1Bitmap1** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext3*, IDXGISurface*, const D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1**))this->v->tbl[62])(this, surface, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext3_CreateEffect                             (ID2D1DeviceContext3* this, const GUID* effectId, ID2D1Effect** effect) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext3*, const GUID*, ID2D1Effect**))this->v->tbl[63])(this, effectId, effect); }
static inline HRESULT                           ID2D1DeviceContext3_CreateGradientStopCollection1            (ID2D1DeviceContext3* this, const D2D1_GRADIENT_STOP* straightAlphaGradientStops, UINT32 straightAlphaGradientStopsCount, D2D1_COLOR_SPACE preInterpolationSpace, D2D1_COLOR_SPACE postInterpolationSpace, D2D1_BUFFER_PRECISION bufferPrecision, D2D1_EXTEND_MODE extendMode, D2D1_COLOR_INTERPOLATION_MODE colorInterpolationMode, ID2D1GradientStopCollection1** gradientStopCollection1) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext3*, const D2D1_GRADIENT_STOP*, UINT32, D2D1_COLOR_SPACE, D2D1_COLOR_SPACE, D2D1_BUFFER_PRECISION, D2D1_EXTEND_MODE, D2D1_COLOR_INTERPOLATION_MODE, ID2D1GradientStopCollection1**))this->v->tbl[64])(this, straightAlphaGradientStops, straightAlphaGradientStopsCount, preInterpolationSpace, postInterpolationSpace, bufferPrecision, extendMode, colorInterpolationMode, gradientStopCollection1); }
static inline HRESULT                           ID2D1DeviceContext3_CreateImageBrush                         (ID2D1DeviceContext3* this, ID2D1Image* image, const D2D1_IMAGE_BRUSH_PROPERTIES* imageBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1ImageBrush** imageBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext3*, ID2D1Image*, const D2D1_IMAGE_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1ImageBrush**))this->v->tbl[65])(this, image, imageBrushProperties, brushProperties, imageBrush); }
static inline HRESULT                           ID2D1DeviceContext3_CreateBitmapBrush1                       (ID2D1DeviceContext3* this, ID2D1Bitmap* bitmap, const D2D1_BITMAP_BRUSH_PROPERTIES1* bitmapBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1BitmapBrush1** bitmapBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext3*, ID2D1Bitmap*, const D2D1_BITMAP_BRUSH_PROPERTIES1*, const D2D1_BRUSH_PROPERTIES*, ID2D1BitmapBrush1**))this->v->tbl[66])(this, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush); }
static inline HRESULT                           ID2D1DeviceContext3_CreateCommandList                        (ID2D1DeviceContext3* this, ID2D1CommandList** commandList) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext3*, ID2D1CommandList**))this->v->tbl[67])(this, commandList); }
static inline BOOL                              ID2D1DeviceContext3_IsDxgiFormatSupported                    (ID2D1DeviceContext3* this, DXGI_FORMAT format) { return ((BOOL (WINAPI*)(ID2D1DeviceContext3*, DXGI_FORMAT))this->v->tbl[68])(this, format); }
static inline BOOL                              ID2D1DeviceContext3_IsBufferPrecisionSupported               (ID2D1DeviceContext3* this, D2D1_BUFFER_PRECISION bufferPrecision) { return ((BOOL (WINAPI*)(ID2D1DeviceContext3*, D2D1_BUFFER_PRECISION))this->v->tbl[69])(this, bufferPrecision); }
static inline HRESULT                           ID2D1DeviceContext3_GetImageLocalBounds                      (ID2D1DeviceContext3* this, ID2D1Image* image, D2D_RECT_F* localBounds) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext3*, ID2D1Image*, D2D_RECT_F*))this->v->tbl[70])(this, image, localBounds); }
static inline HRESULT                           ID2D1DeviceContext3_GetImageWorldBounds                      (ID2D1DeviceContext3* this, ID2D1Image* image, D2D_RECT_F* worldBounds) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext3*, ID2D1Image*, D2D_RECT_F*))this->v->tbl[71])(this, image, worldBounds); }
static inline HRESULT                           ID2D1DeviceContext3_GetGlyphRunWorldBounds                   (ID2D1DeviceContext3* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, DWRITE_MEASURING_MODE measuringMode, D2D_RECT_F* bounds) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext3*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, DWRITE_MEASURING_MODE, D2D_RECT_F*))this->v->tbl[72])(this, baselineOrigin, glyphRun, measuringMode, bounds); }
static inline void                              ID2D1DeviceContext3_GetDevice                                (ID2D1DeviceContext3* this, ID2D1Device** device) { ((void (WINAPI*)(ID2D1DeviceContext3*, ID2D1Device**))this->v->tbl[73])(this, device); }
static inline void                              ID2D1DeviceContext3_SetTarget                                (ID2D1DeviceContext3* this, ID2D1Image* image) { ((void (WINAPI*)(ID2D1DeviceContext3*, ID2D1Image*))this->v->tbl[74])(this, image); }
static inline void                              ID2D1DeviceContext3_GetTarget                                (ID2D1DeviceContext3* this, ID2D1Image** image) { ((void (WINAPI*)(ID2D1DeviceContext3*, ID2D1Image**))this->v->tbl[75])(this, image); }
static inline void                              ID2D1DeviceContext3_SetRenderingControls                     (ID2D1DeviceContext3* this, const D2D1_RENDERING_CONTROLS* renderingControls) { ((void (WINAPI*)(ID2D1DeviceContext3*, const D2D1_RENDERING_CONTROLS*))this->v->tbl[76])(this, renderingControls); }
static inline void                              ID2D1DeviceContext3_GetRenderingControls                     (ID2D1DeviceContext3* this, D2D1_RENDERING_CONTROLS* renderingControls) { ((void (WINAPI*)(ID2D1DeviceContext3*, D2D1_RENDERING_CONTROLS*))this->v->tbl[77])(this, renderingControls); }
static inline void                              ID2D1DeviceContext3_SetPrimitiveBlend                        (ID2D1DeviceContext3* this, D2D1_PRIMITIVE_BLEND primitiveBlend) { ((void (WINAPI*)(ID2D1DeviceContext3*, D2D1_PRIMITIVE_BLEND))this->v->tbl[78])(this, primitiveBlend); }
static inline D2D1_PRIMITIVE_BLEND              ID2D1DeviceContext3_GetPrimitiveBlend                        (ID2D1DeviceContext3* this) { return ((D2D1_PRIMITIVE_BLEND (WINAPI*)(ID2D1DeviceContext3*))this->v->tbl[79])(this); }
static inline void                              ID2D1DeviceContext3_SetUnitMode                              (ID2D1DeviceContext3* this, D2D1_UNIT_MODE unitMode) { ((void (WINAPI*)(ID2D1DeviceContext3*, D2D1_UNIT_MODE))this->v->tbl[80])(this, unitMode); }
static inline D2D1_UNIT_MODE                    ID2D1DeviceContext3_GetUnitMode                              (ID2D1DeviceContext3* this) { return ((D2D1_UNIT_MODE (WINAPI*)(ID2D1DeviceContext3*))this->v->tbl[81])(this); }
static inline void                              ID2D1DeviceContext3_DrawGlyphRun1                            (ID2D1DeviceContext3* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, const DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription, ID2D1Brush* foregroundBrush, DWRITE_MEASURING_MODE measuringMode) { ((void (WINAPI*)(ID2D1DeviceContext3*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, const DWRITE_GLYPH_RUN_DESCRIPTION*, ID2D1Brush*, DWRITE_MEASURING_MODE))this->v->tbl[82])(this, baselineOrigin, glyphRun, glyphRunDescription, foregroundBrush, measuringMode); }
static inline void                              ID2D1DeviceContext3_DrawImage                                (ID2D1DeviceContext3* this, ID2D1Image* image, const D2D_POINT_2F* targetOffset, const D2D_RECT_F* imageRectangle, D2D1_INTERPOLATION_MODE interpolationMode, D2D1_COMPOSITE_MODE compositeMode) { ((void (WINAPI*)(ID2D1DeviceContext3*, ID2D1Image*, const D2D_POINT_2F*, const D2D_RECT_F*, D2D1_INTERPOLATION_MODE, D2D1_COMPOSITE_MODE))this->v->tbl[83])(this, image, targetOffset, imageRectangle, interpolationMode, compositeMode); }
static inline void                              ID2D1DeviceContext3_DrawGdiMetafile                          (ID2D1DeviceContext3* this, ID2D1GdiMetafile* gdiMetafile, const D2D_POINT_2F* targetOffset) { ((void (WINAPI*)(ID2D1DeviceContext3*, ID2D1GdiMetafile*, const D2D_POINT_2F*))this->v->tbl[84])(this, gdiMetafile, targetOffset); }
static inline void                              ID2D1DeviceContext3_DrawBitmap1                              (ID2D1DeviceContext3* this, ID2D1Bitmap* bitmap, const D2D_RECT_F* destinationRectangle, FLOAT opacity, D2D1_INTERPOLATION_MODE interpolationMode, const D2D_RECT_F* sourceRectangle, const D2D_MATRIX_4X4_F* perspectiveTransform) { ((void (WINAPI*)(ID2D1DeviceContext3*, ID2D1Bitmap*, const D2D_RECT_F*, FLOAT, D2D1_INTERPOLATION_MODE, const D2D_RECT_F*, const D2D_MATRIX_4X4_F*))this->v->tbl[85])(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle, perspectiveTransform); }
static inline void                              ID2D1DeviceContext3_PushLayer1                               (ID2D1DeviceContext3* this, const D2D1_LAYER_PARAMETERS1* layerParameters, ID2D1Layer* layer) { ((void (WINAPI*)(ID2D1DeviceContext3*, const D2D1_LAYER_PARAMETERS1*, ID2D1Layer*))this->v->tbl[86])(this, layerParameters, layer); }
static inline HRESULT                           ID2D1DeviceContext3_InvalidateEffectInputRectangle           (ID2D1DeviceContext3* this, ID2D1Effect* effect, UINT32 input, const D2D_RECT_F* inputRectangle) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext3*, ID2D1Effect*, UINT32, const D2D_RECT_F*))this->v->tbl[87])(this, effect, input, inputRectangle); }
static inline HRESULT                           ID2D1DeviceContext3_GetEffectInvalidRectangleCount           (ID2D1DeviceContext3* this, ID2D1Effect* effect, UINT32* rectangleCount) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext3*, ID2D1Effect*, UINT32*))this->v->tbl[88])(this, effect, rectangleCount); }
static inline HRESULT                           ID2D1DeviceContext3_GetEffectInvalidRectangles               (ID2D1DeviceContext3* this, ID2D1Effect* effect, D2D_RECT_F* rectangles, UINT32 rectanglesCount) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext3*, ID2D1Effect*, D2D_RECT_F*, UINT32))this->v->tbl[89])(this, effect, rectangles, rectanglesCount); }
static inline HRESULT                           ID2D1DeviceContext3_GetEffectRequiredInputRectangles         (ID2D1DeviceContext3* this, ID2D1Effect* renderEffect, const D2D_RECT_F* renderImageRectangle, const D2D1_EFFECT_INPUT_DESCRIPTION* inputDescriptions, D2D_RECT_F* requiredInputRects, UINT32 inputCount) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext3*, ID2D1Effect*, const D2D_RECT_F*, const D2D1_EFFECT_INPUT_DESCRIPTION*, D2D_RECT_F*, UINT32))this->v->tbl[90])(this, renderEffect, renderImageRectangle, inputDescriptions, requiredInputRects, inputCount); }
static inline void                              ID2D1DeviceContext3_FillOpacityMask1                         (ID2D1DeviceContext3* this, ID2D1Bitmap* opacityMask, ID2D1Brush* brush, const D2D_RECT_F* destinationRectangle, const D2D_RECT_F* sourceRectangle) { ((void (WINAPI*)(ID2D1DeviceContext3*, ID2D1Bitmap*, ID2D1Brush*, const D2D_RECT_F*, const D2D_RECT_F*))this->v->tbl[91])(this, opacityMask, brush, destinationRectangle, sourceRectangle); }
static inline HRESULT                           ID2D1DeviceContext3_CreateFilledGeometryRealization          (ID2D1DeviceContext3* this, ID2D1Geometry* geometry, FLOAT flatteningTolerance, ID2D1GeometryRealization** geometryRealization) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext3*, ID2D1Geometry*, FLOAT, ID2D1GeometryRealization**))this->v->tbl[92])(this, geometry, flatteningTolerance, geometryRealization); }
static inline HRESULT                           ID2D1DeviceContext3_CreateStrokedGeometryRealization         (ID2D1DeviceContext3* this, ID2D1Geometry* geometry, FLOAT flatteningTolerance, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle, ID2D1GeometryRealization** geometryRealization) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext3*, ID2D1Geometry*, FLOAT, FLOAT, ID2D1StrokeStyle*, ID2D1GeometryRealization**))this->v->tbl[93])(this, geometry, flatteningTolerance, strokeWidth, strokeStyle, geometryRealization); }
static inline void                              ID2D1DeviceContext3_DrawGeometryRealization                  (ID2D1DeviceContext3* this, ID2D1GeometryRealization* geometryRealization, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1DeviceContext3*, ID2D1GeometryRealization*, ID2D1Brush*))this->v->tbl[94])(this, geometryRealization, brush); }
static inline HRESULT                           ID2D1DeviceContext3_CreateInk                                (ID2D1DeviceContext3* this, const D2D1_INK_POINT* startPoint, ID2D1Ink** ink) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext3*, const D2D1_INK_POINT*, ID2D1Ink**))this->v->tbl[95])(this, startPoint, ink); }
static inline HRESULT                           ID2D1DeviceContext3_CreateInkStyle                           (ID2D1DeviceContext3* this, const D2D1_INK_STYLE_PROPERTIES* inkStyleProperties, ID2D1InkStyle** inkStyle) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext3*, const D2D1_INK_STYLE_PROPERTIES*, ID2D1InkStyle**))this->v->tbl[96])(this, inkStyleProperties, inkStyle); }
static inline HRESULT                           ID2D1DeviceContext3_CreateGradientMesh                       (ID2D1DeviceContext3* this, const D2D1_GRADIENT_MESH_PATCH* patches, UINT32 patchesCount, ID2D1GradientMesh** gradientMesh) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext3*, const D2D1_GRADIENT_MESH_PATCH*, UINT32, ID2D1GradientMesh**))this->v->tbl[97])(this, patches, patchesCount, gradientMesh); }
static inline HRESULT                           ID2D1DeviceContext3_CreateImageSourceFromWic                 (ID2D1DeviceContext3* this, IWICBitmapSource* wicBitmapSource, D2D1_IMAGE_SOURCE_LOADING_OPTIONS loadingOptions, D2D1_ALPHA_MODE alphaMode, ID2D1ImageSourceFromWic** imageSource) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext3*, IWICBitmapSource*, D2D1_IMAGE_SOURCE_LOADING_OPTIONS, D2D1_ALPHA_MODE, ID2D1ImageSourceFromWic**))this->v->tbl[98])(this, wicBitmapSource, loadingOptions, alphaMode, imageSource); }
static inline HRESULT                           ID2D1DeviceContext3_CreateLookupTable3D                      (ID2D1DeviceContext3* this, D2D1_BUFFER_PRECISION precision, const UINT32* extents, const UINT8* data, UINT32 dataCount, const UINT32* strides, ID2D1LookupTable3D** lookupTable) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext3*, D2D1_BUFFER_PRECISION, const UINT32*, const UINT8*, UINT32, const UINT32*, ID2D1LookupTable3D**))this->v->tbl[99])(this, precision, extents, data, dataCount, strides, lookupTable); }
static inline HRESULT                           ID2D1DeviceContext3_CreateImageSourceFromDxgi                (ID2D1DeviceContext3* this, IDXGISurface** surfaces, UINT32 surfaceCount, DXGI_COLOR_SPACE_TYPE colorSpace, D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS options, ID2D1ImageSource** imageSource) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext3*, IDXGISurface**, UINT32, DXGI_COLOR_SPACE_TYPE, D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS, ID2D1ImageSource**))this->v->tbl[100])(this, surfaces, surfaceCount, colorSpace, options, imageSource); }
static inline HRESULT                           ID2D1DeviceContext3_GetGradientMeshWorldBounds               (ID2D1DeviceContext3* this, ID2D1GradientMesh* gradientMesh, D2D_RECT_F* pBounds) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext3*, ID2D1GradientMesh*, D2D_RECT_F*))this->v->tbl[101])(this, gradientMesh, pBounds); }
static inline void                              ID2D1DeviceContext3_DrawInk                                  (ID2D1DeviceContext3* this, ID2D1Ink* ink, ID2D1Brush* brush, ID2D1InkStyle* inkStyle) { ((void (WINAPI*)(ID2D1DeviceContext3*, ID2D1Ink*, ID2D1Brush*, ID2D1InkStyle*))this->v->tbl[102])(this, ink, brush, inkStyle); }
static inline void                              ID2D1DeviceContext3_DrawGradientMesh                         (ID2D1DeviceContext3* this, ID2D1GradientMesh* gradientMesh) { ((void (WINAPI*)(ID2D1DeviceContext3*, ID2D1GradientMesh*))this->v->tbl[103])(this, gradientMesh); }
static inline void                              ID2D1DeviceContext3_DrawGdiMetafile1                         (ID2D1DeviceContext3* this, ID2D1GdiMetafile* gdiMetafile, const D2D_RECT_F* destinationRectangle, const D2D_RECT_F* sourceRectangle) { ((void (WINAPI*)(ID2D1DeviceContext3*, ID2D1GdiMetafile*, const D2D_RECT_F*, const D2D_RECT_F*))this->v->tbl[104])(this, gdiMetafile, destinationRectangle, sourceRectangle); }
static inline HRESULT                           ID2D1DeviceContext3_CreateTransformedImageSource             (ID2D1DeviceContext3* this, ID2D1ImageSource* imageSource, const D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES* properties, ID2D1TransformedImageSource** transformedImageSource) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext3*, ID2D1ImageSource*, const D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES*, ID2D1TransformedImageSource**))this->v->tbl[105])(this, imageSource, properties, transformedImageSource); }
static inline HRESULT                           ID2D1DeviceContext3_CreateSpriteBatch                        (ID2D1DeviceContext3* this, ID2D1SpriteBatch** spriteBatch) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext3*, ID2D1SpriteBatch**))this->v->tbl[106])(this, spriteBatch); }
static inline void                              ID2D1DeviceContext3_DrawSpriteBatch                          (ID2D1DeviceContext3* this, ID2D1SpriteBatch* spriteBatch, UINT32 startIndex, UINT32 spriteCount, ID2D1Bitmap* bitmap, D2D1_BITMAP_INTERPOLATION_MODE interpolationMode, D2D1_SPRITE_OPTIONS spriteOptions) { ((void (WINAPI*)(ID2D1DeviceContext3*, ID2D1SpriteBatch*, UINT32, UINT32, ID2D1Bitmap*, D2D1_BITMAP_INTERPOLATION_MODE, D2D1_SPRITE_OPTIONS))this->v->tbl[107])(this, spriteBatch, startIndex, spriteCount, bitmap, interpolationMode, spriteOptions); }

static inline HRESULT                           ID2D1DeviceContext4_QueryInterface                           (ID2D1DeviceContext4* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1DeviceContext4_AddRef                                   (ID2D1DeviceContext4* this) { return ((UINT32 (WINAPI*)(ID2D1DeviceContext4*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1DeviceContext4_Release                                  (ID2D1DeviceContext4* this) { return ((UINT32 (WINAPI*)(ID2D1DeviceContext4*))this->v->tbl[2])(this); }
static inline void                              ID2D1DeviceContext4_GetFactory                               (ID2D1DeviceContext4* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1DeviceContext4*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline HRESULT                           ID2D1DeviceContext4_CreateBitmap                             (ID2D1DeviceContext4* this, D2D_SIZE_U size, const void* srcData, UINT32 pitch, const D2D1_BITMAP_PROPERTIES* bitmapProperties, ID2D1Bitmap** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, D2D_SIZE_U, const void*, UINT32, const D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap**))this->v->tbl[4])(this, size, srcData, pitch, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext4_CreateBitmapFromWicBitmap                (ID2D1DeviceContext4* this, IWICBitmapSource* wicBitmapSource, const D2D1_BITMAP_PROPERTIES* bitmapProperties, ID2D1Bitmap** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, IWICBitmapSource*, const D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap**))this->v->tbl[5])(this, wicBitmapSource, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext4_CreateSharedBitmap                       (ID2D1DeviceContext4* this, const GUID* riid, void* data, const D2D1_BITMAP_PROPERTIES* bitmapProperties, ID2D1Bitmap** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, const GUID*, void*, const D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap**))this->v->tbl[6])(this, riid, data, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext4_CreateBitmapBrush                        (ID2D1DeviceContext4* this, ID2D1Bitmap* bitmap, const D2D1_BITMAP_BRUSH_PROPERTIES* bitmapBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1BitmapBrush** bitmapBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, ID2D1Bitmap*, const D2D1_BITMAP_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1BitmapBrush**))this->v->tbl[7])(this, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush); }
static inline HRESULT                           ID2D1DeviceContext4_CreateSolidColorBrush                    (ID2D1DeviceContext4* this, const D2D1_COLOR_F* color, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1SolidColorBrush** solidColorBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, const D2D1_COLOR_F*, const D2D1_BRUSH_PROPERTIES*, ID2D1SolidColorBrush**))this->v->tbl[8])(this, color, brushProperties, solidColorBrush); }
static inline HRESULT                           ID2D1DeviceContext4_CreateGradientStopCollection             (ID2D1DeviceContext4* this, const D2D1_GRADIENT_STOP* gradientStops, UINT32 gradientStopsCount, D2D1_GAMMA colorInterpolationGamma, D2D1_EXTEND_MODE extendMode, ID2D1GradientStopCollection** gradientStopCollection) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, const D2D1_GRADIENT_STOP*, UINT32, D2D1_GAMMA, D2D1_EXTEND_MODE, ID2D1GradientStopCollection**))this->v->tbl[9])(this, gradientStops, gradientStopsCount, colorInterpolationGamma, extendMode, gradientStopCollection); }
static inline HRESULT                           ID2D1DeviceContext4_CreateLinearGradientBrush                (ID2D1DeviceContext4* this, const D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES* linearGradientBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1GradientStopCollection* gradientStopCollection, ID2D1LinearGradientBrush** linearGradientBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, const D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection*, ID2D1LinearGradientBrush**))this->v->tbl[10])(this, linearGradientBrushProperties, brushProperties, gradientStopCollection, linearGradientBrush); }
static inline HRESULT                           ID2D1DeviceContext4_CreateRadialGradientBrush                (ID2D1DeviceContext4* this, const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES* radialGradientBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1GradientStopCollection* gradientStopCollection, ID2D1RadialGradientBrush** radialGradientBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection*, ID2D1RadialGradientBrush**))this->v->tbl[11])(this, radialGradientBrushProperties, brushProperties, gradientStopCollection, radialGradientBrush); }
static inline HRESULT                           ID2D1DeviceContext4_CreateCompatibleRenderTarget             (ID2D1DeviceContext4* this, const D2D_SIZE_F* desiredSize, const D2D_SIZE_U* desiredPixelSize, const D2D1_PIXEL_FORMAT* desiredFormat, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS options, ID2D1BitmapRenderTarget** bitmapRenderTarget) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, const D2D_SIZE_F*, const D2D_SIZE_U*, const D2D1_PIXEL_FORMAT*, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, ID2D1BitmapRenderTarget**))this->v->tbl[12])(this, desiredSize, desiredPixelSize, desiredFormat, options, bitmapRenderTarget); }
static inline HRESULT                           ID2D1DeviceContext4_CreateLayer                              (ID2D1DeviceContext4* this, const D2D_SIZE_F* size, ID2D1Layer** layer) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, const D2D_SIZE_F*, ID2D1Layer**))this->v->tbl[13])(this, size, layer); }
static inline HRESULT                           ID2D1DeviceContext4_CreateMesh                               (ID2D1DeviceContext4* this, ID2D1Mesh** mesh) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, ID2D1Mesh**))this->v->tbl[14])(this, mesh); }
static inline void                              ID2D1DeviceContext4_DrawLine                                 (ID2D1DeviceContext4* this, D2D_POINT_2F point0, D2D_POINT_2F point1, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DeviceContext4*, D2D_POINT_2F, D2D_POINT_2F, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[15])(this, point0, point1, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DeviceContext4_DrawRectangle                            (ID2D1DeviceContext4* this, const D2D_RECT_F* rect, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DeviceContext4*, const D2D_RECT_F*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[16])(this, rect, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DeviceContext4_FillRectangle                            (ID2D1DeviceContext4* this, const D2D_RECT_F* rect, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1DeviceContext4*, const D2D_RECT_F*, ID2D1Brush*))this->v->tbl[17])(this, rect, brush); }
static inline void                              ID2D1DeviceContext4_DrawRoundedRectangle                     (ID2D1DeviceContext4* this, const D2D1_ROUNDED_RECT* roundedRect, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DeviceContext4*, const D2D1_ROUNDED_RECT*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[18])(this, roundedRect, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DeviceContext4_FillRoundedRectangle                     (ID2D1DeviceContext4* this, const D2D1_ROUNDED_RECT* roundedRect, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1DeviceContext4*, const D2D1_ROUNDED_RECT*, ID2D1Brush*))this->v->tbl[19])(this, roundedRect, brush); }
static inline void                              ID2D1DeviceContext4_DrawEllipse                              (ID2D1DeviceContext4* this, const D2D1_ELLIPSE* ellipse, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DeviceContext4*, const D2D1_ELLIPSE*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[20])(this, ellipse, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DeviceContext4_FillEllipse                              (ID2D1DeviceContext4* this, const D2D1_ELLIPSE* ellipse, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1DeviceContext4*, const D2D1_ELLIPSE*, ID2D1Brush*))this->v->tbl[21])(this, ellipse, brush); }
static inline void                              ID2D1DeviceContext4_DrawGeometry                             (ID2D1DeviceContext4* this, ID2D1Geometry* geometry, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DeviceContext4*, ID2D1Geometry*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[22])(this, geometry, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DeviceContext4_FillGeometry                             (ID2D1DeviceContext4* this, ID2D1Geometry* geometry, ID2D1Brush* brush, ID2D1Brush* opacityBrush) { ((void (WINAPI*)(ID2D1DeviceContext4*, ID2D1Geometry*, ID2D1Brush*, ID2D1Brush*))this->v->tbl[23])(this, geometry, brush, opacityBrush); }
static inline void                              ID2D1DeviceContext4_FillMesh                                 (ID2D1DeviceContext4* this, ID2D1Mesh* mesh, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1DeviceContext4*, ID2D1Mesh*, ID2D1Brush*))this->v->tbl[24])(this, mesh, brush); }
static inline void                              ID2D1DeviceContext4_FillOpacityMask                          (ID2D1DeviceContext4* this, ID2D1Bitmap* opacityMask, ID2D1Brush* brush, D2D1_OPACITY_MASK_CONTENT content, const D2D_RECT_F* destinationRectangle, const D2D_RECT_F* sourceRectangle) { ((void (WINAPI*)(ID2D1DeviceContext4*, ID2D1Bitmap*, ID2D1Brush*, D2D1_OPACITY_MASK_CONTENT, const D2D_RECT_F*, const D2D_RECT_F*))this->v->tbl[25])(this, opacityMask, brush, content, destinationRectangle, sourceRectangle); }
static inline void                              ID2D1DeviceContext4_DrawBitmap                               (ID2D1DeviceContext4* this, ID2D1Bitmap* bitmap, const D2D_RECT_F* destinationRectangle, FLOAT opacity, D2D1_BITMAP_INTERPOLATION_MODE interpolationMode, const D2D_RECT_F* sourceRectangle) { ((void (WINAPI*)(ID2D1DeviceContext4*, ID2D1Bitmap*, const D2D_RECT_F*, FLOAT, D2D1_BITMAP_INTERPOLATION_MODE, const D2D_RECT_F*))this->v->tbl[26])(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle); }
static inline void                              ID2D1DeviceContext4_DrawText                                 (ID2D1DeviceContext4* this, const WCHAR* string, UINT32 stringLength, IDWriteTextFormat* textFormat, const D2D_RECT_F* layoutRect, ID2D1Brush* defaultFillBrush, D2D1_DRAW_TEXT_OPTIONS options, DWRITE_MEASURING_MODE measuringMode) { ((void (WINAPI*)(ID2D1DeviceContext4*, const WCHAR*, UINT32, IDWriteTextFormat*, const D2D_RECT_F*, ID2D1Brush*, D2D1_DRAW_TEXT_OPTIONS, DWRITE_MEASURING_MODE))this->v->tbl[27])(this, string, stringLength, textFormat, layoutRect, defaultFillBrush, options, measuringMode); }
static inline void                              ID2D1DeviceContext4_DrawTextLayout                           (ID2D1DeviceContext4* this, D2D_POINT_2F origin, IDWriteTextLayout* textLayout, ID2D1Brush* defaultFillBrush, D2D1_DRAW_TEXT_OPTIONS options) { ((void (WINAPI*)(ID2D1DeviceContext4*, D2D_POINT_2F, IDWriteTextLayout*, ID2D1Brush*, D2D1_DRAW_TEXT_OPTIONS))this->v->tbl[28])(this, origin, textLayout, defaultFillBrush, options); }
static inline void                              ID2D1DeviceContext4_DrawGlyphRun                             (ID2D1DeviceContext4* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, ID2D1Brush* foregroundBrush, DWRITE_MEASURING_MODE measuringMode) { ((void (WINAPI*)(ID2D1DeviceContext4*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, ID2D1Brush*, DWRITE_MEASURING_MODE))this->v->tbl[29])(this, baselineOrigin, glyphRun, foregroundBrush, measuringMode); }
static inline void                              ID2D1DeviceContext4_SetTransform                             (ID2D1DeviceContext4* this, const D2D_MATRIX_3X2_F* transform) { ((void (WINAPI*)(ID2D1DeviceContext4*, const D2D_MATRIX_3X2_F*))this->v->tbl[30])(this, transform); }
static inline void                              ID2D1DeviceContext4_GetTransform                             (ID2D1DeviceContext4* this, D2D_MATRIX_3X2_F* transform) { ((void (WINAPI*)(ID2D1DeviceContext4*, D2D_MATRIX_3X2_F*))this->v->tbl[31])(this, transform); }
static inline void                              ID2D1DeviceContext4_SetAntialiasMode                         (ID2D1DeviceContext4* this, D2D1_ANTIALIAS_MODE antialiasMode) { ((void (WINAPI*)(ID2D1DeviceContext4*, D2D1_ANTIALIAS_MODE))this->v->tbl[32])(this, antialiasMode); }
static inline D2D1_ANTIALIAS_MODE               ID2D1DeviceContext4_GetAntialiasMode                         (ID2D1DeviceContext4* this) { return ((D2D1_ANTIALIAS_MODE (WINAPI*)(ID2D1DeviceContext4*))this->v->tbl[33])(this); }
static inline void                              ID2D1DeviceContext4_SetTextAntialiasMode                     (ID2D1DeviceContext4* this, D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode) { ((void (WINAPI*)(ID2D1DeviceContext4*, D2D1_TEXT_ANTIALIAS_MODE))this->v->tbl[34])(this, textAntialiasMode); }
static inline D2D1_TEXT_ANTIALIAS_MODE          ID2D1DeviceContext4_GetTextAntialiasMode                     (ID2D1DeviceContext4* this) { return ((D2D1_TEXT_ANTIALIAS_MODE (WINAPI*)(ID2D1DeviceContext4*))this->v->tbl[35])(this); }
static inline void                              ID2D1DeviceContext4_SetTextRenderingParams                   (ID2D1DeviceContext4* this, IDWriteRenderingParams* textRenderingParams) { ((void (WINAPI*)(ID2D1DeviceContext4*, IDWriteRenderingParams*))this->v->tbl[36])(this, textRenderingParams); }
static inline void                              ID2D1DeviceContext4_GetTextRenderingParams                   (ID2D1DeviceContext4* this, IDWriteRenderingParams** textRenderingParams) { ((void (WINAPI*)(ID2D1DeviceContext4*, IDWriteRenderingParams**))this->v->tbl[37])(this, textRenderingParams); }
static inline void                              ID2D1DeviceContext4_SetTags                                  (ID2D1DeviceContext4* this, UINT64 tag1, UINT64 tag2) { ((void (WINAPI*)(ID2D1DeviceContext4*, UINT64, UINT64))this->v->tbl[38])(this, tag1, tag2); }
static inline void                              ID2D1DeviceContext4_GetTags                                  (ID2D1DeviceContext4* this, UINT64* tag1, UINT64* tag2) { ((void (WINAPI*)(ID2D1DeviceContext4*, UINT64*, UINT64*))this->v->tbl[39])(this, tag1, tag2); }
static inline void                              ID2D1DeviceContext4_PushLayer                                (ID2D1DeviceContext4* this, const D2D1_LAYER_PARAMETERS* layerParameters, ID2D1Layer* layer) { ((void (WINAPI*)(ID2D1DeviceContext4*, const D2D1_LAYER_PARAMETERS*, ID2D1Layer*))this->v->tbl[40])(this, layerParameters, layer); }
static inline void                              ID2D1DeviceContext4_PopLayer                                 (ID2D1DeviceContext4* this) { ((void (WINAPI*)(ID2D1DeviceContext4*))this->v->tbl[41])(this); }
static inline HRESULT                           ID2D1DeviceContext4_Flush                                    (ID2D1DeviceContext4* this, UINT64* tag1, UINT64* tag2) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, UINT64*, UINT64*))this->v->tbl[42])(this, tag1, tag2); }
static inline void                              ID2D1DeviceContext4_SaveDrawingState                         (ID2D1DeviceContext4* this, ID2D1DrawingStateBlock* drawingStateBlock) { ((void (WINAPI*)(ID2D1DeviceContext4*, ID2D1DrawingStateBlock*))this->v->tbl[43])(this, drawingStateBlock); }
static inline void                              ID2D1DeviceContext4_RestoreDrawingState                      (ID2D1DeviceContext4* this, ID2D1DrawingStateBlock* drawingStateBlock) { ((void (WINAPI*)(ID2D1DeviceContext4*, ID2D1DrawingStateBlock*))this->v->tbl[44])(this, drawingStateBlock); }
static inline void                              ID2D1DeviceContext4_PushAxisAlignedClip                      (ID2D1DeviceContext4* this, const D2D_RECT_F* clipRect, D2D1_ANTIALIAS_MODE antialiasMode) { ((void (WINAPI*)(ID2D1DeviceContext4*, const D2D_RECT_F*, D2D1_ANTIALIAS_MODE))this->v->tbl[45])(this, clipRect, antialiasMode); }
static inline void                              ID2D1DeviceContext4_PopAxisAlignedClip                       (ID2D1DeviceContext4* this) { ((void (WINAPI*)(ID2D1DeviceContext4*))this->v->tbl[46])(this); }
static inline void                              ID2D1DeviceContext4_Clear                                    (ID2D1DeviceContext4* this, const D2D1_COLOR_F* clearColor) { ((void (WINAPI*)(ID2D1DeviceContext4*, const D2D1_COLOR_F*))this->v->tbl[47])(this, clearColor); }
static inline void                              ID2D1DeviceContext4_BeginDraw                                (ID2D1DeviceContext4* this) { ((void (WINAPI*)(ID2D1DeviceContext4*))this->v->tbl[48])(this); }
static inline HRESULT                           ID2D1DeviceContext4_EndDraw                                  (ID2D1DeviceContext4* this, UINT64* tag1, UINT64* tag2) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, UINT64*, UINT64*))this->v->tbl[49])(this, tag1, tag2); }
static inline D2D1_PIXEL_FORMAT                 ID2D1DeviceContext4_GetPixelFormat                           (ID2D1DeviceContext4* this) { D2D1_PIXEL_FORMAT _return; ((void (WINAPI*)(ID2D1DeviceContext4*, D2D1_PIXEL_FORMAT*))this->v->tbl[50])(this, &_return); return _return; }
static inline void                              ID2D1DeviceContext4_SetDpi                                   (ID2D1DeviceContext4* this, FLOAT dpiX, FLOAT dpiY) { ((void (WINAPI*)(ID2D1DeviceContext4*, FLOAT, FLOAT))this->v->tbl[51])(this, dpiX, dpiY); }
static inline void                              ID2D1DeviceContext4_GetDpi                                   (ID2D1DeviceContext4* this, FLOAT* dpiX, FLOAT* dpiY) { ((void (WINAPI*)(ID2D1DeviceContext4*, FLOAT*, FLOAT*))this->v->tbl[52])(this, dpiX, dpiY); }
static inline D2D_SIZE_F                        ID2D1DeviceContext4_GetSize                                  (ID2D1DeviceContext4* this) { D2D_SIZE_F _return; ((void (WINAPI*)(ID2D1DeviceContext4*, D2D_SIZE_F*))this->v->tbl[53])(this, &_return); return _return; }
static inline D2D_SIZE_U                        ID2D1DeviceContext4_GetPixelSize                             (ID2D1DeviceContext4* this) { D2D_SIZE_U _return; ((void (WINAPI*)(ID2D1DeviceContext4*, D2D_SIZE_U*))this->v->tbl[54])(this, &_return); return _return; }
static inline UINT32                            ID2D1DeviceContext4_GetMaximumBitmapSize                     (ID2D1DeviceContext4* this) { return ((UINT32 (WINAPI*)(ID2D1DeviceContext4*))this->v->tbl[55])(this); }
static inline BOOL                              ID2D1DeviceContext4_IsSupported                              (ID2D1DeviceContext4* this, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties) { return ((BOOL (WINAPI*)(ID2D1DeviceContext4*, const D2D1_RENDER_TARGET_PROPERTIES*))this->v->tbl[56])(this, renderTargetProperties); }
static inline HRESULT                           ID2D1DeviceContext4_CreateBitmap1                            (ID2D1DeviceContext4* this, D2D_SIZE_U size, const void* sourceData, UINT32 pitch, const D2D1_BITMAP_PROPERTIES1* bitmapProperties, ID2D1Bitmap1** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, D2D_SIZE_U, const void*, UINT32, const D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1**))this->v->tbl[57])(this, size, sourceData, pitch, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext4_CreateBitmapFromWicBitmap1               (ID2D1DeviceContext4* this, IWICBitmapSource* wicBitmapSource, const D2D1_BITMAP_PROPERTIES1* bitmapProperties, ID2D1Bitmap1** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, IWICBitmapSource*, const D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1**))this->v->tbl[58])(this, wicBitmapSource, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext4_CreateColorContext                       (ID2D1DeviceContext4* this, D2D1_COLOR_SPACE space, const UINT8* profile, UINT32 profileSize, ID2D1ColorContext** colorContext) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, D2D1_COLOR_SPACE, const UINT8*, UINT32, ID2D1ColorContext**))this->v->tbl[59])(this, space, profile, profileSize, colorContext); }
static inline HRESULT                           ID2D1DeviceContext4_CreateColorContextFromFilename           (ID2D1DeviceContext4* this, const WCHAR* filename, ID2D1ColorContext** colorContext) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, const WCHAR*, ID2D1ColorContext**))this->v->tbl[60])(this, filename, colorContext); }
static inline HRESULT                           ID2D1DeviceContext4_CreateColorContextFromWicColorContext    (ID2D1DeviceContext4* this, IWICColorContext* wicColorContext, ID2D1ColorContext** colorContext) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, IWICColorContext*, ID2D1ColorContext**))this->v->tbl[61])(this, wicColorContext, colorContext); }
static inline HRESULT                           ID2D1DeviceContext4_CreateBitmapFromDxgiSurface              (ID2D1DeviceContext4* this, IDXGISurface* surface, const D2D1_BITMAP_PROPERTIES1* bitmapProperties, ID2D1Bitmap1** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, IDXGISurface*, const D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1**))this->v->tbl[62])(this, surface, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext4_CreateEffect                             (ID2D1DeviceContext4* this, const GUID* effectId, ID2D1Effect** effect) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, const GUID*, ID2D1Effect**))this->v->tbl[63])(this, effectId, effect); }
static inline HRESULT                           ID2D1DeviceContext4_CreateGradientStopCollection1            (ID2D1DeviceContext4* this, const D2D1_GRADIENT_STOP* straightAlphaGradientStops, UINT32 straightAlphaGradientStopsCount, D2D1_COLOR_SPACE preInterpolationSpace, D2D1_COLOR_SPACE postInterpolationSpace, D2D1_BUFFER_PRECISION bufferPrecision, D2D1_EXTEND_MODE extendMode, D2D1_COLOR_INTERPOLATION_MODE colorInterpolationMode, ID2D1GradientStopCollection1** gradientStopCollection1) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, const D2D1_GRADIENT_STOP*, UINT32, D2D1_COLOR_SPACE, D2D1_COLOR_SPACE, D2D1_BUFFER_PRECISION, D2D1_EXTEND_MODE, D2D1_COLOR_INTERPOLATION_MODE, ID2D1GradientStopCollection1**))this->v->tbl[64])(this, straightAlphaGradientStops, straightAlphaGradientStopsCount, preInterpolationSpace, postInterpolationSpace, bufferPrecision, extendMode, colorInterpolationMode, gradientStopCollection1); }
static inline HRESULT                           ID2D1DeviceContext4_CreateImageBrush                         (ID2D1DeviceContext4* this, ID2D1Image* image, const D2D1_IMAGE_BRUSH_PROPERTIES* imageBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1ImageBrush** imageBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, ID2D1Image*, const D2D1_IMAGE_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1ImageBrush**))this->v->tbl[65])(this, image, imageBrushProperties, brushProperties, imageBrush); }
static inline HRESULT                           ID2D1DeviceContext4_CreateBitmapBrush1                       (ID2D1DeviceContext4* this, ID2D1Bitmap* bitmap, const D2D1_BITMAP_BRUSH_PROPERTIES1* bitmapBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1BitmapBrush1** bitmapBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, ID2D1Bitmap*, const D2D1_BITMAP_BRUSH_PROPERTIES1*, const D2D1_BRUSH_PROPERTIES*, ID2D1BitmapBrush1**))this->v->tbl[66])(this, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush); }
static inline HRESULT                           ID2D1DeviceContext4_CreateCommandList                        (ID2D1DeviceContext4* this, ID2D1CommandList** commandList) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, ID2D1CommandList**))this->v->tbl[67])(this, commandList); }
static inline BOOL                              ID2D1DeviceContext4_IsDxgiFormatSupported                    (ID2D1DeviceContext4* this, DXGI_FORMAT format) { return ((BOOL (WINAPI*)(ID2D1DeviceContext4*, DXGI_FORMAT))this->v->tbl[68])(this, format); }
static inline BOOL                              ID2D1DeviceContext4_IsBufferPrecisionSupported               (ID2D1DeviceContext4* this, D2D1_BUFFER_PRECISION bufferPrecision) { return ((BOOL (WINAPI*)(ID2D1DeviceContext4*, D2D1_BUFFER_PRECISION))this->v->tbl[69])(this, bufferPrecision); }
static inline HRESULT                           ID2D1DeviceContext4_GetImageLocalBounds                      (ID2D1DeviceContext4* this, ID2D1Image* image, D2D_RECT_F* localBounds) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, ID2D1Image*, D2D_RECT_F*))this->v->tbl[70])(this, image, localBounds); }
static inline HRESULT                           ID2D1DeviceContext4_GetImageWorldBounds                      (ID2D1DeviceContext4* this, ID2D1Image* image, D2D_RECT_F* worldBounds) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, ID2D1Image*, D2D_RECT_F*))this->v->tbl[71])(this, image, worldBounds); }
static inline HRESULT                           ID2D1DeviceContext4_GetGlyphRunWorldBounds                   (ID2D1DeviceContext4* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, DWRITE_MEASURING_MODE measuringMode, D2D_RECT_F* bounds) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, DWRITE_MEASURING_MODE, D2D_RECT_F*))this->v->tbl[72])(this, baselineOrigin, glyphRun, measuringMode, bounds); }
static inline void                              ID2D1DeviceContext4_GetDevice                                (ID2D1DeviceContext4* this, ID2D1Device** device) { ((void (WINAPI*)(ID2D1DeviceContext4*, ID2D1Device**))this->v->tbl[73])(this, device); }
static inline void                              ID2D1DeviceContext4_SetTarget                                (ID2D1DeviceContext4* this, ID2D1Image* image) { ((void (WINAPI*)(ID2D1DeviceContext4*, ID2D1Image*))this->v->tbl[74])(this, image); }
static inline void                              ID2D1DeviceContext4_GetTarget                                (ID2D1DeviceContext4* this, ID2D1Image** image) { ((void (WINAPI*)(ID2D1DeviceContext4*, ID2D1Image**))this->v->tbl[75])(this, image); }
static inline void                              ID2D1DeviceContext4_SetRenderingControls                     (ID2D1DeviceContext4* this, const D2D1_RENDERING_CONTROLS* renderingControls) { ((void (WINAPI*)(ID2D1DeviceContext4*, const D2D1_RENDERING_CONTROLS*))this->v->tbl[76])(this, renderingControls); }
static inline void                              ID2D1DeviceContext4_GetRenderingControls                     (ID2D1DeviceContext4* this, D2D1_RENDERING_CONTROLS* renderingControls) { ((void (WINAPI*)(ID2D1DeviceContext4*, D2D1_RENDERING_CONTROLS*))this->v->tbl[77])(this, renderingControls); }
static inline void                              ID2D1DeviceContext4_SetPrimitiveBlend                        (ID2D1DeviceContext4* this, D2D1_PRIMITIVE_BLEND primitiveBlend) { ((void (WINAPI*)(ID2D1DeviceContext4*, D2D1_PRIMITIVE_BLEND))this->v->tbl[78])(this, primitiveBlend); }
static inline D2D1_PRIMITIVE_BLEND              ID2D1DeviceContext4_GetPrimitiveBlend                        (ID2D1DeviceContext4* this) { return ((D2D1_PRIMITIVE_BLEND (WINAPI*)(ID2D1DeviceContext4*))this->v->tbl[79])(this); }
static inline void                              ID2D1DeviceContext4_SetUnitMode                              (ID2D1DeviceContext4* this, D2D1_UNIT_MODE unitMode) { ((void (WINAPI*)(ID2D1DeviceContext4*, D2D1_UNIT_MODE))this->v->tbl[80])(this, unitMode); }
static inline D2D1_UNIT_MODE                    ID2D1DeviceContext4_GetUnitMode                              (ID2D1DeviceContext4* this) { return ((D2D1_UNIT_MODE (WINAPI*)(ID2D1DeviceContext4*))this->v->tbl[81])(this); }
static inline void                              ID2D1DeviceContext4_DrawGlyphRun1                            (ID2D1DeviceContext4* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, const DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription, ID2D1Brush* foregroundBrush, DWRITE_MEASURING_MODE measuringMode) { ((void (WINAPI*)(ID2D1DeviceContext4*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, const DWRITE_GLYPH_RUN_DESCRIPTION*, ID2D1Brush*, DWRITE_MEASURING_MODE))this->v->tbl[82])(this, baselineOrigin, glyphRun, glyphRunDescription, foregroundBrush, measuringMode); }
static inline void                              ID2D1DeviceContext4_DrawImage                                (ID2D1DeviceContext4* this, ID2D1Image* image, const D2D_POINT_2F* targetOffset, const D2D_RECT_F* imageRectangle, D2D1_INTERPOLATION_MODE interpolationMode, D2D1_COMPOSITE_MODE compositeMode) { ((void (WINAPI*)(ID2D1DeviceContext4*, ID2D1Image*, const D2D_POINT_2F*, const D2D_RECT_F*, D2D1_INTERPOLATION_MODE, D2D1_COMPOSITE_MODE))this->v->tbl[83])(this, image, targetOffset, imageRectangle, interpolationMode, compositeMode); }
static inline void                              ID2D1DeviceContext4_DrawGdiMetafile                          (ID2D1DeviceContext4* this, ID2D1GdiMetafile* gdiMetafile, const D2D_POINT_2F* targetOffset) { ((void (WINAPI*)(ID2D1DeviceContext4*, ID2D1GdiMetafile*, const D2D_POINT_2F*))this->v->tbl[84])(this, gdiMetafile, targetOffset); }
static inline void                              ID2D1DeviceContext4_DrawBitmap1                              (ID2D1DeviceContext4* this, ID2D1Bitmap* bitmap, const D2D_RECT_F* destinationRectangle, FLOAT opacity, D2D1_INTERPOLATION_MODE interpolationMode, const D2D_RECT_F* sourceRectangle, const D2D_MATRIX_4X4_F* perspectiveTransform) { ((void (WINAPI*)(ID2D1DeviceContext4*, ID2D1Bitmap*, const D2D_RECT_F*, FLOAT, D2D1_INTERPOLATION_MODE, const D2D_RECT_F*, const D2D_MATRIX_4X4_F*))this->v->tbl[85])(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle, perspectiveTransform); }
static inline void                              ID2D1DeviceContext4_PushLayer1                               (ID2D1DeviceContext4* this, const D2D1_LAYER_PARAMETERS1* layerParameters, ID2D1Layer* layer) { ((void (WINAPI*)(ID2D1DeviceContext4*, const D2D1_LAYER_PARAMETERS1*, ID2D1Layer*))this->v->tbl[86])(this, layerParameters, layer); }
static inline HRESULT                           ID2D1DeviceContext4_InvalidateEffectInputRectangle           (ID2D1DeviceContext4* this, ID2D1Effect* effect, UINT32 input, const D2D_RECT_F* inputRectangle) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, ID2D1Effect*, UINT32, const D2D_RECT_F*))this->v->tbl[87])(this, effect, input, inputRectangle); }
static inline HRESULT                           ID2D1DeviceContext4_GetEffectInvalidRectangleCount           (ID2D1DeviceContext4* this, ID2D1Effect* effect, UINT32* rectangleCount) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, ID2D1Effect*, UINT32*))this->v->tbl[88])(this, effect, rectangleCount); }
static inline HRESULT                           ID2D1DeviceContext4_GetEffectInvalidRectangles               (ID2D1DeviceContext4* this, ID2D1Effect* effect, D2D_RECT_F* rectangles, UINT32 rectanglesCount) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, ID2D1Effect*, D2D_RECT_F*, UINT32))this->v->tbl[89])(this, effect, rectangles, rectanglesCount); }
static inline HRESULT                           ID2D1DeviceContext4_GetEffectRequiredInputRectangles         (ID2D1DeviceContext4* this, ID2D1Effect* renderEffect, const D2D_RECT_F* renderImageRectangle, const D2D1_EFFECT_INPUT_DESCRIPTION* inputDescriptions, D2D_RECT_F* requiredInputRects, UINT32 inputCount) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, ID2D1Effect*, const D2D_RECT_F*, const D2D1_EFFECT_INPUT_DESCRIPTION*, D2D_RECT_F*, UINT32))this->v->tbl[90])(this, renderEffect, renderImageRectangle, inputDescriptions, requiredInputRects, inputCount); }
static inline void                              ID2D1DeviceContext4_FillOpacityMask1                         (ID2D1DeviceContext4* this, ID2D1Bitmap* opacityMask, ID2D1Brush* brush, const D2D_RECT_F* destinationRectangle, const D2D_RECT_F* sourceRectangle) { ((void (WINAPI*)(ID2D1DeviceContext4*, ID2D1Bitmap*, ID2D1Brush*, const D2D_RECT_F*, const D2D_RECT_F*))this->v->tbl[91])(this, opacityMask, brush, destinationRectangle, sourceRectangle); }
static inline HRESULT                           ID2D1DeviceContext4_CreateFilledGeometryRealization          (ID2D1DeviceContext4* this, ID2D1Geometry* geometry, FLOAT flatteningTolerance, ID2D1GeometryRealization** geometryRealization) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, ID2D1Geometry*, FLOAT, ID2D1GeometryRealization**))this->v->tbl[92])(this, geometry, flatteningTolerance, geometryRealization); }
static inline HRESULT                           ID2D1DeviceContext4_CreateStrokedGeometryRealization         (ID2D1DeviceContext4* this, ID2D1Geometry* geometry, FLOAT flatteningTolerance, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle, ID2D1GeometryRealization** geometryRealization) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, ID2D1Geometry*, FLOAT, FLOAT, ID2D1StrokeStyle*, ID2D1GeometryRealization**))this->v->tbl[93])(this, geometry, flatteningTolerance, strokeWidth, strokeStyle, geometryRealization); }
static inline void                              ID2D1DeviceContext4_DrawGeometryRealization                  (ID2D1DeviceContext4* this, ID2D1GeometryRealization* geometryRealization, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1DeviceContext4*, ID2D1GeometryRealization*, ID2D1Brush*))this->v->tbl[94])(this, geometryRealization, brush); }
static inline HRESULT                           ID2D1DeviceContext4_CreateInk                                (ID2D1DeviceContext4* this, const D2D1_INK_POINT* startPoint, ID2D1Ink** ink) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, const D2D1_INK_POINT*, ID2D1Ink**))this->v->tbl[95])(this, startPoint, ink); }
static inline HRESULT                           ID2D1DeviceContext4_CreateInkStyle                           (ID2D1DeviceContext4* this, const D2D1_INK_STYLE_PROPERTIES* inkStyleProperties, ID2D1InkStyle** inkStyle) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, const D2D1_INK_STYLE_PROPERTIES*, ID2D1InkStyle**))this->v->tbl[96])(this, inkStyleProperties, inkStyle); }
static inline HRESULT                           ID2D1DeviceContext4_CreateGradientMesh                       (ID2D1DeviceContext4* this, const D2D1_GRADIENT_MESH_PATCH* patches, UINT32 patchesCount, ID2D1GradientMesh** gradientMesh) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, const D2D1_GRADIENT_MESH_PATCH*, UINT32, ID2D1GradientMesh**))this->v->tbl[97])(this, patches, patchesCount, gradientMesh); }
static inline HRESULT                           ID2D1DeviceContext4_CreateImageSourceFromWic                 (ID2D1DeviceContext4* this, IWICBitmapSource* wicBitmapSource, D2D1_IMAGE_SOURCE_LOADING_OPTIONS loadingOptions, D2D1_ALPHA_MODE alphaMode, ID2D1ImageSourceFromWic** imageSource) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, IWICBitmapSource*, D2D1_IMAGE_SOURCE_LOADING_OPTIONS, D2D1_ALPHA_MODE, ID2D1ImageSourceFromWic**))this->v->tbl[98])(this, wicBitmapSource, loadingOptions, alphaMode, imageSource); }
static inline HRESULT                           ID2D1DeviceContext4_CreateLookupTable3D                      (ID2D1DeviceContext4* this, D2D1_BUFFER_PRECISION precision, const UINT32* extents, const UINT8* data, UINT32 dataCount, const UINT32* strides, ID2D1LookupTable3D** lookupTable) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, D2D1_BUFFER_PRECISION, const UINT32*, const UINT8*, UINT32, const UINT32*, ID2D1LookupTable3D**))this->v->tbl[99])(this, precision, extents, data, dataCount, strides, lookupTable); }
static inline HRESULT                           ID2D1DeviceContext4_CreateImageSourceFromDxgi                (ID2D1DeviceContext4* this, IDXGISurface** surfaces, UINT32 surfaceCount, DXGI_COLOR_SPACE_TYPE colorSpace, D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS options, ID2D1ImageSource** imageSource) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, IDXGISurface**, UINT32, DXGI_COLOR_SPACE_TYPE, D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS, ID2D1ImageSource**))this->v->tbl[100])(this, surfaces, surfaceCount, colorSpace, options, imageSource); }
static inline HRESULT                           ID2D1DeviceContext4_GetGradientMeshWorldBounds               (ID2D1DeviceContext4* this, ID2D1GradientMesh* gradientMesh, D2D_RECT_F* pBounds) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, ID2D1GradientMesh*, D2D_RECT_F*))this->v->tbl[101])(this, gradientMesh, pBounds); }
static inline void                              ID2D1DeviceContext4_DrawInk                                  (ID2D1DeviceContext4* this, ID2D1Ink* ink, ID2D1Brush* brush, ID2D1InkStyle* inkStyle) { ((void (WINAPI*)(ID2D1DeviceContext4*, ID2D1Ink*, ID2D1Brush*, ID2D1InkStyle*))this->v->tbl[102])(this, ink, brush, inkStyle); }
static inline void                              ID2D1DeviceContext4_DrawGradientMesh                         (ID2D1DeviceContext4* this, ID2D1GradientMesh* gradientMesh) { ((void (WINAPI*)(ID2D1DeviceContext4*, ID2D1GradientMesh*))this->v->tbl[103])(this, gradientMesh); }
static inline void                              ID2D1DeviceContext4_DrawGdiMetafile1                         (ID2D1DeviceContext4* this, ID2D1GdiMetafile* gdiMetafile, const D2D_RECT_F* destinationRectangle, const D2D_RECT_F* sourceRectangle) { ((void (WINAPI*)(ID2D1DeviceContext4*, ID2D1GdiMetafile*, const D2D_RECT_F*, const D2D_RECT_F*))this->v->tbl[104])(this, gdiMetafile, destinationRectangle, sourceRectangle); }
static inline HRESULT                           ID2D1DeviceContext4_CreateTransformedImageSource             (ID2D1DeviceContext4* this, ID2D1ImageSource* imageSource, const D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES* properties, ID2D1TransformedImageSource** transformedImageSource) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, ID2D1ImageSource*, const D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES*, ID2D1TransformedImageSource**))this->v->tbl[105])(this, imageSource, properties, transformedImageSource); }
static inline HRESULT                           ID2D1DeviceContext4_CreateSpriteBatch                        (ID2D1DeviceContext4* this, ID2D1SpriteBatch** spriteBatch) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, ID2D1SpriteBatch**))this->v->tbl[106])(this, spriteBatch); }
static inline void                              ID2D1DeviceContext4_DrawSpriteBatch                          (ID2D1DeviceContext4* this, ID2D1SpriteBatch* spriteBatch, UINT32 startIndex, UINT32 spriteCount, ID2D1Bitmap* bitmap, D2D1_BITMAP_INTERPOLATION_MODE interpolationMode, D2D1_SPRITE_OPTIONS spriteOptions) { ((void (WINAPI*)(ID2D1DeviceContext4*, ID2D1SpriteBatch*, UINT32, UINT32, ID2D1Bitmap*, D2D1_BITMAP_INTERPOLATION_MODE, D2D1_SPRITE_OPTIONS))this->v->tbl[107])(this, spriteBatch, startIndex, spriteCount, bitmap, interpolationMode, spriteOptions); }
static inline HRESULT                           ID2D1DeviceContext4_CreateSvgGlyphStyle                      (ID2D1DeviceContext4* this, ID2D1SvgGlyphStyle** svgGlyphStyle) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, ID2D1SvgGlyphStyle**))this->v->tbl[108])(this, svgGlyphStyle); }
static inline void                              ID2D1DeviceContext4_DrawText1                                (ID2D1DeviceContext4* this, const WCHAR* string, UINT32 stringLength, IDWriteTextFormat* textFormat, const D2D_RECT_F* layoutRect, ID2D1Brush* defaultFillBrush, ID2D1SvgGlyphStyle* svgGlyphStyle, UINT32 colorPaletteIndex, D2D1_DRAW_TEXT_OPTIONS options, DWRITE_MEASURING_MODE measuringMode) { ((void (WINAPI*)(ID2D1DeviceContext4*, const WCHAR*, UINT32, IDWriteTextFormat*, const D2D_RECT_F*, ID2D1Brush*, ID2D1SvgGlyphStyle*, UINT32, D2D1_DRAW_TEXT_OPTIONS, DWRITE_MEASURING_MODE))this->v->tbl[109])(this, string, stringLength, textFormat, layoutRect, defaultFillBrush, svgGlyphStyle, colorPaletteIndex, options, measuringMode); }
static inline void                              ID2D1DeviceContext4_DrawTextLayout1                          (ID2D1DeviceContext4* this, D2D_POINT_2F origin, IDWriteTextLayout* textLayout, ID2D1Brush* defaultFillBrush, ID2D1SvgGlyphStyle* svgGlyphStyle, UINT32 colorPaletteIndex, D2D1_DRAW_TEXT_OPTIONS options) { ((void (WINAPI*)(ID2D1DeviceContext4*, D2D_POINT_2F, IDWriteTextLayout*, ID2D1Brush*, ID2D1SvgGlyphStyle*, UINT32, D2D1_DRAW_TEXT_OPTIONS))this->v->tbl[110])(this, origin, textLayout, defaultFillBrush, svgGlyphStyle, colorPaletteIndex, options); }
static inline void                              ID2D1DeviceContext4_DrawColorBitmapGlyphRun                  (ID2D1DeviceContext4* this, enum DWRITE_GLYPH_IMAGE_FORMATS glyphImageFormat, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, DWRITE_MEASURING_MODE measuringMode, D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION bitmapSnapOption) { ((void (WINAPI*)(ID2D1DeviceContext4*, enum DWRITE_GLYPH_IMAGE_FORMATS, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, DWRITE_MEASURING_MODE, D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION))this->v->tbl[111])(this, glyphImageFormat, baselineOrigin, glyphRun, measuringMode, bitmapSnapOption); }
static inline void                              ID2D1DeviceContext4_DrawSvgGlyphRun                          (ID2D1DeviceContext4* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, ID2D1Brush* defaultFillBrush, ID2D1SvgGlyphStyle* svgGlyphStyle, UINT32 colorPaletteIndex, DWRITE_MEASURING_MODE measuringMode) { ((void (WINAPI*)(ID2D1DeviceContext4*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, ID2D1Brush*, ID2D1SvgGlyphStyle*, UINT32, DWRITE_MEASURING_MODE))this->v->tbl[112])(this, baselineOrigin, glyphRun, defaultFillBrush, svgGlyphStyle, colorPaletteIndex, measuringMode); }
static inline HRESULT                           ID2D1DeviceContext4_GetColorBitmapGlyphImage                 (ID2D1DeviceContext4* this, enum DWRITE_GLYPH_IMAGE_FORMATS glyphImageFormat, D2D_POINT_2F glyphOrigin, IDWriteFontFace* fontFace, FLOAT fontEmSize, UINT16 glyphIndex, BOOL isSideways, const D2D_MATRIX_3X2_F* worldTransform, FLOAT dpiX, FLOAT dpiY, D2D_MATRIX_3X2_F* glyphTransform, ID2D1Image** glyphImage) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, enum DWRITE_GLYPH_IMAGE_FORMATS, D2D_POINT_2F, IDWriteFontFace*, FLOAT, UINT16, BOOL, const D2D_MATRIX_3X2_F*, FLOAT, FLOAT, D2D_MATRIX_3X2_F*, ID2D1Image**))this->v->tbl[113])(this, glyphImageFormat, glyphOrigin, fontFace, fontEmSize, glyphIndex, isSideways, worldTransform, dpiX, dpiY, glyphTransform, glyphImage); }
static inline HRESULT                           ID2D1DeviceContext4_GetSvgGlyphImage                         (ID2D1DeviceContext4* this, D2D_POINT_2F glyphOrigin, IDWriteFontFace* fontFace, FLOAT fontEmSize, UINT16 glyphIndex, BOOL isSideways, const D2D_MATRIX_3X2_F* worldTransform, ID2D1Brush* defaultFillBrush, ID2D1SvgGlyphStyle* svgGlyphStyle, UINT32 colorPaletteIndex, D2D_MATRIX_3X2_F* glyphTransform, ID2D1CommandList** glyphImage) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext4*, D2D_POINT_2F, IDWriteFontFace*, FLOAT, UINT16, BOOL, const D2D_MATRIX_3X2_F*, ID2D1Brush*, ID2D1SvgGlyphStyle*, UINT32, D2D_MATRIX_3X2_F*, ID2D1CommandList**))this->v->tbl[114])(this, glyphOrigin, fontFace, fontEmSize, glyphIndex, isSideways, worldTransform, defaultFillBrush, svgGlyphStyle, colorPaletteIndex, glyphTransform, glyphImage); }

static inline HRESULT                           ID2D1DeviceContext5_QueryInterface                           (ID2D1DeviceContext5* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1DeviceContext5_AddRef                                   (ID2D1DeviceContext5* this) { return ((UINT32 (WINAPI*)(ID2D1DeviceContext5*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1DeviceContext5_Release                                  (ID2D1DeviceContext5* this) { return ((UINT32 (WINAPI*)(ID2D1DeviceContext5*))this->v->tbl[2])(this); }
static inline void                              ID2D1DeviceContext5_GetFactory                               (ID2D1DeviceContext5* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1DeviceContext5*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline HRESULT                           ID2D1DeviceContext5_CreateBitmap                             (ID2D1DeviceContext5* this, D2D_SIZE_U size, const void* srcData, UINT32 pitch, const D2D1_BITMAP_PROPERTIES* bitmapProperties, ID2D1Bitmap** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, D2D_SIZE_U, const void*, UINT32, const D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap**))this->v->tbl[4])(this, size, srcData, pitch, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext5_CreateBitmapFromWicBitmap                (ID2D1DeviceContext5* this, IWICBitmapSource* wicBitmapSource, const D2D1_BITMAP_PROPERTIES* bitmapProperties, ID2D1Bitmap** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, IWICBitmapSource*, const D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap**))this->v->tbl[5])(this, wicBitmapSource, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext5_CreateSharedBitmap                       (ID2D1DeviceContext5* this, const GUID* riid, void* data, const D2D1_BITMAP_PROPERTIES* bitmapProperties, ID2D1Bitmap** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, const GUID*, void*, const D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap**))this->v->tbl[6])(this, riid, data, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext5_CreateBitmapBrush                        (ID2D1DeviceContext5* this, ID2D1Bitmap* bitmap, const D2D1_BITMAP_BRUSH_PROPERTIES* bitmapBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1BitmapBrush** bitmapBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, ID2D1Bitmap*, const D2D1_BITMAP_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1BitmapBrush**))this->v->tbl[7])(this, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush); }
static inline HRESULT                           ID2D1DeviceContext5_CreateSolidColorBrush                    (ID2D1DeviceContext5* this, const D2D1_COLOR_F* color, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1SolidColorBrush** solidColorBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, const D2D1_COLOR_F*, const D2D1_BRUSH_PROPERTIES*, ID2D1SolidColorBrush**))this->v->tbl[8])(this, color, brushProperties, solidColorBrush); }
static inline HRESULT                           ID2D1DeviceContext5_CreateGradientStopCollection             (ID2D1DeviceContext5* this, const D2D1_GRADIENT_STOP* gradientStops, UINT32 gradientStopsCount, D2D1_GAMMA colorInterpolationGamma, D2D1_EXTEND_MODE extendMode, ID2D1GradientStopCollection** gradientStopCollection) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, const D2D1_GRADIENT_STOP*, UINT32, D2D1_GAMMA, D2D1_EXTEND_MODE, ID2D1GradientStopCollection**))this->v->tbl[9])(this, gradientStops, gradientStopsCount, colorInterpolationGamma, extendMode, gradientStopCollection); }
static inline HRESULT                           ID2D1DeviceContext5_CreateLinearGradientBrush                (ID2D1DeviceContext5* this, const D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES* linearGradientBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1GradientStopCollection* gradientStopCollection, ID2D1LinearGradientBrush** linearGradientBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, const D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection*, ID2D1LinearGradientBrush**))this->v->tbl[10])(this, linearGradientBrushProperties, brushProperties, gradientStopCollection, linearGradientBrush); }
static inline HRESULT                           ID2D1DeviceContext5_CreateRadialGradientBrush                (ID2D1DeviceContext5* this, const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES* radialGradientBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1GradientStopCollection* gradientStopCollection, ID2D1RadialGradientBrush** radialGradientBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection*, ID2D1RadialGradientBrush**))this->v->tbl[11])(this, radialGradientBrushProperties, brushProperties, gradientStopCollection, radialGradientBrush); }
static inline HRESULT                           ID2D1DeviceContext5_CreateCompatibleRenderTarget             (ID2D1DeviceContext5* this, const D2D_SIZE_F* desiredSize, const D2D_SIZE_U* desiredPixelSize, const D2D1_PIXEL_FORMAT* desiredFormat, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS options, ID2D1BitmapRenderTarget** bitmapRenderTarget) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, const D2D_SIZE_F*, const D2D_SIZE_U*, const D2D1_PIXEL_FORMAT*, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, ID2D1BitmapRenderTarget**))this->v->tbl[12])(this, desiredSize, desiredPixelSize, desiredFormat, options, bitmapRenderTarget); }
static inline HRESULT                           ID2D1DeviceContext5_CreateLayer                              (ID2D1DeviceContext5* this, const D2D_SIZE_F* size, ID2D1Layer** layer) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, const D2D_SIZE_F*, ID2D1Layer**))this->v->tbl[13])(this, size, layer); }
static inline HRESULT                           ID2D1DeviceContext5_CreateMesh                               (ID2D1DeviceContext5* this, ID2D1Mesh** mesh) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, ID2D1Mesh**))this->v->tbl[14])(this, mesh); }
static inline void                              ID2D1DeviceContext5_DrawLine                                 (ID2D1DeviceContext5* this, D2D_POINT_2F point0, D2D_POINT_2F point1, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DeviceContext5*, D2D_POINT_2F, D2D_POINT_2F, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[15])(this, point0, point1, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DeviceContext5_DrawRectangle                            (ID2D1DeviceContext5* this, const D2D_RECT_F* rect, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DeviceContext5*, const D2D_RECT_F*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[16])(this, rect, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DeviceContext5_FillRectangle                            (ID2D1DeviceContext5* this, const D2D_RECT_F* rect, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1DeviceContext5*, const D2D_RECT_F*, ID2D1Brush*))this->v->tbl[17])(this, rect, brush); }
static inline void                              ID2D1DeviceContext5_DrawRoundedRectangle                     (ID2D1DeviceContext5* this, const D2D1_ROUNDED_RECT* roundedRect, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DeviceContext5*, const D2D1_ROUNDED_RECT*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[18])(this, roundedRect, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DeviceContext5_FillRoundedRectangle                     (ID2D1DeviceContext5* this, const D2D1_ROUNDED_RECT* roundedRect, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1DeviceContext5*, const D2D1_ROUNDED_RECT*, ID2D1Brush*))this->v->tbl[19])(this, roundedRect, brush); }
static inline void                              ID2D1DeviceContext5_DrawEllipse                              (ID2D1DeviceContext5* this, const D2D1_ELLIPSE* ellipse, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DeviceContext5*, const D2D1_ELLIPSE*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[20])(this, ellipse, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DeviceContext5_FillEllipse                              (ID2D1DeviceContext5* this, const D2D1_ELLIPSE* ellipse, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1DeviceContext5*, const D2D1_ELLIPSE*, ID2D1Brush*))this->v->tbl[21])(this, ellipse, brush); }
static inline void                              ID2D1DeviceContext5_DrawGeometry                             (ID2D1DeviceContext5* this, ID2D1Geometry* geometry, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DeviceContext5*, ID2D1Geometry*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[22])(this, geometry, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DeviceContext5_FillGeometry                             (ID2D1DeviceContext5* this, ID2D1Geometry* geometry, ID2D1Brush* brush, ID2D1Brush* opacityBrush) { ((void (WINAPI*)(ID2D1DeviceContext5*, ID2D1Geometry*, ID2D1Brush*, ID2D1Brush*))this->v->tbl[23])(this, geometry, brush, opacityBrush); }
static inline void                              ID2D1DeviceContext5_FillMesh                                 (ID2D1DeviceContext5* this, ID2D1Mesh* mesh, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1DeviceContext5*, ID2D1Mesh*, ID2D1Brush*))this->v->tbl[24])(this, mesh, brush); }
static inline void                              ID2D1DeviceContext5_FillOpacityMask                          (ID2D1DeviceContext5* this, ID2D1Bitmap* opacityMask, ID2D1Brush* brush, D2D1_OPACITY_MASK_CONTENT content, const D2D_RECT_F* destinationRectangle, const D2D_RECT_F* sourceRectangle) { ((void (WINAPI*)(ID2D1DeviceContext5*, ID2D1Bitmap*, ID2D1Brush*, D2D1_OPACITY_MASK_CONTENT, const D2D_RECT_F*, const D2D_RECT_F*))this->v->tbl[25])(this, opacityMask, brush, content, destinationRectangle, sourceRectangle); }
static inline void                              ID2D1DeviceContext5_DrawBitmap                               (ID2D1DeviceContext5* this, ID2D1Bitmap* bitmap, const D2D_RECT_F* destinationRectangle, FLOAT opacity, D2D1_BITMAP_INTERPOLATION_MODE interpolationMode, const D2D_RECT_F* sourceRectangle) { ((void (WINAPI*)(ID2D1DeviceContext5*, ID2D1Bitmap*, const D2D_RECT_F*, FLOAT, D2D1_BITMAP_INTERPOLATION_MODE, const D2D_RECT_F*))this->v->tbl[26])(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle); }
static inline void                              ID2D1DeviceContext5_DrawText                                 (ID2D1DeviceContext5* this, const WCHAR* string, UINT32 stringLength, IDWriteTextFormat* textFormat, const D2D_RECT_F* layoutRect, ID2D1Brush* defaultFillBrush, D2D1_DRAW_TEXT_OPTIONS options, DWRITE_MEASURING_MODE measuringMode) { ((void (WINAPI*)(ID2D1DeviceContext5*, const WCHAR*, UINT32, IDWriteTextFormat*, const D2D_RECT_F*, ID2D1Brush*, D2D1_DRAW_TEXT_OPTIONS, DWRITE_MEASURING_MODE))this->v->tbl[27])(this, string, stringLength, textFormat, layoutRect, defaultFillBrush, options, measuringMode); }
static inline void                              ID2D1DeviceContext5_DrawTextLayout                           (ID2D1DeviceContext5* this, D2D_POINT_2F origin, IDWriteTextLayout* textLayout, ID2D1Brush* defaultFillBrush, D2D1_DRAW_TEXT_OPTIONS options) { ((void (WINAPI*)(ID2D1DeviceContext5*, D2D_POINT_2F, IDWriteTextLayout*, ID2D1Brush*, D2D1_DRAW_TEXT_OPTIONS))this->v->tbl[28])(this, origin, textLayout, defaultFillBrush, options); }
static inline void                              ID2D1DeviceContext5_DrawGlyphRun                             (ID2D1DeviceContext5* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, ID2D1Brush* foregroundBrush, DWRITE_MEASURING_MODE measuringMode) { ((void (WINAPI*)(ID2D1DeviceContext5*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, ID2D1Brush*, DWRITE_MEASURING_MODE))this->v->tbl[29])(this, baselineOrigin, glyphRun, foregroundBrush, measuringMode); }
static inline void                              ID2D1DeviceContext5_SetTransform                             (ID2D1DeviceContext5* this, const D2D_MATRIX_3X2_F* transform) { ((void (WINAPI*)(ID2D1DeviceContext5*, const D2D_MATRIX_3X2_F*))this->v->tbl[30])(this, transform); }
static inline void                              ID2D1DeviceContext5_GetTransform                             (ID2D1DeviceContext5* this, D2D_MATRIX_3X2_F* transform) { ((void (WINAPI*)(ID2D1DeviceContext5*, D2D_MATRIX_3X2_F*))this->v->tbl[31])(this, transform); }
static inline void                              ID2D1DeviceContext5_SetAntialiasMode                         (ID2D1DeviceContext5* this, D2D1_ANTIALIAS_MODE antialiasMode) { ((void (WINAPI*)(ID2D1DeviceContext5*, D2D1_ANTIALIAS_MODE))this->v->tbl[32])(this, antialiasMode); }
static inline D2D1_ANTIALIAS_MODE               ID2D1DeviceContext5_GetAntialiasMode                         (ID2D1DeviceContext5* this) { return ((D2D1_ANTIALIAS_MODE (WINAPI*)(ID2D1DeviceContext5*))this->v->tbl[33])(this); }
static inline void                              ID2D1DeviceContext5_SetTextAntialiasMode                     (ID2D1DeviceContext5* this, D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode) { ((void (WINAPI*)(ID2D1DeviceContext5*, D2D1_TEXT_ANTIALIAS_MODE))this->v->tbl[34])(this, textAntialiasMode); }
static inline D2D1_TEXT_ANTIALIAS_MODE          ID2D1DeviceContext5_GetTextAntialiasMode                     (ID2D1DeviceContext5* this) { return ((D2D1_TEXT_ANTIALIAS_MODE (WINAPI*)(ID2D1DeviceContext5*))this->v->tbl[35])(this); }
static inline void                              ID2D1DeviceContext5_SetTextRenderingParams                   (ID2D1DeviceContext5* this, IDWriteRenderingParams* textRenderingParams) { ((void (WINAPI*)(ID2D1DeviceContext5*, IDWriteRenderingParams*))this->v->tbl[36])(this, textRenderingParams); }
static inline void                              ID2D1DeviceContext5_GetTextRenderingParams                   (ID2D1DeviceContext5* this, IDWriteRenderingParams** textRenderingParams) { ((void (WINAPI*)(ID2D1DeviceContext5*, IDWriteRenderingParams**))this->v->tbl[37])(this, textRenderingParams); }
static inline void                              ID2D1DeviceContext5_SetTags                                  (ID2D1DeviceContext5* this, UINT64 tag1, UINT64 tag2) { ((void (WINAPI*)(ID2D1DeviceContext5*, UINT64, UINT64))this->v->tbl[38])(this, tag1, tag2); }
static inline void                              ID2D1DeviceContext5_GetTags                                  (ID2D1DeviceContext5* this, UINT64* tag1, UINT64* tag2) { ((void (WINAPI*)(ID2D1DeviceContext5*, UINT64*, UINT64*))this->v->tbl[39])(this, tag1, tag2); }
static inline void                              ID2D1DeviceContext5_PushLayer                                (ID2D1DeviceContext5* this, const D2D1_LAYER_PARAMETERS* layerParameters, ID2D1Layer* layer) { ((void (WINAPI*)(ID2D1DeviceContext5*, const D2D1_LAYER_PARAMETERS*, ID2D1Layer*))this->v->tbl[40])(this, layerParameters, layer); }
static inline void                              ID2D1DeviceContext5_PopLayer                                 (ID2D1DeviceContext5* this) { ((void (WINAPI*)(ID2D1DeviceContext5*))this->v->tbl[41])(this); }
static inline HRESULT                           ID2D1DeviceContext5_Flush                                    (ID2D1DeviceContext5* this, UINT64* tag1, UINT64* tag2) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, UINT64*, UINT64*))this->v->tbl[42])(this, tag1, tag2); }
static inline void                              ID2D1DeviceContext5_SaveDrawingState                         (ID2D1DeviceContext5* this, ID2D1DrawingStateBlock* drawingStateBlock) { ((void (WINAPI*)(ID2D1DeviceContext5*, ID2D1DrawingStateBlock*))this->v->tbl[43])(this, drawingStateBlock); }
static inline void                              ID2D1DeviceContext5_RestoreDrawingState                      (ID2D1DeviceContext5* this, ID2D1DrawingStateBlock* drawingStateBlock) { ((void (WINAPI*)(ID2D1DeviceContext5*, ID2D1DrawingStateBlock*))this->v->tbl[44])(this, drawingStateBlock); }
static inline void                              ID2D1DeviceContext5_PushAxisAlignedClip                      (ID2D1DeviceContext5* this, const D2D_RECT_F* clipRect, D2D1_ANTIALIAS_MODE antialiasMode) { ((void (WINAPI*)(ID2D1DeviceContext5*, const D2D_RECT_F*, D2D1_ANTIALIAS_MODE))this->v->tbl[45])(this, clipRect, antialiasMode); }
static inline void                              ID2D1DeviceContext5_PopAxisAlignedClip                       (ID2D1DeviceContext5* this) { ((void (WINAPI*)(ID2D1DeviceContext5*))this->v->tbl[46])(this); }
static inline void                              ID2D1DeviceContext5_Clear                                    (ID2D1DeviceContext5* this, const D2D1_COLOR_F* clearColor) { ((void (WINAPI*)(ID2D1DeviceContext5*, const D2D1_COLOR_F*))this->v->tbl[47])(this, clearColor); }
static inline void                              ID2D1DeviceContext5_BeginDraw                                (ID2D1DeviceContext5* this) { ((void (WINAPI*)(ID2D1DeviceContext5*))this->v->tbl[48])(this); }
static inline HRESULT                           ID2D1DeviceContext5_EndDraw                                  (ID2D1DeviceContext5* this, UINT64* tag1, UINT64* tag2) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, UINT64*, UINT64*))this->v->tbl[49])(this, tag1, tag2); }
static inline D2D1_PIXEL_FORMAT                 ID2D1DeviceContext5_GetPixelFormat                           (ID2D1DeviceContext5* this) { D2D1_PIXEL_FORMAT _return; ((void (WINAPI*)(ID2D1DeviceContext5*, D2D1_PIXEL_FORMAT*))this->v->tbl[50])(this, &_return); return _return; }
static inline void                              ID2D1DeviceContext5_SetDpi                                   (ID2D1DeviceContext5* this, FLOAT dpiX, FLOAT dpiY) { ((void (WINAPI*)(ID2D1DeviceContext5*, FLOAT, FLOAT))this->v->tbl[51])(this, dpiX, dpiY); }
static inline void                              ID2D1DeviceContext5_GetDpi                                   (ID2D1DeviceContext5* this, FLOAT* dpiX, FLOAT* dpiY) { ((void (WINAPI*)(ID2D1DeviceContext5*, FLOAT*, FLOAT*))this->v->tbl[52])(this, dpiX, dpiY); }
static inline D2D_SIZE_F                        ID2D1DeviceContext5_GetSize                                  (ID2D1DeviceContext5* this) { D2D_SIZE_F _return; ((void (WINAPI*)(ID2D1DeviceContext5*, D2D_SIZE_F*))this->v->tbl[53])(this, &_return); return _return; }
static inline D2D_SIZE_U                        ID2D1DeviceContext5_GetPixelSize                             (ID2D1DeviceContext5* this) { D2D_SIZE_U _return; ((void (WINAPI*)(ID2D1DeviceContext5*, D2D_SIZE_U*))this->v->tbl[54])(this, &_return); return _return; }
static inline UINT32                            ID2D1DeviceContext5_GetMaximumBitmapSize                     (ID2D1DeviceContext5* this) { return ((UINT32 (WINAPI*)(ID2D1DeviceContext5*))this->v->tbl[55])(this); }
static inline BOOL                              ID2D1DeviceContext5_IsSupported                              (ID2D1DeviceContext5* this, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties) { return ((BOOL (WINAPI*)(ID2D1DeviceContext5*, const D2D1_RENDER_TARGET_PROPERTIES*))this->v->tbl[56])(this, renderTargetProperties); }
static inline HRESULT                           ID2D1DeviceContext5_CreateBitmap1                            (ID2D1DeviceContext5* this, D2D_SIZE_U size, const void* sourceData, UINT32 pitch, const D2D1_BITMAP_PROPERTIES1* bitmapProperties, ID2D1Bitmap1** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, D2D_SIZE_U, const void*, UINT32, const D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1**))this->v->tbl[57])(this, size, sourceData, pitch, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext5_CreateBitmapFromWicBitmap1               (ID2D1DeviceContext5* this, IWICBitmapSource* wicBitmapSource, const D2D1_BITMAP_PROPERTIES1* bitmapProperties, ID2D1Bitmap1** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, IWICBitmapSource*, const D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1**))this->v->tbl[58])(this, wicBitmapSource, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext5_CreateColorContext                       (ID2D1DeviceContext5* this, D2D1_COLOR_SPACE space, const UINT8* profile, UINT32 profileSize, ID2D1ColorContext** colorContext) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, D2D1_COLOR_SPACE, const UINT8*, UINT32, ID2D1ColorContext**))this->v->tbl[59])(this, space, profile, profileSize, colorContext); }
static inline HRESULT                           ID2D1DeviceContext5_CreateColorContextFromFilename           (ID2D1DeviceContext5* this, const WCHAR* filename, ID2D1ColorContext** colorContext) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, const WCHAR*, ID2D1ColorContext**))this->v->tbl[60])(this, filename, colorContext); }
static inline HRESULT                           ID2D1DeviceContext5_CreateColorContextFromWicColorContext    (ID2D1DeviceContext5* this, IWICColorContext* wicColorContext, ID2D1ColorContext** colorContext) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, IWICColorContext*, ID2D1ColorContext**))this->v->tbl[61])(this, wicColorContext, colorContext); }
static inline HRESULT                           ID2D1DeviceContext5_CreateBitmapFromDxgiSurface              (ID2D1DeviceContext5* this, IDXGISurface* surface, const D2D1_BITMAP_PROPERTIES1* bitmapProperties, ID2D1Bitmap1** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, IDXGISurface*, const D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1**))this->v->tbl[62])(this, surface, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext5_CreateEffect                             (ID2D1DeviceContext5* this, const GUID* effectId, ID2D1Effect** effect) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, const GUID*, ID2D1Effect**))this->v->tbl[63])(this, effectId, effect); }
static inline HRESULT                           ID2D1DeviceContext5_CreateGradientStopCollection1            (ID2D1DeviceContext5* this, const D2D1_GRADIENT_STOP* straightAlphaGradientStops, UINT32 straightAlphaGradientStopsCount, D2D1_COLOR_SPACE preInterpolationSpace, D2D1_COLOR_SPACE postInterpolationSpace, D2D1_BUFFER_PRECISION bufferPrecision, D2D1_EXTEND_MODE extendMode, D2D1_COLOR_INTERPOLATION_MODE colorInterpolationMode, ID2D1GradientStopCollection1** gradientStopCollection1) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, const D2D1_GRADIENT_STOP*, UINT32, D2D1_COLOR_SPACE, D2D1_COLOR_SPACE, D2D1_BUFFER_PRECISION, D2D1_EXTEND_MODE, D2D1_COLOR_INTERPOLATION_MODE, ID2D1GradientStopCollection1**))this->v->tbl[64])(this, straightAlphaGradientStops, straightAlphaGradientStopsCount, preInterpolationSpace, postInterpolationSpace, bufferPrecision, extendMode, colorInterpolationMode, gradientStopCollection1); }
static inline HRESULT                           ID2D1DeviceContext5_CreateImageBrush                         (ID2D1DeviceContext5* this, ID2D1Image* image, const D2D1_IMAGE_BRUSH_PROPERTIES* imageBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1ImageBrush** imageBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, ID2D1Image*, const D2D1_IMAGE_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1ImageBrush**))this->v->tbl[65])(this, image, imageBrushProperties, brushProperties, imageBrush); }
static inline HRESULT                           ID2D1DeviceContext5_CreateBitmapBrush1                       (ID2D1DeviceContext5* this, ID2D1Bitmap* bitmap, const D2D1_BITMAP_BRUSH_PROPERTIES1* bitmapBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1BitmapBrush1** bitmapBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, ID2D1Bitmap*, const D2D1_BITMAP_BRUSH_PROPERTIES1*, const D2D1_BRUSH_PROPERTIES*, ID2D1BitmapBrush1**))this->v->tbl[66])(this, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush); }
static inline HRESULT                           ID2D1DeviceContext5_CreateCommandList                        (ID2D1DeviceContext5* this, ID2D1CommandList** commandList) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, ID2D1CommandList**))this->v->tbl[67])(this, commandList); }
static inline BOOL                              ID2D1DeviceContext5_IsDxgiFormatSupported                    (ID2D1DeviceContext5* this, DXGI_FORMAT format) { return ((BOOL (WINAPI*)(ID2D1DeviceContext5*, DXGI_FORMAT))this->v->tbl[68])(this, format); }
static inline BOOL                              ID2D1DeviceContext5_IsBufferPrecisionSupported               (ID2D1DeviceContext5* this, D2D1_BUFFER_PRECISION bufferPrecision) { return ((BOOL (WINAPI*)(ID2D1DeviceContext5*, D2D1_BUFFER_PRECISION))this->v->tbl[69])(this, bufferPrecision); }
static inline HRESULT                           ID2D1DeviceContext5_GetImageLocalBounds                      (ID2D1DeviceContext5* this, ID2D1Image* image, D2D_RECT_F* localBounds) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, ID2D1Image*, D2D_RECT_F*))this->v->tbl[70])(this, image, localBounds); }
static inline HRESULT                           ID2D1DeviceContext5_GetImageWorldBounds                      (ID2D1DeviceContext5* this, ID2D1Image* image, D2D_RECT_F* worldBounds) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, ID2D1Image*, D2D_RECT_F*))this->v->tbl[71])(this, image, worldBounds); }
static inline HRESULT                           ID2D1DeviceContext5_GetGlyphRunWorldBounds                   (ID2D1DeviceContext5* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, DWRITE_MEASURING_MODE measuringMode, D2D_RECT_F* bounds) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, DWRITE_MEASURING_MODE, D2D_RECT_F*))this->v->tbl[72])(this, baselineOrigin, glyphRun, measuringMode, bounds); }
static inline void                              ID2D1DeviceContext5_GetDevice                                (ID2D1DeviceContext5* this, ID2D1Device** device) { ((void (WINAPI*)(ID2D1DeviceContext5*, ID2D1Device**))this->v->tbl[73])(this, device); }
static inline void                              ID2D1DeviceContext5_SetTarget                                (ID2D1DeviceContext5* this, ID2D1Image* image) { ((void (WINAPI*)(ID2D1DeviceContext5*, ID2D1Image*))this->v->tbl[74])(this, image); }
static inline void                              ID2D1DeviceContext5_GetTarget                                (ID2D1DeviceContext5* this, ID2D1Image** image) { ((void (WINAPI*)(ID2D1DeviceContext5*, ID2D1Image**))this->v->tbl[75])(this, image); }
static inline void                              ID2D1DeviceContext5_SetRenderingControls                     (ID2D1DeviceContext5* this, const D2D1_RENDERING_CONTROLS* renderingControls) { ((void (WINAPI*)(ID2D1DeviceContext5*, const D2D1_RENDERING_CONTROLS*))this->v->tbl[76])(this, renderingControls); }
static inline void                              ID2D1DeviceContext5_GetRenderingControls                     (ID2D1DeviceContext5* this, D2D1_RENDERING_CONTROLS* renderingControls) { ((void (WINAPI*)(ID2D1DeviceContext5*, D2D1_RENDERING_CONTROLS*))this->v->tbl[77])(this, renderingControls); }
static inline void                              ID2D1DeviceContext5_SetPrimitiveBlend                        (ID2D1DeviceContext5* this, D2D1_PRIMITIVE_BLEND primitiveBlend) { ((void (WINAPI*)(ID2D1DeviceContext5*, D2D1_PRIMITIVE_BLEND))this->v->tbl[78])(this, primitiveBlend); }
static inline D2D1_PRIMITIVE_BLEND              ID2D1DeviceContext5_GetPrimitiveBlend                        (ID2D1DeviceContext5* this) { return ((D2D1_PRIMITIVE_BLEND (WINAPI*)(ID2D1DeviceContext5*))this->v->tbl[79])(this); }
static inline void                              ID2D1DeviceContext5_SetUnitMode                              (ID2D1DeviceContext5* this, D2D1_UNIT_MODE unitMode) { ((void (WINAPI*)(ID2D1DeviceContext5*, D2D1_UNIT_MODE))this->v->tbl[80])(this, unitMode); }
static inline D2D1_UNIT_MODE                    ID2D1DeviceContext5_GetUnitMode                              (ID2D1DeviceContext5* this) { return ((D2D1_UNIT_MODE (WINAPI*)(ID2D1DeviceContext5*))this->v->tbl[81])(this); }
static inline void                              ID2D1DeviceContext5_DrawGlyphRun1                            (ID2D1DeviceContext5* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, const DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription, ID2D1Brush* foregroundBrush, DWRITE_MEASURING_MODE measuringMode) { ((void (WINAPI*)(ID2D1DeviceContext5*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, const DWRITE_GLYPH_RUN_DESCRIPTION*, ID2D1Brush*, DWRITE_MEASURING_MODE))this->v->tbl[82])(this, baselineOrigin, glyphRun, glyphRunDescription, foregroundBrush, measuringMode); }
static inline void                              ID2D1DeviceContext5_DrawImage                                (ID2D1DeviceContext5* this, ID2D1Image* image, const D2D_POINT_2F* targetOffset, const D2D_RECT_F* imageRectangle, D2D1_INTERPOLATION_MODE interpolationMode, D2D1_COMPOSITE_MODE compositeMode) { ((void (WINAPI*)(ID2D1DeviceContext5*, ID2D1Image*, const D2D_POINT_2F*, const D2D_RECT_F*, D2D1_INTERPOLATION_MODE, D2D1_COMPOSITE_MODE))this->v->tbl[83])(this, image, targetOffset, imageRectangle, interpolationMode, compositeMode); }
static inline void                              ID2D1DeviceContext5_DrawGdiMetafile                          (ID2D1DeviceContext5* this, ID2D1GdiMetafile* gdiMetafile, const D2D_POINT_2F* targetOffset) { ((void (WINAPI*)(ID2D1DeviceContext5*, ID2D1GdiMetafile*, const D2D_POINT_2F*))this->v->tbl[84])(this, gdiMetafile, targetOffset); }
static inline void                              ID2D1DeviceContext5_DrawBitmap1                              (ID2D1DeviceContext5* this, ID2D1Bitmap* bitmap, const D2D_RECT_F* destinationRectangle, FLOAT opacity, D2D1_INTERPOLATION_MODE interpolationMode, const D2D_RECT_F* sourceRectangle, const D2D_MATRIX_4X4_F* perspectiveTransform) { ((void (WINAPI*)(ID2D1DeviceContext5*, ID2D1Bitmap*, const D2D_RECT_F*, FLOAT, D2D1_INTERPOLATION_MODE, const D2D_RECT_F*, const D2D_MATRIX_4X4_F*))this->v->tbl[85])(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle, perspectiveTransform); }
static inline void                              ID2D1DeviceContext5_PushLayer1                               (ID2D1DeviceContext5* this, const D2D1_LAYER_PARAMETERS1* layerParameters, ID2D1Layer* layer) { ((void (WINAPI*)(ID2D1DeviceContext5*, const D2D1_LAYER_PARAMETERS1*, ID2D1Layer*))this->v->tbl[86])(this, layerParameters, layer); }
static inline HRESULT                           ID2D1DeviceContext5_InvalidateEffectInputRectangle           (ID2D1DeviceContext5* this, ID2D1Effect* effect, UINT32 input, const D2D_RECT_F* inputRectangle) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, ID2D1Effect*, UINT32, const D2D_RECT_F*))this->v->tbl[87])(this, effect, input, inputRectangle); }
static inline HRESULT                           ID2D1DeviceContext5_GetEffectInvalidRectangleCount           (ID2D1DeviceContext5* this, ID2D1Effect* effect, UINT32* rectangleCount) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, ID2D1Effect*, UINT32*))this->v->tbl[88])(this, effect, rectangleCount); }
static inline HRESULT                           ID2D1DeviceContext5_GetEffectInvalidRectangles               (ID2D1DeviceContext5* this, ID2D1Effect* effect, D2D_RECT_F* rectangles, UINT32 rectanglesCount) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, ID2D1Effect*, D2D_RECT_F*, UINT32))this->v->tbl[89])(this, effect, rectangles, rectanglesCount); }
static inline HRESULT                           ID2D1DeviceContext5_GetEffectRequiredInputRectangles         (ID2D1DeviceContext5* this, ID2D1Effect* renderEffect, const D2D_RECT_F* renderImageRectangle, const D2D1_EFFECT_INPUT_DESCRIPTION* inputDescriptions, D2D_RECT_F* requiredInputRects, UINT32 inputCount) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, ID2D1Effect*, const D2D_RECT_F*, const D2D1_EFFECT_INPUT_DESCRIPTION*, D2D_RECT_F*, UINT32))this->v->tbl[90])(this, renderEffect, renderImageRectangle, inputDescriptions, requiredInputRects, inputCount); }
static inline void                              ID2D1DeviceContext5_FillOpacityMask1                         (ID2D1DeviceContext5* this, ID2D1Bitmap* opacityMask, ID2D1Brush* brush, const D2D_RECT_F* destinationRectangle, const D2D_RECT_F* sourceRectangle) { ((void (WINAPI*)(ID2D1DeviceContext5*, ID2D1Bitmap*, ID2D1Brush*, const D2D_RECT_F*, const D2D_RECT_F*))this->v->tbl[91])(this, opacityMask, brush, destinationRectangle, sourceRectangle); }
static inline HRESULT                           ID2D1DeviceContext5_CreateFilledGeometryRealization          (ID2D1DeviceContext5* this, ID2D1Geometry* geometry, FLOAT flatteningTolerance, ID2D1GeometryRealization** geometryRealization) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, ID2D1Geometry*, FLOAT, ID2D1GeometryRealization**))this->v->tbl[92])(this, geometry, flatteningTolerance, geometryRealization); }
static inline HRESULT                           ID2D1DeviceContext5_CreateStrokedGeometryRealization         (ID2D1DeviceContext5* this, ID2D1Geometry* geometry, FLOAT flatteningTolerance, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle, ID2D1GeometryRealization** geometryRealization) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, ID2D1Geometry*, FLOAT, FLOAT, ID2D1StrokeStyle*, ID2D1GeometryRealization**))this->v->tbl[93])(this, geometry, flatteningTolerance, strokeWidth, strokeStyle, geometryRealization); }
static inline void                              ID2D1DeviceContext5_DrawGeometryRealization                  (ID2D1DeviceContext5* this, ID2D1GeometryRealization* geometryRealization, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1DeviceContext5*, ID2D1GeometryRealization*, ID2D1Brush*))this->v->tbl[94])(this, geometryRealization, brush); }
static inline HRESULT                           ID2D1DeviceContext5_CreateInk                                (ID2D1DeviceContext5* this, const D2D1_INK_POINT* startPoint, ID2D1Ink** ink) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, const D2D1_INK_POINT*, ID2D1Ink**))this->v->tbl[95])(this, startPoint, ink); }
static inline HRESULT                           ID2D1DeviceContext5_CreateInkStyle                           (ID2D1DeviceContext5* this, const D2D1_INK_STYLE_PROPERTIES* inkStyleProperties, ID2D1InkStyle** inkStyle) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, const D2D1_INK_STYLE_PROPERTIES*, ID2D1InkStyle**))this->v->tbl[96])(this, inkStyleProperties, inkStyle); }
static inline HRESULT                           ID2D1DeviceContext5_CreateGradientMesh                       (ID2D1DeviceContext5* this, const D2D1_GRADIENT_MESH_PATCH* patches, UINT32 patchesCount, ID2D1GradientMesh** gradientMesh) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, const D2D1_GRADIENT_MESH_PATCH*, UINT32, ID2D1GradientMesh**))this->v->tbl[97])(this, patches, patchesCount, gradientMesh); }
static inline HRESULT                           ID2D1DeviceContext5_CreateImageSourceFromWic                 (ID2D1DeviceContext5* this, IWICBitmapSource* wicBitmapSource, D2D1_IMAGE_SOURCE_LOADING_OPTIONS loadingOptions, D2D1_ALPHA_MODE alphaMode, ID2D1ImageSourceFromWic** imageSource) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, IWICBitmapSource*, D2D1_IMAGE_SOURCE_LOADING_OPTIONS, D2D1_ALPHA_MODE, ID2D1ImageSourceFromWic**))this->v->tbl[98])(this, wicBitmapSource, loadingOptions, alphaMode, imageSource); }
static inline HRESULT                           ID2D1DeviceContext5_CreateLookupTable3D                      (ID2D1DeviceContext5* this, D2D1_BUFFER_PRECISION precision, const UINT32* extents, const UINT8* data, UINT32 dataCount, const UINT32* strides, ID2D1LookupTable3D** lookupTable) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, D2D1_BUFFER_PRECISION, const UINT32*, const UINT8*, UINT32, const UINT32*, ID2D1LookupTable3D**))this->v->tbl[99])(this, precision, extents, data, dataCount, strides, lookupTable); }
static inline HRESULT                           ID2D1DeviceContext5_CreateImageSourceFromDxgi                (ID2D1DeviceContext5* this, IDXGISurface** surfaces, UINT32 surfaceCount, DXGI_COLOR_SPACE_TYPE colorSpace, D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS options, ID2D1ImageSource** imageSource) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, IDXGISurface**, UINT32, DXGI_COLOR_SPACE_TYPE, D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS, ID2D1ImageSource**))this->v->tbl[100])(this, surfaces, surfaceCount, colorSpace, options, imageSource); }
static inline HRESULT                           ID2D1DeviceContext5_GetGradientMeshWorldBounds               (ID2D1DeviceContext5* this, ID2D1GradientMesh* gradientMesh, D2D_RECT_F* pBounds) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, ID2D1GradientMesh*, D2D_RECT_F*))this->v->tbl[101])(this, gradientMesh, pBounds); }
static inline void                              ID2D1DeviceContext5_DrawInk                                  (ID2D1DeviceContext5* this, ID2D1Ink* ink, ID2D1Brush* brush, ID2D1InkStyle* inkStyle) { ((void (WINAPI*)(ID2D1DeviceContext5*, ID2D1Ink*, ID2D1Brush*, ID2D1InkStyle*))this->v->tbl[102])(this, ink, brush, inkStyle); }
static inline void                              ID2D1DeviceContext5_DrawGradientMesh                         (ID2D1DeviceContext5* this, ID2D1GradientMesh* gradientMesh) { ((void (WINAPI*)(ID2D1DeviceContext5*, ID2D1GradientMesh*))this->v->tbl[103])(this, gradientMesh); }
static inline void                              ID2D1DeviceContext5_DrawGdiMetafile1                         (ID2D1DeviceContext5* this, ID2D1GdiMetafile* gdiMetafile, const D2D_RECT_F* destinationRectangle, const D2D_RECT_F* sourceRectangle) { ((void (WINAPI*)(ID2D1DeviceContext5*, ID2D1GdiMetafile*, const D2D_RECT_F*, const D2D_RECT_F*))this->v->tbl[104])(this, gdiMetafile, destinationRectangle, sourceRectangle); }
static inline HRESULT                           ID2D1DeviceContext5_CreateTransformedImageSource             (ID2D1DeviceContext5* this, ID2D1ImageSource* imageSource, const D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES* properties, ID2D1TransformedImageSource** transformedImageSource) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, ID2D1ImageSource*, const D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES*, ID2D1TransformedImageSource**))this->v->tbl[105])(this, imageSource, properties, transformedImageSource); }
static inline HRESULT                           ID2D1DeviceContext5_CreateSpriteBatch                        (ID2D1DeviceContext5* this, ID2D1SpriteBatch** spriteBatch) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, ID2D1SpriteBatch**))this->v->tbl[106])(this, spriteBatch); }
static inline void                              ID2D1DeviceContext5_DrawSpriteBatch                          (ID2D1DeviceContext5* this, ID2D1SpriteBatch* spriteBatch, UINT32 startIndex, UINT32 spriteCount, ID2D1Bitmap* bitmap, D2D1_BITMAP_INTERPOLATION_MODE interpolationMode, D2D1_SPRITE_OPTIONS spriteOptions) { ((void (WINAPI*)(ID2D1DeviceContext5*, ID2D1SpriteBatch*, UINT32, UINT32, ID2D1Bitmap*, D2D1_BITMAP_INTERPOLATION_MODE, D2D1_SPRITE_OPTIONS))this->v->tbl[107])(this, spriteBatch, startIndex, spriteCount, bitmap, interpolationMode, spriteOptions); }
static inline HRESULT                           ID2D1DeviceContext5_CreateSvgGlyphStyle                      (ID2D1DeviceContext5* this, ID2D1SvgGlyphStyle** svgGlyphStyle) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, ID2D1SvgGlyphStyle**))this->v->tbl[108])(this, svgGlyphStyle); }
static inline void                              ID2D1DeviceContext5_DrawText1                                (ID2D1DeviceContext5* this, const WCHAR* string, UINT32 stringLength, IDWriteTextFormat* textFormat, const D2D_RECT_F* layoutRect, ID2D1Brush* defaultFillBrush, ID2D1SvgGlyphStyle* svgGlyphStyle, UINT32 colorPaletteIndex, D2D1_DRAW_TEXT_OPTIONS options, DWRITE_MEASURING_MODE measuringMode) { ((void (WINAPI*)(ID2D1DeviceContext5*, const WCHAR*, UINT32, IDWriteTextFormat*, const D2D_RECT_F*, ID2D1Brush*, ID2D1SvgGlyphStyle*, UINT32, D2D1_DRAW_TEXT_OPTIONS, DWRITE_MEASURING_MODE))this->v->tbl[109])(this, string, stringLength, textFormat, layoutRect, defaultFillBrush, svgGlyphStyle, colorPaletteIndex, options, measuringMode); }
static inline void                              ID2D1DeviceContext5_DrawTextLayout1                          (ID2D1DeviceContext5* this, D2D_POINT_2F origin, IDWriteTextLayout* textLayout, ID2D1Brush* defaultFillBrush, ID2D1SvgGlyphStyle* svgGlyphStyle, UINT32 colorPaletteIndex, D2D1_DRAW_TEXT_OPTIONS options) { ((void (WINAPI*)(ID2D1DeviceContext5*, D2D_POINT_2F, IDWriteTextLayout*, ID2D1Brush*, ID2D1SvgGlyphStyle*, UINT32, D2D1_DRAW_TEXT_OPTIONS))this->v->tbl[110])(this, origin, textLayout, defaultFillBrush, svgGlyphStyle, colorPaletteIndex, options); }
static inline void                              ID2D1DeviceContext5_DrawColorBitmapGlyphRun                  (ID2D1DeviceContext5* this, enum DWRITE_GLYPH_IMAGE_FORMATS glyphImageFormat, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, DWRITE_MEASURING_MODE measuringMode, D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION bitmapSnapOption) { ((void (WINAPI*)(ID2D1DeviceContext5*, enum DWRITE_GLYPH_IMAGE_FORMATS, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, DWRITE_MEASURING_MODE, D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION))this->v->tbl[111])(this, glyphImageFormat, baselineOrigin, glyphRun, measuringMode, bitmapSnapOption); }
static inline void                              ID2D1DeviceContext5_DrawSvgGlyphRun                          (ID2D1DeviceContext5* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, ID2D1Brush* defaultFillBrush, ID2D1SvgGlyphStyle* svgGlyphStyle, UINT32 colorPaletteIndex, DWRITE_MEASURING_MODE measuringMode) { ((void (WINAPI*)(ID2D1DeviceContext5*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, ID2D1Brush*, ID2D1SvgGlyphStyle*, UINT32, DWRITE_MEASURING_MODE))this->v->tbl[112])(this, baselineOrigin, glyphRun, defaultFillBrush, svgGlyphStyle, colorPaletteIndex, measuringMode); }
static inline HRESULT                           ID2D1DeviceContext5_GetColorBitmapGlyphImage                 (ID2D1DeviceContext5* this, enum DWRITE_GLYPH_IMAGE_FORMATS glyphImageFormat, D2D_POINT_2F glyphOrigin, IDWriteFontFace* fontFace, FLOAT fontEmSize, UINT16 glyphIndex, BOOL isSideways, const D2D_MATRIX_3X2_F* worldTransform, FLOAT dpiX, FLOAT dpiY, D2D_MATRIX_3X2_F* glyphTransform, ID2D1Image** glyphImage) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, enum DWRITE_GLYPH_IMAGE_FORMATS, D2D_POINT_2F, IDWriteFontFace*, FLOAT, UINT16, BOOL, const D2D_MATRIX_3X2_F*, FLOAT, FLOAT, D2D_MATRIX_3X2_F*, ID2D1Image**))this->v->tbl[113])(this, glyphImageFormat, glyphOrigin, fontFace, fontEmSize, glyphIndex, isSideways, worldTransform, dpiX, dpiY, glyphTransform, glyphImage); }
static inline HRESULT                           ID2D1DeviceContext5_GetSvgGlyphImage                         (ID2D1DeviceContext5* this, D2D_POINT_2F glyphOrigin, IDWriteFontFace* fontFace, FLOAT fontEmSize, UINT16 glyphIndex, BOOL isSideways, const D2D_MATRIX_3X2_F* worldTransform, ID2D1Brush* defaultFillBrush, ID2D1SvgGlyphStyle* svgGlyphStyle, UINT32 colorPaletteIndex, D2D_MATRIX_3X2_F* glyphTransform, ID2D1CommandList** glyphImage) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, D2D_POINT_2F, IDWriteFontFace*, FLOAT, UINT16, BOOL, const D2D_MATRIX_3X2_F*, ID2D1Brush*, ID2D1SvgGlyphStyle*, UINT32, D2D_MATRIX_3X2_F*, ID2D1CommandList**))this->v->tbl[114])(this, glyphOrigin, fontFace, fontEmSize, glyphIndex, isSideways, worldTransform, defaultFillBrush, svgGlyphStyle, colorPaletteIndex, glyphTransform, glyphImage); }
static inline HRESULT                           ID2D1DeviceContext5_CreateSvgDocument                        (ID2D1DeviceContext5* this, IStream* inputXmlStream, D2D_SIZE_F viewportSize, ID2D1SvgDocument** svgDocument) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, IStream*, D2D_SIZE_F, ID2D1SvgDocument**))this->v->tbl[115])(this, inputXmlStream, viewportSize, svgDocument); }
static inline void                              ID2D1DeviceContext5_DrawSvgDocument                          (ID2D1DeviceContext5* this, ID2D1SvgDocument* svgDocument) { ((void (WINAPI*)(ID2D1DeviceContext5*, ID2D1SvgDocument*))this->v->tbl[116])(this, svgDocument); }
static inline HRESULT                           ID2D1DeviceContext5_CreateColorContextFromDxgiColorSpace     (ID2D1DeviceContext5* this, DXGI_COLOR_SPACE_TYPE colorSpace, ID2D1ColorContext1** colorContext) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, DXGI_COLOR_SPACE_TYPE, ID2D1ColorContext1**))this->v->tbl[117])(this, colorSpace, colorContext); }
static inline HRESULT                           ID2D1DeviceContext5_CreateColorContextFromSimpleColorProfile (ID2D1DeviceContext5* this, const D2D1_SIMPLE_COLOR_PROFILE* simpleProfile, ID2D1ColorContext1** colorContext) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext5*, const D2D1_SIMPLE_COLOR_PROFILE*, ID2D1ColorContext1**))this->v->tbl[118])(this, simpleProfile, colorContext); }

static inline HRESULT                           ID2D1DeviceContext6_QueryInterface                           (ID2D1DeviceContext6* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1DeviceContext6_AddRef                                   (ID2D1DeviceContext6* this) { return ((UINT32 (WINAPI*)(ID2D1DeviceContext6*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1DeviceContext6_Release                                  (ID2D1DeviceContext6* this) { return ((UINT32 (WINAPI*)(ID2D1DeviceContext6*))this->v->tbl[2])(this); }
static inline void                              ID2D1DeviceContext6_GetFactory                               (ID2D1DeviceContext6* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1DeviceContext6*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline HRESULT                           ID2D1DeviceContext6_CreateBitmap                             (ID2D1DeviceContext6* this, D2D_SIZE_U size, const void* srcData, UINT32 pitch, const D2D1_BITMAP_PROPERTIES* bitmapProperties, ID2D1Bitmap** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, D2D_SIZE_U, const void*, UINT32, const D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap**))this->v->tbl[4])(this, size, srcData, pitch, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext6_CreateBitmapFromWicBitmap                (ID2D1DeviceContext6* this, IWICBitmapSource* wicBitmapSource, const D2D1_BITMAP_PROPERTIES* bitmapProperties, ID2D1Bitmap** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, IWICBitmapSource*, const D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap**))this->v->tbl[5])(this, wicBitmapSource, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext6_CreateSharedBitmap                       (ID2D1DeviceContext6* this, const GUID* riid, void* data, const D2D1_BITMAP_PROPERTIES* bitmapProperties, ID2D1Bitmap** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, const GUID*, void*, const D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap**))this->v->tbl[6])(this, riid, data, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext6_CreateBitmapBrush                        (ID2D1DeviceContext6* this, ID2D1Bitmap* bitmap, const D2D1_BITMAP_BRUSH_PROPERTIES* bitmapBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1BitmapBrush** bitmapBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, ID2D1Bitmap*, const D2D1_BITMAP_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1BitmapBrush**))this->v->tbl[7])(this, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush); }
static inline HRESULT                           ID2D1DeviceContext6_CreateSolidColorBrush                    (ID2D1DeviceContext6* this, const D2D1_COLOR_F* color, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1SolidColorBrush** solidColorBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, const D2D1_COLOR_F*, const D2D1_BRUSH_PROPERTIES*, ID2D1SolidColorBrush**))this->v->tbl[8])(this, color, brushProperties, solidColorBrush); }
static inline HRESULT                           ID2D1DeviceContext6_CreateGradientStopCollection             (ID2D1DeviceContext6* this, const D2D1_GRADIENT_STOP* gradientStops, UINT32 gradientStopsCount, D2D1_GAMMA colorInterpolationGamma, D2D1_EXTEND_MODE extendMode, ID2D1GradientStopCollection** gradientStopCollection) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, const D2D1_GRADIENT_STOP*, UINT32, D2D1_GAMMA, D2D1_EXTEND_MODE, ID2D1GradientStopCollection**))this->v->tbl[9])(this, gradientStops, gradientStopsCount, colorInterpolationGamma, extendMode, gradientStopCollection); }
static inline HRESULT                           ID2D1DeviceContext6_CreateLinearGradientBrush                (ID2D1DeviceContext6* this, const D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES* linearGradientBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1GradientStopCollection* gradientStopCollection, ID2D1LinearGradientBrush** linearGradientBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, const D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection*, ID2D1LinearGradientBrush**))this->v->tbl[10])(this, linearGradientBrushProperties, brushProperties, gradientStopCollection, linearGradientBrush); }
static inline HRESULT                           ID2D1DeviceContext6_CreateRadialGradientBrush                (ID2D1DeviceContext6* this, const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES* radialGradientBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1GradientStopCollection* gradientStopCollection, ID2D1RadialGradientBrush** radialGradientBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection*, ID2D1RadialGradientBrush**))this->v->tbl[11])(this, radialGradientBrushProperties, brushProperties, gradientStopCollection, radialGradientBrush); }
static inline HRESULT                           ID2D1DeviceContext6_CreateCompatibleRenderTarget             (ID2D1DeviceContext6* this, const D2D_SIZE_F* desiredSize, const D2D_SIZE_U* desiredPixelSize, const D2D1_PIXEL_FORMAT* desiredFormat, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS options, ID2D1BitmapRenderTarget** bitmapRenderTarget) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, const D2D_SIZE_F*, const D2D_SIZE_U*, const D2D1_PIXEL_FORMAT*, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, ID2D1BitmapRenderTarget**))this->v->tbl[12])(this, desiredSize, desiredPixelSize, desiredFormat, options, bitmapRenderTarget); }
static inline HRESULT                           ID2D1DeviceContext6_CreateLayer                              (ID2D1DeviceContext6* this, const D2D_SIZE_F* size, ID2D1Layer** layer) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, const D2D_SIZE_F*, ID2D1Layer**))this->v->tbl[13])(this, size, layer); }
static inline HRESULT                           ID2D1DeviceContext6_CreateMesh                               (ID2D1DeviceContext6* this, ID2D1Mesh** mesh) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, ID2D1Mesh**))this->v->tbl[14])(this, mesh); }
static inline void                              ID2D1DeviceContext6_DrawLine                                 (ID2D1DeviceContext6* this, D2D_POINT_2F point0, D2D_POINT_2F point1, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DeviceContext6*, D2D_POINT_2F, D2D_POINT_2F, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[15])(this, point0, point1, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DeviceContext6_DrawRectangle                            (ID2D1DeviceContext6* this, const D2D_RECT_F* rect, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DeviceContext6*, const D2D_RECT_F*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[16])(this, rect, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DeviceContext6_FillRectangle                            (ID2D1DeviceContext6* this, const D2D_RECT_F* rect, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1DeviceContext6*, const D2D_RECT_F*, ID2D1Brush*))this->v->tbl[17])(this, rect, brush); }
static inline void                              ID2D1DeviceContext6_DrawRoundedRectangle                     (ID2D1DeviceContext6* this, const D2D1_ROUNDED_RECT* roundedRect, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DeviceContext6*, const D2D1_ROUNDED_RECT*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[18])(this, roundedRect, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DeviceContext6_FillRoundedRectangle                     (ID2D1DeviceContext6* this, const D2D1_ROUNDED_RECT* roundedRect, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1DeviceContext6*, const D2D1_ROUNDED_RECT*, ID2D1Brush*))this->v->tbl[19])(this, roundedRect, brush); }
static inline void                              ID2D1DeviceContext6_DrawEllipse                              (ID2D1DeviceContext6* this, const D2D1_ELLIPSE* ellipse, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DeviceContext6*, const D2D1_ELLIPSE*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[20])(this, ellipse, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DeviceContext6_FillEllipse                              (ID2D1DeviceContext6* this, const D2D1_ELLIPSE* ellipse, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1DeviceContext6*, const D2D1_ELLIPSE*, ID2D1Brush*))this->v->tbl[21])(this, ellipse, brush); }
static inline void                              ID2D1DeviceContext6_DrawGeometry                             (ID2D1DeviceContext6* this, ID2D1Geometry* geometry, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DeviceContext6*, ID2D1Geometry*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[22])(this, geometry, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DeviceContext6_FillGeometry                             (ID2D1DeviceContext6* this, ID2D1Geometry* geometry, ID2D1Brush* brush, ID2D1Brush* opacityBrush) { ((void (WINAPI*)(ID2D1DeviceContext6*, ID2D1Geometry*, ID2D1Brush*, ID2D1Brush*))this->v->tbl[23])(this, geometry, brush, opacityBrush); }
static inline void                              ID2D1DeviceContext6_FillMesh                                 (ID2D1DeviceContext6* this, ID2D1Mesh* mesh, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1DeviceContext6*, ID2D1Mesh*, ID2D1Brush*))this->v->tbl[24])(this, mesh, brush); }
static inline void                              ID2D1DeviceContext6_FillOpacityMask                          (ID2D1DeviceContext6* this, ID2D1Bitmap* opacityMask, ID2D1Brush* brush, D2D1_OPACITY_MASK_CONTENT content, const D2D_RECT_F* destinationRectangle, const D2D_RECT_F* sourceRectangle) { ((void (WINAPI*)(ID2D1DeviceContext6*, ID2D1Bitmap*, ID2D1Brush*, D2D1_OPACITY_MASK_CONTENT, const D2D_RECT_F*, const D2D_RECT_F*))this->v->tbl[25])(this, opacityMask, brush, content, destinationRectangle, sourceRectangle); }
static inline void                              ID2D1DeviceContext6_DrawBitmap                               (ID2D1DeviceContext6* this, ID2D1Bitmap* bitmap, const D2D_RECT_F* destinationRectangle, FLOAT opacity, D2D1_BITMAP_INTERPOLATION_MODE interpolationMode, const D2D_RECT_F* sourceRectangle) { ((void (WINAPI*)(ID2D1DeviceContext6*, ID2D1Bitmap*, const D2D_RECT_F*, FLOAT, D2D1_BITMAP_INTERPOLATION_MODE, const D2D_RECT_F*))this->v->tbl[26])(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle); }
static inline void                              ID2D1DeviceContext6_DrawText                                 (ID2D1DeviceContext6* this, const WCHAR* string, UINT32 stringLength, IDWriteTextFormat* textFormat, const D2D_RECT_F* layoutRect, ID2D1Brush* defaultFillBrush, D2D1_DRAW_TEXT_OPTIONS options, DWRITE_MEASURING_MODE measuringMode) { ((void (WINAPI*)(ID2D1DeviceContext6*, const WCHAR*, UINT32, IDWriteTextFormat*, const D2D_RECT_F*, ID2D1Brush*, D2D1_DRAW_TEXT_OPTIONS, DWRITE_MEASURING_MODE))this->v->tbl[27])(this, string, stringLength, textFormat, layoutRect, defaultFillBrush, options, measuringMode); }
static inline void                              ID2D1DeviceContext6_DrawTextLayout                           (ID2D1DeviceContext6* this, D2D_POINT_2F origin, IDWriteTextLayout* textLayout, ID2D1Brush* defaultFillBrush, D2D1_DRAW_TEXT_OPTIONS options) { ((void (WINAPI*)(ID2D1DeviceContext6*, D2D_POINT_2F, IDWriteTextLayout*, ID2D1Brush*, D2D1_DRAW_TEXT_OPTIONS))this->v->tbl[28])(this, origin, textLayout, defaultFillBrush, options); }
static inline void                              ID2D1DeviceContext6_DrawGlyphRun                             (ID2D1DeviceContext6* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, ID2D1Brush* foregroundBrush, DWRITE_MEASURING_MODE measuringMode) { ((void (WINAPI*)(ID2D1DeviceContext6*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, ID2D1Brush*, DWRITE_MEASURING_MODE))this->v->tbl[29])(this, baselineOrigin, glyphRun, foregroundBrush, measuringMode); }
static inline void                              ID2D1DeviceContext6_SetTransform                             (ID2D1DeviceContext6* this, const D2D_MATRIX_3X2_F* transform) { ((void (WINAPI*)(ID2D1DeviceContext6*, const D2D_MATRIX_3X2_F*))this->v->tbl[30])(this, transform); }
static inline void                              ID2D1DeviceContext6_GetTransform                             (ID2D1DeviceContext6* this, D2D_MATRIX_3X2_F* transform) { ((void (WINAPI*)(ID2D1DeviceContext6*, D2D_MATRIX_3X2_F*))this->v->tbl[31])(this, transform); }
static inline void                              ID2D1DeviceContext6_SetAntialiasMode                         (ID2D1DeviceContext6* this, D2D1_ANTIALIAS_MODE antialiasMode) { ((void (WINAPI*)(ID2D1DeviceContext6*, D2D1_ANTIALIAS_MODE))this->v->tbl[32])(this, antialiasMode); }
static inline D2D1_ANTIALIAS_MODE               ID2D1DeviceContext6_GetAntialiasMode                         (ID2D1DeviceContext6* this) { return ((D2D1_ANTIALIAS_MODE (WINAPI*)(ID2D1DeviceContext6*))this->v->tbl[33])(this); }
static inline void                              ID2D1DeviceContext6_SetTextAntialiasMode                     (ID2D1DeviceContext6* this, D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode) { ((void (WINAPI*)(ID2D1DeviceContext6*, D2D1_TEXT_ANTIALIAS_MODE))this->v->tbl[34])(this, textAntialiasMode); }
static inline D2D1_TEXT_ANTIALIAS_MODE          ID2D1DeviceContext6_GetTextAntialiasMode                     (ID2D1DeviceContext6* this) { return ((D2D1_TEXT_ANTIALIAS_MODE (WINAPI*)(ID2D1DeviceContext6*))this->v->tbl[35])(this); }
static inline void                              ID2D1DeviceContext6_SetTextRenderingParams                   (ID2D1DeviceContext6* this, IDWriteRenderingParams* textRenderingParams) { ((void (WINAPI*)(ID2D1DeviceContext6*, IDWriteRenderingParams*))this->v->tbl[36])(this, textRenderingParams); }
static inline void                              ID2D1DeviceContext6_GetTextRenderingParams                   (ID2D1DeviceContext6* this, IDWriteRenderingParams** textRenderingParams) { ((void (WINAPI*)(ID2D1DeviceContext6*, IDWriteRenderingParams**))this->v->tbl[37])(this, textRenderingParams); }
static inline void                              ID2D1DeviceContext6_SetTags                                  (ID2D1DeviceContext6* this, UINT64 tag1, UINT64 tag2) { ((void (WINAPI*)(ID2D1DeviceContext6*, UINT64, UINT64))this->v->tbl[38])(this, tag1, tag2); }
static inline void                              ID2D1DeviceContext6_GetTags                                  (ID2D1DeviceContext6* this, UINT64* tag1, UINT64* tag2) { ((void (WINAPI*)(ID2D1DeviceContext6*, UINT64*, UINT64*))this->v->tbl[39])(this, tag1, tag2); }
static inline void                              ID2D1DeviceContext6_PushLayer                                (ID2D1DeviceContext6* this, const D2D1_LAYER_PARAMETERS* layerParameters, ID2D1Layer* layer) { ((void (WINAPI*)(ID2D1DeviceContext6*, const D2D1_LAYER_PARAMETERS*, ID2D1Layer*))this->v->tbl[40])(this, layerParameters, layer); }
static inline void                              ID2D1DeviceContext6_PopLayer                                 (ID2D1DeviceContext6* this) { ((void (WINAPI*)(ID2D1DeviceContext6*))this->v->tbl[41])(this); }
static inline HRESULT                           ID2D1DeviceContext6_Flush                                    (ID2D1DeviceContext6* this, UINT64* tag1, UINT64* tag2) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, UINT64*, UINT64*))this->v->tbl[42])(this, tag1, tag2); }
static inline void                              ID2D1DeviceContext6_SaveDrawingState                         (ID2D1DeviceContext6* this, ID2D1DrawingStateBlock* drawingStateBlock) { ((void (WINAPI*)(ID2D1DeviceContext6*, ID2D1DrawingStateBlock*))this->v->tbl[43])(this, drawingStateBlock); }
static inline void                              ID2D1DeviceContext6_RestoreDrawingState                      (ID2D1DeviceContext6* this, ID2D1DrawingStateBlock* drawingStateBlock) { ((void (WINAPI*)(ID2D1DeviceContext6*, ID2D1DrawingStateBlock*))this->v->tbl[44])(this, drawingStateBlock); }
static inline void                              ID2D1DeviceContext6_PushAxisAlignedClip                      (ID2D1DeviceContext6* this, const D2D_RECT_F* clipRect, D2D1_ANTIALIAS_MODE antialiasMode) { ((void (WINAPI*)(ID2D1DeviceContext6*, const D2D_RECT_F*, D2D1_ANTIALIAS_MODE))this->v->tbl[45])(this, clipRect, antialiasMode); }
static inline void                              ID2D1DeviceContext6_PopAxisAlignedClip                       (ID2D1DeviceContext6* this) { ((void (WINAPI*)(ID2D1DeviceContext6*))this->v->tbl[46])(this); }
static inline void                              ID2D1DeviceContext6_Clear                                    (ID2D1DeviceContext6* this, const D2D1_COLOR_F* clearColor) { ((void (WINAPI*)(ID2D1DeviceContext6*, const D2D1_COLOR_F*))this->v->tbl[47])(this, clearColor); }
static inline void                              ID2D1DeviceContext6_BeginDraw                                (ID2D1DeviceContext6* this) { ((void (WINAPI*)(ID2D1DeviceContext6*))this->v->tbl[48])(this); }
static inline HRESULT                           ID2D1DeviceContext6_EndDraw                                  (ID2D1DeviceContext6* this, UINT64* tag1, UINT64* tag2) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, UINT64*, UINT64*))this->v->tbl[49])(this, tag1, tag2); }
static inline D2D1_PIXEL_FORMAT                 ID2D1DeviceContext6_GetPixelFormat                           (ID2D1DeviceContext6* this) { D2D1_PIXEL_FORMAT _return; ((void (WINAPI*)(ID2D1DeviceContext6*, D2D1_PIXEL_FORMAT*))this->v->tbl[50])(this, &_return); return _return; }
static inline void                              ID2D1DeviceContext6_SetDpi                                   (ID2D1DeviceContext6* this, FLOAT dpiX, FLOAT dpiY) { ((void (WINAPI*)(ID2D1DeviceContext6*, FLOAT, FLOAT))this->v->tbl[51])(this, dpiX, dpiY); }
static inline void                              ID2D1DeviceContext6_GetDpi                                   (ID2D1DeviceContext6* this, FLOAT* dpiX, FLOAT* dpiY) { ((void (WINAPI*)(ID2D1DeviceContext6*, FLOAT*, FLOAT*))this->v->tbl[52])(this, dpiX, dpiY); }
static inline D2D_SIZE_F                        ID2D1DeviceContext6_GetSize                                  (ID2D1DeviceContext6* this) { D2D_SIZE_F _return; ((void (WINAPI*)(ID2D1DeviceContext6*, D2D_SIZE_F*))this->v->tbl[53])(this, &_return); return _return; }
static inline D2D_SIZE_U                        ID2D1DeviceContext6_GetPixelSize                             (ID2D1DeviceContext6* this) { D2D_SIZE_U _return; ((void (WINAPI*)(ID2D1DeviceContext6*, D2D_SIZE_U*))this->v->tbl[54])(this, &_return); return _return; }
static inline UINT32                            ID2D1DeviceContext6_GetMaximumBitmapSize                     (ID2D1DeviceContext6* this) { return ((UINT32 (WINAPI*)(ID2D1DeviceContext6*))this->v->tbl[55])(this); }
static inline BOOL                              ID2D1DeviceContext6_IsSupported                              (ID2D1DeviceContext6* this, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties) { return ((BOOL (WINAPI*)(ID2D1DeviceContext6*, const D2D1_RENDER_TARGET_PROPERTIES*))this->v->tbl[56])(this, renderTargetProperties); }
static inline HRESULT                           ID2D1DeviceContext6_CreateBitmap1                            (ID2D1DeviceContext6* this, D2D_SIZE_U size, const void* sourceData, UINT32 pitch, const D2D1_BITMAP_PROPERTIES1* bitmapProperties, ID2D1Bitmap1** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, D2D_SIZE_U, const void*, UINT32, const D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1**))this->v->tbl[57])(this, size, sourceData, pitch, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext6_CreateBitmapFromWicBitmap1               (ID2D1DeviceContext6* this, IWICBitmapSource* wicBitmapSource, const D2D1_BITMAP_PROPERTIES1* bitmapProperties, ID2D1Bitmap1** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, IWICBitmapSource*, const D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1**))this->v->tbl[58])(this, wicBitmapSource, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext6_CreateColorContext                       (ID2D1DeviceContext6* this, D2D1_COLOR_SPACE space, const UINT8* profile, UINT32 profileSize, ID2D1ColorContext** colorContext) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, D2D1_COLOR_SPACE, const UINT8*, UINT32, ID2D1ColorContext**))this->v->tbl[59])(this, space, profile, profileSize, colorContext); }
static inline HRESULT                           ID2D1DeviceContext6_CreateColorContextFromFilename           (ID2D1DeviceContext6* this, const WCHAR* filename, ID2D1ColorContext** colorContext) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, const WCHAR*, ID2D1ColorContext**))this->v->tbl[60])(this, filename, colorContext); }
static inline HRESULT                           ID2D1DeviceContext6_CreateColorContextFromWicColorContext    (ID2D1DeviceContext6* this, IWICColorContext* wicColorContext, ID2D1ColorContext** colorContext) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, IWICColorContext*, ID2D1ColorContext**))this->v->tbl[61])(this, wicColorContext, colorContext); }
static inline HRESULT                           ID2D1DeviceContext6_CreateBitmapFromDxgiSurface              (ID2D1DeviceContext6* this, IDXGISurface* surface, const D2D1_BITMAP_PROPERTIES1* bitmapProperties, ID2D1Bitmap1** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, IDXGISurface*, const D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1**))this->v->tbl[62])(this, surface, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext6_CreateEffect                             (ID2D1DeviceContext6* this, const GUID* effectId, ID2D1Effect** effect) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, const GUID*, ID2D1Effect**))this->v->tbl[63])(this, effectId, effect); }
static inline HRESULT                           ID2D1DeviceContext6_CreateGradientStopCollection1            (ID2D1DeviceContext6* this, const D2D1_GRADIENT_STOP* straightAlphaGradientStops, UINT32 straightAlphaGradientStopsCount, D2D1_COLOR_SPACE preInterpolationSpace, D2D1_COLOR_SPACE postInterpolationSpace, D2D1_BUFFER_PRECISION bufferPrecision, D2D1_EXTEND_MODE extendMode, D2D1_COLOR_INTERPOLATION_MODE colorInterpolationMode, ID2D1GradientStopCollection1** gradientStopCollection1) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, const D2D1_GRADIENT_STOP*, UINT32, D2D1_COLOR_SPACE, D2D1_COLOR_SPACE, D2D1_BUFFER_PRECISION, D2D1_EXTEND_MODE, D2D1_COLOR_INTERPOLATION_MODE, ID2D1GradientStopCollection1**))this->v->tbl[64])(this, straightAlphaGradientStops, straightAlphaGradientStopsCount, preInterpolationSpace, postInterpolationSpace, bufferPrecision, extendMode, colorInterpolationMode, gradientStopCollection1); }
static inline HRESULT                           ID2D1DeviceContext6_CreateImageBrush                         (ID2D1DeviceContext6* this, ID2D1Image* image, const D2D1_IMAGE_BRUSH_PROPERTIES* imageBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1ImageBrush** imageBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, ID2D1Image*, const D2D1_IMAGE_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1ImageBrush**))this->v->tbl[65])(this, image, imageBrushProperties, brushProperties, imageBrush); }
static inline HRESULT                           ID2D1DeviceContext6_CreateBitmapBrush1                       (ID2D1DeviceContext6* this, ID2D1Bitmap* bitmap, const D2D1_BITMAP_BRUSH_PROPERTIES1* bitmapBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1BitmapBrush1** bitmapBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, ID2D1Bitmap*, const D2D1_BITMAP_BRUSH_PROPERTIES1*, const D2D1_BRUSH_PROPERTIES*, ID2D1BitmapBrush1**))this->v->tbl[66])(this, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush); }
static inline HRESULT                           ID2D1DeviceContext6_CreateCommandList                        (ID2D1DeviceContext6* this, ID2D1CommandList** commandList) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, ID2D1CommandList**))this->v->tbl[67])(this, commandList); }
static inline BOOL                              ID2D1DeviceContext6_IsDxgiFormatSupported                    (ID2D1DeviceContext6* this, DXGI_FORMAT format) { return ((BOOL (WINAPI*)(ID2D1DeviceContext6*, DXGI_FORMAT))this->v->tbl[68])(this, format); }
static inline BOOL                              ID2D1DeviceContext6_IsBufferPrecisionSupported               (ID2D1DeviceContext6* this, D2D1_BUFFER_PRECISION bufferPrecision) { return ((BOOL (WINAPI*)(ID2D1DeviceContext6*, D2D1_BUFFER_PRECISION))this->v->tbl[69])(this, bufferPrecision); }
static inline HRESULT                           ID2D1DeviceContext6_GetImageLocalBounds                      (ID2D1DeviceContext6* this, ID2D1Image* image, D2D_RECT_F* localBounds) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, ID2D1Image*, D2D_RECT_F*))this->v->tbl[70])(this, image, localBounds); }
static inline HRESULT                           ID2D1DeviceContext6_GetImageWorldBounds                      (ID2D1DeviceContext6* this, ID2D1Image* image, D2D_RECT_F* worldBounds) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, ID2D1Image*, D2D_RECT_F*))this->v->tbl[71])(this, image, worldBounds); }
static inline HRESULT                           ID2D1DeviceContext6_GetGlyphRunWorldBounds                   (ID2D1DeviceContext6* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, DWRITE_MEASURING_MODE measuringMode, D2D_RECT_F* bounds) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, DWRITE_MEASURING_MODE, D2D_RECT_F*))this->v->tbl[72])(this, baselineOrigin, glyphRun, measuringMode, bounds); }
static inline void                              ID2D1DeviceContext6_GetDevice                                (ID2D1DeviceContext6* this, ID2D1Device** device) { ((void (WINAPI*)(ID2D1DeviceContext6*, ID2D1Device**))this->v->tbl[73])(this, device); }
static inline void                              ID2D1DeviceContext6_SetTarget                                (ID2D1DeviceContext6* this, ID2D1Image* image) { ((void (WINAPI*)(ID2D1DeviceContext6*, ID2D1Image*))this->v->tbl[74])(this, image); }
static inline void                              ID2D1DeviceContext6_GetTarget                                (ID2D1DeviceContext6* this, ID2D1Image** image) { ((void (WINAPI*)(ID2D1DeviceContext6*, ID2D1Image**))this->v->tbl[75])(this, image); }
static inline void                              ID2D1DeviceContext6_SetRenderingControls                     (ID2D1DeviceContext6* this, const D2D1_RENDERING_CONTROLS* renderingControls) { ((void (WINAPI*)(ID2D1DeviceContext6*, const D2D1_RENDERING_CONTROLS*))this->v->tbl[76])(this, renderingControls); }
static inline void                              ID2D1DeviceContext6_GetRenderingControls                     (ID2D1DeviceContext6* this, D2D1_RENDERING_CONTROLS* renderingControls) { ((void (WINAPI*)(ID2D1DeviceContext6*, D2D1_RENDERING_CONTROLS*))this->v->tbl[77])(this, renderingControls); }
static inline void                              ID2D1DeviceContext6_SetPrimitiveBlend                        (ID2D1DeviceContext6* this, D2D1_PRIMITIVE_BLEND primitiveBlend) { ((void (WINAPI*)(ID2D1DeviceContext6*, D2D1_PRIMITIVE_BLEND))this->v->tbl[78])(this, primitiveBlend); }
static inline D2D1_PRIMITIVE_BLEND              ID2D1DeviceContext6_GetPrimitiveBlend                        (ID2D1DeviceContext6* this) { return ((D2D1_PRIMITIVE_BLEND (WINAPI*)(ID2D1DeviceContext6*))this->v->tbl[79])(this); }
static inline void                              ID2D1DeviceContext6_SetUnitMode                              (ID2D1DeviceContext6* this, D2D1_UNIT_MODE unitMode) { ((void (WINAPI*)(ID2D1DeviceContext6*, D2D1_UNIT_MODE))this->v->tbl[80])(this, unitMode); }
static inline D2D1_UNIT_MODE                    ID2D1DeviceContext6_GetUnitMode                              (ID2D1DeviceContext6* this) { return ((D2D1_UNIT_MODE (WINAPI*)(ID2D1DeviceContext6*))this->v->tbl[81])(this); }
static inline void                              ID2D1DeviceContext6_DrawGlyphRun1                            (ID2D1DeviceContext6* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, const DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription, ID2D1Brush* foregroundBrush, DWRITE_MEASURING_MODE measuringMode) { ((void (WINAPI*)(ID2D1DeviceContext6*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, const DWRITE_GLYPH_RUN_DESCRIPTION*, ID2D1Brush*, DWRITE_MEASURING_MODE))this->v->tbl[82])(this, baselineOrigin, glyphRun, glyphRunDescription, foregroundBrush, measuringMode); }
static inline void                              ID2D1DeviceContext6_DrawImage                                (ID2D1DeviceContext6* this, ID2D1Image* image, const D2D_POINT_2F* targetOffset, const D2D_RECT_F* imageRectangle, D2D1_INTERPOLATION_MODE interpolationMode, D2D1_COMPOSITE_MODE compositeMode) { ((void (WINAPI*)(ID2D1DeviceContext6*, ID2D1Image*, const D2D_POINT_2F*, const D2D_RECT_F*, D2D1_INTERPOLATION_MODE, D2D1_COMPOSITE_MODE))this->v->tbl[83])(this, image, targetOffset, imageRectangle, interpolationMode, compositeMode); }
static inline void                              ID2D1DeviceContext6_DrawGdiMetafile                          (ID2D1DeviceContext6* this, ID2D1GdiMetafile* gdiMetafile, const D2D_POINT_2F* targetOffset) { ((void (WINAPI*)(ID2D1DeviceContext6*, ID2D1GdiMetafile*, const D2D_POINT_2F*))this->v->tbl[84])(this, gdiMetafile, targetOffset); }
static inline void                              ID2D1DeviceContext6_DrawBitmap1                              (ID2D1DeviceContext6* this, ID2D1Bitmap* bitmap, const D2D_RECT_F* destinationRectangle, FLOAT opacity, D2D1_INTERPOLATION_MODE interpolationMode, const D2D_RECT_F* sourceRectangle, const D2D_MATRIX_4X4_F* perspectiveTransform) { ((void (WINAPI*)(ID2D1DeviceContext6*, ID2D1Bitmap*, const D2D_RECT_F*, FLOAT, D2D1_INTERPOLATION_MODE, const D2D_RECT_F*, const D2D_MATRIX_4X4_F*))this->v->tbl[85])(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle, perspectiveTransform); }
static inline void                              ID2D1DeviceContext6_PushLayer1                               (ID2D1DeviceContext6* this, const D2D1_LAYER_PARAMETERS1* layerParameters, ID2D1Layer* layer) { ((void (WINAPI*)(ID2D1DeviceContext6*, const D2D1_LAYER_PARAMETERS1*, ID2D1Layer*))this->v->tbl[86])(this, layerParameters, layer); }
static inline HRESULT                           ID2D1DeviceContext6_InvalidateEffectInputRectangle           (ID2D1DeviceContext6* this, ID2D1Effect* effect, UINT32 input, const D2D_RECT_F* inputRectangle) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, ID2D1Effect*, UINT32, const D2D_RECT_F*))this->v->tbl[87])(this, effect, input, inputRectangle); }
static inline HRESULT                           ID2D1DeviceContext6_GetEffectInvalidRectangleCount           (ID2D1DeviceContext6* this, ID2D1Effect* effect, UINT32* rectangleCount) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, ID2D1Effect*, UINT32*))this->v->tbl[88])(this, effect, rectangleCount); }
static inline HRESULT                           ID2D1DeviceContext6_GetEffectInvalidRectangles               (ID2D1DeviceContext6* this, ID2D1Effect* effect, D2D_RECT_F* rectangles, UINT32 rectanglesCount) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, ID2D1Effect*, D2D_RECT_F*, UINT32))this->v->tbl[89])(this, effect, rectangles, rectanglesCount); }
static inline HRESULT                           ID2D1DeviceContext6_GetEffectRequiredInputRectangles         (ID2D1DeviceContext6* this, ID2D1Effect* renderEffect, const D2D_RECT_F* renderImageRectangle, const D2D1_EFFECT_INPUT_DESCRIPTION* inputDescriptions, D2D_RECT_F* requiredInputRects, UINT32 inputCount) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, ID2D1Effect*, const D2D_RECT_F*, const D2D1_EFFECT_INPUT_DESCRIPTION*, D2D_RECT_F*, UINT32))this->v->tbl[90])(this, renderEffect, renderImageRectangle, inputDescriptions, requiredInputRects, inputCount); }
static inline void                              ID2D1DeviceContext6_FillOpacityMask1                         (ID2D1DeviceContext6* this, ID2D1Bitmap* opacityMask, ID2D1Brush* brush, const D2D_RECT_F* destinationRectangle, const D2D_RECT_F* sourceRectangle) { ((void (WINAPI*)(ID2D1DeviceContext6*, ID2D1Bitmap*, ID2D1Brush*, const D2D_RECT_F*, const D2D_RECT_F*))this->v->tbl[91])(this, opacityMask, brush, destinationRectangle, sourceRectangle); }
static inline HRESULT                           ID2D1DeviceContext6_CreateFilledGeometryRealization          (ID2D1DeviceContext6* this, ID2D1Geometry* geometry, FLOAT flatteningTolerance, ID2D1GeometryRealization** geometryRealization) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, ID2D1Geometry*, FLOAT, ID2D1GeometryRealization**))this->v->tbl[92])(this, geometry, flatteningTolerance, geometryRealization); }
static inline HRESULT                           ID2D1DeviceContext6_CreateStrokedGeometryRealization         (ID2D1DeviceContext6* this, ID2D1Geometry* geometry, FLOAT flatteningTolerance, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle, ID2D1GeometryRealization** geometryRealization) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, ID2D1Geometry*, FLOAT, FLOAT, ID2D1StrokeStyle*, ID2D1GeometryRealization**))this->v->tbl[93])(this, geometry, flatteningTolerance, strokeWidth, strokeStyle, geometryRealization); }
static inline void                              ID2D1DeviceContext6_DrawGeometryRealization                  (ID2D1DeviceContext6* this, ID2D1GeometryRealization* geometryRealization, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1DeviceContext6*, ID2D1GeometryRealization*, ID2D1Brush*))this->v->tbl[94])(this, geometryRealization, brush); }
static inline HRESULT                           ID2D1DeviceContext6_CreateInk                                (ID2D1DeviceContext6* this, const D2D1_INK_POINT* startPoint, ID2D1Ink** ink) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, const D2D1_INK_POINT*, ID2D1Ink**))this->v->tbl[95])(this, startPoint, ink); }
static inline HRESULT                           ID2D1DeviceContext6_CreateInkStyle                           (ID2D1DeviceContext6* this, const D2D1_INK_STYLE_PROPERTIES* inkStyleProperties, ID2D1InkStyle** inkStyle) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, const D2D1_INK_STYLE_PROPERTIES*, ID2D1InkStyle**))this->v->tbl[96])(this, inkStyleProperties, inkStyle); }
static inline HRESULT                           ID2D1DeviceContext6_CreateGradientMesh                       (ID2D1DeviceContext6* this, const D2D1_GRADIENT_MESH_PATCH* patches, UINT32 patchesCount, ID2D1GradientMesh** gradientMesh) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, const D2D1_GRADIENT_MESH_PATCH*, UINT32, ID2D1GradientMesh**))this->v->tbl[97])(this, patches, patchesCount, gradientMesh); }
static inline HRESULT                           ID2D1DeviceContext6_CreateImageSourceFromWic                 (ID2D1DeviceContext6* this, IWICBitmapSource* wicBitmapSource, D2D1_IMAGE_SOURCE_LOADING_OPTIONS loadingOptions, D2D1_ALPHA_MODE alphaMode, ID2D1ImageSourceFromWic** imageSource) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, IWICBitmapSource*, D2D1_IMAGE_SOURCE_LOADING_OPTIONS, D2D1_ALPHA_MODE, ID2D1ImageSourceFromWic**))this->v->tbl[98])(this, wicBitmapSource, loadingOptions, alphaMode, imageSource); }
static inline HRESULT                           ID2D1DeviceContext6_CreateLookupTable3D                      (ID2D1DeviceContext6* this, D2D1_BUFFER_PRECISION precision, const UINT32* extents, const UINT8* data, UINT32 dataCount, const UINT32* strides, ID2D1LookupTable3D** lookupTable) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, D2D1_BUFFER_PRECISION, const UINT32*, const UINT8*, UINT32, const UINT32*, ID2D1LookupTable3D**))this->v->tbl[99])(this, precision, extents, data, dataCount, strides, lookupTable); }
static inline HRESULT                           ID2D1DeviceContext6_CreateImageSourceFromDxgi                (ID2D1DeviceContext6* this, IDXGISurface** surfaces, UINT32 surfaceCount, DXGI_COLOR_SPACE_TYPE colorSpace, D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS options, ID2D1ImageSource** imageSource) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, IDXGISurface**, UINT32, DXGI_COLOR_SPACE_TYPE, D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS, ID2D1ImageSource**))this->v->tbl[100])(this, surfaces, surfaceCount, colorSpace, options, imageSource); }
static inline HRESULT                           ID2D1DeviceContext6_GetGradientMeshWorldBounds               (ID2D1DeviceContext6* this, ID2D1GradientMesh* gradientMesh, D2D_RECT_F* pBounds) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, ID2D1GradientMesh*, D2D_RECT_F*))this->v->tbl[101])(this, gradientMesh, pBounds); }
static inline void                              ID2D1DeviceContext6_DrawInk                                  (ID2D1DeviceContext6* this, ID2D1Ink* ink, ID2D1Brush* brush, ID2D1InkStyle* inkStyle) { ((void (WINAPI*)(ID2D1DeviceContext6*, ID2D1Ink*, ID2D1Brush*, ID2D1InkStyle*))this->v->tbl[102])(this, ink, brush, inkStyle); }
static inline void                              ID2D1DeviceContext6_DrawGradientMesh                         (ID2D1DeviceContext6* this, ID2D1GradientMesh* gradientMesh) { ((void (WINAPI*)(ID2D1DeviceContext6*, ID2D1GradientMesh*))this->v->tbl[103])(this, gradientMesh); }
static inline void                              ID2D1DeviceContext6_DrawGdiMetafile1                         (ID2D1DeviceContext6* this, ID2D1GdiMetafile* gdiMetafile, const D2D_RECT_F* destinationRectangle, const D2D_RECT_F* sourceRectangle) { ((void (WINAPI*)(ID2D1DeviceContext6*, ID2D1GdiMetafile*, const D2D_RECT_F*, const D2D_RECT_F*))this->v->tbl[104])(this, gdiMetafile, destinationRectangle, sourceRectangle); }
static inline HRESULT                           ID2D1DeviceContext6_CreateTransformedImageSource             (ID2D1DeviceContext6* this, ID2D1ImageSource* imageSource, const D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES* properties, ID2D1TransformedImageSource** transformedImageSource) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, ID2D1ImageSource*, const D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES*, ID2D1TransformedImageSource**))this->v->tbl[105])(this, imageSource, properties, transformedImageSource); }
static inline HRESULT                           ID2D1DeviceContext6_CreateSpriteBatch                        (ID2D1DeviceContext6* this, ID2D1SpriteBatch** spriteBatch) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, ID2D1SpriteBatch**))this->v->tbl[106])(this, spriteBatch); }
static inline void                              ID2D1DeviceContext6_DrawSpriteBatch                          (ID2D1DeviceContext6* this, ID2D1SpriteBatch* spriteBatch, UINT32 startIndex, UINT32 spriteCount, ID2D1Bitmap* bitmap, D2D1_BITMAP_INTERPOLATION_MODE interpolationMode, D2D1_SPRITE_OPTIONS spriteOptions) { ((void (WINAPI*)(ID2D1DeviceContext6*, ID2D1SpriteBatch*, UINT32, UINT32, ID2D1Bitmap*, D2D1_BITMAP_INTERPOLATION_MODE, D2D1_SPRITE_OPTIONS))this->v->tbl[107])(this, spriteBatch, startIndex, spriteCount, bitmap, interpolationMode, spriteOptions); }
static inline HRESULT                           ID2D1DeviceContext6_CreateSvgGlyphStyle                      (ID2D1DeviceContext6* this, ID2D1SvgGlyphStyle** svgGlyphStyle) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, ID2D1SvgGlyphStyle**))this->v->tbl[108])(this, svgGlyphStyle); }
static inline void                              ID2D1DeviceContext6_DrawText1                                (ID2D1DeviceContext6* this, const WCHAR* string, UINT32 stringLength, IDWriteTextFormat* textFormat, const D2D_RECT_F* layoutRect, ID2D1Brush* defaultFillBrush, ID2D1SvgGlyphStyle* svgGlyphStyle, UINT32 colorPaletteIndex, D2D1_DRAW_TEXT_OPTIONS options, DWRITE_MEASURING_MODE measuringMode) { ((void (WINAPI*)(ID2D1DeviceContext6*, const WCHAR*, UINT32, IDWriteTextFormat*, const D2D_RECT_F*, ID2D1Brush*, ID2D1SvgGlyphStyle*, UINT32, D2D1_DRAW_TEXT_OPTIONS, DWRITE_MEASURING_MODE))this->v->tbl[109])(this, string, stringLength, textFormat, layoutRect, defaultFillBrush, svgGlyphStyle, colorPaletteIndex, options, measuringMode); }
static inline void                              ID2D1DeviceContext6_DrawTextLayout1                          (ID2D1DeviceContext6* this, D2D_POINT_2F origin, IDWriteTextLayout* textLayout, ID2D1Brush* defaultFillBrush, ID2D1SvgGlyphStyle* svgGlyphStyle, UINT32 colorPaletteIndex, D2D1_DRAW_TEXT_OPTIONS options) { ((void (WINAPI*)(ID2D1DeviceContext6*, D2D_POINT_2F, IDWriteTextLayout*, ID2D1Brush*, ID2D1SvgGlyphStyle*, UINT32, D2D1_DRAW_TEXT_OPTIONS))this->v->tbl[110])(this, origin, textLayout, defaultFillBrush, svgGlyphStyle, colorPaletteIndex, options); }
static inline void                              ID2D1DeviceContext6_DrawColorBitmapGlyphRun                  (ID2D1DeviceContext6* this, enum DWRITE_GLYPH_IMAGE_FORMATS glyphImageFormat, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, DWRITE_MEASURING_MODE measuringMode, D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION bitmapSnapOption) { ((void (WINAPI*)(ID2D1DeviceContext6*, enum DWRITE_GLYPH_IMAGE_FORMATS, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, DWRITE_MEASURING_MODE, D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION))this->v->tbl[111])(this, glyphImageFormat, baselineOrigin, glyphRun, measuringMode, bitmapSnapOption); }
static inline void                              ID2D1DeviceContext6_DrawSvgGlyphRun                          (ID2D1DeviceContext6* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, ID2D1Brush* defaultFillBrush, ID2D1SvgGlyphStyle* svgGlyphStyle, UINT32 colorPaletteIndex, DWRITE_MEASURING_MODE measuringMode) { ((void (WINAPI*)(ID2D1DeviceContext6*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, ID2D1Brush*, ID2D1SvgGlyphStyle*, UINT32, DWRITE_MEASURING_MODE))this->v->tbl[112])(this, baselineOrigin, glyphRun, defaultFillBrush, svgGlyphStyle, colorPaletteIndex, measuringMode); }
static inline HRESULT                           ID2D1DeviceContext6_GetColorBitmapGlyphImage                 (ID2D1DeviceContext6* this, enum DWRITE_GLYPH_IMAGE_FORMATS glyphImageFormat, D2D_POINT_2F glyphOrigin, IDWriteFontFace* fontFace, FLOAT fontEmSize, UINT16 glyphIndex, BOOL isSideways, const D2D_MATRIX_3X2_F* worldTransform, FLOAT dpiX, FLOAT dpiY, D2D_MATRIX_3X2_F* glyphTransform, ID2D1Image** glyphImage) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, enum DWRITE_GLYPH_IMAGE_FORMATS, D2D_POINT_2F, IDWriteFontFace*, FLOAT, UINT16, BOOL, const D2D_MATRIX_3X2_F*, FLOAT, FLOAT, D2D_MATRIX_3X2_F*, ID2D1Image**))this->v->tbl[113])(this, glyphImageFormat, glyphOrigin, fontFace, fontEmSize, glyphIndex, isSideways, worldTransform, dpiX, dpiY, glyphTransform, glyphImage); }
static inline HRESULT                           ID2D1DeviceContext6_GetSvgGlyphImage                         (ID2D1DeviceContext6* this, D2D_POINT_2F glyphOrigin, IDWriteFontFace* fontFace, FLOAT fontEmSize, UINT16 glyphIndex, BOOL isSideways, const D2D_MATRIX_3X2_F* worldTransform, ID2D1Brush* defaultFillBrush, ID2D1SvgGlyphStyle* svgGlyphStyle, UINT32 colorPaletteIndex, D2D_MATRIX_3X2_F* glyphTransform, ID2D1CommandList** glyphImage) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, D2D_POINT_2F, IDWriteFontFace*, FLOAT, UINT16, BOOL, const D2D_MATRIX_3X2_F*, ID2D1Brush*, ID2D1SvgGlyphStyle*, UINT32, D2D_MATRIX_3X2_F*, ID2D1CommandList**))this->v->tbl[114])(this, glyphOrigin, fontFace, fontEmSize, glyphIndex, isSideways, worldTransform, defaultFillBrush, svgGlyphStyle, colorPaletteIndex, glyphTransform, glyphImage); }
static inline HRESULT                           ID2D1DeviceContext6_CreateSvgDocument                        (ID2D1DeviceContext6* this, IStream* inputXmlStream, D2D_SIZE_F viewportSize, ID2D1SvgDocument** svgDocument) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, IStream*, D2D_SIZE_F, ID2D1SvgDocument**))this->v->tbl[115])(this, inputXmlStream, viewportSize, svgDocument); }
static inline void                              ID2D1DeviceContext6_DrawSvgDocument                          (ID2D1DeviceContext6* this, ID2D1SvgDocument* svgDocument) { ((void (WINAPI*)(ID2D1DeviceContext6*, ID2D1SvgDocument*))this->v->tbl[116])(this, svgDocument); }
static inline HRESULT                           ID2D1DeviceContext6_CreateColorContextFromDxgiColorSpace     (ID2D1DeviceContext6* this, DXGI_COLOR_SPACE_TYPE colorSpace, ID2D1ColorContext1** colorContext) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, DXGI_COLOR_SPACE_TYPE, ID2D1ColorContext1**))this->v->tbl[117])(this, colorSpace, colorContext); }
static inline HRESULT                           ID2D1DeviceContext6_CreateColorContextFromSimpleColorProfile (ID2D1DeviceContext6* this, const D2D1_SIMPLE_COLOR_PROFILE* simpleProfile, ID2D1ColorContext1** colorContext) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext6*, const D2D1_SIMPLE_COLOR_PROFILE*, ID2D1ColorContext1**))this->v->tbl[118])(this, simpleProfile, colorContext); }
static inline void                              ID2D1DeviceContext6_BlendImage                               (ID2D1DeviceContext6* this, ID2D1Image* image, D2D1_BLEND_MODE blendMode, const D2D_POINT_2F* targetOffset, const D2D_RECT_F* imageRectangle, D2D1_INTERPOLATION_MODE interpolationMode) { ((void (WINAPI*)(ID2D1DeviceContext6*, ID2D1Image*, D2D1_BLEND_MODE, const D2D_POINT_2F*, const D2D_RECT_F*, D2D1_INTERPOLATION_MODE))this->v->tbl[119])(this, image, blendMode, targetOffset, imageRectangle, interpolationMode); }

static inline HRESULT                           ID2D1DeviceContext7_QueryInterface                           (ID2D1DeviceContext7* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1DeviceContext7_AddRef                                   (ID2D1DeviceContext7* this) { return ((UINT32 (WINAPI*)(ID2D1DeviceContext7*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1DeviceContext7_Release                                  (ID2D1DeviceContext7* this) { return ((UINT32 (WINAPI*)(ID2D1DeviceContext7*))this->v->tbl[2])(this); }
static inline void                              ID2D1DeviceContext7_GetFactory                               (ID2D1DeviceContext7* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1DeviceContext7*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline HRESULT                           ID2D1DeviceContext7_CreateBitmap                             (ID2D1DeviceContext7* this, D2D_SIZE_U size, const void* srcData, UINT32 pitch, const D2D1_BITMAP_PROPERTIES* bitmapProperties, ID2D1Bitmap** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, D2D_SIZE_U, const void*, UINT32, const D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap**))this->v->tbl[4])(this, size, srcData, pitch, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext7_CreateBitmapFromWicBitmap                (ID2D1DeviceContext7* this, IWICBitmapSource* wicBitmapSource, const D2D1_BITMAP_PROPERTIES* bitmapProperties, ID2D1Bitmap** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, IWICBitmapSource*, const D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap**))this->v->tbl[5])(this, wicBitmapSource, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext7_CreateSharedBitmap                       (ID2D1DeviceContext7* this, const GUID* riid, void* data, const D2D1_BITMAP_PROPERTIES* bitmapProperties, ID2D1Bitmap** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, const GUID*, void*, const D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap**))this->v->tbl[6])(this, riid, data, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext7_CreateBitmapBrush                        (ID2D1DeviceContext7* this, ID2D1Bitmap* bitmap, const D2D1_BITMAP_BRUSH_PROPERTIES* bitmapBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1BitmapBrush** bitmapBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, ID2D1Bitmap*, const D2D1_BITMAP_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1BitmapBrush**))this->v->tbl[7])(this, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush); }
static inline HRESULT                           ID2D1DeviceContext7_CreateSolidColorBrush                    (ID2D1DeviceContext7* this, const D2D1_COLOR_F* color, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1SolidColorBrush** solidColorBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, const D2D1_COLOR_F*, const D2D1_BRUSH_PROPERTIES*, ID2D1SolidColorBrush**))this->v->tbl[8])(this, color, brushProperties, solidColorBrush); }
static inline HRESULT                           ID2D1DeviceContext7_CreateGradientStopCollection             (ID2D1DeviceContext7* this, const D2D1_GRADIENT_STOP* gradientStops, UINT32 gradientStopsCount, D2D1_GAMMA colorInterpolationGamma, D2D1_EXTEND_MODE extendMode, ID2D1GradientStopCollection** gradientStopCollection) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, const D2D1_GRADIENT_STOP*, UINT32, D2D1_GAMMA, D2D1_EXTEND_MODE, ID2D1GradientStopCollection**))this->v->tbl[9])(this, gradientStops, gradientStopsCount, colorInterpolationGamma, extendMode, gradientStopCollection); }
static inline HRESULT                           ID2D1DeviceContext7_CreateLinearGradientBrush                (ID2D1DeviceContext7* this, const D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES* linearGradientBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1GradientStopCollection* gradientStopCollection, ID2D1LinearGradientBrush** linearGradientBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, const D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection*, ID2D1LinearGradientBrush**))this->v->tbl[10])(this, linearGradientBrushProperties, brushProperties, gradientStopCollection, linearGradientBrush); }
static inline HRESULT                           ID2D1DeviceContext7_CreateRadialGradientBrush                (ID2D1DeviceContext7* this, const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES* radialGradientBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1GradientStopCollection* gradientStopCollection, ID2D1RadialGradientBrush** radialGradientBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection*, ID2D1RadialGradientBrush**))this->v->tbl[11])(this, radialGradientBrushProperties, brushProperties, gradientStopCollection, radialGradientBrush); }
static inline HRESULT                           ID2D1DeviceContext7_CreateCompatibleRenderTarget             (ID2D1DeviceContext7* this, const D2D_SIZE_F* desiredSize, const D2D_SIZE_U* desiredPixelSize, const D2D1_PIXEL_FORMAT* desiredFormat, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS options, ID2D1BitmapRenderTarget** bitmapRenderTarget) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, const D2D_SIZE_F*, const D2D_SIZE_U*, const D2D1_PIXEL_FORMAT*, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, ID2D1BitmapRenderTarget**))this->v->tbl[12])(this, desiredSize, desiredPixelSize, desiredFormat, options, bitmapRenderTarget); }
static inline HRESULT                           ID2D1DeviceContext7_CreateLayer                              (ID2D1DeviceContext7* this, const D2D_SIZE_F* size, ID2D1Layer** layer) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, const D2D_SIZE_F*, ID2D1Layer**))this->v->tbl[13])(this, size, layer); }
static inline HRESULT                           ID2D1DeviceContext7_CreateMesh                               (ID2D1DeviceContext7* this, ID2D1Mesh** mesh) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, ID2D1Mesh**))this->v->tbl[14])(this, mesh); }
static inline void                              ID2D1DeviceContext7_DrawLine                                 (ID2D1DeviceContext7* this, D2D_POINT_2F point0, D2D_POINT_2F point1, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DeviceContext7*, D2D_POINT_2F, D2D_POINT_2F, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[15])(this, point0, point1, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DeviceContext7_DrawRectangle                            (ID2D1DeviceContext7* this, const D2D_RECT_F* rect, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DeviceContext7*, const D2D_RECT_F*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[16])(this, rect, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DeviceContext7_FillRectangle                            (ID2D1DeviceContext7* this, const D2D_RECT_F* rect, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1DeviceContext7*, const D2D_RECT_F*, ID2D1Brush*))this->v->tbl[17])(this, rect, brush); }
static inline void                              ID2D1DeviceContext7_DrawRoundedRectangle                     (ID2D1DeviceContext7* this, const D2D1_ROUNDED_RECT* roundedRect, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DeviceContext7*, const D2D1_ROUNDED_RECT*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[18])(this, roundedRect, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DeviceContext7_FillRoundedRectangle                     (ID2D1DeviceContext7* this, const D2D1_ROUNDED_RECT* roundedRect, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1DeviceContext7*, const D2D1_ROUNDED_RECT*, ID2D1Brush*))this->v->tbl[19])(this, roundedRect, brush); }
static inline void                              ID2D1DeviceContext7_DrawEllipse                              (ID2D1DeviceContext7* this, const D2D1_ELLIPSE* ellipse, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DeviceContext7*, const D2D1_ELLIPSE*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[20])(this, ellipse, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DeviceContext7_FillEllipse                              (ID2D1DeviceContext7* this, const D2D1_ELLIPSE* ellipse, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1DeviceContext7*, const D2D1_ELLIPSE*, ID2D1Brush*))this->v->tbl[21])(this, ellipse, brush); }
static inline void                              ID2D1DeviceContext7_DrawGeometry                             (ID2D1DeviceContext7* this, ID2D1Geometry* geometry, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1DeviceContext7*, ID2D1Geometry*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[22])(this, geometry, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1DeviceContext7_FillGeometry                             (ID2D1DeviceContext7* this, ID2D1Geometry* geometry, ID2D1Brush* brush, ID2D1Brush* opacityBrush) { ((void (WINAPI*)(ID2D1DeviceContext7*, ID2D1Geometry*, ID2D1Brush*, ID2D1Brush*))this->v->tbl[23])(this, geometry, brush, opacityBrush); }
static inline void                              ID2D1DeviceContext7_FillMesh                                 (ID2D1DeviceContext7* this, ID2D1Mesh* mesh, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1DeviceContext7*, ID2D1Mesh*, ID2D1Brush*))this->v->tbl[24])(this, mesh, brush); }
static inline void                              ID2D1DeviceContext7_FillOpacityMask                          (ID2D1DeviceContext7* this, ID2D1Bitmap* opacityMask, ID2D1Brush* brush, D2D1_OPACITY_MASK_CONTENT content, const D2D_RECT_F* destinationRectangle, const D2D_RECT_F* sourceRectangle) { ((void (WINAPI*)(ID2D1DeviceContext7*, ID2D1Bitmap*, ID2D1Brush*, D2D1_OPACITY_MASK_CONTENT, const D2D_RECT_F*, const D2D_RECT_F*))this->v->tbl[25])(this, opacityMask, brush, content, destinationRectangle, sourceRectangle); }
static inline void                              ID2D1DeviceContext7_DrawBitmap                               (ID2D1DeviceContext7* this, ID2D1Bitmap* bitmap, const D2D_RECT_F* destinationRectangle, FLOAT opacity, D2D1_BITMAP_INTERPOLATION_MODE interpolationMode, const D2D_RECT_F* sourceRectangle) { ((void (WINAPI*)(ID2D1DeviceContext7*, ID2D1Bitmap*, const D2D_RECT_F*, FLOAT, D2D1_BITMAP_INTERPOLATION_MODE, const D2D_RECT_F*))this->v->tbl[26])(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle); }
static inline void                              ID2D1DeviceContext7_DrawText                                 (ID2D1DeviceContext7* this, const WCHAR* string, UINT32 stringLength, IDWriteTextFormat* textFormat, const D2D_RECT_F* layoutRect, ID2D1Brush* defaultFillBrush, D2D1_DRAW_TEXT_OPTIONS options, DWRITE_MEASURING_MODE measuringMode) { ((void (WINAPI*)(ID2D1DeviceContext7*, const WCHAR*, UINT32, IDWriteTextFormat*, const D2D_RECT_F*, ID2D1Brush*, D2D1_DRAW_TEXT_OPTIONS, DWRITE_MEASURING_MODE))this->v->tbl[27])(this, string, stringLength, textFormat, layoutRect, defaultFillBrush, options, measuringMode); }
static inline void                              ID2D1DeviceContext7_DrawTextLayout                           (ID2D1DeviceContext7* this, D2D_POINT_2F origin, IDWriteTextLayout* textLayout, ID2D1Brush* defaultFillBrush, D2D1_DRAW_TEXT_OPTIONS options) { ((void (WINAPI*)(ID2D1DeviceContext7*, D2D_POINT_2F, IDWriteTextLayout*, ID2D1Brush*, D2D1_DRAW_TEXT_OPTIONS))this->v->tbl[28])(this, origin, textLayout, defaultFillBrush, options); }
static inline void                              ID2D1DeviceContext7_DrawGlyphRun                             (ID2D1DeviceContext7* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, ID2D1Brush* foregroundBrush, DWRITE_MEASURING_MODE measuringMode) { ((void (WINAPI*)(ID2D1DeviceContext7*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, ID2D1Brush*, DWRITE_MEASURING_MODE))this->v->tbl[29])(this, baselineOrigin, glyphRun, foregroundBrush, measuringMode); }
static inline void                              ID2D1DeviceContext7_SetTransform                             (ID2D1DeviceContext7* this, const D2D_MATRIX_3X2_F* transform) { ((void (WINAPI*)(ID2D1DeviceContext7*, const D2D_MATRIX_3X2_F*))this->v->tbl[30])(this, transform); }
static inline void                              ID2D1DeviceContext7_GetTransform                             (ID2D1DeviceContext7* this, D2D_MATRIX_3X2_F* transform) { ((void (WINAPI*)(ID2D1DeviceContext7*, D2D_MATRIX_3X2_F*))this->v->tbl[31])(this, transform); }
static inline void                              ID2D1DeviceContext7_SetAntialiasMode                         (ID2D1DeviceContext7* this, D2D1_ANTIALIAS_MODE antialiasMode) { ((void (WINAPI*)(ID2D1DeviceContext7*, D2D1_ANTIALIAS_MODE))this->v->tbl[32])(this, antialiasMode); }
static inline D2D1_ANTIALIAS_MODE               ID2D1DeviceContext7_GetAntialiasMode                         (ID2D1DeviceContext7* this) { return ((D2D1_ANTIALIAS_MODE (WINAPI*)(ID2D1DeviceContext7*))this->v->tbl[33])(this); }
static inline void                              ID2D1DeviceContext7_SetTextAntialiasMode                     (ID2D1DeviceContext7* this, D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode) { ((void (WINAPI*)(ID2D1DeviceContext7*, D2D1_TEXT_ANTIALIAS_MODE))this->v->tbl[34])(this, textAntialiasMode); }
static inline D2D1_TEXT_ANTIALIAS_MODE          ID2D1DeviceContext7_GetTextAntialiasMode                     (ID2D1DeviceContext7* this) { return ((D2D1_TEXT_ANTIALIAS_MODE (WINAPI*)(ID2D1DeviceContext7*))this->v->tbl[35])(this); }
static inline void                              ID2D1DeviceContext7_SetTextRenderingParams                   (ID2D1DeviceContext7* this, IDWriteRenderingParams* textRenderingParams) { ((void (WINAPI*)(ID2D1DeviceContext7*, IDWriteRenderingParams*))this->v->tbl[36])(this, textRenderingParams); }
static inline void                              ID2D1DeviceContext7_GetTextRenderingParams                   (ID2D1DeviceContext7* this, IDWriteRenderingParams** textRenderingParams) { ((void (WINAPI*)(ID2D1DeviceContext7*, IDWriteRenderingParams**))this->v->tbl[37])(this, textRenderingParams); }
static inline void                              ID2D1DeviceContext7_SetTags                                  (ID2D1DeviceContext7* this, UINT64 tag1, UINT64 tag2) { ((void (WINAPI*)(ID2D1DeviceContext7*, UINT64, UINT64))this->v->tbl[38])(this, tag1, tag2); }
static inline void                              ID2D1DeviceContext7_GetTags                                  (ID2D1DeviceContext7* this, UINT64* tag1, UINT64* tag2) { ((void (WINAPI*)(ID2D1DeviceContext7*, UINT64*, UINT64*))this->v->tbl[39])(this, tag1, tag2); }
static inline void                              ID2D1DeviceContext7_PushLayer                                (ID2D1DeviceContext7* this, const D2D1_LAYER_PARAMETERS* layerParameters, ID2D1Layer* layer) { ((void (WINAPI*)(ID2D1DeviceContext7*, const D2D1_LAYER_PARAMETERS*, ID2D1Layer*))this->v->tbl[40])(this, layerParameters, layer); }
static inline void                              ID2D1DeviceContext7_PopLayer                                 (ID2D1DeviceContext7* this) { ((void (WINAPI*)(ID2D1DeviceContext7*))this->v->tbl[41])(this); }
static inline HRESULT                           ID2D1DeviceContext7_Flush                                    (ID2D1DeviceContext7* this, UINT64* tag1, UINT64* tag2) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, UINT64*, UINT64*))this->v->tbl[42])(this, tag1, tag2); }
static inline void                              ID2D1DeviceContext7_SaveDrawingState                         (ID2D1DeviceContext7* this, ID2D1DrawingStateBlock* drawingStateBlock) { ((void (WINAPI*)(ID2D1DeviceContext7*, ID2D1DrawingStateBlock*))this->v->tbl[43])(this, drawingStateBlock); }
static inline void                              ID2D1DeviceContext7_RestoreDrawingState                      (ID2D1DeviceContext7* this, ID2D1DrawingStateBlock* drawingStateBlock) { ((void (WINAPI*)(ID2D1DeviceContext7*, ID2D1DrawingStateBlock*))this->v->tbl[44])(this, drawingStateBlock); }
static inline void                              ID2D1DeviceContext7_PushAxisAlignedClip                      (ID2D1DeviceContext7* this, const D2D_RECT_F* clipRect, D2D1_ANTIALIAS_MODE antialiasMode) { ((void (WINAPI*)(ID2D1DeviceContext7*, const D2D_RECT_F*, D2D1_ANTIALIAS_MODE))this->v->tbl[45])(this, clipRect, antialiasMode); }
static inline void                              ID2D1DeviceContext7_PopAxisAlignedClip                       (ID2D1DeviceContext7* this) { ((void (WINAPI*)(ID2D1DeviceContext7*))this->v->tbl[46])(this); }
static inline void                              ID2D1DeviceContext7_Clear                                    (ID2D1DeviceContext7* this, const D2D1_COLOR_F* clearColor) { ((void (WINAPI*)(ID2D1DeviceContext7*, const D2D1_COLOR_F*))this->v->tbl[47])(this, clearColor); }
static inline void                              ID2D1DeviceContext7_BeginDraw                                (ID2D1DeviceContext7* this) { ((void (WINAPI*)(ID2D1DeviceContext7*))this->v->tbl[48])(this); }
static inline HRESULT                           ID2D1DeviceContext7_EndDraw                                  (ID2D1DeviceContext7* this, UINT64* tag1, UINT64* tag2) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, UINT64*, UINT64*))this->v->tbl[49])(this, tag1, tag2); }
static inline D2D1_PIXEL_FORMAT                 ID2D1DeviceContext7_GetPixelFormat                           (ID2D1DeviceContext7* this) { D2D1_PIXEL_FORMAT _return; ((void (WINAPI*)(ID2D1DeviceContext7*, D2D1_PIXEL_FORMAT*))this->v->tbl[50])(this, &_return); return _return; }
static inline void                              ID2D1DeviceContext7_SetDpi                                   (ID2D1DeviceContext7* this, FLOAT dpiX, FLOAT dpiY) { ((void (WINAPI*)(ID2D1DeviceContext7*, FLOAT, FLOAT))this->v->tbl[51])(this, dpiX, dpiY); }
static inline void                              ID2D1DeviceContext7_GetDpi                                   (ID2D1DeviceContext7* this, FLOAT* dpiX, FLOAT* dpiY) { ((void (WINAPI*)(ID2D1DeviceContext7*, FLOAT*, FLOAT*))this->v->tbl[52])(this, dpiX, dpiY); }
static inline D2D_SIZE_F                        ID2D1DeviceContext7_GetSize                                  (ID2D1DeviceContext7* this) { D2D_SIZE_F _return; ((void (WINAPI*)(ID2D1DeviceContext7*, D2D_SIZE_F*))this->v->tbl[53])(this, &_return); return _return; }
static inline D2D_SIZE_U                        ID2D1DeviceContext7_GetPixelSize                             (ID2D1DeviceContext7* this) { D2D_SIZE_U _return; ((void (WINAPI*)(ID2D1DeviceContext7*, D2D_SIZE_U*))this->v->tbl[54])(this, &_return); return _return; }
static inline UINT32                            ID2D1DeviceContext7_GetMaximumBitmapSize                     (ID2D1DeviceContext7* this) { return ((UINT32 (WINAPI*)(ID2D1DeviceContext7*))this->v->tbl[55])(this); }
static inline BOOL                              ID2D1DeviceContext7_IsSupported                              (ID2D1DeviceContext7* this, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties) { return ((BOOL (WINAPI*)(ID2D1DeviceContext7*, const D2D1_RENDER_TARGET_PROPERTIES*))this->v->tbl[56])(this, renderTargetProperties); }
static inline HRESULT                           ID2D1DeviceContext7_CreateBitmap1                            (ID2D1DeviceContext7* this, D2D_SIZE_U size, const void* sourceData, UINT32 pitch, const D2D1_BITMAP_PROPERTIES1* bitmapProperties, ID2D1Bitmap1** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, D2D_SIZE_U, const void*, UINT32, const D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1**))this->v->tbl[57])(this, size, sourceData, pitch, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext7_CreateBitmapFromWicBitmap1               (ID2D1DeviceContext7* this, IWICBitmapSource* wicBitmapSource, const D2D1_BITMAP_PROPERTIES1* bitmapProperties, ID2D1Bitmap1** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, IWICBitmapSource*, const D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1**))this->v->tbl[58])(this, wicBitmapSource, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext7_CreateColorContext                       (ID2D1DeviceContext7* this, D2D1_COLOR_SPACE space, const UINT8* profile, UINT32 profileSize, ID2D1ColorContext** colorContext) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, D2D1_COLOR_SPACE, const UINT8*, UINT32, ID2D1ColorContext**))this->v->tbl[59])(this, space, profile, profileSize, colorContext); }
static inline HRESULT                           ID2D1DeviceContext7_CreateColorContextFromFilename           (ID2D1DeviceContext7* this, const WCHAR* filename, ID2D1ColorContext** colorContext) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, const WCHAR*, ID2D1ColorContext**))this->v->tbl[60])(this, filename, colorContext); }
static inline HRESULT                           ID2D1DeviceContext7_CreateColorContextFromWicColorContext    (ID2D1DeviceContext7* this, IWICColorContext* wicColorContext, ID2D1ColorContext** colorContext) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, IWICColorContext*, ID2D1ColorContext**))this->v->tbl[61])(this, wicColorContext, colorContext); }
static inline HRESULT                           ID2D1DeviceContext7_CreateBitmapFromDxgiSurface              (ID2D1DeviceContext7* this, IDXGISurface* surface, const D2D1_BITMAP_PROPERTIES1* bitmapProperties, ID2D1Bitmap1** bitmap) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, IDXGISurface*, const D2D1_BITMAP_PROPERTIES1*, ID2D1Bitmap1**))this->v->tbl[62])(this, surface, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1DeviceContext7_CreateEffect                             (ID2D1DeviceContext7* this, const GUID* effectId, ID2D1Effect** effect) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, const GUID*, ID2D1Effect**))this->v->tbl[63])(this, effectId, effect); }
static inline HRESULT                           ID2D1DeviceContext7_CreateGradientStopCollection1            (ID2D1DeviceContext7* this, const D2D1_GRADIENT_STOP* straightAlphaGradientStops, UINT32 straightAlphaGradientStopsCount, D2D1_COLOR_SPACE preInterpolationSpace, D2D1_COLOR_SPACE postInterpolationSpace, D2D1_BUFFER_PRECISION bufferPrecision, D2D1_EXTEND_MODE extendMode, D2D1_COLOR_INTERPOLATION_MODE colorInterpolationMode, ID2D1GradientStopCollection1** gradientStopCollection1) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, const D2D1_GRADIENT_STOP*, UINT32, D2D1_COLOR_SPACE, D2D1_COLOR_SPACE, D2D1_BUFFER_PRECISION, D2D1_EXTEND_MODE, D2D1_COLOR_INTERPOLATION_MODE, ID2D1GradientStopCollection1**))this->v->tbl[64])(this, straightAlphaGradientStops, straightAlphaGradientStopsCount, preInterpolationSpace, postInterpolationSpace, bufferPrecision, extendMode, colorInterpolationMode, gradientStopCollection1); }
static inline HRESULT                           ID2D1DeviceContext7_CreateImageBrush                         (ID2D1DeviceContext7* this, ID2D1Image* image, const D2D1_IMAGE_BRUSH_PROPERTIES* imageBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1ImageBrush** imageBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, ID2D1Image*, const D2D1_IMAGE_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1ImageBrush**))this->v->tbl[65])(this, image, imageBrushProperties, brushProperties, imageBrush); }
static inline HRESULT                           ID2D1DeviceContext7_CreateBitmapBrush1                       (ID2D1DeviceContext7* this, ID2D1Bitmap* bitmap, const D2D1_BITMAP_BRUSH_PROPERTIES1* bitmapBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1BitmapBrush1** bitmapBrush) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, ID2D1Bitmap*, const D2D1_BITMAP_BRUSH_PROPERTIES1*, const D2D1_BRUSH_PROPERTIES*, ID2D1BitmapBrush1**))this->v->tbl[66])(this, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush); }
static inline HRESULT                           ID2D1DeviceContext7_CreateCommandList                        (ID2D1DeviceContext7* this, ID2D1CommandList** commandList) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, ID2D1CommandList**))this->v->tbl[67])(this, commandList); }
static inline BOOL                              ID2D1DeviceContext7_IsDxgiFormatSupported                    (ID2D1DeviceContext7* this, DXGI_FORMAT format) { return ((BOOL (WINAPI*)(ID2D1DeviceContext7*, DXGI_FORMAT))this->v->tbl[68])(this, format); }
static inline BOOL                              ID2D1DeviceContext7_IsBufferPrecisionSupported               (ID2D1DeviceContext7* this, D2D1_BUFFER_PRECISION bufferPrecision) { return ((BOOL (WINAPI*)(ID2D1DeviceContext7*, D2D1_BUFFER_PRECISION))this->v->tbl[69])(this, bufferPrecision); }
static inline HRESULT                           ID2D1DeviceContext7_GetImageLocalBounds                      (ID2D1DeviceContext7* this, ID2D1Image* image, D2D_RECT_F* localBounds) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, ID2D1Image*, D2D_RECT_F*))this->v->tbl[70])(this, image, localBounds); }
static inline HRESULT                           ID2D1DeviceContext7_GetImageWorldBounds                      (ID2D1DeviceContext7* this, ID2D1Image* image, D2D_RECT_F* worldBounds) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, ID2D1Image*, D2D_RECT_F*))this->v->tbl[71])(this, image, worldBounds); }
static inline HRESULT                           ID2D1DeviceContext7_GetGlyphRunWorldBounds                   (ID2D1DeviceContext7* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, DWRITE_MEASURING_MODE measuringMode, D2D_RECT_F* bounds) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, DWRITE_MEASURING_MODE, D2D_RECT_F*))this->v->tbl[72])(this, baselineOrigin, glyphRun, measuringMode, bounds); }
static inline void                              ID2D1DeviceContext7_GetDevice                                (ID2D1DeviceContext7* this, ID2D1Device** device) { ((void (WINAPI*)(ID2D1DeviceContext7*, ID2D1Device**))this->v->tbl[73])(this, device); }
static inline void                              ID2D1DeviceContext7_SetTarget                                (ID2D1DeviceContext7* this, ID2D1Image* image) { ((void (WINAPI*)(ID2D1DeviceContext7*, ID2D1Image*))this->v->tbl[74])(this, image); }
static inline void                              ID2D1DeviceContext7_GetTarget                                (ID2D1DeviceContext7* this, ID2D1Image** image) { ((void (WINAPI*)(ID2D1DeviceContext7*, ID2D1Image**))this->v->tbl[75])(this, image); }
static inline void                              ID2D1DeviceContext7_SetRenderingControls                     (ID2D1DeviceContext7* this, const D2D1_RENDERING_CONTROLS* renderingControls) { ((void (WINAPI*)(ID2D1DeviceContext7*, const D2D1_RENDERING_CONTROLS*))this->v->tbl[76])(this, renderingControls); }
static inline void                              ID2D1DeviceContext7_GetRenderingControls                     (ID2D1DeviceContext7* this, D2D1_RENDERING_CONTROLS* renderingControls) { ((void (WINAPI*)(ID2D1DeviceContext7*, D2D1_RENDERING_CONTROLS*))this->v->tbl[77])(this, renderingControls); }
static inline void                              ID2D1DeviceContext7_SetPrimitiveBlend                        (ID2D1DeviceContext7* this, D2D1_PRIMITIVE_BLEND primitiveBlend) { ((void (WINAPI*)(ID2D1DeviceContext7*, D2D1_PRIMITIVE_BLEND))this->v->tbl[78])(this, primitiveBlend); }
static inline D2D1_PRIMITIVE_BLEND              ID2D1DeviceContext7_GetPrimitiveBlend                        (ID2D1DeviceContext7* this) { return ((D2D1_PRIMITIVE_BLEND (WINAPI*)(ID2D1DeviceContext7*))this->v->tbl[79])(this); }
static inline void                              ID2D1DeviceContext7_SetUnitMode                              (ID2D1DeviceContext7* this, D2D1_UNIT_MODE unitMode) { ((void (WINAPI*)(ID2D1DeviceContext7*, D2D1_UNIT_MODE))this->v->tbl[80])(this, unitMode); }
static inline D2D1_UNIT_MODE                    ID2D1DeviceContext7_GetUnitMode                              (ID2D1DeviceContext7* this) { return ((D2D1_UNIT_MODE (WINAPI*)(ID2D1DeviceContext7*))this->v->tbl[81])(this); }
static inline void                              ID2D1DeviceContext7_DrawGlyphRun1                            (ID2D1DeviceContext7* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, const DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription, ID2D1Brush* foregroundBrush, DWRITE_MEASURING_MODE measuringMode) { ((void (WINAPI*)(ID2D1DeviceContext7*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, const DWRITE_GLYPH_RUN_DESCRIPTION*, ID2D1Brush*, DWRITE_MEASURING_MODE))this->v->tbl[82])(this, baselineOrigin, glyphRun, glyphRunDescription, foregroundBrush, measuringMode); }
static inline void                              ID2D1DeviceContext7_DrawImage                                (ID2D1DeviceContext7* this, ID2D1Image* image, const D2D_POINT_2F* targetOffset, const D2D_RECT_F* imageRectangle, D2D1_INTERPOLATION_MODE interpolationMode, D2D1_COMPOSITE_MODE compositeMode) { ((void (WINAPI*)(ID2D1DeviceContext7*, ID2D1Image*, const D2D_POINT_2F*, const D2D_RECT_F*, D2D1_INTERPOLATION_MODE, D2D1_COMPOSITE_MODE))this->v->tbl[83])(this, image, targetOffset, imageRectangle, interpolationMode, compositeMode); }
static inline void                              ID2D1DeviceContext7_DrawGdiMetafile                          (ID2D1DeviceContext7* this, ID2D1GdiMetafile* gdiMetafile, const D2D_POINT_2F* targetOffset) { ((void (WINAPI*)(ID2D1DeviceContext7*, ID2D1GdiMetafile*, const D2D_POINT_2F*))this->v->tbl[84])(this, gdiMetafile, targetOffset); }
static inline void                              ID2D1DeviceContext7_DrawBitmap1                              (ID2D1DeviceContext7* this, ID2D1Bitmap* bitmap, const D2D_RECT_F* destinationRectangle, FLOAT opacity, D2D1_INTERPOLATION_MODE interpolationMode, const D2D_RECT_F* sourceRectangle, const D2D_MATRIX_4X4_F* perspectiveTransform) { ((void (WINAPI*)(ID2D1DeviceContext7*, ID2D1Bitmap*, const D2D_RECT_F*, FLOAT, D2D1_INTERPOLATION_MODE, const D2D_RECT_F*, const D2D_MATRIX_4X4_F*))this->v->tbl[85])(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle, perspectiveTransform); }
static inline void                              ID2D1DeviceContext7_PushLayer1                               (ID2D1DeviceContext7* this, const D2D1_LAYER_PARAMETERS1* layerParameters, ID2D1Layer* layer) { ((void (WINAPI*)(ID2D1DeviceContext7*, const D2D1_LAYER_PARAMETERS1*, ID2D1Layer*))this->v->tbl[86])(this, layerParameters, layer); }
static inline HRESULT                           ID2D1DeviceContext7_InvalidateEffectInputRectangle           (ID2D1DeviceContext7* this, ID2D1Effect* effect, UINT32 input, const D2D_RECT_F* inputRectangle) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, ID2D1Effect*, UINT32, const D2D_RECT_F*))this->v->tbl[87])(this, effect, input, inputRectangle); }
static inline HRESULT                           ID2D1DeviceContext7_GetEffectInvalidRectangleCount           (ID2D1DeviceContext7* this, ID2D1Effect* effect, UINT32* rectangleCount) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, ID2D1Effect*, UINT32*))this->v->tbl[88])(this, effect, rectangleCount); }
static inline HRESULT                           ID2D1DeviceContext7_GetEffectInvalidRectangles               (ID2D1DeviceContext7* this, ID2D1Effect* effect, D2D_RECT_F* rectangles, UINT32 rectanglesCount) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, ID2D1Effect*, D2D_RECT_F*, UINT32))this->v->tbl[89])(this, effect, rectangles, rectanglesCount); }
static inline HRESULT                           ID2D1DeviceContext7_GetEffectRequiredInputRectangles         (ID2D1DeviceContext7* this, ID2D1Effect* renderEffect, const D2D_RECT_F* renderImageRectangle, const D2D1_EFFECT_INPUT_DESCRIPTION* inputDescriptions, D2D_RECT_F* requiredInputRects, UINT32 inputCount) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, ID2D1Effect*, const D2D_RECT_F*, const D2D1_EFFECT_INPUT_DESCRIPTION*, D2D_RECT_F*, UINT32))this->v->tbl[90])(this, renderEffect, renderImageRectangle, inputDescriptions, requiredInputRects, inputCount); }
static inline void                              ID2D1DeviceContext7_FillOpacityMask1                         (ID2D1DeviceContext7* this, ID2D1Bitmap* opacityMask, ID2D1Brush* brush, const D2D_RECT_F* destinationRectangle, const D2D_RECT_F* sourceRectangle) { ((void (WINAPI*)(ID2D1DeviceContext7*, ID2D1Bitmap*, ID2D1Brush*, const D2D_RECT_F*, const D2D_RECT_F*))this->v->tbl[91])(this, opacityMask, brush, destinationRectangle, sourceRectangle); }
static inline HRESULT                           ID2D1DeviceContext7_CreateFilledGeometryRealization          (ID2D1DeviceContext7* this, ID2D1Geometry* geometry, FLOAT flatteningTolerance, ID2D1GeometryRealization** geometryRealization) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, ID2D1Geometry*, FLOAT, ID2D1GeometryRealization**))this->v->tbl[92])(this, geometry, flatteningTolerance, geometryRealization); }
static inline HRESULT                           ID2D1DeviceContext7_CreateStrokedGeometryRealization         (ID2D1DeviceContext7* this, ID2D1Geometry* geometry, FLOAT flatteningTolerance, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle, ID2D1GeometryRealization** geometryRealization) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, ID2D1Geometry*, FLOAT, FLOAT, ID2D1StrokeStyle*, ID2D1GeometryRealization**))this->v->tbl[93])(this, geometry, flatteningTolerance, strokeWidth, strokeStyle, geometryRealization); }
static inline void                              ID2D1DeviceContext7_DrawGeometryRealization                  (ID2D1DeviceContext7* this, ID2D1GeometryRealization* geometryRealization, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1DeviceContext7*, ID2D1GeometryRealization*, ID2D1Brush*))this->v->tbl[94])(this, geometryRealization, brush); }
static inline HRESULT                           ID2D1DeviceContext7_CreateInk                                (ID2D1DeviceContext7* this, const D2D1_INK_POINT* startPoint, ID2D1Ink** ink) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, const D2D1_INK_POINT*, ID2D1Ink**))this->v->tbl[95])(this, startPoint, ink); }
static inline HRESULT                           ID2D1DeviceContext7_CreateInkStyle                           (ID2D1DeviceContext7* this, const D2D1_INK_STYLE_PROPERTIES* inkStyleProperties, ID2D1InkStyle** inkStyle) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, const D2D1_INK_STYLE_PROPERTIES*, ID2D1InkStyle**))this->v->tbl[96])(this, inkStyleProperties, inkStyle); }
static inline HRESULT                           ID2D1DeviceContext7_CreateGradientMesh                       (ID2D1DeviceContext7* this, const D2D1_GRADIENT_MESH_PATCH* patches, UINT32 patchesCount, ID2D1GradientMesh** gradientMesh) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, const D2D1_GRADIENT_MESH_PATCH*, UINT32, ID2D1GradientMesh**))this->v->tbl[97])(this, patches, patchesCount, gradientMesh); }
static inline HRESULT                           ID2D1DeviceContext7_CreateImageSourceFromWic                 (ID2D1DeviceContext7* this, IWICBitmapSource* wicBitmapSource, D2D1_IMAGE_SOURCE_LOADING_OPTIONS loadingOptions, D2D1_ALPHA_MODE alphaMode, ID2D1ImageSourceFromWic** imageSource) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, IWICBitmapSource*, D2D1_IMAGE_SOURCE_LOADING_OPTIONS, D2D1_ALPHA_MODE, ID2D1ImageSourceFromWic**))this->v->tbl[98])(this, wicBitmapSource, loadingOptions, alphaMode, imageSource); }
static inline HRESULT                           ID2D1DeviceContext7_CreateLookupTable3D                      (ID2D1DeviceContext7* this, D2D1_BUFFER_PRECISION precision, const UINT32* extents, const UINT8* data, UINT32 dataCount, const UINT32* strides, ID2D1LookupTable3D** lookupTable) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, D2D1_BUFFER_PRECISION, const UINT32*, const UINT8*, UINT32, const UINT32*, ID2D1LookupTable3D**))this->v->tbl[99])(this, precision, extents, data, dataCount, strides, lookupTable); }
static inline HRESULT                           ID2D1DeviceContext7_CreateImageSourceFromDxgi                (ID2D1DeviceContext7* this, IDXGISurface** surfaces, UINT32 surfaceCount, DXGI_COLOR_SPACE_TYPE colorSpace, D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS options, ID2D1ImageSource** imageSource) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, IDXGISurface**, UINT32, DXGI_COLOR_SPACE_TYPE, D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS, ID2D1ImageSource**))this->v->tbl[100])(this, surfaces, surfaceCount, colorSpace, options, imageSource); }
static inline HRESULT                           ID2D1DeviceContext7_GetGradientMeshWorldBounds               (ID2D1DeviceContext7* this, ID2D1GradientMesh* gradientMesh, D2D_RECT_F* pBounds) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, ID2D1GradientMesh*, D2D_RECT_F*))this->v->tbl[101])(this, gradientMesh, pBounds); }
static inline void                              ID2D1DeviceContext7_DrawInk                                  (ID2D1DeviceContext7* this, ID2D1Ink* ink, ID2D1Brush* brush, ID2D1InkStyle* inkStyle) { ((void (WINAPI*)(ID2D1DeviceContext7*, ID2D1Ink*, ID2D1Brush*, ID2D1InkStyle*))this->v->tbl[102])(this, ink, brush, inkStyle); }
static inline void                              ID2D1DeviceContext7_DrawGradientMesh                         (ID2D1DeviceContext7* this, ID2D1GradientMesh* gradientMesh) { ((void (WINAPI*)(ID2D1DeviceContext7*, ID2D1GradientMesh*))this->v->tbl[103])(this, gradientMesh); }
static inline void                              ID2D1DeviceContext7_DrawGdiMetafile1                         (ID2D1DeviceContext7* this, ID2D1GdiMetafile* gdiMetafile, const D2D_RECT_F* destinationRectangle, const D2D_RECT_F* sourceRectangle) { ((void (WINAPI*)(ID2D1DeviceContext7*, ID2D1GdiMetafile*, const D2D_RECT_F*, const D2D_RECT_F*))this->v->tbl[104])(this, gdiMetafile, destinationRectangle, sourceRectangle); }
static inline HRESULT                           ID2D1DeviceContext7_CreateTransformedImageSource             (ID2D1DeviceContext7* this, ID2D1ImageSource* imageSource, const D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES* properties, ID2D1TransformedImageSource** transformedImageSource) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, ID2D1ImageSource*, const D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES*, ID2D1TransformedImageSource**))this->v->tbl[105])(this, imageSource, properties, transformedImageSource); }
static inline HRESULT                           ID2D1DeviceContext7_CreateSpriteBatch                        (ID2D1DeviceContext7* this, ID2D1SpriteBatch** spriteBatch) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, ID2D1SpriteBatch**))this->v->tbl[106])(this, spriteBatch); }
static inline void                              ID2D1DeviceContext7_DrawSpriteBatch                          (ID2D1DeviceContext7* this, ID2D1SpriteBatch* spriteBatch, UINT32 startIndex, UINT32 spriteCount, ID2D1Bitmap* bitmap, D2D1_BITMAP_INTERPOLATION_MODE interpolationMode, D2D1_SPRITE_OPTIONS spriteOptions) { ((void (WINAPI*)(ID2D1DeviceContext7*, ID2D1SpriteBatch*, UINT32, UINT32, ID2D1Bitmap*, D2D1_BITMAP_INTERPOLATION_MODE, D2D1_SPRITE_OPTIONS))this->v->tbl[107])(this, spriteBatch, startIndex, spriteCount, bitmap, interpolationMode, spriteOptions); }
static inline HRESULT                           ID2D1DeviceContext7_CreateSvgGlyphStyle                      (ID2D1DeviceContext7* this, ID2D1SvgGlyphStyle** svgGlyphStyle) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, ID2D1SvgGlyphStyle**))this->v->tbl[108])(this, svgGlyphStyle); }
static inline void                              ID2D1DeviceContext7_DrawText1                                (ID2D1DeviceContext7* this, const WCHAR* string, UINT32 stringLength, IDWriteTextFormat* textFormat, const D2D_RECT_F* layoutRect, ID2D1Brush* defaultFillBrush, ID2D1SvgGlyphStyle* svgGlyphStyle, UINT32 colorPaletteIndex, D2D1_DRAW_TEXT_OPTIONS options, DWRITE_MEASURING_MODE measuringMode) { ((void (WINAPI*)(ID2D1DeviceContext7*, const WCHAR*, UINT32, IDWriteTextFormat*, const D2D_RECT_F*, ID2D1Brush*, ID2D1SvgGlyphStyle*, UINT32, D2D1_DRAW_TEXT_OPTIONS, DWRITE_MEASURING_MODE))this->v->tbl[109])(this, string, stringLength, textFormat, layoutRect, defaultFillBrush, svgGlyphStyle, colorPaletteIndex, options, measuringMode); }
static inline void                              ID2D1DeviceContext7_DrawTextLayout1                          (ID2D1DeviceContext7* this, D2D_POINT_2F origin, IDWriteTextLayout* textLayout, ID2D1Brush* defaultFillBrush, ID2D1SvgGlyphStyle* svgGlyphStyle, UINT32 colorPaletteIndex, D2D1_DRAW_TEXT_OPTIONS options) { ((void (WINAPI*)(ID2D1DeviceContext7*, D2D_POINT_2F, IDWriteTextLayout*, ID2D1Brush*, ID2D1SvgGlyphStyle*, UINT32, D2D1_DRAW_TEXT_OPTIONS))this->v->tbl[110])(this, origin, textLayout, defaultFillBrush, svgGlyphStyle, colorPaletteIndex, options); }
static inline void                              ID2D1DeviceContext7_DrawColorBitmapGlyphRun                  (ID2D1DeviceContext7* this, enum DWRITE_GLYPH_IMAGE_FORMATS glyphImageFormat, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, DWRITE_MEASURING_MODE measuringMode, D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION bitmapSnapOption) { ((void (WINAPI*)(ID2D1DeviceContext7*, enum DWRITE_GLYPH_IMAGE_FORMATS, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, DWRITE_MEASURING_MODE, D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION))this->v->tbl[111])(this, glyphImageFormat, baselineOrigin, glyphRun, measuringMode, bitmapSnapOption); }
static inline void                              ID2D1DeviceContext7_DrawSvgGlyphRun                          (ID2D1DeviceContext7* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, ID2D1Brush* defaultFillBrush, ID2D1SvgGlyphStyle* svgGlyphStyle, UINT32 colorPaletteIndex, DWRITE_MEASURING_MODE measuringMode) { ((void (WINAPI*)(ID2D1DeviceContext7*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, ID2D1Brush*, ID2D1SvgGlyphStyle*, UINT32, DWRITE_MEASURING_MODE))this->v->tbl[112])(this, baselineOrigin, glyphRun, defaultFillBrush, svgGlyphStyle, colorPaletteIndex, measuringMode); }
static inline HRESULT                           ID2D1DeviceContext7_GetColorBitmapGlyphImage                 (ID2D1DeviceContext7* this, enum DWRITE_GLYPH_IMAGE_FORMATS glyphImageFormat, D2D_POINT_2F glyphOrigin, IDWriteFontFace* fontFace, FLOAT fontEmSize, UINT16 glyphIndex, BOOL isSideways, const D2D_MATRIX_3X2_F* worldTransform, FLOAT dpiX, FLOAT dpiY, D2D_MATRIX_3X2_F* glyphTransform, ID2D1Image** glyphImage) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, enum DWRITE_GLYPH_IMAGE_FORMATS, D2D_POINT_2F, IDWriteFontFace*, FLOAT, UINT16, BOOL, const D2D_MATRIX_3X2_F*, FLOAT, FLOAT, D2D_MATRIX_3X2_F*, ID2D1Image**))this->v->tbl[113])(this, glyphImageFormat, glyphOrigin, fontFace, fontEmSize, glyphIndex, isSideways, worldTransform, dpiX, dpiY, glyphTransform, glyphImage); }
static inline HRESULT                           ID2D1DeviceContext7_GetSvgGlyphImage                         (ID2D1DeviceContext7* this, D2D_POINT_2F glyphOrigin, IDWriteFontFace* fontFace, FLOAT fontEmSize, UINT16 glyphIndex, BOOL isSideways, const D2D_MATRIX_3X2_F* worldTransform, ID2D1Brush* defaultFillBrush, ID2D1SvgGlyphStyle* svgGlyphStyle, UINT32 colorPaletteIndex, D2D_MATRIX_3X2_F* glyphTransform, ID2D1CommandList** glyphImage) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, D2D_POINT_2F, IDWriteFontFace*, FLOAT, UINT16, BOOL, const D2D_MATRIX_3X2_F*, ID2D1Brush*, ID2D1SvgGlyphStyle*, UINT32, D2D_MATRIX_3X2_F*, ID2D1CommandList**))this->v->tbl[114])(this, glyphOrigin, fontFace, fontEmSize, glyphIndex, isSideways, worldTransform, defaultFillBrush, svgGlyphStyle, colorPaletteIndex, glyphTransform, glyphImage); }
static inline HRESULT                           ID2D1DeviceContext7_CreateSvgDocument                        (ID2D1DeviceContext7* this, IStream* inputXmlStream, D2D_SIZE_F viewportSize, ID2D1SvgDocument** svgDocument) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, IStream*, D2D_SIZE_F, ID2D1SvgDocument**))this->v->tbl[115])(this, inputXmlStream, viewportSize, svgDocument); }
static inline void                              ID2D1DeviceContext7_DrawSvgDocument                          (ID2D1DeviceContext7* this, ID2D1SvgDocument* svgDocument) { ((void (WINAPI*)(ID2D1DeviceContext7*, ID2D1SvgDocument*))this->v->tbl[116])(this, svgDocument); }
static inline HRESULT                           ID2D1DeviceContext7_CreateColorContextFromDxgiColorSpace     (ID2D1DeviceContext7* this, DXGI_COLOR_SPACE_TYPE colorSpace, ID2D1ColorContext1** colorContext) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, DXGI_COLOR_SPACE_TYPE, ID2D1ColorContext1**))this->v->tbl[117])(this, colorSpace, colorContext); }
static inline HRESULT                           ID2D1DeviceContext7_CreateColorContextFromSimpleColorProfile (ID2D1DeviceContext7* this, const D2D1_SIMPLE_COLOR_PROFILE* simpleProfile, ID2D1ColorContext1** colorContext) { return ((HRESULT (WINAPI*)(ID2D1DeviceContext7*, const D2D1_SIMPLE_COLOR_PROFILE*, ID2D1ColorContext1**))this->v->tbl[118])(this, simpleProfile, colorContext); }
static inline void                              ID2D1DeviceContext7_BlendImage                               (ID2D1DeviceContext7* this, ID2D1Image* image, D2D1_BLEND_MODE blendMode, const D2D_POINT_2F* targetOffset, const D2D_RECT_F* imageRectangle, D2D1_INTERPOLATION_MODE interpolationMode) { ((void (WINAPI*)(ID2D1DeviceContext7*, ID2D1Image*, D2D1_BLEND_MODE, const D2D_POINT_2F*, const D2D_RECT_F*, D2D1_INTERPOLATION_MODE))this->v->tbl[119])(this, image, blendMode, targetOffset, imageRectangle, interpolationMode); }
static inline DWRITE_PAINT_FEATURE_LEVEL        ID2D1DeviceContext7_GetPaintFeatureLevel                     (ID2D1DeviceContext7* this) { return ((DWRITE_PAINT_FEATURE_LEVEL (WINAPI*)(ID2D1DeviceContext7*))this->v->tbl[120])(this); }
static inline void                              ID2D1DeviceContext7_DrawPaintGlyphRun                        (ID2D1DeviceContext7* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, ID2D1Brush* defaultFillBrush, UINT32 colorPaletteIndex, DWRITE_MEASURING_MODE measuringMode) { ((void (WINAPI*)(ID2D1DeviceContext7*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, ID2D1Brush*, UINT32, DWRITE_MEASURING_MODE))this->v->tbl[121])(this, baselineOrigin, glyphRun, defaultFillBrush, colorPaletteIndex, measuringMode); }
static inline void                              ID2D1DeviceContext7_DrawGlyphRunWithColorSupport             (ID2D1DeviceContext7* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, const DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription, ID2D1Brush* foregroundBrush, ID2D1SvgGlyphStyle* svgGlyphStyle, UINT32 colorPaletteIndex, DWRITE_MEASURING_MODE measuringMode, D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION bitmapSnapOption) { ((void (WINAPI*)(ID2D1DeviceContext7*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, const DWRITE_GLYPH_RUN_DESCRIPTION*, ID2D1Brush*, ID2D1SvgGlyphStyle*, UINT32, DWRITE_MEASURING_MODE, D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION))this->v->tbl[122])(this, baselineOrigin, glyphRun, glyphRunDescription, foregroundBrush, svgGlyphStyle, colorPaletteIndex, measuringMode, bitmapSnapOption); }

static inline HRESULT                           ID2D1DrawInfo_QueryInterface                                 (ID2D1DrawInfo* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1DrawInfo*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1DrawInfo_AddRef                                         (ID2D1DrawInfo* this) { return ((UINT32 (WINAPI*)(ID2D1DrawInfo*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1DrawInfo_Release                                        (ID2D1DrawInfo* this) { return ((UINT32 (WINAPI*)(ID2D1DrawInfo*))this->v->tbl[2])(this); }
static inline HRESULT                           ID2D1DrawInfo_SetInputDescription                            (ID2D1DrawInfo* this, UINT32 inputIndex, D2D1_INPUT_DESCRIPTION inputDescription) { return ((HRESULT (WINAPI*)(ID2D1DrawInfo*, UINT32, D2D1_INPUT_DESCRIPTION))this->v->tbl[3])(this, inputIndex, inputDescription); }
static inline HRESULT                           ID2D1DrawInfo_SetOutputBuffer                                (ID2D1DrawInfo* this, D2D1_BUFFER_PRECISION bufferPrecision, D2D1_CHANNEL_DEPTH channelDepth) { return ((HRESULT (WINAPI*)(ID2D1DrawInfo*, D2D1_BUFFER_PRECISION, D2D1_CHANNEL_DEPTH))this->v->tbl[4])(this, bufferPrecision, channelDepth); }
static inline void                              ID2D1DrawInfo_SetCached                                      (ID2D1DrawInfo* this, BOOL isCached) { ((void (WINAPI*)(ID2D1DrawInfo*, BOOL))this->v->tbl[5])(this, isCached); }
static inline void                              ID2D1DrawInfo_SetInstructionCountHint                        (ID2D1DrawInfo* this, UINT32 instructionCount) { ((void (WINAPI*)(ID2D1DrawInfo*, UINT32))this->v->tbl[6])(this, instructionCount); }
static inline HRESULT                           ID2D1DrawInfo_SetPixelShaderConstantBuffer                   (ID2D1DrawInfo* this, const UINT8* buffer, UINT32 bufferCount) { return ((HRESULT (WINAPI*)(ID2D1DrawInfo*, const UINT8*, UINT32))this->v->tbl[7])(this, buffer, bufferCount); }
static inline HRESULT                           ID2D1DrawInfo_SetResourceTexture                             (ID2D1DrawInfo* this, UINT32 textureIndex, ID2D1ResourceTexture* resourceTexture) { return ((HRESULT (WINAPI*)(ID2D1DrawInfo*, UINT32, ID2D1ResourceTexture*))this->v->tbl[8])(this, textureIndex, resourceTexture); }
static inline HRESULT                           ID2D1DrawInfo_SetVertexShaderConstantBuffer                  (ID2D1DrawInfo* this, const UINT8* buffer, UINT32 bufferCount) { return ((HRESULT (WINAPI*)(ID2D1DrawInfo*, const UINT8*, UINT32))this->v->tbl[9])(this, buffer, bufferCount); }
static inline HRESULT                           ID2D1DrawInfo_SetPixelShader                                 (ID2D1DrawInfo* this, const GUID* shaderId, D2D1_PIXEL_OPTIONS pixelOptions) { return ((HRESULT (WINAPI*)(ID2D1DrawInfo*, const GUID*, D2D1_PIXEL_OPTIONS))this->v->tbl[10])(this, shaderId, pixelOptions); }
static inline HRESULT                           ID2D1DrawInfo_SetVertexProcessing                            (ID2D1DrawInfo* this, ID2D1VertexBuffer* vertexBuffer, D2D1_VERTEX_OPTIONS vertexOptions, const D2D1_BLEND_DESCRIPTION* blendDescription, const D2D1_VERTEX_RANGE* vertexRange, const GUID* vertexShader) { return ((HRESULT (WINAPI*)(ID2D1DrawInfo*, ID2D1VertexBuffer*, D2D1_VERTEX_OPTIONS, const D2D1_BLEND_DESCRIPTION*, const D2D1_VERTEX_RANGE*, const GUID*))this->v->tbl[11])(this, vertexBuffer, vertexOptions, blendDescription, vertexRange, vertexShader); }

static inline HRESULT                           ID2D1DrawingStateBlock_QueryInterface                        (ID2D1DrawingStateBlock* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1DrawingStateBlock*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1DrawingStateBlock_AddRef                                (ID2D1DrawingStateBlock* this) { return ((UINT32 (WINAPI*)(ID2D1DrawingStateBlock*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1DrawingStateBlock_Release                               (ID2D1DrawingStateBlock* this) { return ((UINT32 (WINAPI*)(ID2D1DrawingStateBlock*))this->v->tbl[2])(this); }
static inline void                              ID2D1DrawingStateBlock_GetFactory                            (ID2D1DrawingStateBlock* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1DrawingStateBlock*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline void                              ID2D1DrawingStateBlock_GetDescription                        (ID2D1DrawingStateBlock* this, D2D1_DRAWING_STATE_DESCRIPTION* stateDescription) { ((void (WINAPI*)(ID2D1DrawingStateBlock*, D2D1_DRAWING_STATE_DESCRIPTION*))this->v->tbl[4])(this, stateDescription); }
static inline void                              ID2D1DrawingStateBlock_SetDescription                        (ID2D1DrawingStateBlock* this, const D2D1_DRAWING_STATE_DESCRIPTION* stateDescription) { ((void (WINAPI*)(ID2D1DrawingStateBlock*, const D2D1_DRAWING_STATE_DESCRIPTION*))this->v->tbl[5])(this, stateDescription); }
static inline void                              ID2D1DrawingStateBlock_SetTextRenderingParams                (ID2D1DrawingStateBlock* this, IDWriteRenderingParams* textRenderingParams) { ((void (WINAPI*)(ID2D1DrawingStateBlock*, IDWriteRenderingParams*))this->v->tbl[6])(this, textRenderingParams); }
static inline void                              ID2D1DrawingStateBlock_GetTextRenderingParams                (ID2D1DrawingStateBlock* this, IDWriteRenderingParams** textRenderingParams) { ((void (WINAPI*)(ID2D1DrawingStateBlock*, IDWriteRenderingParams**))this->v->tbl[7])(this, textRenderingParams); }

static inline HRESULT                           ID2D1DrawingStateBlock1_QueryInterface                       (ID2D1DrawingStateBlock1* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1DrawingStateBlock1*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1DrawingStateBlock1_AddRef                               (ID2D1DrawingStateBlock1* this) { return ((UINT32 (WINAPI*)(ID2D1DrawingStateBlock1*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1DrawingStateBlock1_Release                              (ID2D1DrawingStateBlock1* this) { return ((UINT32 (WINAPI*)(ID2D1DrawingStateBlock1*))this->v->tbl[2])(this); }
static inline void                              ID2D1DrawingStateBlock1_GetFactory                           (ID2D1DrawingStateBlock1* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1DrawingStateBlock1*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline void                              ID2D1DrawingStateBlock1_GetDescription                       (ID2D1DrawingStateBlock1* this, D2D1_DRAWING_STATE_DESCRIPTION* stateDescription) { ((void (WINAPI*)(ID2D1DrawingStateBlock1*, D2D1_DRAWING_STATE_DESCRIPTION*))this->v->tbl[4])(this, stateDescription); }
static inline void                              ID2D1DrawingStateBlock1_SetDescription                       (ID2D1DrawingStateBlock1* this, const D2D1_DRAWING_STATE_DESCRIPTION* stateDescription) { ((void (WINAPI*)(ID2D1DrawingStateBlock1*, const D2D1_DRAWING_STATE_DESCRIPTION*))this->v->tbl[5])(this, stateDescription); }
static inline void                              ID2D1DrawingStateBlock1_SetTextRenderingParams               (ID2D1DrawingStateBlock1* this, IDWriteRenderingParams* textRenderingParams) { ((void (WINAPI*)(ID2D1DrawingStateBlock1*, IDWriteRenderingParams*))this->v->tbl[6])(this, textRenderingParams); }
static inline void                              ID2D1DrawingStateBlock1_GetTextRenderingParams               (ID2D1DrawingStateBlock1* this, IDWriteRenderingParams** textRenderingParams) { ((void (WINAPI*)(ID2D1DrawingStateBlock1*, IDWriteRenderingParams**))this->v->tbl[7])(this, textRenderingParams); }
static inline void                              ID2D1DrawingStateBlock1_GetDescription1                      (ID2D1DrawingStateBlock1* this, D2D1_DRAWING_STATE_DESCRIPTION1* stateDescription) { ((void (WINAPI*)(ID2D1DrawingStateBlock1*, D2D1_DRAWING_STATE_DESCRIPTION1*))this->v->tbl[8])(this, stateDescription); }
static inline void                              ID2D1DrawingStateBlock1_SetDescription1                      (ID2D1DrawingStateBlock1* this, const D2D1_DRAWING_STATE_DESCRIPTION1* stateDescription) { ((void (WINAPI*)(ID2D1DrawingStateBlock1*, const D2D1_DRAWING_STATE_DESCRIPTION1*))this->v->tbl[9])(this, stateDescription); }

static inline HRESULT                           ID2D1DrawTransform_QueryInterface                            (ID2D1DrawTransform* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1DrawTransform*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1DrawTransform_AddRef                                    (ID2D1DrawTransform* this) { return ((UINT32 (WINAPI*)(ID2D1DrawTransform*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1DrawTransform_Release                                   (ID2D1DrawTransform* this) { return ((UINT32 (WINAPI*)(ID2D1DrawTransform*))this->v->tbl[2])(this); }
static inline UINT32                            ID2D1DrawTransform_GetInputCount                             (ID2D1DrawTransform* this) { return ((UINT32 (WINAPI*)(ID2D1DrawTransform*))this->v->tbl[3])(this); }
static inline HRESULT                           ID2D1DrawTransform_MapOutputRectToInputRects                 (ID2D1DrawTransform* this, const RECT* outputRect, RECT* inputRects, UINT32 inputRectsCount) { return ((HRESULT (WINAPI*)(ID2D1DrawTransform*, const RECT*, RECT*, UINT32))this->v->tbl[4])(this, outputRect, inputRects, inputRectsCount); }
static inline HRESULT                           ID2D1DrawTransform_MapInputRectsToOutputRect                 (ID2D1DrawTransform* this, const RECT* inputRects, const RECT* inputOpaqueSubRects, UINT32 inputRectCount, RECT* outputRect, RECT* outputOpaqueSubRect) { return ((HRESULT (WINAPI*)(ID2D1DrawTransform*, const RECT*, const RECT*, UINT32, RECT*, RECT*))this->v->tbl[5])(this, inputRects, inputOpaqueSubRects, inputRectCount, outputRect, outputOpaqueSubRect); }
static inline HRESULT                           ID2D1DrawTransform_MapInvalidRect                            (ID2D1DrawTransform* this, UINT32 inputIndex, RECT invalidInputRect, RECT* invalidOutputRect) { return ((HRESULT (WINAPI*)(ID2D1DrawTransform*, UINT32, RECT, RECT*))this->v->tbl[6])(this, inputIndex, invalidInputRect, invalidOutputRect); }
static inline HRESULT                           ID2D1DrawTransform_SetDrawInfo                               (ID2D1DrawTransform* this, ID2D1DrawInfo* drawInfo) { return ((HRESULT (WINAPI*)(ID2D1DrawTransform*, ID2D1DrawInfo*))this->v->tbl[7])(this, drawInfo); }

static inline HRESULT                           ID2D1Effect_QueryInterface                                   (ID2D1Effect* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1Effect*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1Effect_AddRef                                           (ID2D1Effect* this) { return ((UINT32 (WINAPI*)(ID2D1Effect*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1Effect_Release                                          (ID2D1Effect* this) { return ((UINT32 (WINAPI*)(ID2D1Effect*))this->v->tbl[2])(this); }
static inline UINT32                            ID2D1Effect_GetPropertyCount                                 (ID2D1Effect* this) { return ((UINT32 (WINAPI*)(ID2D1Effect*))this->v->tbl[3])(this); }
static inline HRESULT                           ID2D1Effect_GetPropertyName                                  (ID2D1Effect* this, UINT32 index, WCHAR* name, UINT32 nameCount) { return ((HRESULT (WINAPI*)(ID2D1Effect*, UINT32, WCHAR*, UINT32))this->v->tbl[4])(this, index, name, nameCount); }
static inline UINT32                            ID2D1Effect_GetPropertyNameLength                            (ID2D1Effect* this, UINT32 index) { return ((UINT32 (WINAPI*)(ID2D1Effect*, UINT32))this->v->tbl[5])(this, index); }
static inline D2D1_PROPERTY_TYPE                ID2D1Effect_GetType                                          (ID2D1Effect* this, UINT32 index) { return ((D2D1_PROPERTY_TYPE (WINAPI*)(ID2D1Effect*, UINT32))this->v->tbl[6])(this, index); }
static inline UINT32                            ID2D1Effect_GetPropertyIndex                                 (ID2D1Effect* this, const WCHAR* name) { return ((UINT32 (WINAPI*)(ID2D1Effect*, const WCHAR*))this->v->tbl[7])(this, name); }
static inline HRESULT                           ID2D1Effect_SetValueByName                                   (ID2D1Effect* this, const WCHAR* name, D2D1_PROPERTY_TYPE type, const UINT8* data, UINT32 dataSize) { return ((HRESULT (WINAPI*)(ID2D1Effect*, const WCHAR*, D2D1_PROPERTY_TYPE, const UINT8*, UINT32))this->v->tbl[8])(this, name, type, data, dataSize); }
static inline HRESULT                           ID2D1Effect_SetValue                                         (ID2D1Effect* this, UINT32 index, D2D1_PROPERTY_TYPE type, const UINT8* data, UINT32 dataSize) { return ((HRESULT (WINAPI*)(ID2D1Effect*, UINT32, D2D1_PROPERTY_TYPE, const UINT8*, UINT32))this->v->tbl[9])(this, index, type, data, dataSize); }
static inline HRESULT                           ID2D1Effect_GetValueByName                                   (ID2D1Effect* this, const WCHAR* name, D2D1_PROPERTY_TYPE type, UINT8* data, UINT32 dataSize) { return ((HRESULT (WINAPI*)(ID2D1Effect*, const WCHAR*, D2D1_PROPERTY_TYPE, UINT8*, UINT32))this->v->tbl[10])(this, name, type, data, dataSize); }
static inline HRESULT                           ID2D1Effect_GetValue                                         (ID2D1Effect* this, UINT32 index, D2D1_PROPERTY_TYPE type, UINT8* data, UINT32 dataSize) { return ((HRESULT (WINAPI*)(ID2D1Effect*, UINT32, D2D1_PROPERTY_TYPE, UINT8*, UINT32))this->v->tbl[11])(this, index, type, data, dataSize); }
static inline UINT32                            ID2D1Effect_GetValueSize                                     (ID2D1Effect* this, UINT32 index) { return ((UINT32 (WINAPI*)(ID2D1Effect*, UINT32))this->v->tbl[12])(this, index); }
static inline HRESULT                           ID2D1Effect_GetSubProperties                                 (ID2D1Effect* this, UINT32 index, ID2D1Properties** subProperties) { return ((HRESULT (WINAPI*)(ID2D1Effect*, UINT32, ID2D1Properties**))this->v->tbl[13])(this, index, subProperties); }
static inline void                              ID2D1Effect_SetInput                                         (ID2D1Effect* this, UINT32 index, ID2D1Image* input, BOOL invalidate) { ((void (WINAPI*)(ID2D1Effect*, UINT32, ID2D1Image*, BOOL))this->v->tbl[14])(this, index, input, invalidate); }
static inline HRESULT                           ID2D1Effect_SetInputCount                                    (ID2D1Effect* this, UINT32 inputCount) { return ((HRESULT (WINAPI*)(ID2D1Effect*, UINT32))this->v->tbl[15])(this, inputCount); }
static inline void                              ID2D1Effect_GetInput                                         (ID2D1Effect* this, UINT32 index, ID2D1Image** input) { ((void (WINAPI*)(ID2D1Effect*, UINT32, ID2D1Image**))this->v->tbl[16])(this, index, input); }
static inline UINT32                            ID2D1Effect_GetInputCount                                    (ID2D1Effect* this) { return ((UINT32 (WINAPI*)(ID2D1Effect*))this->v->tbl[17])(this); }
static inline void                              ID2D1Effect_GetOutput                                        (ID2D1Effect* this, ID2D1Image** outputImage) { ((void (WINAPI*)(ID2D1Effect*, ID2D1Image**))this->v->tbl[18])(this, outputImage); }

static inline HRESULT                           ID2D1EffectContext_QueryInterface                            (ID2D1EffectContext* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1EffectContext*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1EffectContext_AddRef                                    (ID2D1EffectContext* this) { return ((UINT32 (WINAPI*)(ID2D1EffectContext*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1EffectContext_Release                                   (ID2D1EffectContext* this) { return ((UINT32 (WINAPI*)(ID2D1EffectContext*))this->v->tbl[2])(this); }
static inline void                              ID2D1EffectContext_GetDpi                                    (ID2D1EffectContext* this, FLOAT* dpiX, FLOAT* dpiY) { ((void (WINAPI*)(ID2D1EffectContext*, FLOAT*, FLOAT*))this->v->tbl[3])(this, dpiX, dpiY); }
static inline HRESULT                           ID2D1EffectContext_CreateEffect                              (ID2D1EffectContext* this, const GUID* effectId, ID2D1Effect** effect) { return ((HRESULT (WINAPI*)(ID2D1EffectContext*, const GUID*, ID2D1Effect**))this->v->tbl[4])(this, effectId, effect); }
static inline HRESULT                           ID2D1EffectContext_GetMaximumSupportedFeatureLevel           (ID2D1EffectContext* this, const D3D_FEATURE_LEVEL* featureLevels, UINT32 featureLevelsCount, D3D_FEATURE_LEVEL* maximumSupportedFeatureLevel) { return ((HRESULT (WINAPI*)(ID2D1EffectContext*, const D3D_FEATURE_LEVEL*, UINT32, D3D_FEATURE_LEVEL*))this->v->tbl[5])(this, featureLevels, featureLevelsCount, maximumSupportedFeatureLevel); }
static inline HRESULT                           ID2D1EffectContext_CreateTransformNodeFromEffect             (ID2D1EffectContext* this, ID2D1Effect* effect, ID2D1TransformNode** transformNode) { return ((HRESULT (WINAPI*)(ID2D1EffectContext*, ID2D1Effect*, ID2D1TransformNode**))this->v->tbl[6])(this, effect, transformNode); }
static inline HRESULT                           ID2D1EffectContext_CreateBlendTransform                      (ID2D1EffectContext* this, UINT32 numInputs, const D2D1_BLEND_DESCRIPTION* blendDescription, ID2D1BlendTransform** transform) { return ((HRESULT (WINAPI*)(ID2D1EffectContext*, UINT32, const D2D1_BLEND_DESCRIPTION*, ID2D1BlendTransform**))this->v->tbl[7])(this, numInputs, blendDescription, transform); }
static inline HRESULT                           ID2D1EffectContext_CreateBorderTransform                     (ID2D1EffectContext* this, D2D1_EXTEND_MODE extendModeX, D2D1_EXTEND_MODE extendModeY, ID2D1BorderTransform** transform) { return ((HRESULT (WINAPI*)(ID2D1EffectContext*, D2D1_EXTEND_MODE, D2D1_EXTEND_MODE, ID2D1BorderTransform**))this->v->tbl[8])(this, extendModeX, extendModeY, transform); }
static inline HRESULT                           ID2D1EffectContext_CreateOffsetTransform                     (ID2D1EffectContext* this, POINT offset, ID2D1OffsetTransform** transform) { return ((HRESULT (WINAPI*)(ID2D1EffectContext*, POINT, ID2D1OffsetTransform**))this->v->tbl[9])(this, offset, transform); }
static inline HRESULT                           ID2D1EffectContext_CreateBoundsAdjustmentTransform           (ID2D1EffectContext* this, const RECT* outputRectangle, ID2D1BoundsAdjustmentTransform** transform) { return ((HRESULT (WINAPI*)(ID2D1EffectContext*, const RECT*, ID2D1BoundsAdjustmentTransform**))this->v->tbl[10])(this, outputRectangle, transform); }
static inline HRESULT                           ID2D1EffectContext_LoadPixelShader                           (ID2D1EffectContext* this, const GUID* shaderId, const UINT8* shaderBuffer, UINT32 shaderBufferCount) { return ((HRESULT (WINAPI*)(ID2D1EffectContext*, const GUID*, const UINT8*, UINT32))this->v->tbl[11])(this, shaderId, shaderBuffer, shaderBufferCount); }
static inline HRESULT                           ID2D1EffectContext_LoadVertexShader                          (ID2D1EffectContext* this, const GUID* resourceId, const UINT8* shaderBuffer, UINT32 shaderBufferCount) { return ((HRESULT (WINAPI*)(ID2D1EffectContext*, const GUID*, const UINT8*, UINT32))this->v->tbl[12])(this, resourceId, shaderBuffer, shaderBufferCount); }
static inline HRESULT                           ID2D1EffectContext_LoadComputeShader                         (ID2D1EffectContext* this, const GUID* resourceId, const UINT8* shaderBuffer, UINT32 shaderBufferCount) { return ((HRESULT (WINAPI*)(ID2D1EffectContext*, const GUID*, const UINT8*, UINT32))this->v->tbl[13])(this, resourceId, shaderBuffer, shaderBufferCount); }
static inline BOOL                              ID2D1EffectContext_IsShaderLoaded                            (ID2D1EffectContext* this, const GUID* shaderId) { return ((BOOL (WINAPI*)(ID2D1EffectContext*, const GUID*))this->v->tbl[14])(this, shaderId); }
static inline HRESULT                           ID2D1EffectContext_CreateResourceTexture                     (ID2D1EffectContext* this, const GUID* resourceId, const D2D1_RESOURCE_TEXTURE_PROPERTIES* resourceTextureProperties, const UINT8* data, const UINT32* strides, UINT32 dataSize, ID2D1ResourceTexture** resourceTexture) { return ((HRESULT (WINAPI*)(ID2D1EffectContext*, const GUID*, const D2D1_RESOURCE_TEXTURE_PROPERTIES*, const UINT8*, const UINT32*, UINT32, ID2D1ResourceTexture**))this->v->tbl[15])(this, resourceId, resourceTextureProperties, data, strides, dataSize, resourceTexture); }
static inline HRESULT                           ID2D1EffectContext_FindResourceTexture                       (ID2D1EffectContext* this, const GUID* resourceId, ID2D1ResourceTexture** resourceTexture) { return ((HRESULT (WINAPI*)(ID2D1EffectContext*, const GUID*, ID2D1ResourceTexture**))this->v->tbl[16])(this, resourceId, resourceTexture); }
static inline HRESULT                           ID2D1EffectContext_CreateVertexBuffer                        (ID2D1EffectContext* this, const D2D1_VERTEX_BUFFER_PROPERTIES* vertexBufferProperties, const GUID* resourceId, const D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES* customVertexBufferProperties, ID2D1VertexBuffer** buffer) { return ((HRESULT (WINAPI*)(ID2D1EffectContext*, const D2D1_VERTEX_BUFFER_PROPERTIES*, const GUID*, const D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES*, ID2D1VertexBuffer**))this->v->tbl[17])(this, vertexBufferProperties, resourceId, customVertexBufferProperties, buffer); }
static inline HRESULT                           ID2D1EffectContext_FindVertexBuffer                          (ID2D1EffectContext* this, const GUID* resourceId, ID2D1VertexBuffer** buffer) { return ((HRESULT (WINAPI*)(ID2D1EffectContext*, const GUID*, ID2D1VertexBuffer**))this->v->tbl[18])(this, resourceId, buffer); }
static inline HRESULT                           ID2D1EffectContext_CreateColorContext                        (ID2D1EffectContext* this, D2D1_COLOR_SPACE space, const UINT8* profile, UINT32 profileSize, ID2D1ColorContext** colorContext) { return ((HRESULT (WINAPI*)(ID2D1EffectContext*, D2D1_COLOR_SPACE, const UINT8*, UINT32, ID2D1ColorContext**))this->v->tbl[19])(this, space, profile, profileSize, colorContext); }
static inline HRESULT                           ID2D1EffectContext_CreateColorContextFromFilename            (ID2D1EffectContext* this, const WCHAR* filename, ID2D1ColorContext** colorContext) { return ((HRESULT (WINAPI*)(ID2D1EffectContext*, const WCHAR*, ID2D1ColorContext**))this->v->tbl[20])(this, filename, colorContext); }
static inline HRESULT                           ID2D1EffectContext_CreateColorContextFromWicColorContext     (ID2D1EffectContext* this, IWICColorContext* wicColorContext, ID2D1ColorContext** colorContext) { return ((HRESULT (WINAPI*)(ID2D1EffectContext*, IWICColorContext*, ID2D1ColorContext**))this->v->tbl[21])(this, wicColorContext, colorContext); }
static inline HRESULT                           ID2D1EffectContext_CheckFeatureSupport                       (ID2D1EffectContext* this, D2D1_FEATURE feature, void* featureSupportData, UINT32 featureSupportDataSize) { return ((HRESULT (WINAPI*)(ID2D1EffectContext*, D2D1_FEATURE, void*, UINT32))this->v->tbl[22])(this, feature, featureSupportData, featureSupportDataSize); }
static inline BOOL                              ID2D1EffectContext_IsBufferPrecisionSupported                (ID2D1EffectContext* this, D2D1_BUFFER_PRECISION bufferPrecision) { return ((BOOL (WINAPI*)(ID2D1EffectContext*, D2D1_BUFFER_PRECISION))this->v->tbl[23])(this, bufferPrecision); }

static inline HRESULT                           ID2D1EffectContext1_QueryInterface                           (ID2D1EffectContext1* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1EffectContext1*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1EffectContext1_AddRef                                   (ID2D1EffectContext1* this) { return ((UINT32 (WINAPI*)(ID2D1EffectContext1*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1EffectContext1_Release                                  (ID2D1EffectContext1* this) { return ((UINT32 (WINAPI*)(ID2D1EffectContext1*))this->v->tbl[2])(this); }
static inline void                              ID2D1EffectContext1_GetDpi                                   (ID2D1EffectContext1* this, FLOAT* dpiX, FLOAT* dpiY) { ((void (WINAPI*)(ID2D1EffectContext1*, FLOAT*, FLOAT*))this->v->tbl[3])(this, dpiX, dpiY); }
static inline HRESULT                           ID2D1EffectContext1_CreateEffect                             (ID2D1EffectContext1* this, const GUID* effectId, ID2D1Effect** effect) { return ((HRESULT (WINAPI*)(ID2D1EffectContext1*, const GUID*, ID2D1Effect**))this->v->tbl[4])(this, effectId, effect); }
static inline HRESULT                           ID2D1EffectContext1_GetMaximumSupportedFeatureLevel          (ID2D1EffectContext1* this, const D3D_FEATURE_LEVEL* featureLevels, UINT32 featureLevelsCount, D3D_FEATURE_LEVEL* maximumSupportedFeatureLevel) { return ((HRESULT (WINAPI*)(ID2D1EffectContext1*, const D3D_FEATURE_LEVEL*, UINT32, D3D_FEATURE_LEVEL*))this->v->tbl[5])(this, featureLevels, featureLevelsCount, maximumSupportedFeatureLevel); }
static inline HRESULT                           ID2D1EffectContext1_CreateTransformNodeFromEffect            (ID2D1EffectContext1* this, ID2D1Effect* effect, ID2D1TransformNode** transformNode) { return ((HRESULT (WINAPI*)(ID2D1EffectContext1*, ID2D1Effect*, ID2D1TransformNode**))this->v->tbl[6])(this, effect, transformNode); }
static inline HRESULT                           ID2D1EffectContext1_CreateBlendTransform                     (ID2D1EffectContext1* this, UINT32 numInputs, const D2D1_BLEND_DESCRIPTION* blendDescription, ID2D1BlendTransform** transform) { return ((HRESULT (WINAPI*)(ID2D1EffectContext1*, UINT32, const D2D1_BLEND_DESCRIPTION*, ID2D1BlendTransform**))this->v->tbl[7])(this, numInputs, blendDescription, transform); }
static inline HRESULT                           ID2D1EffectContext1_CreateBorderTransform                    (ID2D1EffectContext1* this, D2D1_EXTEND_MODE extendModeX, D2D1_EXTEND_MODE extendModeY, ID2D1BorderTransform** transform) { return ((HRESULT (WINAPI*)(ID2D1EffectContext1*, D2D1_EXTEND_MODE, D2D1_EXTEND_MODE, ID2D1BorderTransform**))this->v->tbl[8])(this, extendModeX, extendModeY, transform); }
static inline HRESULT                           ID2D1EffectContext1_CreateOffsetTransform                    (ID2D1EffectContext1* this, POINT offset, ID2D1OffsetTransform** transform) { return ((HRESULT (WINAPI*)(ID2D1EffectContext1*, POINT, ID2D1OffsetTransform**))this->v->tbl[9])(this, offset, transform); }
static inline HRESULT                           ID2D1EffectContext1_CreateBoundsAdjustmentTransform          (ID2D1EffectContext1* this, const RECT* outputRectangle, ID2D1BoundsAdjustmentTransform** transform) { return ((HRESULT (WINAPI*)(ID2D1EffectContext1*, const RECT*, ID2D1BoundsAdjustmentTransform**))this->v->tbl[10])(this, outputRectangle, transform); }
static inline HRESULT                           ID2D1EffectContext1_LoadPixelShader                          (ID2D1EffectContext1* this, const GUID* shaderId, const UINT8* shaderBuffer, UINT32 shaderBufferCount) { return ((HRESULT (WINAPI*)(ID2D1EffectContext1*, const GUID*, const UINT8*, UINT32))this->v->tbl[11])(this, shaderId, shaderBuffer, shaderBufferCount); }
static inline HRESULT                           ID2D1EffectContext1_LoadVertexShader                         (ID2D1EffectContext1* this, const GUID* resourceId, const UINT8* shaderBuffer, UINT32 shaderBufferCount) { return ((HRESULT (WINAPI*)(ID2D1EffectContext1*, const GUID*, const UINT8*, UINT32))this->v->tbl[12])(this, resourceId, shaderBuffer, shaderBufferCount); }
static inline HRESULT                           ID2D1EffectContext1_LoadComputeShader                        (ID2D1EffectContext1* this, const GUID* resourceId, const UINT8* shaderBuffer, UINT32 shaderBufferCount) { return ((HRESULT (WINAPI*)(ID2D1EffectContext1*, const GUID*, const UINT8*, UINT32))this->v->tbl[13])(this, resourceId, shaderBuffer, shaderBufferCount); }
static inline BOOL                              ID2D1EffectContext1_IsShaderLoaded                           (ID2D1EffectContext1* this, const GUID* shaderId) { return ((BOOL (WINAPI*)(ID2D1EffectContext1*, const GUID*))this->v->tbl[14])(this, shaderId); }
static inline HRESULT                           ID2D1EffectContext1_CreateResourceTexture                    (ID2D1EffectContext1* this, const GUID* resourceId, const D2D1_RESOURCE_TEXTURE_PROPERTIES* resourceTextureProperties, const UINT8* data, const UINT32* strides, UINT32 dataSize, ID2D1ResourceTexture** resourceTexture) { return ((HRESULT (WINAPI*)(ID2D1EffectContext1*, const GUID*, const D2D1_RESOURCE_TEXTURE_PROPERTIES*, const UINT8*, const UINT32*, UINT32, ID2D1ResourceTexture**))this->v->tbl[15])(this, resourceId, resourceTextureProperties, data, strides, dataSize, resourceTexture); }
static inline HRESULT                           ID2D1EffectContext1_FindResourceTexture                      (ID2D1EffectContext1* this, const GUID* resourceId, ID2D1ResourceTexture** resourceTexture) { return ((HRESULT (WINAPI*)(ID2D1EffectContext1*, const GUID*, ID2D1ResourceTexture**))this->v->tbl[16])(this, resourceId, resourceTexture); }
static inline HRESULT                           ID2D1EffectContext1_CreateVertexBuffer                       (ID2D1EffectContext1* this, const D2D1_VERTEX_BUFFER_PROPERTIES* vertexBufferProperties, const GUID* resourceId, const D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES* customVertexBufferProperties, ID2D1VertexBuffer** buffer) { return ((HRESULT (WINAPI*)(ID2D1EffectContext1*, const D2D1_VERTEX_BUFFER_PROPERTIES*, const GUID*, const D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES*, ID2D1VertexBuffer**))this->v->tbl[17])(this, vertexBufferProperties, resourceId, customVertexBufferProperties, buffer); }
static inline HRESULT                           ID2D1EffectContext1_FindVertexBuffer                         (ID2D1EffectContext1* this, const GUID* resourceId, ID2D1VertexBuffer** buffer) { return ((HRESULT (WINAPI*)(ID2D1EffectContext1*, const GUID*, ID2D1VertexBuffer**))this->v->tbl[18])(this, resourceId, buffer); }
static inline HRESULT                           ID2D1EffectContext1_CreateColorContext                       (ID2D1EffectContext1* this, D2D1_COLOR_SPACE space, const UINT8* profile, UINT32 profileSize, ID2D1ColorContext** colorContext) { return ((HRESULT (WINAPI*)(ID2D1EffectContext1*, D2D1_COLOR_SPACE, const UINT8*, UINT32, ID2D1ColorContext**))this->v->tbl[19])(this, space, profile, profileSize, colorContext); }
static inline HRESULT                           ID2D1EffectContext1_CreateColorContextFromFilename           (ID2D1EffectContext1* this, const WCHAR* filename, ID2D1ColorContext** colorContext) { return ((HRESULT (WINAPI*)(ID2D1EffectContext1*, const WCHAR*, ID2D1ColorContext**))this->v->tbl[20])(this, filename, colorContext); }
static inline HRESULT                           ID2D1EffectContext1_CreateColorContextFromWicColorContext    (ID2D1EffectContext1* this, IWICColorContext* wicColorContext, ID2D1ColorContext** colorContext) { return ((HRESULT (WINAPI*)(ID2D1EffectContext1*, IWICColorContext*, ID2D1ColorContext**))this->v->tbl[21])(this, wicColorContext, colorContext); }
static inline HRESULT                           ID2D1EffectContext1_CheckFeatureSupport                      (ID2D1EffectContext1* this, D2D1_FEATURE feature, void* featureSupportData, UINT32 featureSupportDataSize) { return ((HRESULT (WINAPI*)(ID2D1EffectContext1*, D2D1_FEATURE, void*, UINT32))this->v->tbl[22])(this, feature, featureSupportData, featureSupportDataSize); }
static inline BOOL                              ID2D1EffectContext1_IsBufferPrecisionSupported               (ID2D1EffectContext1* this, D2D1_BUFFER_PRECISION bufferPrecision) { return ((BOOL (WINAPI*)(ID2D1EffectContext1*, D2D1_BUFFER_PRECISION))this->v->tbl[23])(this, bufferPrecision); }
static inline HRESULT                           ID2D1EffectContext1_CreateLookupTable3D                      (ID2D1EffectContext1* this, D2D1_BUFFER_PRECISION precision, const UINT32* extents, const UINT8* data, UINT32 dataCount, const UINT32* strides, ID2D1LookupTable3D** lookupTable) { return ((HRESULT (WINAPI*)(ID2D1EffectContext1*, D2D1_BUFFER_PRECISION, const UINT32*, const UINT8*, UINT32, const UINT32*, ID2D1LookupTable3D**))this->v->tbl[24])(this, precision, extents, data, dataCount, strides, lookupTable); }

static inline HRESULT                           ID2D1EffectContext2_QueryInterface                           (ID2D1EffectContext2* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1EffectContext2*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1EffectContext2_AddRef                                   (ID2D1EffectContext2* this) { return ((UINT32 (WINAPI*)(ID2D1EffectContext2*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1EffectContext2_Release                                  (ID2D1EffectContext2* this) { return ((UINT32 (WINAPI*)(ID2D1EffectContext2*))this->v->tbl[2])(this); }
static inline void                              ID2D1EffectContext2_GetDpi                                   (ID2D1EffectContext2* this, FLOAT* dpiX, FLOAT* dpiY) { ((void (WINAPI*)(ID2D1EffectContext2*, FLOAT*, FLOAT*))this->v->tbl[3])(this, dpiX, dpiY); }
static inline HRESULT                           ID2D1EffectContext2_CreateEffect                             (ID2D1EffectContext2* this, const GUID* effectId, ID2D1Effect** effect) { return ((HRESULT (WINAPI*)(ID2D1EffectContext2*, const GUID*, ID2D1Effect**))this->v->tbl[4])(this, effectId, effect); }
static inline HRESULT                           ID2D1EffectContext2_GetMaximumSupportedFeatureLevel          (ID2D1EffectContext2* this, const D3D_FEATURE_LEVEL* featureLevels, UINT32 featureLevelsCount, D3D_FEATURE_LEVEL* maximumSupportedFeatureLevel) { return ((HRESULT (WINAPI*)(ID2D1EffectContext2*, const D3D_FEATURE_LEVEL*, UINT32, D3D_FEATURE_LEVEL*))this->v->tbl[5])(this, featureLevels, featureLevelsCount, maximumSupportedFeatureLevel); }
static inline HRESULT                           ID2D1EffectContext2_CreateTransformNodeFromEffect            (ID2D1EffectContext2* this, ID2D1Effect* effect, ID2D1TransformNode** transformNode) { return ((HRESULT (WINAPI*)(ID2D1EffectContext2*, ID2D1Effect*, ID2D1TransformNode**))this->v->tbl[6])(this, effect, transformNode); }
static inline HRESULT                           ID2D1EffectContext2_CreateBlendTransform                     (ID2D1EffectContext2* this, UINT32 numInputs, const D2D1_BLEND_DESCRIPTION* blendDescription, ID2D1BlendTransform** transform) { return ((HRESULT (WINAPI*)(ID2D1EffectContext2*, UINT32, const D2D1_BLEND_DESCRIPTION*, ID2D1BlendTransform**))this->v->tbl[7])(this, numInputs, blendDescription, transform); }
static inline HRESULT                           ID2D1EffectContext2_CreateBorderTransform                    (ID2D1EffectContext2* this, D2D1_EXTEND_MODE extendModeX, D2D1_EXTEND_MODE extendModeY, ID2D1BorderTransform** transform) { return ((HRESULT (WINAPI*)(ID2D1EffectContext2*, D2D1_EXTEND_MODE, D2D1_EXTEND_MODE, ID2D1BorderTransform**))this->v->tbl[8])(this, extendModeX, extendModeY, transform); }
static inline HRESULT                           ID2D1EffectContext2_CreateOffsetTransform                    (ID2D1EffectContext2* this, POINT offset, ID2D1OffsetTransform** transform) { return ((HRESULT (WINAPI*)(ID2D1EffectContext2*, POINT, ID2D1OffsetTransform**))this->v->tbl[9])(this, offset, transform); }
static inline HRESULT                           ID2D1EffectContext2_CreateBoundsAdjustmentTransform          (ID2D1EffectContext2* this, const RECT* outputRectangle, ID2D1BoundsAdjustmentTransform** transform) { return ((HRESULT (WINAPI*)(ID2D1EffectContext2*, const RECT*, ID2D1BoundsAdjustmentTransform**))this->v->tbl[10])(this, outputRectangle, transform); }
static inline HRESULT                           ID2D1EffectContext2_LoadPixelShader                          (ID2D1EffectContext2* this, const GUID* shaderId, const UINT8* shaderBuffer, UINT32 shaderBufferCount) { return ((HRESULT (WINAPI*)(ID2D1EffectContext2*, const GUID*, const UINT8*, UINT32))this->v->tbl[11])(this, shaderId, shaderBuffer, shaderBufferCount); }
static inline HRESULT                           ID2D1EffectContext2_LoadVertexShader                         (ID2D1EffectContext2* this, const GUID* resourceId, const UINT8* shaderBuffer, UINT32 shaderBufferCount) { return ((HRESULT (WINAPI*)(ID2D1EffectContext2*, const GUID*, const UINT8*, UINT32))this->v->tbl[12])(this, resourceId, shaderBuffer, shaderBufferCount); }
static inline HRESULT                           ID2D1EffectContext2_LoadComputeShader                        (ID2D1EffectContext2* this, const GUID* resourceId, const UINT8* shaderBuffer, UINT32 shaderBufferCount) { return ((HRESULT (WINAPI*)(ID2D1EffectContext2*, const GUID*, const UINT8*, UINT32))this->v->tbl[13])(this, resourceId, shaderBuffer, shaderBufferCount); }
static inline BOOL                              ID2D1EffectContext2_IsShaderLoaded                           (ID2D1EffectContext2* this, const GUID* shaderId) { return ((BOOL (WINAPI*)(ID2D1EffectContext2*, const GUID*))this->v->tbl[14])(this, shaderId); }
static inline HRESULT                           ID2D1EffectContext2_CreateResourceTexture                    (ID2D1EffectContext2* this, const GUID* resourceId, const D2D1_RESOURCE_TEXTURE_PROPERTIES* resourceTextureProperties, const UINT8* data, const UINT32* strides, UINT32 dataSize, ID2D1ResourceTexture** resourceTexture) { return ((HRESULT (WINAPI*)(ID2D1EffectContext2*, const GUID*, const D2D1_RESOURCE_TEXTURE_PROPERTIES*, const UINT8*, const UINT32*, UINT32, ID2D1ResourceTexture**))this->v->tbl[15])(this, resourceId, resourceTextureProperties, data, strides, dataSize, resourceTexture); }
static inline HRESULT                           ID2D1EffectContext2_FindResourceTexture                      (ID2D1EffectContext2* this, const GUID* resourceId, ID2D1ResourceTexture** resourceTexture) { return ((HRESULT (WINAPI*)(ID2D1EffectContext2*, const GUID*, ID2D1ResourceTexture**))this->v->tbl[16])(this, resourceId, resourceTexture); }
static inline HRESULT                           ID2D1EffectContext2_CreateVertexBuffer                       (ID2D1EffectContext2* this, const D2D1_VERTEX_BUFFER_PROPERTIES* vertexBufferProperties, const GUID* resourceId, const D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES* customVertexBufferProperties, ID2D1VertexBuffer** buffer) { return ((HRESULT (WINAPI*)(ID2D1EffectContext2*, const D2D1_VERTEX_BUFFER_PROPERTIES*, const GUID*, const D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES*, ID2D1VertexBuffer**))this->v->tbl[17])(this, vertexBufferProperties, resourceId, customVertexBufferProperties, buffer); }
static inline HRESULT                           ID2D1EffectContext2_FindVertexBuffer                         (ID2D1EffectContext2* this, const GUID* resourceId, ID2D1VertexBuffer** buffer) { return ((HRESULT (WINAPI*)(ID2D1EffectContext2*, const GUID*, ID2D1VertexBuffer**))this->v->tbl[18])(this, resourceId, buffer); }
static inline HRESULT                           ID2D1EffectContext2_CreateColorContext                       (ID2D1EffectContext2* this, D2D1_COLOR_SPACE space, const UINT8* profile, UINT32 profileSize, ID2D1ColorContext** colorContext) { return ((HRESULT (WINAPI*)(ID2D1EffectContext2*, D2D1_COLOR_SPACE, const UINT8*, UINT32, ID2D1ColorContext**))this->v->tbl[19])(this, space, profile, profileSize, colorContext); }
static inline HRESULT                           ID2D1EffectContext2_CreateColorContextFromFilename           (ID2D1EffectContext2* this, const WCHAR* filename, ID2D1ColorContext** colorContext) { return ((HRESULT (WINAPI*)(ID2D1EffectContext2*, const WCHAR*, ID2D1ColorContext**))this->v->tbl[20])(this, filename, colorContext); }
static inline HRESULT                           ID2D1EffectContext2_CreateColorContextFromWicColorContext    (ID2D1EffectContext2* this, IWICColorContext* wicColorContext, ID2D1ColorContext** colorContext) { return ((HRESULT (WINAPI*)(ID2D1EffectContext2*, IWICColorContext*, ID2D1ColorContext**))this->v->tbl[21])(this, wicColorContext, colorContext); }
static inline HRESULT                           ID2D1EffectContext2_CheckFeatureSupport                      (ID2D1EffectContext2* this, D2D1_FEATURE feature, void* featureSupportData, UINT32 featureSupportDataSize) { return ((HRESULT (WINAPI*)(ID2D1EffectContext2*, D2D1_FEATURE, void*, UINT32))this->v->tbl[22])(this, feature, featureSupportData, featureSupportDataSize); }
static inline BOOL                              ID2D1EffectContext2_IsBufferPrecisionSupported               (ID2D1EffectContext2* this, D2D1_BUFFER_PRECISION bufferPrecision) { return ((BOOL (WINAPI*)(ID2D1EffectContext2*, D2D1_BUFFER_PRECISION))this->v->tbl[23])(this, bufferPrecision); }
static inline HRESULT                           ID2D1EffectContext2_CreateLookupTable3D                      (ID2D1EffectContext2* this, D2D1_BUFFER_PRECISION precision, const UINT32* extents, const UINT8* data, UINT32 dataCount, const UINT32* strides, ID2D1LookupTable3D** lookupTable) { return ((HRESULT (WINAPI*)(ID2D1EffectContext2*, D2D1_BUFFER_PRECISION, const UINT32*, const UINT8*, UINT32, const UINT32*, ID2D1LookupTable3D**))this->v->tbl[24])(this, precision, extents, data, dataCount, strides, lookupTable); }
static inline HRESULT                           ID2D1EffectContext2_CreateColorContextFromDxgiColorSpace     (ID2D1EffectContext2* this, DXGI_COLOR_SPACE_TYPE colorSpace, ID2D1ColorContext1** colorContext) { return ((HRESULT (WINAPI*)(ID2D1EffectContext2*, DXGI_COLOR_SPACE_TYPE, ID2D1ColorContext1**))this->v->tbl[25])(this, colorSpace, colorContext); }
static inline HRESULT                           ID2D1EffectContext2_CreateColorContextFromSimpleColorProfile (ID2D1EffectContext2* this, const D2D1_SIMPLE_COLOR_PROFILE* simpleProfile, ID2D1ColorContext1** colorContext) { return ((HRESULT (WINAPI*)(ID2D1EffectContext2*, const D2D1_SIMPLE_COLOR_PROFILE*, ID2D1ColorContext1**))this->v->tbl[26])(this, simpleProfile, colorContext); }

static inline HRESULT                           ID2D1EffectImpl_QueryInterface                               (ID2D1EffectImpl* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1EffectImpl*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1EffectImpl_AddRef                                       (ID2D1EffectImpl* this) { return ((UINT32 (WINAPI*)(ID2D1EffectImpl*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1EffectImpl_Release                                      (ID2D1EffectImpl* this) { return ((UINT32 (WINAPI*)(ID2D1EffectImpl*))this->v->tbl[2])(this); }
static inline HRESULT                           ID2D1EffectImpl_Initialize                                   (ID2D1EffectImpl* this, ID2D1EffectContext* effectContext, ID2D1TransformGraph* transformGraph) { return ((HRESULT (WINAPI*)(ID2D1EffectImpl*, ID2D1EffectContext*, ID2D1TransformGraph*))this->v->tbl[3])(this, effectContext, transformGraph); }
static inline HRESULT                           ID2D1EffectImpl_PrepareForRender                             (ID2D1EffectImpl* this, D2D1_CHANGE_TYPE changeType) { return ((HRESULT (WINAPI*)(ID2D1EffectImpl*, D2D1_CHANGE_TYPE))this->v->tbl[4])(this, changeType); }
static inline HRESULT                           ID2D1EffectImpl_SetGraph                                     (ID2D1EffectImpl* this, ID2D1TransformGraph* transformGraph) { return ((HRESULT (WINAPI*)(ID2D1EffectImpl*, ID2D1TransformGraph*))this->v->tbl[5])(this, transformGraph); }

static inline HRESULT                           ID2D1EllipseGeometry_QueryInterface                          (ID2D1EllipseGeometry* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1EllipseGeometry*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1EllipseGeometry_AddRef                                  (ID2D1EllipseGeometry* this) { return ((UINT32 (WINAPI*)(ID2D1EllipseGeometry*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1EllipseGeometry_Release                                 (ID2D1EllipseGeometry* this) { return ((UINT32 (WINAPI*)(ID2D1EllipseGeometry*))this->v->tbl[2])(this); }
static inline void                              ID2D1EllipseGeometry_GetFactory                              (ID2D1EllipseGeometry* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1EllipseGeometry*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline HRESULT                           ID2D1EllipseGeometry_GetBounds                               (ID2D1EllipseGeometry* this, const D2D_MATRIX_3X2_F* worldTransform, D2D_RECT_F* bounds) { return ((HRESULT (WINAPI*)(ID2D1EllipseGeometry*, const D2D_MATRIX_3X2_F*, D2D_RECT_F*))this->v->tbl[4])(this, worldTransform, bounds); }
static inline HRESULT                           ID2D1EllipseGeometry_GetWidenedBounds                        (ID2D1EllipseGeometry* this, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, D2D_RECT_F* bounds) { return ((HRESULT (WINAPI*)(ID2D1EllipseGeometry*, FLOAT, ID2D1StrokeStyle*, const D2D_MATRIX_3X2_F*, FLOAT, D2D_RECT_F*))this->v->tbl[5])(this, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, bounds); }
static inline HRESULT                           ID2D1EllipseGeometry_StrokeContainsPoint                     (ID2D1EllipseGeometry* this, D2D_POINT_2F point, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, BOOL* contains) { return ((HRESULT (WINAPI*)(ID2D1EllipseGeometry*, D2D_POINT_2F, FLOAT, ID2D1StrokeStyle*, const D2D_MATRIX_3X2_F*, FLOAT, BOOL*))this->v->tbl[6])(this, point, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, contains); }
static inline HRESULT                           ID2D1EllipseGeometry_FillContainsPoint                       (ID2D1EllipseGeometry* this, D2D_POINT_2F point, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, BOOL* contains) { return ((HRESULT (WINAPI*)(ID2D1EllipseGeometry*, D2D_POINT_2F, const D2D_MATRIX_3X2_F*, FLOAT, BOOL*))this->v->tbl[7])(this, point, worldTransform, flatteningTolerance, contains); }
static inline HRESULT                           ID2D1EllipseGeometry_CompareWithGeometry                     (ID2D1EllipseGeometry* this, ID2D1Geometry* inputGeometry, const D2D_MATRIX_3X2_F* inputGeometryTransform, FLOAT flatteningTolerance, D2D1_GEOMETRY_RELATION* relation) { return ((HRESULT (WINAPI*)(ID2D1EllipseGeometry*, ID2D1Geometry*, const D2D_MATRIX_3X2_F*, FLOAT, D2D1_GEOMETRY_RELATION*))this->v->tbl[8])(this, inputGeometry, inputGeometryTransform, flatteningTolerance, relation); }
static inline HRESULT                           ID2D1EllipseGeometry_Simplify                                (ID2D1EllipseGeometry* this, D2D1_GEOMETRY_SIMPLIFICATION_OPTION simplificationOption, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, ID2D1SimplifiedGeometrySink* geometrySink) { return ((HRESULT (WINAPI*)(ID2D1EllipseGeometry*, D2D1_GEOMETRY_SIMPLIFICATION_OPTION, const D2D_MATRIX_3X2_F*, FLOAT, ID2D1SimplifiedGeometrySink*))this->v->tbl[9])(this, simplificationOption, worldTransform, flatteningTolerance, geometrySink); }
static inline HRESULT                           ID2D1EllipseGeometry_Tessellate                              (ID2D1EllipseGeometry* this, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, ID2D1TessellationSink* tessellationSink) { return ((HRESULT (WINAPI*)(ID2D1EllipseGeometry*, const D2D_MATRIX_3X2_F*, FLOAT, ID2D1TessellationSink*))this->v->tbl[10])(this, worldTransform, flatteningTolerance, tessellationSink); }
static inline HRESULT                           ID2D1EllipseGeometry_CombineWithGeometry                     (ID2D1EllipseGeometry* this, ID2D1Geometry* inputGeometry, D2D1_COMBINE_MODE combineMode, const D2D_MATRIX_3X2_F* inputGeometryTransform, FLOAT flatteningTolerance, ID2D1SimplifiedGeometrySink* geometrySink) { return ((HRESULT (WINAPI*)(ID2D1EllipseGeometry*, ID2D1Geometry*, D2D1_COMBINE_MODE, const D2D_MATRIX_3X2_F*, FLOAT, ID2D1SimplifiedGeometrySink*))this->v->tbl[11])(this, inputGeometry, combineMode, inputGeometryTransform, flatteningTolerance, geometrySink); }
static inline HRESULT                           ID2D1EllipseGeometry_Outline                                 (ID2D1EllipseGeometry* this, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, ID2D1SimplifiedGeometrySink* geometrySink) { return ((HRESULT (WINAPI*)(ID2D1EllipseGeometry*, const D2D_MATRIX_3X2_F*, FLOAT, ID2D1SimplifiedGeometrySink*))this->v->tbl[12])(this, worldTransform, flatteningTolerance, geometrySink); }
static inline HRESULT                           ID2D1EllipseGeometry_ComputeArea                             (ID2D1EllipseGeometry* this, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, FLOAT* area) { return ((HRESULT (WINAPI*)(ID2D1EllipseGeometry*, const D2D_MATRIX_3X2_F*, FLOAT, FLOAT*))this->v->tbl[13])(this, worldTransform, flatteningTolerance, area); }
static inline HRESULT                           ID2D1EllipseGeometry_ComputeLength                           (ID2D1EllipseGeometry* this, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, FLOAT* length) { return ((HRESULT (WINAPI*)(ID2D1EllipseGeometry*, const D2D_MATRIX_3X2_F*, FLOAT, FLOAT*))this->v->tbl[14])(this, worldTransform, flatteningTolerance, length); }
static inline HRESULT                           ID2D1EllipseGeometry_ComputePointAtLength                    (ID2D1EllipseGeometry* this, FLOAT length, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, D2D_POINT_2F* point, D2D_POINT_2F* unitTangentVector) { return ((HRESULT (WINAPI*)(ID2D1EllipseGeometry*, FLOAT, const D2D_MATRIX_3X2_F*, FLOAT, D2D_POINT_2F*, D2D_POINT_2F*))this->v->tbl[15])(this, length, worldTransform, flatteningTolerance, point, unitTangentVector); }
static inline HRESULT                           ID2D1EllipseGeometry_Widen                                   (ID2D1EllipseGeometry* this, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, ID2D1SimplifiedGeometrySink* geometrySink) { return ((HRESULT (WINAPI*)(ID2D1EllipseGeometry*, FLOAT, ID2D1StrokeStyle*, const D2D_MATRIX_3X2_F*, FLOAT, ID2D1SimplifiedGeometrySink*))this->v->tbl[16])(this, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, geometrySink); }
static inline void                              ID2D1EllipseGeometry_GetEllipse                              (ID2D1EllipseGeometry* this, D2D1_ELLIPSE* ellipse) { ((void (WINAPI*)(ID2D1EllipseGeometry*, D2D1_ELLIPSE*))this->v->tbl[17])(this, ellipse); }

static inline HRESULT                           ID2D1Factory_QueryInterface                                  (ID2D1Factory* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1Factory*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1Factory_AddRef                                          (ID2D1Factory* this) { return ((UINT32 (WINAPI*)(ID2D1Factory*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1Factory_Release                                         (ID2D1Factory* this) { return ((UINT32 (WINAPI*)(ID2D1Factory*))this->v->tbl[2])(this); }
static inline HRESULT                           ID2D1Factory_ReloadSystemMetrics                             (ID2D1Factory* this) { return ((HRESULT (WINAPI*)(ID2D1Factory*))this->v->tbl[3])(this); }
__declspec(deprecated("Deprecated. Use DisplayInformation::LogicalDpi for Windows Store Apps or GetDpiForWindow for desktop apps."))
static inline void                              ID2D1Factory_GetDesktopDpi                                   (ID2D1Factory* this, FLOAT* dpiX, FLOAT* dpiY) { ((void (WINAPI*)(ID2D1Factory*, FLOAT*, FLOAT*))this->v->tbl[4])(this, dpiX, dpiY); }
static inline HRESULT                           ID2D1Factory_CreateRectangleGeometry                         (ID2D1Factory* this, const D2D_RECT_F* rectangle, ID2D1RectangleGeometry** rectangleGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory*, const D2D_RECT_F*, ID2D1RectangleGeometry**))this->v->tbl[5])(this, rectangle, rectangleGeometry); }
static inline HRESULT                           ID2D1Factory_CreateRoundedRectangleGeometry                  (ID2D1Factory* this, const D2D1_ROUNDED_RECT* roundedRectangle, ID2D1RoundedRectangleGeometry** roundedRectangleGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory*, const D2D1_ROUNDED_RECT*, ID2D1RoundedRectangleGeometry**))this->v->tbl[6])(this, roundedRectangle, roundedRectangleGeometry); }
static inline HRESULT                           ID2D1Factory_CreateEllipseGeometry                           (ID2D1Factory* this, const D2D1_ELLIPSE* ellipse, ID2D1EllipseGeometry** ellipseGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory*, const D2D1_ELLIPSE*, ID2D1EllipseGeometry**))this->v->tbl[7])(this, ellipse, ellipseGeometry); }
static inline HRESULT                           ID2D1Factory_CreateGeometryGroup                             (ID2D1Factory* this, D2D1_FILL_MODE fillMode, ID2D1Geometry** geometries, UINT32 geometriesCount, ID2D1GeometryGroup** geometryGroup) { return ((HRESULT (WINAPI*)(ID2D1Factory*, D2D1_FILL_MODE, ID2D1Geometry**, UINT32, ID2D1GeometryGroup**))this->v->tbl[8])(this, fillMode, geometries, geometriesCount, geometryGroup); }
static inline HRESULT                           ID2D1Factory_CreateTransformedGeometry                       (ID2D1Factory* this, ID2D1Geometry* sourceGeometry, const D2D_MATRIX_3X2_F* transform, ID2D1TransformedGeometry** transformedGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory*, ID2D1Geometry*, const D2D_MATRIX_3X2_F*, ID2D1TransformedGeometry**))this->v->tbl[9])(this, sourceGeometry, transform, transformedGeometry); }
static inline HRESULT                           ID2D1Factory_CreatePathGeometry                              (ID2D1Factory* this, ID2D1PathGeometry** pathGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory*, ID2D1PathGeometry**))this->v->tbl[10])(this, pathGeometry); }
static inline HRESULT                           ID2D1Factory_CreateStrokeStyle                               (ID2D1Factory* this, const D2D1_STROKE_STYLE_PROPERTIES* strokeStyleProperties, const FLOAT* dashes, UINT32 dashesCount, ID2D1StrokeStyle** strokeStyle) { return ((HRESULT (WINAPI*)(ID2D1Factory*, const D2D1_STROKE_STYLE_PROPERTIES*, const FLOAT*, UINT32, ID2D1StrokeStyle**))this->v->tbl[11])(this, strokeStyleProperties, dashes, dashesCount, strokeStyle); }
static inline HRESULT                           ID2D1Factory_CreateDrawingStateBlock                         (ID2D1Factory* this, const D2D1_DRAWING_STATE_DESCRIPTION* drawingStateDescription, IDWriteRenderingParams* textRenderingParams, ID2D1DrawingStateBlock** drawingStateBlock) { return ((HRESULT (WINAPI*)(ID2D1Factory*, const D2D1_DRAWING_STATE_DESCRIPTION*, IDWriteRenderingParams*, ID2D1DrawingStateBlock**))this->v->tbl[12])(this, drawingStateDescription, textRenderingParams, drawingStateBlock); }
static inline HRESULT                           ID2D1Factory_CreateWicBitmapRenderTarget                     (ID2D1Factory* this, IWICBitmap* target, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties, ID2D1RenderTarget** renderTarget) { return ((HRESULT (WINAPI*)(ID2D1Factory*, IWICBitmap*, const D2D1_RENDER_TARGET_PROPERTIES*, ID2D1RenderTarget**))this->v->tbl[13])(this, target, renderTargetProperties, renderTarget); }
static inline HRESULT                           ID2D1Factory_CreateHwndRenderTarget                          (ID2D1Factory* this, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties, const D2D1_HWND_RENDER_TARGET_PROPERTIES* hwndRenderTargetProperties, ID2D1HwndRenderTarget** hwndRenderTarget) { return ((HRESULT (WINAPI*)(ID2D1Factory*, const D2D1_RENDER_TARGET_PROPERTIES*, const D2D1_HWND_RENDER_TARGET_PROPERTIES*, ID2D1HwndRenderTarget**))this->v->tbl[14])(this, renderTargetProperties, hwndRenderTargetProperties, hwndRenderTarget); }
static inline HRESULT                           ID2D1Factory_CreateDxgiSurfaceRenderTarget                   (ID2D1Factory* this, IDXGISurface* dxgiSurface, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties, ID2D1RenderTarget** renderTarget) { return ((HRESULT (WINAPI*)(ID2D1Factory*, IDXGISurface*, const D2D1_RENDER_TARGET_PROPERTIES*, ID2D1RenderTarget**))this->v->tbl[15])(this, dxgiSurface, renderTargetProperties, renderTarget); }
static inline HRESULT                           ID2D1Factory_CreateDCRenderTarget                            (ID2D1Factory* this, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties, ID2D1DCRenderTarget** dcRenderTarget) { return ((HRESULT (WINAPI*)(ID2D1Factory*, const D2D1_RENDER_TARGET_PROPERTIES*, ID2D1DCRenderTarget**))this->v->tbl[16])(this, renderTargetProperties, dcRenderTarget); }

static inline HRESULT                           ID2D1Factory1_QueryInterface                                 (ID2D1Factory1* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1Factory1*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1Factory1_AddRef                                         (ID2D1Factory1* this) { return ((UINT32 (WINAPI*)(ID2D1Factory1*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1Factory1_Release                                        (ID2D1Factory1* this) { return ((UINT32 (WINAPI*)(ID2D1Factory1*))this->v->tbl[2])(this); }
static inline HRESULT                           ID2D1Factory1_ReloadSystemMetrics                            (ID2D1Factory1* this) { return ((HRESULT (WINAPI*)(ID2D1Factory1*))this->v->tbl[3])(this); }
__declspec(deprecated("Deprecated. Use DisplayInformation::LogicalDpi for Windows Store Apps or GetDpiForWindow for desktop apps."))
static inline void                              ID2D1Factory1_GetDesktopDpi                                  (ID2D1Factory1* this, FLOAT* dpiX, FLOAT* dpiY) { ((void (WINAPI*)(ID2D1Factory1*, FLOAT*, FLOAT*))this->v->tbl[4])(this, dpiX, dpiY); }
static inline HRESULT                           ID2D1Factory1_CreateRectangleGeometry                        (ID2D1Factory1* this, const D2D_RECT_F* rectangle, ID2D1RectangleGeometry** rectangleGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory1*, const D2D_RECT_F*, ID2D1RectangleGeometry**))this->v->tbl[5])(this, rectangle, rectangleGeometry); }
static inline HRESULT                           ID2D1Factory1_CreateRoundedRectangleGeometry                 (ID2D1Factory1* this, const D2D1_ROUNDED_RECT* roundedRectangle, ID2D1RoundedRectangleGeometry** roundedRectangleGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory1*, const D2D1_ROUNDED_RECT*, ID2D1RoundedRectangleGeometry**))this->v->tbl[6])(this, roundedRectangle, roundedRectangleGeometry); }
static inline HRESULT                           ID2D1Factory1_CreateEllipseGeometry                          (ID2D1Factory1* this, const D2D1_ELLIPSE* ellipse, ID2D1EllipseGeometry** ellipseGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory1*, const D2D1_ELLIPSE*, ID2D1EllipseGeometry**))this->v->tbl[7])(this, ellipse, ellipseGeometry); }
static inline HRESULT                           ID2D1Factory1_CreateGeometryGroup                            (ID2D1Factory1* this, D2D1_FILL_MODE fillMode, ID2D1Geometry** geometries, UINT32 geometriesCount, ID2D1GeometryGroup** geometryGroup) { return ((HRESULT (WINAPI*)(ID2D1Factory1*, D2D1_FILL_MODE, ID2D1Geometry**, UINT32, ID2D1GeometryGroup**))this->v->tbl[8])(this, fillMode, geometries, geometriesCount, geometryGroup); }
static inline HRESULT                           ID2D1Factory1_CreateTransformedGeometry                      (ID2D1Factory1* this, ID2D1Geometry* sourceGeometry, const D2D_MATRIX_3X2_F* transform, ID2D1TransformedGeometry** transformedGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory1*, ID2D1Geometry*, const D2D_MATRIX_3X2_F*, ID2D1TransformedGeometry**))this->v->tbl[9])(this, sourceGeometry, transform, transformedGeometry); }
static inline HRESULT                           ID2D1Factory1_CreatePathGeometry                             (ID2D1Factory1* this, ID2D1PathGeometry** pathGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory1*, ID2D1PathGeometry**))this->v->tbl[10])(this, pathGeometry); }
static inline HRESULT                           ID2D1Factory1_CreateStrokeStyle                              (ID2D1Factory1* this, const D2D1_STROKE_STYLE_PROPERTIES* strokeStyleProperties, const FLOAT* dashes, UINT32 dashesCount, ID2D1StrokeStyle** strokeStyle) { return ((HRESULT (WINAPI*)(ID2D1Factory1*, const D2D1_STROKE_STYLE_PROPERTIES*, const FLOAT*, UINT32, ID2D1StrokeStyle**))this->v->tbl[11])(this, strokeStyleProperties, dashes, dashesCount, strokeStyle); }
static inline HRESULT                           ID2D1Factory1_CreateDrawingStateBlock                        (ID2D1Factory1* this, const D2D1_DRAWING_STATE_DESCRIPTION* drawingStateDescription, IDWriteRenderingParams* textRenderingParams, ID2D1DrawingStateBlock** drawingStateBlock) { return ((HRESULT (WINAPI*)(ID2D1Factory1*, const D2D1_DRAWING_STATE_DESCRIPTION*, IDWriteRenderingParams*, ID2D1DrawingStateBlock**))this->v->tbl[12])(this, drawingStateDescription, textRenderingParams, drawingStateBlock); }
static inline HRESULT                           ID2D1Factory1_CreateWicBitmapRenderTarget                    (ID2D1Factory1* this, IWICBitmap* target, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties, ID2D1RenderTarget** renderTarget) { return ((HRESULT (WINAPI*)(ID2D1Factory1*, IWICBitmap*, const D2D1_RENDER_TARGET_PROPERTIES*, ID2D1RenderTarget**))this->v->tbl[13])(this, target, renderTargetProperties, renderTarget); }
static inline HRESULT                           ID2D1Factory1_CreateHwndRenderTarget                         (ID2D1Factory1* this, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties, const D2D1_HWND_RENDER_TARGET_PROPERTIES* hwndRenderTargetProperties, ID2D1HwndRenderTarget** hwndRenderTarget) { return ((HRESULT (WINAPI*)(ID2D1Factory1*, const D2D1_RENDER_TARGET_PROPERTIES*, const D2D1_HWND_RENDER_TARGET_PROPERTIES*, ID2D1HwndRenderTarget**))this->v->tbl[14])(this, renderTargetProperties, hwndRenderTargetProperties, hwndRenderTarget); }
static inline HRESULT                           ID2D1Factory1_CreateDxgiSurfaceRenderTarget                  (ID2D1Factory1* this, IDXGISurface* dxgiSurface, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties, ID2D1RenderTarget** renderTarget) { return ((HRESULT (WINAPI*)(ID2D1Factory1*, IDXGISurface*, const D2D1_RENDER_TARGET_PROPERTIES*, ID2D1RenderTarget**))this->v->tbl[15])(this, dxgiSurface, renderTargetProperties, renderTarget); }
static inline HRESULT                           ID2D1Factory1_CreateDCRenderTarget                           (ID2D1Factory1* this, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties, ID2D1DCRenderTarget** dcRenderTarget) { return ((HRESULT (WINAPI*)(ID2D1Factory1*, const D2D1_RENDER_TARGET_PROPERTIES*, ID2D1DCRenderTarget**))this->v->tbl[16])(this, renderTargetProperties, dcRenderTarget); }
static inline HRESULT                           ID2D1Factory1_CreateDevice                                   (ID2D1Factory1* this, IDXGIDevice* dxgiDevice, ID2D1Device** d2dDevice) { return ((HRESULT (WINAPI*)(ID2D1Factory1*, IDXGIDevice*, ID2D1Device**))this->v->tbl[17])(this, dxgiDevice, d2dDevice); }
static inline HRESULT                           ID2D1Factory1_CreateStrokeStyle1                             (ID2D1Factory1* this, const D2D1_STROKE_STYLE_PROPERTIES1* strokeStyleProperties, const FLOAT* dashes, UINT32 dashesCount, ID2D1StrokeStyle1** strokeStyle) { return ((HRESULT (WINAPI*)(ID2D1Factory1*, const D2D1_STROKE_STYLE_PROPERTIES1*, const FLOAT*, UINT32, ID2D1StrokeStyle1**))this->v->tbl[18])(this, strokeStyleProperties, dashes, dashesCount, strokeStyle); }
static inline HRESULT                           ID2D1Factory1_CreatePathGeometry1                            (ID2D1Factory1* this, ID2D1PathGeometry1** pathGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory1*, ID2D1PathGeometry1**))this->v->tbl[19])(this, pathGeometry); }
static inline HRESULT                           ID2D1Factory1_CreateDrawingStateBlock1                       (ID2D1Factory1* this, const D2D1_DRAWING_STATE_DESCRIPTION1* drawingStateDescription, IDWriteRenderingParams* textRenderingParams, ID2D1DrawingStateBlock1** drawingStateBlock) { return ((HRESULT (WINAPI*)(ID2D1Factory1*, const D2D1_DRAWING_STATE_DESCRIPTION1*, IDWriteRenderingParams*, ID2D1DrawingStateBlock1**))this->v->tbl[20])(this, drawingStateDescription, textRenderingParams, drawingStateBlock); }
static inline HRESULT                           ID2D1Factory1_CreateGdiMetafile                              (ID2D1Factory1* this, IStream* metafileStream, ID2D1GdiMetafile** metafile) { return ((HRESULT (WINAPI*)(ID2D1Factory1*, IStream*, ID2D1GdiMetafile**))this->v->tbl[21])(this, metafileStream, metafile); }
static inline HRESULT                           ID2D1Factory1_RegisterEffectFromStream                       (ID2D1Factory1* this, const GUID* classId, IStream* propertyXml, const D2D1_PROPERTY_BINDING* bindings, UINT32 bindingsCount, const PD2D1_EFFECT_FACTORY effectFactory) { return ((HRESULT (WINAPI*)(ID2D1Factory1*, const GUID*, IStream*, const D2D1_PROPERTY_BINDING*, UINT32, const PD2D1_EFFECT_FACTORY))this->v->tbl[22])(this, classId, propertyXml, bindings, bindingsCount, effectFactory); }
static inline HRESULT                           ID2D1Factory1_RegisterEffectFromString                       (ID2D1Factory1* this, const GUID* classId, const WCHAR* propertyXml, const D2D1_PROPERTY_BINDING* bindings, UINT32 bindingsCount, const PD2D1_EFFECT_FACTORY effectFactory) { return ((HRESULT (WINAPI*)(ID2D1Factory1*, const GUID*, const WCHAR*, const D2D1_PROPERTY_BINDING*, UINT32, const PD2D1_EFFECT_FACTORY))this->v->tbl[23])(this, classId, propertyXml, bindings, bindingsCount, effectFactory); }
static inline HRESULT                           ID2D1Factory1_UnregisterEffect                               (ID2D1Factory1* this, const GUID* classId) { return ((HRESULT (WINAPI*)(ID2D1Factory1*, const GUID*))this->v->tbl[24])(this, classId); }
static inline HRESULT                           ID2D1Factory1_GetRegisteredEffects                           (ID2D1Factory1* this, GUID* effects, UINT32 effectsCount, UINT32* effectsReturned, UINT32* effectsRegistered) { return ((HRESULT (WINAPI*)(ID2D1Factory1*, GUID*, UINT32, UINT32*, UINT32*))this->v->tbl[25])(this, effects, effectsCount, effectsReturned, effectsRegistered); }
static inline HRESULT                           ID2D1Factory1_GetEffectProperties                            (ID2D1Factory1* this, const GUID* effectId, ID2D1Properties** properties) { return ((HRESULT (WINAPI*)(ID2D1Factory1*, const GUID*, ID2D1Properties**))this->v->tbl[26])(this, effectId, properties); }

static inline HRESULT                           ID2D1Factory2_QueryInterface                                 (ID2D1Factory2* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1Factory2*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1Factory2_AddRef                                         (ID2D1Factory2* this) { return ((UINT32 (WINAPI*)(ID2D1Factory2*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1Factory2_Release                                        (ID2D1Factory2* this) { return ((UINT32 (WINAPI*)(ID2D1Factory2*))this->v->tbl[2])(this); }
static inline HRESULT                           ID2D1Factory2_ReloadSystemMetrics                            (ID2D1Factory2* this) { return ((HRESULT (WINAPI*)(ID2D1Factory2*))this->v->tbl[3])(this); }
__declspec(deprecated("Deprecated. Use DisplayInformation::LogicalDpi for Windows Store Apps or GetDpiForWindow for desktop apps."))
static inline void                              ID2D1Factory2_GetDesktopDpi                                  (ID2D1Factory2* this, FLOAT* dpiX, FLOAT* dpiY) { ((void (WINAPI*)(ID2D1Factory2*, FLOAT*, FLOAT*))this->v->tbl[4])(this, dpiX, dpiY); }
static inline HRESULT                           ID2D1Factory2_CreateRectangleGeometry                        (ID2D1Factory2* this, const D2D_RECT_F* rectangle, ID2D1RectangleGeometry** rectangleGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory2*, const D2D_RECT_F*, ID2D1RectangleGeometry**))this->v->tbl[5])(this, rectangle, rectangleGeometry); }
static inline HRESULT                           ID2D1Factory2_CreateRoundedRectangleGeometry                 (ID2D1Factory2* this, const D2D1_ROUNDED_RECT* roundedRectangle, ID2D1RoundedRectangleGeometry** roundedRectangleGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory2*, const D2D1_ROUNDED_RECT*, ID2D1RoundedRectangleGeometry**))this->v->tbl[6])(this, roundedRectangle, roundedRectangleGeometry); }
static inline HRESULT                           ID2D1Factory2_CreateEllipseGeometry                          (ID2D1Factory2* this, const D2D1_ELLIPSE* ellipse, ID2D1EllipseGeometry** ellipseGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory2*, const D2D1_ELLIPSE*, ID2D1EllipseGeometry**))this->v->tbl[7])(this, ellipse, ellipseGeometry); }
static inline HRESULT                           ID2D1Factory2_CreateGeometryGroup                            (ID2D1Factory2* this, D2D1_FILL_MODE fillMode, ID2D1Geometry** geometries, UINT32 geometriesCount, ID2D1GeometryGroup** geometryGroup) { return ((HRESULT (WINAPI*)(ID2D1Factory2*, D2D1_FILL_MODE, ID2D1Geometry**, UINT32, ID2D1GeometryGroup**))this->v->tbl[8])(this, fillMode, geometries, geometriesCount, geometryGroup); }
static inline HRESULT                           ID2D1Factory2_CreateTransformedGeometry                      (ID2D1Factory2* this, ID2D1Geometry* sourceGeometry, const D2D_MATRIX_3X2_F* transform, ID2D1TransformedGeometry** transformedGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory2*, ID2D1Geometry*, const D2D_MATRIX_3X2_F*, ID2D1TransformedGeometry**))this->v->tbl[9])(this, sourceGeometry, transform, transformedGeometry); }
static inline HRESULT                           ID2D1Factory2_CreatePathGeometry                             (ID2D1Factory2* this, ID2D1PathGeometry** pathGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory2*, ID2D1PathGeometry**))this->v->tbl[10])(this, pathGeometry); }
static inline HRESULT                           ID2D1Factory2_CreateStrokeStyle                              (ID2D1Factory2* this, const D2D1_STROKE_STYLE_PROPERTIES* strokeStyleProperties, const FLOAT* dashes, UINT32 dashesCount, ID2D1StrokeStyle** strokeStyle) { return ((HRESULT (WINAPI*)(ID2D1Factory2*, const D2D1_STROKE_STYLE_PROPERTIES*, const FLOAT*, UINT32, ID2D1StrokeStyle**))this->v->tbl[11])(this, strokeStyleProperties, dashes, dashesCount, strokeStyle); }
static inline HRESULT                           ID2D1Factory2_CreateDrawingStateBlock                        (ID2D1Factory2* this, const D2D1_DRAWING_STATE_DESCRIPTION* drawingStateDescription, IDWriteRenderingParams* textRenderingParams, ID2D1DrawingStateBlock** drawingStateBlock) { return ((HRESULT (WINAPI*)(ID2D1Factory2*, const D2D1_DRAWING_STATE_DESCRIPTION*, IDWriteRenderingParams*, ID2D1DrawingStateBlock**))this->v->tbl[12])(this, drawingStateDescription, textRenderingParams, drawingStateBlock); }
static inline HRESULT                           ID2D1Factory2_CreateWicBitmapRenderTarget                    (ID2D1Factory2* this, IWICBitmap* target, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties, ID2D1RenderTarget** renderTarget) { return ((HRESULT (WINAPI*)(ID2D1Factory2*, IWICBitmap*, const D2D1_RENDER_TARGET_PROPERTIES*, ID2D1RenderTarget**))this->v->tbl[13])(this, target, renderTargetProperties, renderTarget); }
static inline HRESULT                           ID2D1Factory2_CreateHwndRenderTarget                         (ID2D1Factory2* this, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties, const D2D1_HWND_RENDER_TARGET_PROPERTIES* hwndRenderTargetProperties, ID2D1HwndRenderTarget** hwndRenderTarget) { return ((HRESULT (WINAPI*)(ID2D1Factory2*, const D2D1_RENDER_TARGET_PROPERTIES*, const D2D1_HWND_RENDER_TARGET_PROPERTIES*, ID2D1HwndRenderTarget**))this->v->tbl[14])(this, renderTargetProperties, hwndRenderTargetProperties, hwndRenderTarget); }
static inline HRESULT                           ID2D1Factory2_CreateDxgiSurfaceRenderTarget                  (ID2D1Factory2* this, IDXGISurface* dxgiSurface, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties, ID2D1RenderTarget** renderTarget) { return ((HRESULT (WINAPI*)(ID2D1Factory2*, IDXGISurface*, const D2D1_RENDER_TARGET_PROPERTIES*, ID2D1RenderTarget**))this->v->tbl[15])(this, dxgiSurface, renderTargetProperties, renderTarget); }
static inline HRESULT                           ID2D1Factory2_CreateDCRenderTarget                           (ID2D1Factory2* this, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties, ID2D1DCRenderTarget** dcRenderTarget) { return ((HRESULT (WINAPI*)(ID2D1Factory2*, const D2D1_RENDER_TARGET_PROPERTIES*, ID2D1DCRenderTarget**))this->v->tbl[16])(this, renderTargetProperties, dcRenderTarget); }
static inline HRESULT                           ID2D1Factory2_CreateDevice                                   (ID2D1Factory2* this, IDXGIDevice* dxgiDevice, ID2D1Device** d2dDevice) { return ((HRESULT (WINAPI*)(ID2D1Factory2*, IDXGIDevice*, ID2D1Device**))this->v->tbl[17])(this, dxgiDevice, d2dDevice); }
static inline HRESULT                           ID2D1Factory2_CreateStrokeStyle1                             (ID2D1Factory2* this, const D2D1_STROKE_STYLE_PROPERTIES1* strokeStyleProperties, const FLOAT* dashes, UINT32 dashesCount, ID2D1StrokeStyle1** strokeStyle) { return ((HRESULT (WINAPI*)(ID2D1Factory2*, const D2D1_STROKE_STYLE_PROPERTIES1*, const FLOAT*, UINT32, ID2D1StrokeStyle1**))this->v->tbl[18])(this, strokeStyleProperties, dashes, dashesCount, strokeStyle); }
static inline HRESULT                           ID2D1Factory2_CreatePathGeometry1                            (ID2D1Factory2* this, ID2D1PathGeometry1** pathGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory2*, ID2D1PathGeometry1**))this->v->tbl[19])(this, pathGeometry); }
static inline HRESULT                           ID2D1Factory2_CreateDrawingStateBlock1                       (ID2D1Factory2* this, const D2D1_DRAWING_STATE_DESCRIPTION1* drawingStateDescription, IDWriteRenderingParams* textRenderingParams, ID2D1DrawingStateBlock1** drawingStateBlock) { return ((HRESULT (WINAPI*)(ID2D1Factory2*, const D2D1_DRAWING_STATE_DESCRIPTION1*, IDWriteRenderingParams*, ID2D1DrawingStateBlock1**))this->v->tbl[20])(this, drawingStateDescription, textRenderingParams, drawingStateBlock); }
static inline HRESULT                           ID2D1Factory2_CreateGdiMetafile                              (ID2D1Factory2* this, IStream* metafileStream, ID2D1GdiMetafile** metafile) { return ((HRESULT (WINAPI*)(ID2D1Factory2*, IStream*, ID2D1GdiMetafile**))this->v->tbl[21])(this, metafileStream, metafile); }
static inline HRESULT                           ID2D1Factory2_RegisterEffectFromStream                       (ID2D1Factory2* this, const GUID* classId, IStream* propertyXml, const D2D1_PROPERTY_BINDING* bindings, UINT32 bindingsCount, const PD2D1_EFFECT_FACTORY effectFactory) { return ((HRESULT (WINAPI*)(ID2D1Factory2*, const GUID*, IStream*, const D2D1_PROPERTY_BINDING*, UINT32, const PD2D1_EFFECT_FACTORY))this->v->tbl[22])(this, classId, propertyXml, bindings, bindingsCount, effectFactory); }
static inline HRESULT                           ID2D1Factory2_RegisterEffectFromString                       (ID2D1Factory2* this, const GUID* classId, const WCHAR* propertyXml, const D2D1_PROPERTY_BINDING* bindings, UINT32 bindingsCount, const PD2D1_EFFECT_FACTORY effectFactory) { return ((HRESULT (WINAPI*)(ID2D1Factory2*, const GUID*, const WCHAR*, const D2D1_PROPERTY_BINDING*, UINT32, const PD2D1_EFFECT_FACTORY))this->v->tbl[23])(this, classId, propertyXml, bindings, bindingsCount, effectFactory); }
static inline HRESULT                           ID2D1Factory2_UnregisterEffect                               (ID2D1Factory2* this, const GUID* classId) { return ((HRESULT (WINAPI*)(ID2D1Factory2*, const GUID*))this->v->tbl[24])(this, classId); }
static inline HRESULT                           ID2D1Factory2_GetRegisteredEffects                           (ID2D1Factory2* this, GUID* effects, UINT32 effectsCount, UINT32* effectsReturned, UINT32* effectsRegistered) { return ((HRESULT (WINAPI*)(ID2D1Factory2*, GUID*, UINT32, UINT32*, UINT32*))this->v->tbl[25])(this, effects, effectsCount, effectsReturned, effectsRegistered); }
static inline HRESULT                           ID2D1Factory2_GetEffectProperties                            (ID2D1Factory2* this, const GUID* effectId, ID2D1Properties** properties) { return ((HRESULT (WINAPI*)(ID2D1Factory2*, const GUID*, ID2D1Properties**))this->v->tbl[26])(this, effectId, properties); }
static inline HRESULT                           ID2D1Factory2_CreateDevice1                                  (ID2D1Factory2* this, IDXGIDevice* dxgiDevice, ID2D1Device1** d2dDevice1) { return ((HRESULT (WINAPI*)(ID2D1Factory2*, IDXGIDevice*, ID2D1Device1**))this->v->tbl[27])(this, dxgiDevice, d2dDevice1); }

static inline HRESULT                           ID2D1Factory3_QueryInterface                                 (ID2D1Factory3* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1Factory3*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1Factory3_AddRef                                         (ID2D1Factory3* this) { return ((UINT32 (WINAPI*)(ID2D1Factory3*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1Factory3_Release                                        (ID2D1Factory3* this) { return ((UINT32 (WINAPI*)(ID2D1Factory3*))this->v->tbl[2])(this); }
static inline HRESULT                           ID2D1Factory3_ReloadSystemMetrics                            (ID2D1Factory3* this) { return ((HRESULT (WINAPI*)(ID2D1Factory3*))this->v->tbl[3])(this); }
__declspec(deprecated("Deprecated. Use DisplayInformation::LogicalDpi for Windows Store Apps or GetDpiForWindow for desktop apps."))
static inline void                              ID2D1Factory3_GetDesktopDpi                                  (ID2D1Factory3* this, FLOAT* dpiX, FLOAT* dpiY) { ((void (WINAPI*)(ID2D1Factory3*, FLOAT*, FLOAT*))this->v->tbl[4])(this, dpiX, dpiY); }
static inline HRESULT                           ID2D1Factory3_CreateRectangleGeometry                        (ID2D1Factory3* this, const D2D_RECT_F* rectangle, ID2D1RectangleGeometry** rectangleGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory3*, const D2D_RECT_F*, ID2D1RectangleGeometry**))this->v->tbl[5])(this, rectangle, rectangleGeometry); }
static inline HRESULT                           ID2D1Factory3_CreateRoundedRectangleGeometry                 (ID2D1Factory3* this, const D2D1_ROUNDED_RECT* roundedRectangle, ID2D1RoundedRectangleGeometry** roundedRectangleGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory3*, const D2D1_ROUNDED_RECT*, ID2D1RoundedRectangleGeometry**))this->v->tbl[6])(this, roundedRectangle, roundedRectangleGeometry); }
static inline HRESULT                           ID2D1Factory3_CreateEllipseGeometry                          (ID2D1Factory3* this, const D2D1_ELLIPSE* ellipse, ID2D1EllipseGeometry** ellipseGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory3*, const D2D1_ELLIPSE*, ID2D1EllipseGeometry**))this->v->tbl[7])(this, ellipse, ellipseGeometry); }
static inline HRESULT                           ID2D1Factory3_CreateGeometryGroup                            (ID2D1Factory3* this, D2D1_FILL_MODE fillMode, ID2D1Geometry** geometries, UINT32 geometriesCount, ID2D1GeometryGroup** geometryGroup) { return ((HRESULT (WINAPI*)(ID2D1Factory3*, D2D1_FILL_MODE, ID2D1Geometry**, UINT32, ID2D1GeometryGroup**))this->v->tbl[8])(this, fillMode, geometries, geometriesCount, geometryGroup); }
static inline HRESULT                           ID2D1Factory3_CreateTransformedGeometry                      (ID2D1Factory3* this, ID2D1Geometry* sourceGeometry, const D2D_MATRIX_3X2_F* transform, ID2D1TransformedGeometry** transformedGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory3*, ID2D1Geometry*, const D2D_MATRIX_3X2_F*, ID2D1TransformedGeometry**))this->v->tbl[9])(this, sourceGeometry, transform, transformedGeometry); }
static inline HRESULT                           ID2D1Factory3_CreatePathGeometry                             (ID2D1Factory3* this, ID2D1PathGeometry** pathGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory3*, ID2D1PathGeometry**))this->v->tbl[10])(this, pathGeometry); }
static inline HRESULT                           ID2D1Factory3_CreateStrokeStyle                              (ID2D1Factory3* this, const D2D1_STROKE_STYLE_PROPERTIES* strokeStyleProperties, const FLOAT* dashes, UINT32 dashesCount, ID2D1StrokeStyle** strokeStyle) { return ((HRESULT (WINAPI*)(ID2D1Factory3*, const D2D1_STROKE_STYLE_PROPERTIES*, const FLOAT*, UINT32, ID2D1StrokeStyle**))this->v->tbl[11])(this, strokeStyleProperties, dashes, dashesCount, strokeStyle); }
static inline HRESULT                           ID2D1Factory3_CreateDrawingStateBlock                        (ID2D1Factory3* this, const D2D1_DRAWING_STATE_DESCRIPTION* drawingStateDescription, IDWriteRenderingParams* textRenderingParams, ID2D1DrawingStateBlock** drawingStateBlock) { return ((HRESULT (WINAPI*)(ID2D1Factory3*, const D2D1_DRAWING_STATE_DESCRIPTION*, IDWriteRenderingParams*, ID2D1DrawingStateBlock**))this->v->tbl[12])(this, drawingStateDescription, textRenderingParams, drawingStateBlock); }
static inline HRESULT                           ID2D1Factory3_CreateWicBitmapRenderTarget                    (ID2D1Factory3* this, IWICBitmap* target, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties, ID2D1RenderTarget** renderTarget) { return ((HRESULT (WINAPI*)(ID2D1Factory3*, IWICBitmap*, const D2D1_RENDER_TARGET_PROPERTIES*, ID2D1RenderTarget**))this->v->tbl[13])(this, target, renderTargetProperties, renderTarget); }
static inline HRESULT                           ID2D1Factory3_CreateHwndRenderTarget                         (ID2D1Factory3* this, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties, const D2D1_HWND_RENDER_TARGET_PROPERTIES* hwndRenderTargetProperties, ID2D1HwndRenderTarget** hwndRenderTarget) { return ((HRESULT (WINAPI*)(ID2D1Factory3*, const D2D1_RENDER_TARGET_PROPERTIES*, const D2D1_HWND_RENDER_TARGET_PROPERTIES*, ID2D1HwndRenderTarget**))this->v->tbl[14])(this, renderTargetProperties, hwndRenderTargetProperties, hwndRenderTarget); }
static inline HRESULT                           ID2D1Factory3_CreateDxgiSurfaceRenderTarget                  (ID2D1Factory3* this, IDXGISurface* dxgiSurface, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties, ID2D1RenderTarget** renderTarget) { return ((HRESULT (WINAPI*)(ID2D1Factory3*, IDXGISurface*, const D2D1_RENDER_TARGET_PROPERTIES*, ID2D1RenderTarget**))this->v->tbl[15])(this, dxgiSurface, renderTargetProperties, renderTarget); }
static inline HRESULT                           ID2D1Factory3_CreateDCRenderTarget                           (ID2D1Factory3* this, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties, ID2D1DCRenderTarget** dcRenderTarget) { return ((HRESULT (WINAPI*)(ID2D1Factory3*, const D2D1_RENDER_TARGET_PROPERTIES*, ID2D1DCRenderTarget**))this->v->tbl[16])(this, renderTargetProperties, dcRenderTarget); }
static inline HRESULT                           ID2D1Factory3_CreateDevice                                   (ID2D1Factory3* this, IDXGIDevice* dxgiDevice, ID2D1Device** d2dDevice) { return ((HRESULT (WINAPI*)(ID2D1Factory3*, IDXGIDevice*, ID2D1Device**))this->v->tbl[17])(this, dxgiDevice, d2dDevice); }
static inline HRESULT                           ID2D1Factory3_CreateStrokeStyle1                             (ID2D1Factory3* this, const D2D1_STROKE_STYLE_PROPERTIES1* strokeStyleProperties, const FLOAT* dashes, UINT32 dashesCount, ID2D1StrokeStyle1** strokeStyle) { return ((HRESULT (WINAPI*)(ID2D1Factory3*, const D2D1_STROKE_STYLE_PROPERTIES1*, const FLOAT*, UINT32, ID2D1StrokeStyle1**))this->v->tbl[18])(this, strokeStyleProperties, dashes, dashesCount, strokeStyle); }
static inline HRESULT                           ID2D1Factory3_CreatePathGeometry1                            (ID2D1Factory3* this, ID2D1PathGeometry1** pathGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory3*, ID2D1PathGeometry1**))this->v->tbl[19])(this, pathGeometry); }
static inline HRESULT                           ID2D1Factory3_CreateDrawingStateBlock1                       (ID2D1Factory3* this, const D2D1_DRAWING_STATE_DESCRIPTION1* drawingStateDescription, IDWriteRenderingParams* textRenderingParams, ID2D1DrawingStateBlock1** drawingStateBlock) { return ((HRESULT (WINAPI*)(ID2D1Factory3*, const D2D1_DRAWING_STATE_DESCRIPTION1*, IDWriteRenderingParams*, ID2D1DrawingStateBlock1**))this->v->tbl[20])(this, drawingStateDescription, textRenderingParams, drawingStateBlock); }
static inline HRESULT                           ID2D1Factory3_CreateGdiMetafile                              (ID2D1Factory3* this, IStream* metafileStream, ID2D1GdiMetafile** metafile) { return ((HRESULT (WINAPI*)(ID2D1Factory3*, IStream*, ID2D1GdiMetafile**))this->v->tbl[21])(this, metafileStream, metafile); }
static inline HRESULT                           ID2D1Factory3_RegisterEffectFromStream                       (ID2D1Factory3* this, const GUID* classId, IStream* propertyXml, const D2D1_PROPERTY_BINDING* bindings, UINT32 bindingsCount, const PD2D1_EFFECT_FACTORY effectFactory) { return ((HRESULT (WINAPI*)(ID2D1Factory3*, const GUID*, IStream*, const D2D1_PROPERTY_BINDING*, UINT32, const PD2D1_EFFECT_FACTORY))this->v->tbl[22])(this, classId, propertyXml, bindings, bindingsCount, effectFactory); }
static inline HRESULT                           ID2D1Factory3_RegisterEffectFromString                       (ID2D1Factory3* this, const GUID* classId, const WCHAR* propertyXml, const D2D1_PROPERTY_BINDING* bindings, UINT32 bindingsCount, const PD2D1_EFFECT_FACTORY effectFactory) { return ((HRESULT (WINAPI*)(ID2D1Factory3*, const GUID*, const WCHAR*, const D2D1_PROPERTY_BINDING*, UINT32, const PD2D1_EFFECT_FACTORY))this->v->tbl[23])(this, classId, propertyXml, bindings, bindingsCount, effectFactory); }
static inline HRESULT                           ID2D1Factory3_UnregisterEffect                               (ID2D1Factory3* this, const GUID* classId) { return ((HRESULT (WINAPI*)(ID2D1Factory3*, const GUID*))this->v->tbl[24])(this, classId); }
static inline HRESULT                           ID2D1Factory3_GetRegisteredEffects                           (ID2D1Factory3* this, GUID* effects, UINT32 effectsCount, UINT32* effectsReturned, UINT32* effectsRegistered) { return ((HRESULT (WINAPI*)(ID2D1Factory3*, GUID*, UINT32, UINT32*, UINT32*))this->v->tbl[25])(this, effects, effectsCount, effectsReturned, effectsRegistered); }
static inline HRESULT                           ID2D1Factory3_GetEffectProperties                            (ID2D1Factory3* this, const GUID* effectId, ID2D1Properties** properties) { return ((HRESULT (WINAPI*)(ID2D1Factory3*, const GUID*, ID2D1Properties**))this->v->tbl[26])(this, effectId, properties); }
static inline HRESULT                           ID2D1Factory3_CreateDevice1                                  (ID2D1Factory3* this, IDXGIDevice* dxgiDevice, ID2D1Device1** d2dDevice1) { return ((HRESULT (WINAPI*)(ID2D1Factory3*, IDXGIDevice*, ID2D1Device1**))this->v->tbl[27])(this, dxgiDevice, d2dDevice1); }
static inline HRESULT                           ID2D1Factory3_CreateDevice2                                  (ID2D1Factory3* this, IDXGIDevice* dxgiDevice, ID2D1Device2** d2dDevice2) { return ((HRESULT (WINAPI*)(ID2D1Factory3*, IDXGIDevice*, ID2D1Device2**))this->v->tbl[28])(this, dxgiDevice, d2dDevice2); }

static inline HRESULT                           ID2D1Factory4_QueryInterface                                 (ID2D1Factory4* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1Factory4*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1Factory4_AddRef                                         (ID2D1Factory4* this) { return ((UINT32 (WINAPI*)(ID2D1Factory4*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1Factory4_Release                                        (ID2D1Factory4* this) { return ((UINT32 (WINAPI*)(ID2D1Factory4*))this->v->tbl[2])(this); }
static inline HRESULT                           ID2D1Factory4_ReloadSystemMetrics                            (ID2D1Factory4* this) { return ((HRESULT (WINAPI*)(ID2D1Factory4*))this->v->tbl[3])(this); }
__declspec(deprecated("Deprecated. Use DisplayInformation::LogicalDpi for Windows Store Apps or GetDpiForWindow for desktop apps."))
static inline void                              ID2D1Factory4_GetDesktopDpi                                  (ID2D1Factory4* this, FLOAT* dpiX, FLOAT* dpiY) { ((void (WINAPI*)(ID2D1Factory4*, FLOAT*, FLOAT*))this->v->tbl[4])(this, dpiX, dpiY); }
static inline HRESULT                           ID2D1Factory4_CreateRectangleGeometry                        (ID2D1Factory4* this, const D2D_RECT_F* rectangle, ID2D1RectangleGeometry** rectangleGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory4*, const D2D_RECT_F*, ID2D1RectangleGeometry**))this->v->tbl[5])(this, rectangle, rectangleGeometry); }
static inline HRESULT                           ID2D1Factory4_CreateRoundedRectangleGeometry                 (ID2D1Factory4* this, const D2D1_ROUNDED_RECT* roundedRectangle, ID2D1RoundedRectangleGeometry** roundedRectangleGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory4*, const D2D1_ROUNDED_RECT*, ID2D1RoundedRectangleGeometry**))this->v->tbl[6])(this, roundedRectangle, roundedRectangleGeometry); }
static inline HRESULT                           ID2D1Factory4_CreateEllipseGeometry                          (ID2D1Factory4* this, const D2D1_ELLIPSE* ellipse, ID2D1EllipseGeometry** ellipseGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory4*, const D2D1_ELLIPSE*, ID2D1EllipseGeometry**))this->v->tbl[7])(this, ellipse, ellipseGeometry); }
static inline HRESULT                           ID2D1Factory4_CreateGeometryGroup                            (ID2D1Factory4* this, D2D1_FILL_MODE fillMode, ID2D1Geometry** geometries, UINT32 geometriesCount, ID2D1GeometryGroup** geometryGroup) { return ((HRESULT (WINAPI*)(ID2D1Factory4*, D2D1_FILL_MODE, ID2D1Geometry**, UINT32, ID2D1GeometryGroup**))this->v->tbl[8])(this, fillMode, geometries, geometriesCount, geometryGroup); }
static inline HRESULT                           ID2D1Factory4_CreateTransformedGeometry                      (ID2D1Factory4* this, ID2D1Geometry* sourceGeometry, const D2D_MATRIX_3X2_F* transform, ID2D1TransformedGeometry** transformedGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory4*, ID2D1Geometry*, const D2D_MATRIX_3X2_F*, ID2D1TransformedGeometry**))this->v->tbl[9])(this, sourceGeometry, transform, transformedGeometry); }
static inline HRESULT                           ID2D1Factory4_CreatePathGeometry                             (ID2D1Factory4* this, ID2D1PathGeometry** pathGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory4*, ID2D1PathGeometry**))this->v->tbl[10])(this, pathGeometry); }
static inline HRESULT                           ID2D1Factory4_CreateStrokeStyle                              (ID2D1Factory4* this, const D2D1_STROKE_STYLE_PROPERTIES* strokeStyleProperties, const FLOAT* dashes, UINT32 dashesCount, ID2D1StrokeStyle** strokeStyle) { return ((HRESULT (WINAPI*)(ID2D1Factory4*, const D2D1_STROKE_STYLE_PROPERTIES*, const FLOAT*, UINT32, ID2D1StrokeStyle**))this->v->tbl[11])(this, strokeStyleProperties, dashes, dashesCount, strokeStyle); }
static inline HRESULT                           ID2D1Factory4_CreateDrawingStateBlock                        (ID2D1Factory4* this, const D2D1_DRAWING_STATE_DESCRIPTION* drawingStateDescription, IDWriteRenderingParams* textRenderingParams, ID2D1DrawingStateBlock** drawingStateBlock) { return ((HRESULT (WINAPI*)(ID2D1Factory4*, const D2D1_DRAWING_STATE_DESCRIPTION*, IDWriteRenderingParams*, ID2D1DrawingStateBlock**))this->v->tbl[12])(this, drawingStateDescription, textRenderingParams, drawingStateBlock); }
static inline HRESULT                           ID2D1Factory4_CreateWicBitmapRenderTarget                    (ID2D1Factory4* this, IWICBitmap* target, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties, ID2D1RenderTarget** renderTarget) { return ((HRESULT (WINAPI*)(ID2D1Factory4*, IWICBitmap*, const D2D1_RENDER_TARGET_PROPERTIES*, ID2D1RenderTarget**))this->v->tbl[13])(this, target, renderTargetProperties, renderTarget); }
static inline HRESULT                           ID2D1Factory4_CreateHwndRenderTarget                         (ID2D1Factory4* this, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties, const D2D1_HWND_RENDER_TARGET_PROPERTIES* hwndRenderTargetProperties, ID2D1HwndRenderTarget** hwndRenderTarget) { return ((HRESULT (WINAPI*)(ID2D1Factory4*, const D2D1_RENDER_TARGET_PROPERTIES*, const D2D1_HWND_RENDER_TARGET_PROPERTIES*, ID2D1HwndRenderTarget**))this->v->tbl[14])(this, renderTargetProperties, hwndRenderTargetProperties, hwndRenderTarget); }
static inline HRESULT                           ID2D1Factory4_CreateDxgiSurfaceRenderTarget                  (ID2D1Factory4* this, IDXGISurface* dxgiSurface, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties, ID2D1RenderTarget** renderTarget) { return ((HRESULT (WINAPI*)(ID2D1Factory4*, IDXGISurface*, const D2D1_RENDER_TARGET_PROPERTIES*, ID2D1RenderTarget**))this->v->tbl[15])(this, dxgiSurface, renderTargetProperties, renderTarget); }
static inline HRESULT                           ID2D1Factory4_CreateDCRenderTarget                           (ID2D1Factory4* this, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties, ID2D1DCRenderTarget** dcRenderTarget) { return ((HRESULT (WINAPI*)(ID2D1Factory4*, const D2D1_RENDER_TARGET_PROPERTIES*, ID2D1DCRenderTarget**))this->v->tbl[16])(this, renderTargetProperties, dcRenderTarget); }
static inline HRESULT                           ID2D1Factory4_CreateDevice                                   (ID2D1Factory4* this, IDXGIDevice* dxgiDevice, ID2D1Device** d2dDevice) { return ((HRESULT (WINAPI*)(ID2D1Factory4*, IDXGIDevice*, ID2D1Device**))this->v->tbl[17])(this, dxgiDevice, d2dDevice); }
static inline HRESULT                           ID2D1Factory4_CreateStrokeStyle1                             (ID2D1Factory4* this, const D2D1_STROKE_STYLE_PROPERTIES1* strokeStyleProperties, const FLOAT* dashes, UINT32 dashesCount, ID2D1StrokeStyle1** strokeStyle) { return ((HRESULT (WINAPI*)(ID2D1Factory4*, const D2D1_STROKE_STYLE_PROPERTIES1*, const FLOAT*, UINT32, ID2D1StrokeStyle1**))this->v->tbl[18])(this, strokeStyleProperties, dashes, dashesCount, strokeStyle); }
static inline HRESULT                           ID2D1Factory4_CreatePathGeometry1                            (ID2D1Factory4* this, ID2D1PathGeometry1** pathGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory4*, ID2D1PathGeometry1**))this->v->tbl[19])(this, pathGeometry); }
static inline HRESULT                           ID2D1Factory4_CreateDrawingStateBlock1                       (ID2D1Factory4* this, const D2D1_DRAWING_STATE_DESCRIPTION1* drawingStateDescription, IDWriteRenderingParams* textRenderingParams, ID2D1DrawingStateBlock1** drawingStateBlock) { return ((HRESULT (WINAPI*)(ID2D1Factory4*, const D2D1_DRAWING_STATE_DESCRIPTION1*, IDWriteRenderingParams*, ID2D1DrawingStateBlock1**))this->v->tbl[20])(this, drawingStateDescription, textRenderingParams, drawingStateBlock); }
static inline HRESULT                           ID2D1Factory4_CreateGdiMetafile                              (ID2D1Factory4* this, IStream* metafileStream, ID2D1GdiMetafile** metafile) { return ((HRESULT (WINAPI*)(ID2D1Factory4*, IStream*, ID2D1GdiMetafile**))this->v->tbl[21])(this, metafileStream, metafile); }
static inline HRESULT                           ID2D1Factory4_RegisterEffectFromStream                       (ID2D1Factory4* this, const GUID* classId, IStream* propertyXml, const D2D1_PROPERTY_BINDING* bindings, UINT32 bindingsCount, const PD2D1_EFFECT_FACTORY effectFactory) { return ((HRESULT (WINAPI*)(ID2D1Factory4*, const GUID*, IStream*, const D2D1_PROPERTY_BINDING*, UINT32, const PD2D1_EFFECT_FACTORY))this->v->tbl[22])(this, classId, propertyXml, bindings, bindingsCount, effectFactory); }
static inline HRESULT                           ID2D1Factory4_RegisterEffectFromString                       (ID2D1Factory4* this, const GUID* classId, const WCHAR* propertyXml, const D2D1_PROPERTY_BINDING* bindings, UINT32 bindingsCount, const PD2D1_EFFECT_FACTORY effectFactory) { return ((HRESULT (WINAPI*)(ID2D1Factory4*, const GUID*, const WCHAR*, const D2D1_PROPERTY_BINDING*, UINT32, const PD2D1_EFFECT_FACTORY))this->v->tbl[23])(this, classId, propertyXml, bindings, bindingsCount, effectFactory); }
static inline HRESULT                           ID2D1Factory4_UnregisterEffect                               (ID2D1Factory4* this, const GUID* classId) { return ((HRESULT (WINAPI*)(ID2D1Factory4*, const GUID*))this->v->tbl[24])(this, classId); }
static inline HRESULT                           ID2D1Factory4_GetRegisteredEffects                           (ID2D1Factory4* this, GUID* effects, UINT32 effectsCount, UINT32* effectsReturned, UINT32* effectsRegistered) { return ((HRESULT (WINAPI*)(ID2D1Factory4*, GUID*, UINT32, UINT32*, UINT32*))this->v->tbl[25])(this, effects, effectsCount, effectsReturned, effectsRegistered); }
static inline HRESULT                           ID2D1Factory4_GetEffectProperties                            (ID2D1Factory4* this, const GUID* effectId, ID2D1Properties** properties) { return ((HRESULT (WINAPI*)(ID2D1Factory4*, const GUID*, ID2D1Properties**))this->v->tbl[26])(this, effectId, properties); }
static inline HRESULT                           ID2D1Factory4_CreateDevice1                                  (ID2D1Factory4* this, IDXGIDevice* dxgiDevice, ID2D1Device1** d2dDevice1) { return ((HRESULT (WINAPI*)(ID2D1Factory4*, IDXGIDevice*, ID2D1Device1**))this->v->tbl[27])(this, dxgiDevice, d2dDevice1); }
static inline HRESULT                           ID2D1Factory4_CreateDevice2                                  (ID2D1Factory4* this, IDXGIDevice* dxgiDevice, ID2D1Device2** d2dDevice2) { return ((HRESULT (WINAPI*)(ID2D1Factory4*, IDXGIDevice*, ID2D1Device2**))this->v->tbl[28])(this, dxgiDevice, d2dDevice2); }
static inline HRESULT                           ID2D1Factory4_CreateDevice3                                  (ID2D1Factory4* this, IDXGIDevice* dxgiDevice, ID2D1Device3** d2dDevice3) { return ((HRESULT (WINAPI*)(ID2D1Factory4*, IDXGIDevice*, ID2D1Device3**))this->v->tbl[29])(this, dxgiDevice, d2dDevice3); }

static inline HRESULT                           ID2D1Factory5_QueryInterface                                 (ID2D1Factory5* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1Factory5*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1Factory5_AddRef                                         (ID2D1Factory5* this) { return ((UINT32 (WINAPI*)(ID2D1Factory5*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1Factory5_Release                                        (ID2D1Factory5* this) { return ((UINT32 (WINAPI*)(ID2D1Factory5*))this->v->tbl[2])(this); }
static inline HRESULT                           ID2D1Factory5_ReloadSystemMetrics                            (ID2D1Factory5* this) { return ((HRESULT (WINAPI*)(ID2D1Factory5*))this->v->tbl[3])(this); }
__declspec(deprecated("Deprecated. Use DisplayInformation::LogicalDpi for Windows Store Apps or GetDpiForWindow for desktop apps."))
static inline void                              ID2D1Factory5_GetDesktopDpi                                  (ID2D1Factory5* this, FLOAT* dpiX, FLOAT* dpiY) { ((void (WINAPI*)(ID2D1Factory5*, FLOAT*, FLOAT*))this->v->tbl[4])(this, dpiX, dpiY); }
static inline HRESULT                           ID2D1Factory5_CreateRectangleGeometry                        (ID2D1Factory5* this, const D2D_RECT_F* rectangle, ID2D1RectangleGeometry** rectangleGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory5*, const D2D_RECT_F*, ID2D1RectangleGeometry**))this->v->tbl[5])(this, rectangle, rectangleGeometry); }
static inline HRESULT                           ID2D1Factory5_CreateRoundedRectangleGeometry                 (ID2D1Factory5* this, const D2D1_ROUNDED_RECT* roundedRectangle, ID2D1RoundedRectangleGeometry** roundedRectangleGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory5*, const D2D1_ROUNDED_RECT*, ID2D1RoundedRectangleGeometry**))this->v->tbl[6])(this, roundedRectangle, roundedRectangleGeometry); }
static inline HRESULT                           ID2D1Factory5_CreateEllipseGeometry                          (ID2D1Factory5* this, const D2D1_ELLIPSE* ellipse, ID2D1EllipseGeometry** ellipseGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory5*, const D2D1_ELLIPSE*, ID2D1EllipseGeometry**))this->v->tbl[7])(this, ellipse, ellipseGeometry); }
static inline HRESULT                           ID2D1Factory5_CreateGeometryGroup                            (ID2D1Factory5* this, D2D1_FILL_MODE fillMode, ID2D1Geometry** geometries, UINT32 geometriesCount, ID2D1GeometryGroup** geometryGroup) { return ((HRESULT (WINAPI*)(ID2D1Factory5*, D2D1_FILL_MODE, ID2D1Geometry**, UINT32, ID2D1GeometryGroup**))this->v->tbl[8])(this, fillMode, geometries, geometriesCount, geometryGroup); }
static inline HRESULT                           ID2D1Factory5_CreateTransformedGeometry                      (ID2D1Factory5* this, ID2D1Geometry* sourceGeometry, const D2D_MATRIX_3X2_F* transform, ID2D1TransformedGeometry** transformedGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory5*, ID2D1Geometry*, const D2D_MATRIX_3X2_F*, ID2D1TransformedGeometry**))this->v->tbl[9])(this, sourceGeometry, transform, transformedGeometry); }
static inline HRESULT                           ID2D1Factory5_CreatePathGeometry                             (ID2D1Factory5* this, ID2D1PathGeometry** pathGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory5*, ID2D1PathGeometry**))this->v->tbl[10])(this, pathGeometry); }
static inline HRESULT                           ID2D1Factory5_CreateStrokeStyle                              (ID2D1Factory5* this, const D2D1_STROKE_STYLE_PROPERTIES* strokeStyleProperties, const FLOAT* dashes, UINT32 dashesCount, ID2D1StrokeStyle** strokeStyle) { return ((HRESULT (WINAPI*)(ID2D1Factory5*, const D2D1_STROKE_STYLE_PROPERTIES*, const FLOAT*, UINT32, ID2D1StrokeStyle**))this->v->tbl[11])(this, strokeStyleProperties, dashes, dashesCount, strokeStyle); }
static inline HRESULT                           ID2D1Factory5_CreateDrawingStateBlock                        (ID2D1Factory5* this, const D2D1_DRAWING_STATE_DESCRIPTION* drawingStateDescription, IDWriteRenderingParams* textRenderingParams, ID2D1DrawingStateBlock** drawingStateBlock) { return ((HRESULT (WINAPI*)(ID2D1Factory5*, const D2D1_DRAWING_STATE_DESCRIPTION*, IDWriteRenderingParams*, ID2D1DrawingStateBlock**))this->v->tbl[12])(this, drawingStateDescription, textRenderingParams, drawingStateBlock); }
static inline HRESULT                           ID2D1Factory5_CreateWicBitmapRenderTarget                    (ID2D1Factory5* this, IWICBitmap* target, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties, ID2D1RenderTarget** renderTarget) { return ((HRESULT (WINAPI*)(ID2D1Factory5*, IWICBitmap*, const D2D1_RENDER_TARGET_PROPERTIES*, ID2D1RenderTarget**))this->v->tbl[13])(this, target, renderTargetProperties, renderTarget); }
static inline HRESULT                           ID2D1Factory5_CreateHwndRenderTarget                         (ID2D1Factory5* this, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties, const D2D1_HWND_RENDER_TARGET_PROPERTIES* hwndRenderTargetProperties, ID2D1HwndRenderTarget** hwndRenderTarget) { return ((HRESULT (WINAPI*)(ID2D1Factory5*, const D2D1_RENDER_TARGET_PROPERTIES*, const D2D1_HWND_RENDER_TARGET_PROPERTIES*, ID2D1HwndRenderTarget**))this->v->tbl[14])(this, renderTargetProperties, hwndRenderTargetProperties, hwndRenderTarget); }
static inline HRESULT                           ID2D1Factory5_CreateDxgiSurfaceRenderTarget                  (ID2D1Factory5* this, IDXGISurface* dxgiSurface, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties, ID2D1RenderTarget** renderTarget) { return ((HRESULT (WINAPI*)(ID2D1Factory5*, IDXGISurface*, const D2D1_RENDER_TARGET_PROPERTIES*, ID2D1RenderTarget**))this->v->tbl[15])(this, dxgiSurface, renderTargetProperties, renderTarget); }
static inline HRESULT                           ID2D1Factory5_CreateDCRenderTarget                           (ID2D1Factory5* this, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties, ID2D1DCRenderTarget** dcRenderTarget) { return ((HRESULT (WINAPI*)(ID2D1Factory5*, const D2D1_RENDER_TARGET_PROPERTIES*, ID2D1DCRenderTarget**))this->v->tbl[16])(this, renderTargetProperties, dcRenderTarget); }
static inline HRESULT                           ID2D1Factory5_CreateDevice                                   (ID2D1Factory5* this, IDXGIDevice* dxgiDevice, ID2D1Device** d2dDevice) { return ((HRESULT (WINAPI*)(ID2D1Factory5*, IDXGIDevice*, ID2D1Device**))this->v->tbl[17])(this, dxgiDevice, d2dDevice); }
static inline HRESULT                           ID2D1Factory5_CreateStrokeStyle1                             (ID2D1Factory5* this, const D2D1_STROKE_STYLE_PROPERTIES1* strokeStyleProperties, const FLOAT* dashes, UINT32 dashesCount, ID2D1StrokeStyle1** strokeStyle) { return ((HRESULT (WINAPI*)(ID2D1Factory5*, const D2D1_STROKE_STYLE_PROPERTIES1*, const FLOAT*, UINT32, ID2D1StrokeStyle1**))this->v->tbl[18])(this, strokeStyleProperties, dashes, dashesCount, strokeStyle); }
static inline HRESULT                           ID2D1Factory5_CreatePathGeometry1                            (ID2D1Factory5* this, ID2D1PathGeometry1** pathGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory5*, ID2D1PathGeometry1**))this->v->tbl[19])(this, pathGeometry); }
static inline HRESULT                           ID2D1Factory5_CreateDrawingStateBlock1                       (ID2D1Factory5* this, const D2D1_DRAWING_STATE_DESCRIPTION1* drawingStateDescription, IDWriteRenderingParams* textRenderingParams, ID2D1DrawingStateBlock1** drawingStateBlock) { return ((HRESULT (WINAPI*)(ID2D1Factory5*, const D2D1_DRAWING_STATE_DESCRIPTION1*, IDWriteRenderingParams*, ID2D1DrawingStateBlock1**))this->v->tbl[20])(this, drawingStateDescription, textRenderingParams, drawingStateBlock); }
static inline HRESULT                           ID2D1Factory5_CreateGdiMetafile                              (ID2D1Factory5* this, IStream* metafileStream, ID2D1GdiMetafile** metafile) { return ((HRESULT (WINAPI*)(ID2D1Factory5*, IStream*, ID2D1GdiMetafile**))this->v->tbl[21])(this, metafileStream, metafile); }
static inline HRESULT                           ID2D1Factory5_RegisterEffectFromStream                       (ID2D1Factory5* this, const GUID* classId, IStream* propertyXml, const D2D1_PROPERTY_BINDING* bindings, UINT32 bindingsCount, const PD2D1_EFFECT_FACTORY effectFactory) { return ((HRESULT (WINAPI*)(ID2D1Factory5*, const GUID*, IStream*, const D2D1_PROPERTY_BINDING*, UINT32, const PD2D1_EFFECT_FACTORY))this->v->tbl[22])(this, classId, propertyXml, bindings, bindingsCount, effectFactory); }
static inline HRESULT                           ID2D1Factory5_RegisterEffectFromString                       (ID2D1Factory5* this, const GUID* classId, const WCHAR* propertyXml, const D2D1_PROPERTY_BINDING* bindings, UINT32 bindingsCount, const PD2D1_EFFECT_FACTORY effectFactory) { return ((HRESULT (WINAPI*)(ID2D1Factory5*, const GUID*, const WCHAR*, const D2D1_PROPERTY_BINDING*, UINT32, const PD2D1_EFFECT_FACTORY))this->v->tbl[23])(this, classId, propertyXml, bindings, bindingsCount, effectFactory); }
static inline HRESULT                           ID2D1Factory5_UnregisterEffect                               (ID2D1Factory5* this, const GUID* classId) { return ((HRESULT (WINAPI*)(ID2D1Factory5*, const GUID*))this->v->tbl[24])(this, classId); }
static inline HRESULT                           ID2D1Factory5_GetRegisteredEffects                           (ID2D1Factory5* this, GUID* effects, UINT32 effectsCount, UINT32* effectsReturned, UINT32* effectsRegistered) { return ((HRESULT (WINAPI*)(ID2D1Factory5*, GUID*, UINT32, UINT32*, UINT32*))this->v->tbl[25])(this, effects, effectsCount, effectsReturned, effectsRegistered); }
static inline HRESULT                           ID2D1Factory5_GetEffectProperties                            (ID2D1Factory5* this, const GUID* effectId, ID2D1Properties** properties) { return ((HRESULT (WINAPI*)(ID2D1Factory5*, const GUID*, ID2D1Properties**))this->v->tbl[26])(this, effectId, properties); }
static inline HRESULT                           ID2D1Factory5_CreateDevice1                                  (ID2D1Factory5* this, IDXGIDevice* dxgiDevice, ID2D1Device1** d2dDevice1) { return ((HRESULT (WINAPI*)(ID2D1Factory5*, IDXGIDevice*, ID2D1Device1**))this->v->tbl[27])(this, dxgiDevice, d2dDevice1); }
static inline HRESULT                           ID2D1Factory5_CreateDevice2                                  (ID2D1Factory5* this, IDXGIDevice* dxgiDevice, ID2D1Device2** d2dDevice2) { return ((HRESULT (WINAPI*)(ID2D1Factory5*, IDXGIDevice*, ID2D1Device2**))this->v->tbl[28])(this, dxgiDevice, d2dDevice2); }
static inline HRESULT                           ID2D1Factory5_CreateDevice3                                  (ID2D1Factory5* this, IDXGIDevice* dxgiDevice, ID2D1Device3** d2dDevice3) { return ((HRESULT (WINAPI*)(ID2D1Factory5*, IDXGIDevice*, ID2D1Device3**))this->v->tbl[29])(this, dxgiDevice, d2dDevice3); }
static inline HRESULT                           ID2D1Factory5_CreateDevice4                                  (ID2D1Factory5* this, IDXGIDevice* dxgiDevice, ID2D1Device4** d2dDevice4) { return ((HRESULT (WINAPI*)(ID2D1Factory5*, IDXGIDevice*, ID2D1Device4**))this->v->tbl[30])(this, dxgiDevice, d2dDevice4); }

static inline HRESULT                           ID2D1Factory6_QueryInterface                                 (ID2D1Factory6* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1Factory6*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1Factory6_AddRef                                         (ID2D1Factory6* this) { return ((UINT32 (WINAPI*)(ID2D1Factory6*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1Factory6_Release                                        (ID2D1Factory6* this) { return ((UINT32 (WINAPI*)(ID2D1Factory6*))this->v->tbl[2])(this); }
static inline HRESULT                           ID2D1Factory6_ReloadSystemMetrics                            (ID2D1Factory6* this) { return ((HRESULT (WINAPI*)(ID2D1Factory6*))this->v->tbl[3])(this); }
__declspec(deprecated("Deprecated. Use DisplayInformation::LogicalDpi for Windows Store Apps or GetDpiForWindow for desktop apps."))
static inline void                              ID2D1Factory6_GetDesktopDpi                                  (ID2D1Factory6* this, FLOAT* dpiX, FLOAT* dpiY) { ((void (WINAPI*)(ID2D1Factory6*, FLOAT*, FLOAT*))this->v->tbl[4])(this, dpiX, dpiY); }
static inline HRESULT                           ID2D1Factory6_CreateRectangleGeometry                        (ID2D1Factory6* this, const D2D_RECT_F* rectangle, ID2D1RectangleGeometry** rectangleGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory6*, const D2D_RECT_F*, ID2D1RectangleGeometry**))this->v->tbl[5])(this, rectangle, rectangleGeometry); }
static inline HRESULT                           ID2D1Factory6_CreateRoundedRectangleGeometry                 (ID2D1Factory6* this, const D2D1_ROUNDED_RECT* roundedRectangle, ID2D1RoundedRectangleGeometry** roundedRectangleGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory6*, const D2D1_ROUNDED_RECT*, ID2D1RoundedRectangleGeometry**))this->v->tbl[6])(this, roundedRectangle, roundedRectangleGeometry); }
static inline HRESULT                           ID2D1Factory6_CreateEllipseGeometry                          (ID2D1Factory6* this, const D2D1_ELLIPSE* ellipse, ID2D1EllipseGeometry** ellipseGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory6*, const D2D1_ELLIPSE*, ID2D1EllipseGeometry**))this->v->tbl[7])(this, ellipse, ellipseGeometry); }
static inline HRESULT                           ID2D1Factory6_CreateGeometryGroup                            (ID2D1Factory6* this, D2D1_FILL_MODE fillMode, ID2D1Geometry** geometries, UINT32 geometriesCount, ID2D1GeometryGroup** geometryGroup) { return ((HRESULT (WINAPI*)(ID2D1Factory6*, D2D1_FILL_MODE, ID2D1Geometry**, UINT32, ID2D1GeometryGroup**))this->v->tbl[8])(this, fillMode, geometries, geometriesCount, geometryGroup); }
static inline HRESULT                           ID2D1Factory6_CreateTransformedGeometry                      (ID2D1Factory6* this, ID2D1Geometry* sourceGeometry, const D2D_MATRIX_3X2_F* transform, ID2D1TransformedGeometry** transformedGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory6*, ID2D1Geometry*, const D2D_MATRIX_3X2_F*, ID2D1TransformedGeometry**))this->v->tbl[9])(this, sourceGeometry, transform, transformedGeometry); }
static inline HRESULT                           ID2D1Factory6_CreatePathGeometry                             (ID2D1Factory6* this, ID2D1PathGeometry** pathGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory6*, ID2D1PathGeometry**))this->v->tbl[10])(this, pathGeometry); }
static inline HRESULT                           ID2D1Factory6_CreateStrokeStyle                              (ID2D1Factory6* this, const D2D1_STROKE_STYLE_PROPERTIES* strokeStyleProperties, const FLOAT* dashes, UINT32 dashesCount, ID2D1StrokeStyle** strokeStyle) { return ((HRESULT (WINAPI*)(ID2D1Factory6*, const D2D1_STROKE_STYLE_PROPERTIES*, const FLOAT*, UINT32, ID2D1StrokeStyle**))this->v->tbl[11])(this, strokeStyleProperties, dashes, dashesCount, strokeStyle); }
static inline HRESULT                           ID2D1Factory6_CreateDrawingStateBlock                        (ID2D1Factory6* this, const D2D1_DRAWING_STATE_DESCRIPTION* drawingStateDescription, IDWriteRenderingParams* textRenderingParams, ID2D1DrawingStateBlock** drawingStateBlock) { return ((HRESULT (WINAPI*)(ID2D1Factory6*, const D2D1_DRAWING_STATE_DESCRIPTION*, IDWriteRenderingParams*, ID2D1DrawingStateBlock**))this->v->tbl[12])(this, drawingStateDescription, textRenderingParams, drawingStateBlock); }
static inline HRESULT                           ID2D1Factory6_CreateWicBitmapRenderTarget                    (ID2D1Factory6* this, IWICBitmap* target, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties, ID2D1RenderTarget** renderTarget) { return ((HRESULT (WINAPI*)(ID2D1Factory6*, IWICBitmap*, const D2D1_RENDER_TARGET_PROPERTIES*, ID2D1RenderTarget**))this->v->tbl[13])(this, target, renderTargetProperties, renderTarget); }
static inline HRESULT                           ID2D1Factory6_CreateHwndRenderTarget                         (ID2D1Factory6* this, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties, const D2D1_HWND_RENDER_TARGET_PROPERTIES* hwndRenderTargetProperties, ID2D1HwndRenderTarget** hwndRenderTarget) { return ((HRESULT (WINAPI*)(ID2D1Factory6*, const D2D1_RENDER_TARGET_PROPERTIES*, const D2D1_HWND_RENDER_TARGET_PROPERTIES*, ID2D1HwndRenderTarget**))this->v->tbl[14])(this, renderTargetProperties, hwndRenderTargetProperties, hwndRenderTarget); }
static inline HRESULT                           ID2D1Factory6_CreateDxgiSurfaceRenderTarget                  (ID2D1Factory6* this, IDXGISurface* dxgiSurface, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties, ID2D1RenderTarget** renderTarget) { return ((HRESULT (WINAPI*)(ID2D1Factory6*, IDXGISurface*, const D2D1_RENDER_TARGET_PROPERTIES*, ID2D1RenderTarget**))this->v->tbl[15])(this, dxgiSurface, renderTargetProperties, renderTarget); }
static inline HRESULT                           ID2D1Factory6_CreateDCRenderTarget                           (ID2D1Factory6* this, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties, ID2D1DCRenderTarget** dcRenderTarget) { return ((HRESULT (WINAPI*)(ID2D1Factory6*, const D2D1_RENDER_TARGET_PROPERTIES*, ID2D1DCRenderTarget**))this->v->tbl[16])(this, renderTargetProperties, dcRenderTarget); }
static inline HRESULT                           ID2D1Factory6_CreateDevice                                   (ID2D1Factory6* this, IDXGIDevice* dxgiDevice, ID2D1Device** d2dDevice) { return ((HRESULT (WINAPI*)(ID2D1Factory6*, IDXGIDevice*, ID2D1Device**))this->v->tbl[17])(this, dxgiDevice, d2dDevice); }
static inline HRESULT                           ID2D1Factory6_CreateStrokeStyle1                             (ID2D1Factory6* this, const D2D1_STROKE_STYLE_PROPERTIES1* strokeStyleProperties, const FLOAT* dashes, UINT32 dashesCount, ID2D1StrokeStyle1** strokeStyle) { return ((HRESULT (WINAPI*)(ID2D1Factory6*, const D2D1_STROKE_STYLE_PROPERTIES1*, const FLOAT*, UINT32, ID2D1StrokeStyle1**))this->v->tbl[18])(this, strokeStyleProperties, dashes, dashesCount, strokeStyle); }
static inline HRESULT                           ID2D1Factory6_CreatePathGeometry1                            (ID2D1Factory6* this, ID2D1PathGeometry1** pathGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory6*, ID2D1PathGeometry1**))this->v->tbl[19])(this, pathGeometry); }
static inline HRESULT                           ID2D1Factory6_CreateDrawingStateBlock1                       (ID2D1Factory6* this, const D2D1_DRAWING_STATE_DESCRIPTION1* drawingStateDescription, IDWriteRenderingParams* textRenderingParams, ID2D1DrawingStateBlock1** drawingStateBlock) { return ((HRESULT (WINAPI*)(ID2D1Factory6*, const D2D1_DRAWING_STATE_DESCRIPTION1*, IDWriteRenderingParams*, ID2D1DrawingStateBlock1**))this->v->tbl[20])(this, drawingStateDescription, textRenderingParams, drawingStateBlock); }
static inline HRESULT                           ID2D1Factory6_CreateGdiMetafile                              (ID2D1Factory6* this, IStream* metafileStream, ID2D1GdiMetafile** metafile) { return ((HRESULT (WINAPI*)(ID2D1Factory6*, IStream*, ID2D1GdiMetafile**))this->v->tbl[21])(this, metafileStream, metafile); }
static inline HRESULT                           ID2D1Factory6_RegisterEffectFromStream                       (ID2D1Factory6* this, const GUID* classId, IStream* propertyXml, const D2D1_PROPERTY_BINDING* bindings, UINT32 bindingsCount, const PD2D1_EFFECT_FACTORY effectFactory) { return ((HRESULT (WINAPI*)(ID2D1Factory6*, const GUID*, IStream*, const D2D1_PROPERTY_BINDING*, UINT32, const PD2D1_EFFECT_FACTORY))this->v->tbl[22])(this, classId, propertyXml, bindings, bindingsCount, effectFactory); }
static inline HRESULT                           ID2D1Factory6_RegisterEffectFromString                       (ID2D1Factory6* this, const GUID* classId, const WCHAR* propertyXml, const D2D1_PROPERTY_BINDING* bindings, UINT32 bindingsCount, const PD2D1_EFFECT_FACTORY effectFactory) { return ((HRESULT (WINAPI*)(ID2D1Factory6*, const GUID*, const WCHAR*, const D2D1_PROPERTY_BINDING*, UINT32, const PD2D1_EFFECT_FACTORY))this->v->tbl[23])(this, classId, propertyXml, bindings, bindingsCount, effectFactory); }
static inline HRESULT                           ID2D1Factory6_UnregisterEffect                               (ID2D1Factory6* this, const GUID* classId) { return ((HRESULT (WINAPI*)(ID2D1Factory6*, const GUID*))this->v->tbl[24])(this, classId); }
static inline HRESULT                           ID2D1Factory6_GetRegisteredEffects                           (ID2D1Factory6* this, GUID* effects, UINT32 effectsCount, UINT32* effectsReturned, UINT32* effectsRegistered) { return ((HRESULT (WINAPI*)(ID2D1Factory6*, GUID*, UINT32, UINT32*, UINT32*))this->v->tbl[25])(this, effects, effectsCount, effectsReturned, effectsRegistered); }
static inline HRESULT                           ID2D1Factory6_GetEffectProperties                            (ID2D1Factory6* this, const GUID* effectId, ID2D1Properties** properties) { return ((HRESULT (WINAPI*)(ID2D1Factory6*, const GUID*, ID2D1Properties**))this->v->tbl[26])(this, effectId, properties); }
static inline HRESULT                           ID2D1Factory6_CreateDevice1                                  (ID2D1Factory6* this, IDXGIDevice* dxgiDevice, ID2D1Device1** d2dDevice1) { return ((HRESULT (WINAPI*)(ID2D1Factory6*, IDXGIDevice*, ID2D1Device1**))this->v->tbl[27])(this, dxgiDevice, d2dDevice1); }
static inline HRESULT                           ID2D1Factory6_CreateDevice2                                  (ID2D1Factory6* this, IDXGIDevice* dxgiDevice, ID2D1Device2** d2dDevice2) { return ((HRESULT (WINAPI*)(ID2D1Factory6*, IDXGIDevice*, ID2D1Device2**))this->v->tbl[28])(this, dxgiDevice, d2dDevice2); }
static inline HRESULT                           ID2D1Factory6_CreateDevice3                                  (ID2D1Factory6* this, IDXGIDevice* dxgiDevice, ID2D1Device3** d2dDevice3) { return ((HRESULT (WINAPI*)(ID2D1Factory6*, IDXGIDevice*, ID2D1Device3**))this->v->tbl[29])(this, dxgiDevice, d2dDevice3); }
static inline HRESULT                           ID2D1Factory6_CreateDevice4                                  (ID2D1Factory6* this, IDXGIDevice* dxgiDevice, ID2D1Device4** d2dDevice4) { return ((HRESULT (WINAPI*)(ID2D1Factory6*, IDXGIDevice*, ID2D1Device4**))this->v->tbl[30])(this, dxgiDevice, d2dDevice4); }
static inline HRESULT                           ID2D1Factory6_CreateDevice5                                  (ID2D1Factory6* this, IDXGIDevice* dxgiDevice, ID2D1Device5** d2dDevice5) { return ((HRESULT (WINAPI*)(ID2D1Factory6*, IDXGIDevice*, ID2D1Device5**))this->v->tbl[31])(this, dxgiDevice, d2dDevice5); }

static inline HRESULT                           ID2D1Factory7_QueryInterface                                 (ID2D1Factory7* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1Factory7*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1Factory7_AddRef                                         (ID2D1Factory7* this) { return ((UINT32 (WINAPI*)(ID2D1Factory7*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1Factory7_Release                                        (ID2D1Factory7* this) { return ((UINT32 (WINAPI*)(ID2D1Factory7*))this->v->tbl[2])(this); }
static inline HRESULT                           ID2D1Factory7_ReloadSystemMetrics                            (ID2D1Factory7* this) { return ((HRESULT (WINAPI*)(ID2D1Factory7*))this->v->tbl[3])(this); }
__declspec(deprecated("Deprecated. Use DisplayInformation::LogicalDpi for Windows Store Apps or GetDpiForWindow for desktop apps."))
static inline void                              ID2D1Factory7_GetDesktopDpi                                  (ID2D1Factory7* this, FLOAT* dpiX, FLOAT* dpiY) { ((void (WINAPI*)(ID2D1Factory7*, FLOAT*, FLOAT*))this->v->tbl[4])(this, dpiX, dpiY); }
static inline HRESULT                           ID2D1Factory7_CreateRectangleGeometry                        (ID2D1Factory7* this, const D2D_RECT_F* rectangle, ID2D1RectangleGeometry** rectangleGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory7*, const D2D_RECT_F*, ID2D1RectangleGeometry**))this->v->tbl[5])(this, rectangle, rectangleGeometry); }
static inline HRESULT                           ID2D1Factory7_CreateRoundedRectangleGeometry                 (ID2D1Factory7* this, const D2D1_ROUNDED_RECT* roundedRectangle, ID2D1RoundedRectangleGeometry** roundedRectangleGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory7*, const D2D1_ROUNDED_RECT*, ID2D1RoundedRectangleGeometry**))this->v->tbl[6])(this, roundedRectangle, roundedRectangleGeometry); }
static inline HRESULT                           ID2D1Factory7_CreateEllipseGeometry                          (ID2D1Factory7* this, const D2D1_ELLIPSE* ellipse, ID2D1EllipseGeometry** ellipseGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory7*, const D2D1_ELLIPSE*, ID2D1EllipseGeometry**))this->v->tbl[7])(this, ellipse, ellipseGeometry); }
static inline HRESULT                           ID2D1Factory7_CreateGeometryGroup                            (ID2D1Factory7* this, D2D1_FILL_MODE fillMode, ID2D1Geometry** geometries, UINT32 geometriesCount, ID2D1GeometryGroup** geometryGroup) { return ((HRESULT (WINAPI*)(ID2D1Factory7*, D2D1_FILL_MODE, ID2D1Geometry**, UINT32, ID2D1GeometryGroup**))this->v->tbl[8])(this, fillMode, geometries, geometriesCount, geometryGroup); }
static inline HRESULT                           ID2D1Factory7_CreateTransformedGeometry                      (ID2D1Factory7* this, ID2D1Geometry* sourceGeometry, const D2D_MATRIX_3X2_F* transform, ID2D1TransformedGeometry** transformedGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory7*, ID2D1Geometry*, const D2D_MATRIX_3X2_F*, ID2D1TransformedGeometry**))this->v->tbl[9])(this, sourceGeometry, transform, transformedGeometry); }
static inline HRESULT                           ID2D1Factory7_CreatePathGeometry                             (ID2D1Factory7* this, ID2D1PathGeometry** pathGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory7*, ID2D1PathGeometry**))this->v->tbl[10])(this, pathGeometry); }
static inline HRESULT                           ID2D1Factory7_CreateStrokeStyle                              (ID2D1Factory7* this, const D2D1_STROKE_STYLE_PROPERTIES* strokeStyleProperties, const FLOAT* dashes, UINT32 dashesCount, ID2D1StrokeStyle** strokeStyle) { return ((HRESULT (WINAPI*)(ID2D1Factory7*, const D2D1_STROKE_STYLE_PROPERTIES*, const FLOAT*, UINT32, ID2D1StrokeStyle**))this->v->tbl[11])(this, strokeStyleProperties, dashes, dashesCount, strokeStyle); }
static inline HRESULT                           ID2D1Factory7_CreateDrawingStateBlock                        (ID2D1Factory7* this, const D2D1_DRAWING_STATE_DESCRIPTION* drawingStateDescription, IDWriteRenderingParams* textRenderingParams, ID2D1DrawingStateBlock** drawingStateBlock) { return ((HRESULT (WINAPI*)(ID2D1Factory7*, const D2D1_DRAWING_STATE_DESCRIPTION*, IDWriteRenderingParams*, ID2D1DrawingStateBlock**))this->v->tbl[12])(this, drawingStateDescription, textRenderingParams, drawingStateBlock); }
static inline HRESULT                           ID2D1Factory7_CreateWicBitmapRenderTarget                    (ID2D1Factory7* this, IWICBitmap* target, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties, ID2D1RenderTarget** renderTarget) { return ((HRESULT (WINAPI*)(ID2D1Factory7*, IWICBitmap*, const D2D1_RENDER_TARGET_PROPERTIES*, ID2D1RenderTarget**))this->v->tbl[13])(this, target, renderTargetProperties, renderTarget); }
static inline HRESULT                           ID2D1Factory7_CreateHwndRenderTarget                         (ID2D1Factory7* this, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties, const D2D1_HWND_RENDER_TARGET_PROPERTIES* hwndRenderTargetProperties, ID2D1HwndRenderTarget** hwndRenderTarget) { return ((HRESULT (WINAPI*)(ID2D1Factory7*, const D2D1_RENDER_TARGET_PROPERTIES*, const D2D1_HWND_RENDER_TARGET_PROPERTIES*, ID2D1HwndRenderTarget**))this->v->tbl[14])(this, renderTargetProperties, hwndRenderTargetProperties, hwndRenderTarget); }
static inline HRESULT                           ID2D1Factory7_CreateDxgiSurfaceRenderTarget                  (ID2D1Factory7* this, IDXGISurface* dxgiSurface, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties, ID2D1RenderTarget** renderTarget) { return ((HRESULT (WINAPI*)(ID2D1Factory7*, IDXGISurface*, const D2D1_RENDER_TARGET_PROPERTIES*, ID2D1RenderTarget**))this->v->tbl[15])(this, dxgiSurface, renderTargetProperties, renderTarget); }
static inline HRESULT                           ID2D1Factory7_CreateDCRenderTarget                           (ID2D1Factory7* this, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties, ID2D1DCRenderTarget** dcRenderTarget) { return ((HRESULT (WINAPI*)(ID2D1Factory7*, const D2D1_RENDER_TARGET_PROPERTIES*, ID2D1DCRenderTarget**))this->v->tbl[16])(this, renderTargetProperties, dcRenderTarget); }
static inline HRESULT                           ID2D1Factory7_CreateDevice                                   (ID2D1Factory7* this, IDXGIDevice* dxgiDevice, ID2D1Device** d2dDevice) { return ((HRESULT (WINAPI*)(ID2D1Factory7*, IDXGIDevice*, ID2D1Device**))this->v->tbl[17])(this, dxgiDevice, d2dDevice); }
static inline HRESULT                           ID2D1Factory7_CreateStrokeStyle1                             (ID2D1Factory7* this, const D2D1_STROKE_STYLE_PROPERTIES1* strokeStyleProperties, const FLOAT* dashes, UINT32 dashesCount, ID2D1StrokeStyle1** strokeStyle) { return ((HRESULT (WINAPI*)(ID2D1Factory7*, const D2D1_STROKE_STYLE_PROPERTIES1*, const FLOAT*, UINT32, ID2D1StrokeStyle1**))this->v->tbl[18])(this, strokeStyleProperties, dashes, dashesCount, strokeStyle); }
static inline HRESULT                           ID2D1Factory7_CreatePathGeometry1                            (ID2D1Factory7* this, ID2D1PathGeometry1** pathGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory7*, ID2D1PathGeometry1**))this->v->tbl[19])(this, pathGeometry); }
static inline HRESULT                           ID2D1Factory7_CreateDrawingStateBlock1                       (ID2D1Factory7* this, const D2D1_DRAWING_STATE_DESCRIPTION1* drawingStateDescription, IDWriteRenderingParams* textRenderingParams, ID2D1DrawingStateBlock1** drawingStateBlock) { return ((HRESULT (WINAPI*)(ID2D1Factory7*, const D2D1_DRAWING_STATE_DESCRIPTION1*, IDWriteRenderingParams*, ID2D1DrawingStateBlock1**))this->v->tbl[20])(this, drawingStateDescription, textRenderingParams, drawingStateBlock); }
static inline HRESULT                           ID2D1Factory7_CreateGdiMetafile                              (ID2D1Factory7* this, IStream* metafileStream, ID2D1GdiMetafile** metafile) { return ((HRESULT (WINAPI*)(ID2D1Factory7*, IStream*, ID2D1GdiMetafile**))this->v->tbl[21])(this, metafileStream, metafile); }
static inline HRESULT                           ID2D1Factory7_RegisterEffectFromStream                       (ID2D1Factory7* this, const GUID* classId, IStream* propertyXml, const D2D1_PROPERTY_BINDING* bindings, UINT32 bindingsCount, const PD2D1_EFFECT_FACTORY effectFactory) { return ((HRESULT (WINAPI*)(ID2D1Factory7*, const GUID*, IStream*, const D2D1_PROPERTY_BINDING*, UINT32, const PD2D1_EFFECT_FACTORY))this->v->tbl[22])(this, classId, propertyXml, bindings, bindingsCount, effectFactory); }
static inline HRESULT                           ID2D1Factory7_RegisterEffectFromString                       (ID2D1Factory7* this, const GUID* classId, const WCHAR* propertyXml, const D2D1_PROPERTY_BINDING* bindings, UINT32 bindingsCount, const PD2D1_EFFECT_FACTORY effectFactory) { return ((HRESULT (WINAPI*)(ID2D1Factory7*, const GUID*, const WCHAR*, const D2D1_PROPERTY_BINDING*, UINT32, const PD2D1_EFFECT_FACTORY))this->v->tbl[23])(this, classId, propertyXml, bindings, bindingsCount, effectFactory); }
static inline HRESULT                           ID2D1Factory7_UnregisterEffect                               (ID2D1Factory7* this, const GUID* classId) { return ((HRESULT (WINAPI*)(ID2D1Factory7*, const GUID*))this->v->tbl[24])(this, classId); }
static inline HRESULT                           ID2D1Factory7_GetRegisteredEffects                           (ID2D1Factory7* this, GUID* effects, UINT32 effectsCount, UINT32* effectsReturned, UINT32* effectsRegistered) { return ((HRESULT (WINAPI*)(ID2D1Factory7*, GUID*, UINT32, UINT32*, UINT32*))this->v->tbl[25])(this, effects, effectsCount, effectsReturned, effectsRegistered); }
static inline HRESULT                           ID2D1Factory7_GetEffectProperties                            (ID2D1Factory7* this, const GUID* effectId, ID2D1Properties** properties) { return ((HRESULT (WINAPI*)(ID2D1Factory7*, const GUID*, ID2D1Properties**))this->v->tbl[26])(this, effectId, properties); }
static inline HRESULT                           ID2D1Factory7_CreateDevice1                                  (ID2D1Factory7* this, IDXGIDevice* dxgiDevice, ID2D1Device1** d2dDevice1) { return ((HRESULT (WINAPI*)(ID2D1Factory7*, IDXGIDevice*, ID2D1Device1**))this->v->tbl[27])(this, dxgiDevice, d2dDevice1); }
static inline HRESULT                           ID2D1Factory7_CreateDevice2                                  (ID2D1Factory7* this, IDXGIDevice* dxgiDevice, ID2D1Device2** d2dDevice2) { return ((HRESULT (WINAPI*)(ID2D1Factory7*, IDXGIDevice*, ID2D1Device2**))this->v->tbl[28])(this, dxgiDevice, d2dDevice2); }
static inline HRESULT                           ID2D1Factory7_CreateDevice3                                  (ID2D1Factory7* this, IDXGIDevice* dxgiDevice, ID2D1Device3** d2dDevice3) { return ((HRESULT (WINAPI*)(ID2D1Factory7*, IDXGIDevice*, ID2D1Device3**))this->v->tbl[29])(this, dxgiDevice, d2dDevice3); }
static inline HRESULT                           ID2D1Factory7_CreateDevice4                                  (ID2D1Factory7* this, IDXGIDevice* dxgiDevice, ID2D1Device4** d2dDevice4) { return ((HRESULT (WINAPI*)(ID2D1Factory7*, IDXGIDevice*, ID2D1Device4**))this->v->tbl[30])(this, dxgiDevice, d2dDevice4); }
static inline HRESULT                           ID2D1Factory7_CreateDevice5                                  (ID2D1Factory7* this, IDXGIDevice* dxgiDevice, ID2D1Device5** d2dDevice5) { return ((HRESULT (WINAPI*)(ID2D1Factory7*, IDXGIDevice*, ID2D1Device5**))this->v->tbl[31])(this, dxgiDevice, d2dDevice5); }
static inline HRESULT                           ID2D1Factory7_CreateDevice6                                  (ID2D1Factory7* this, IDXGIDevice* dxgiDevice, ID2D1Device6** d2dDevice6) { return ((HRESULT (WINAPI*)(ID2D1Factory7*, IDXGIDevice*, ID2D1Device6**))this->v->tbl[32])(this, dxgiDevice, d2dDevice6); }

static inline HRESULT                           ID2D1Factory8_QueryInterface                                 (ID2D1Factory8* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1Factory8*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1Factory8_AddRef                                         (ID2D1Factory8* this) { return ((UINT32 (WINAPI*)(ID2D1Factory8*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1Factory8_Release                                        (ID2D1Factory8* this) { return ((UINT32 (WINAPI*)(ID2D1Factory8*))this->v->tbl[2])(this); }
static inline HRESULT                           ID2D1Factory8_ReloadSystemMetrics                            (ID2D1Factory8* this) { return ((HRESULT (WINAPI*)(ID2D1Factory8*))this->v->tbl[3])(this); }
__declspec(deprecated("Deprecated. Use DisplayInformation::LogicalDpi for Windows Store Apps or GetDpiForWindow for desktop apps."))
static inline void                              ID2D1Factory8_GetDesktopDpi                                  (ID2D1Factory8* this, FLOAT* dpiX, FLOAT* dpiY) { ((void (WINAPI*)(ID2D1Factory8*, FLOAT*, FLOAT*))this->v->tbl[4])(this, dpiX, dpiY); }
static inline HRESULT                           ID2D1Factory8_CreateRectangleGeometry                        (ID2D1Factory8* this, const D2D_RECT_F* rectangle, ID2D1RectangleGeometry** rectangleGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory8*, const D2D_RECT_F*, ID2D1RectangleGeometry**))this->v->tbl[5])(this, rectangle, rectangleGeometry); }
static inline HRESULT                           ID2D1Factory8_CreateRoundedRectangleGeometry                 (ID2D1Factory8* this, const D2D1_ROUNDED_RECT* roundedRectangle, ID2D1RoundedRectangleGeometry** roundedRectangleGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory8*, const D2D1_ROUNDED_RECT*, ID2D1RoundedRectangleGeometry**))this->v->tbl[6])(this, roundedRectangle, roundedRectangleGeometry); }
static inline HRESULT                           ID2D1Factory8_CreateEllipseGeometry                          (ID2D1Factory8* this, const D2D1_ELLIPSE* ellipse, ID2D1EllipseGeometry** ellipseGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory8*, const D2D1_ELLIPSE*, ID2D1EllipseGeometry**))this->v->tbl[7])(this, ellipse, ellipseGeometry); }
static inline HRESULT                           ID2D1Factory8_CreateGeometryGroup                            (ID2D1Factory8* this, D2D1_FILL_MODE fillMode, ID2D1Geometry** geometries, UINT32 geometriesCount, ID2D1GeometryGroup** geometryGroup) { return ((HRESULT (WINAPI*)(ID2D1Factory8*, D2D1_FILL_MODE, ID2D1Geometry**, UINT32, ID2D1GeometryGroup**))this->v->tbl[8])(this, fillMode, geometries, geometriesCount, geometryGroup); }
static inline HRESULT                           ID2D1Factory8_CreateTransformedGeometry                      (ID2D1Factory8* this, ID2D1Geometry* sourceGeometry, const D2D_MATRIX_3X2_F* transform, ID2D1TransformedGeometry** transformedGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory8*, ID2D1Geometry*, const D2D_MATRIX_3X2_F*, ID2D1TransformedGeometry**))this->v->tbl[9])(this, sourceGeometry, transform, transformedGeometry); }
static inline HRESULT                           ID2D1Factory8_CreatePathGeometry                             (ID2D1Factory8* this, ID2D1PathGeometry** pathGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory8*, ID2D1PathGeometry**))this->v->tbl[10])(this, pathGeometry); }
static inline HRESULT                           ID2D1Factory8_CreateStrokeStyle                              (ID2D1Factory8* this, const D2D1_STROKE_STYLE_PROPERTIES* strokeStyleProperties, const FLOAT* dashes, UINT32 dashesCount, ID2D1StrokeStyle** strokeStyle) { return ((HRESULT (WINAPI*)(ID2D1Factory8*, const D2D1_STROKE_STYLE_PROPERTIES*, const FLOAT*, UINT32, ID2D1StrokeStyle**))this->v->tbl[11])(this, strokeStyleProperties, dashes, dashesCount, strokeStyle); }
static inline HRESULT                           ID2D1Factory8_CreateDrawingStateBlock                        (ID2D1Factory8* this, const D2D1_DRAWING_STATE_DESCRIPTION* drawingStateDescription, IDWriteRenderingParams* textRenderingParams, ID2D1DrawingStateBlock** drawingStateBlock) { return ((HRESULT (WINAPI*)(ID2D1Factory8*, const D2D1_DRAWING_STATE_DESCRIPTION*, IDWriteRenderingParams*, ID2D1DrawingStateBlock**))this->v->tbl[12])(this, drawingStateDescription, textRenderingParams, drawingStateBlock); }
static inline HRESULT                           ID2D1Factory8_CreateWicBitmapRenderTarget                    (ID2D1Factory8* this, IWICBitmap* target, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties, ID2D1RenderTarget** renderTarget) { return ((HRESULT (WINAPI*)(ID2D1Factory8*, IWICBitmap*, const D2D1_RENDER_TARGET_PROPERTIES*, ID2D1RenderTarget**))this->v->tbl[13])(this, target, renderTargetProperties, renderTarget); }
static inline HRESULT                           ID2D1Factory8_CreateHwndRenderTarget                         (ID2D1Factory8* this, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties, const D2D1_HWND_RENDER_TARGET_PROPERTIES* hwndRenderTargetProperties, ID2D1HwndRenderTarget** hwndRenderTarget) { return ((HRESULT (WINAPI*)(ID2D1Factory8*, const D2D1_RENDER_TARGET_PROPERTIES*, const D2D1_HWND_RENDER_TARGET_PROPERTIES*, ID2D1HwndRenderTarget**))this->v->tbl[14])(this, renderTargetProperties, hwndRenderTargetProperties, hwndRenderTarget); }
static inline HRESULT                           ID2D1Factory8_CreateDxgiSurfaceRenderTarget                  (ID2D1Factory8* this, IDXGISurface* dxgiSurface, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties, ID2D1RenderTarget** renderTarget) { return ((HRESULT (WINAPI*)(ID2D1Factory8*, IDXGISurface*, const D2D1_RENDER_TARGET_PROPERTIES*, ID2D1RenderTarget**))this->v->tbl[15])(this, dxgiSurface, renderTargetProperties, renderTarget); }
static inline HRESULT                           ID2D1Factory8_CreateDCRenderTarget                           (ID2D1Factory8* this, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties, ID2D1DCRenderTarget** dcRenderTarget) { return ((HRESULT (WINAPI*)(ID2D1Factory8*, const D2D1_RENDER_TARGET_PROPERTIES*, ID2D1DCRenderTarget**))this->v->tbl[16])(this, renderTargetProperties, dcRenderTarget); }
static inline HRESULT                           ID2D1Factory8_CreateDevice                                   (ID2D1Factory8* this, IDXGIDevice* dxgiDevice, ID2D1Device** d2dDevice) { return ((HRESULT (WINAPI*)(ID2D1Factory8*, IDXGIDevice*, ID2D1Device**))this->v->tbl[17])(this, dxgiDevice, d2dDevice); }
static inline HRESULT                           ID2D1Factory8_CreateStrokeStyle1                             (ID2D1Factory8* this, const D2D1_STROKE_STYLE_PROPERTIES1* strokeStyleProperties, const FLOAT* dashes, UINT32 dashesCount, ID2D1StrokeStyle1** strokeStyle) { return ((HRESULT (WINAPI*)(ID2D1Factory8*, const D2D1_STROKE_STYLE_PROPERTIES1*, const FLOAT*, UINT32, ID2D1StrokeStyle1**))this->v->tbl[18])(this, strokeStyleProperties, dashes, dashesCount, strokeStyle); }
static inline HRESULT                           ID2D1Factory8_CreatePathGeometry1                            (ID2D1Factory8* this, ID2D1PathGeometry1** pathGeometry) { return ((HRESULT (WINAPI*)(ID2D1Factory8*, ID2D1PathGeometry1**))this->v->tbl[19])(this, pathGeometry); }
static inline HRESULT                           ID2D1Factory8_CreateDrawingStateBlock1                       (ID2D1Factory8* this, const D2D1_DRAWING_STATE_DESCRIPTION1* drawingStateDescription, IDWriteRenderingParams* textRenderingParams, ID2D1DrawingStateBlock1** drawingStateBlock) { return ((HRESULT (WINAPI*)(ID2D1Factory8*, const D2D1_DRAWING_STATE_DESCRIPTION1*, IDWriteRenderingParams*, ID2D1DrawingStateBlock1**))this->v->tbl[20])(this, drawingStateDescription, textRenderingParams, drawingStateBlock); }
static inline HRESULT                           ID2D1Factory8_CreateGdiMetafile                              (ID2D1Factory8* this, IStream* metafileStream, ID2D1GdiMetafile** metafile) { return ((HRESULT (WINAPI*)(ID2D1Factory8*, IStream*, ID2D1GdiMetafile**))this->v->tbl[21])(this, metafileStream, metafile); }
static inline HRESULT                           ID2D1Factory8_RegisterEffectFromStream                       (ID2D1Factory8* this, const GUID* classId, IStream* propertyXml, const D2D1_PROPERTY_BINDING* bindings, UINT32 bindingsCount, const PD2D1_EFFECT_FACTORY effectFactory) { return ((HRESULT (WINAPI*)(ID2D1Factory8*, const GUID*, IStream*, const D2D1_PROPERTY_BINDING*, UINT32, const PD2D1_EFFECT_FACTORY))this->v->tbl[22])(this, classId, propertyXml, bindings, bindingsCount, effectFactory); }
static inline HRESULT                           ID2D1Factory8_RegisterEffectFromString                       (ID2D1Factory8* this, const GUID* classId, const WCHAR* propertyXml, const D2D1_PROPERTY_BINDING* bindings, UINT32 bindingsCount, const PD2D1_EFFECT_FACTORY effectFactory) { return ((HRESULT (WINAPI*)(ID2D1Factory8*, const GUID*, const WCHAR*, const D2D1_PROPERTY_BINDING*, UINT32, const PD2D1_EFFECT_FACTORY))this->v->tbl[23])(this, classId, propertyXml, bindings, bindingsCount, effectFactory); }
static inline HRESULT                           ID2D1Factory8_UnregisterEffect                               (ID2D1Factory8* this, const GUID* classId) { return ((HRESULT (WINAPI*)(ID2D1Factory8*, const GUID*))this->v->tbl[24])(this, classId); }
static inline HRESULT                           ID2D1Factory8_GetRegisteredEffects                           (ID2D1Factory8* this, GUID* effects, UINT32 effectsCount, UINT32* effectsReturned, UINT32* effectsRegistered) { return ((HRESULT (WINAPI*)(ID2D1Factory8*, GUID*, UINT32, UINT32*, UINT32*))this->v->tbl[25])(this, effects, effectsCount, effectsReturned, effectsRegistered); }
static inline HRESULT                           ID2D1Factory8_GetEffectProperties                            (ID2D1Factory8* this, const GUID* effectId, ID2D1Properties** properties) { return ((HRESULT (WINAPI*)(ID2D1Factory8*, const GUID*, ID2D1Properties**))this->v->tbl[26])(this, effectId, properties); }
static inline HRESULT                           ID2D1Factory8_CreateDevice1                                  (ID2D1Factory8* this, IDXGIDevice* dxgiDevice, ID2D1Device1** d2dDevice1) { return ((HRESULT (WINAPI*)(ID2D1Factory8*, IDXGIDevice*, ID2D1Device1**))this->v->tbl[27])(this, dxgiDevice, d2dDevice1); }
static inline HRESULT                           ID2D1Factory8_CreateDevice2                                  (ID2D1Factory8* this, IDXGIDevice* dxgiDevice, ID2D1Device2** d2dDevice2) { return ((HRESULT (WINAPI*)(ID2D1Factory8*, IDXGIDevice*, ID2D1Device2**))this->v->tbl[28])(this, dxgiDevice, d2dDevice2); }
static inline HRESULT                           ID2D1Factory8_CreateDevice3                                  (ID2D1Factory8* this, IDXGIDevice* dxgiDevice, ID2D1Device3** d2dDevice3) { return ((HRESULT (WINAPI*)(ID2D1Factory8*, IDXGIDevice*, ID2D1Device3**))this->v->tbl[29])(this, dxgiDevice, d2dDevice3); }
static inline HRESULT                           ID2D1Factory8_CreateDevice4                                  (ID2D1Factory8* this, IDXGIDevice* dxgiDevice, ID2D1Device4** d2dDevice4) { return ((HRESULT (WINAPI*)(ID2D1Factory8*, IDXGIDevice*, ID2D1Device4**))this->v->tbl[30])(this, dxgiDevice, d2dDevice4); }
static inline HRESULT                           ID2D1Factory8_CreateDevice5                                  (ID2D1Factory8* this, IDXGIDevice* dxgiDevice, ID2D1Device5** d2dDevice5) { return ((HRESULT (WINAPI*)(ID2D1Factory8*, IDXGIDevice*, ID2D1Device5**))this->v->tbl[31])(this, dxgiDevice, d2dDevice5); }
static inline HRESULT                           ID2D1Factory8_CreateDevice6                                  (ID2D1Factory8* this, IDXGIDevice* dxgiDevice, ID2D1Device6** d2dDevice6) { return ((HRESULT (WINAPI*)(ID2D1Factory8*, IDXGIDevice*, ID2D1Device6**))this->v->tbl[32])(this, dxgiDevice, d2dDevice6); }
static inline HRESULT                           ID2D1Factory8_CreateDevice7                                  (ID2D1Factory8* this, IDXGIDevice* dxgiDevice, ID2D1Device7** d2dDevice6) { return ((HRESULT (WINAPI*)(ID2D1Factory8*, IDXGIDevice*, ID2D1Device7**))this->v->tbl[33])(this, dxgiDevice, d2dDevice6); }

static inline HRESULT                           ID2D1GdiInteropRenderTarget_QueryInterface                   (ID2D1GdiInteropRenderTarget* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1GdiInteropRenderTarget*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1GdiInteropRenderTarget_AddRef                           (ID2D1GdiInteropRenderTarget* this) { return ((UINT32 (WINAPI*)(ID2D1GdiInteropRenderTarget*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1GdiInteropRenderTarget_Release                          (ID2D1GdiInteropRenderTarget* this) { return ((UINT32 (WINAPI*)(ID2D1GdiInteropRenderTarget*))this->v->tbl[2])(this); }
static inline HRESULT                           ID2D1GdiInteropRenderTarget_GetDC                            (ID2D1GdiInteropRenderTarget* this, D2D1_DC_INITIALIZE_MODE mode, HDC* hdc) { return ((HRESULT (WINAPI*)(ID2D1GdiInteropRenderTarget*, D2D1_DC_INITIALIZE_MODE, HDC*))this->v->tbl[3])(this, mode, hdc); }
static inline HRESULT                           ID2D1GdiInteropRenderTarget_ReleaseDC                        (ID2D1GdiInteropRenderTarget* this, const RECT* update) { return ((HRESULT (WINAPI*)(ID2D1GdiInteropRenderTarget*, const RECT*))this->v->tbl[4])(this, update); }

static inline HRESULT                           ID2D1GdiMetafile_QueryInterface                              (ID2D1GdiMetafile* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1GdiMetafile*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1GdiMetafile_AddRef                                      (ID2D1GdiMetafile* this) { return ((UINT32 (WINAPI*)(ID2D1GdiMetafile*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1GdiMetafile_Release                                     (ID2D1GdiMetafile* this) { return ((UINT32 (WINAPI*)(ID2D1GdiMetafile*))this->v->tbl[2])(this); }
static inline void                              ID2D1GdiMetafile_GetFactory                                  (ID2D1GdiMetafile* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1GdiMetafile*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline HRESULT                           ID2D1GdiMetafile_Stream                                      (ID2D1GdiMetafile* this, ID2D1GdiMetafileSink* sink) { return ((HRESULT (WINAPI*)(ID2D1GdiMetafile*, ID2D1GdiMetafileSink*))this->v->tbl[4])(this, sink); }
static inline HRESULT                           ID2D1GdiMetafile_GetBounds                                   (ID2D1GdiMetafile* this, D2D_RECT_F* bounds) { return ((HRESULT (WINAPI*)(ID2D1GdiMetafile*, D2D_RECT_F*))this->v->tbl[5])(this, bounds); }

static inline HRESULT                           ID2D1GdiMetafile1_QueryInterface                             (ID2D1GdiMetafile1* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1GdiMetafile1*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1GdiMetafile1_AddRef                                     (ID2D1GdiMetafile1* this) { return ((UINT32 (WINAPI*)(ID2D1GdiMetafile1*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1GdiMetafile1_Release                                    (ID2D1GdiMetafile1* this) { return ((UINT32 (WINAPI*)(ID2D1GdiMetafile1*))this->v->tbl[2])(this); }
static inline void                              ID2D1GdiMetafile1_GetFactory                                 (ID2D1GdiMetafile1* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1GdiMetafile1*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline HRESULT                           ID2D1GdiMetafile1_Stream                                     (ID2D1GdiMetafile1* this, ID2D1GdiMetafileSink* sink) { return ((HRESULT (WINAPI*)(ID2D1GdiMetafile1*, ID2D1GdiMetafileSink*))this->v->tbl[4])(this, sink); }
static inline HRESULT                           ID2D1GdiMetafile1_GetBounds                                  (ID2D1GdiMetafile1* this, D2D_RECT_F* bounds) { return ((HRESULT (WINAPI*)(ID2D1GdiMetafile1*, D2D_RECT_F*))this->v->tbl[5])(this, bounds); }
static inline HRESULT                           ID2D1GdiMetafile1_GetDpi                                     (ID2D1GdiMetafile1* this, FLOAT* dpiX, FLOAT* dpiY) { return ((HRESULT (WINAPI*)(ID2D1GdiMetafile1*, FLOAT*, FLOAT*))this->v->tbl[6])(this, dpiX, dpiY); }
static inline HRESULT                           ID2D1GdiMetafile1_GetSourceBounds                            (ID2D1GdiMetafile1* this, D2D_RECT_F* bounds) { return ((HRESULT (WINAPI*)(ID2D1GdiMetafile1*, D2D_RECT_F*))this->v->tbl[7])(this, bounds); }

static inline HRESULT                           ID2D1GdiMetafileSink_QueryInterface                          (ID2D1GdiMetafileSink* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1GdiMetafileSink*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1GdiMetafileSink_AddRef                                  (ID2D1GdiMetafileSink* this) { return ((UINT32 (WINAPI*)(ID2D1GdiMetafileSink*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1GdiMetafileSink_Release                                 (ID2D1GdiMetafileSink* this) { return ((UINT32 (WINAPI*)(ID2D1GdiMetafileSink*))this->v->tbl[2])(this); }
static inline HRESULT                           ID2D1GdiMetafileSink_ProcessRecord                           (ID2D1GdiMetafileSink* this, UINT32 recordType, const void* recordData, UINT32 recordDataSize) { return ((HRESULT (WINAPI*)(ID2D1GdiMetafileSink*, UINT32, const void*, UINT32))this->v->tbl[3])(this, recordType, recordData, recordDataSize); }

static inline HRESULT                           ID2D1GdiMetafileSink1_QueryInterface                         (ID2D1GdiMetafileSink1* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1GdiMetafileSink1*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1GdiMetafileSink1_AddRef                                 (ID2D1GdiMetafileSink1* this) { return ((UINT32 (WINAPI*)(ID2D1GdiMetafileSink1*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1GdiMetafileSink1_Release                                (ID2D1GdiMetafileSink1* this) { return ((UINT32 (WINAPI*)(ID2D1GdiMetafileSink1*))this->v->tbl[2])(this); }
static inline HRESULT                           ID2D1GdiMetafileSink1_ProcessRecord                          (ID2D1GdiMetafileSink1* this, UINT32 recordType, const void* recordData, UINT32 recordDataSize) { return ((HRESULT (WINAPI*)(ID2D1GdiMetafileSink1*, UINT32, const void*, UINT32))this->v->tbl[3])(this, recordType, recordData, recordDataSize); }
static inline HRESULT                           ID2D1GdiMetafileSink1_ProcessRecord1                         (ID2D1GdiMetafileSink1* this, UINT32 recordType, const void* recordData, UINT32 recordDataSize, UINT32 flags) { return ((HRESULT (WINAPI*)(ID2D1GdiMetafileSink1*, UINT32, const void*, UINT32, UINT32))this->v->tbl[4])(this, recordType, recordData, recordDataSize, flags); }

static inline HRESULT                           ID2D1Geometry_QueryInterface                                 (ID2D1Geometry* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1Geometry*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1Geometry_AddRef                                         (ID2D1Geometry* this) { return ((UINT32 (WINAPI*)(ID2D1Geometry*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1Geometry_Release                                        (ID2D1Geometry* this) { return ((UINT32 (WINAPI*)(ID2D1Geometry*))this->v->tbl[2])(this); }
static inline void                              ID2D1Geometry_GetFactory                                     (ID2D1Geometry* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1Geometry*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline HRESULT                           ID2D1Geometry_GetBounds                                      (ID2D1Geometry* this, const D2D_MATRIX_3X2_F* worldTransform, D2D_RECT_F* bounds) { return ((HRESULT (WINAPI*)(ID2D1Geometry*, const D2D_MATRIX_3X2_F*, D2D_RECT_F*))this->v->tbl[4])(this, worldTransform, bounds); }
static inline HRESULT                           ID2D1Geometry_GetWidenedBounds                               (ID2D1Geometry* this, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, D2D_RECT_F* bounds) { return ((HRESULT (WINAPI*)(ID2D1Geometry*, FLOAT, ID2D1StrokeStyle*, const D2D_MATRIX_3X2_F*, FLOAT, D2D_RECT_F*))this->v->tbl[5])(this, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, bounds); }
static inline HRESULT                           ID2D1Geometry_StrokeContainsPoint                            (ID2D1Geometry* this, D2D_POINT_2F point, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, BOOL* contains) { return ((HRESULT (WINAPI*)(ID2D1Geometry*, D2D_POINT_2F, FLOAT, ID2D1StrokeStyle*, const D2D_MATRIX_3X2_F*, FLOAT, BOOL*))this->v->tbl[6])(this, point, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, contains); }
static inline HRESULT                           ID2D1Geometry_FillContainsPoint                              (ID2D1Geometry* this, D2D_POINT_2F point, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, BOOL* contains) { return ((HRESULT (WINAPI*)(ID2D1Geometry*, D2D_POINT_2F, const D2D_MATRIX_3X2_F*, FLOAT, BOOL*))this->v->tbl[7])(this, point, worldTransform, flatteningTolerance, contains); }
static inline HRESULT                           ID2D1Geometry_CompareWithGeometry                            (ID2D1Geometry* this, ID2D1Geometry* inputGeometry, const D2D_MATRIX_3X2_F* inputGeometryTransform, FLOAT flatteningTolerance, D2D1_GEOMETRY_RELATION* relation) { return ((HRESULT (WINAPI*)(ID2D1Geometry*, ID2D1Geometry*, const D2D_MATRIX_3X2_F*, FLOAT, D2D1_GEOMETRY_RELATION*))this->v->tbl[8])(this, inputGeometry, inputGeometryTransform, flatteningTolerance, relation); }
static inline HRESULT                           ID2D1Geometry_Simplify                                       (ID2D1Geometry* this, D2D1_GEOMETRY_SIMPLIFICATION_OPTION simplificationOption, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, ID2D1SimplifiedGeometrySink* geometrySink) { return ((HRESULT (WINAPI*)(ID2D1Geometry*, D2D1_GEOMETRY_SIMPLIFICATION_OPTION, const D2D_MATRIX_3X2_F*, FLOAT, ID2D1SimplifiedGeometrySink*))this->v->tbl[9])(this, simplificationOption, worldTransform, flatteningTolerance, geometrySink); }
static inline HRESULT                           ID2D1Geometry_Tessellate                                     (ID2D1Geometry* this, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, ID2D1TessellationSink* tessellationSink) { return ((HRESULT (WINAPI*)(ID2D1Geometry*, const D2D_MATRIX_3X2_F*, FLOAT, ID2D1TessellationSink*))this->v->tbl[10])(this, worldTransform, flatteningTolerance, tessellationSink); }
static inline HRESULT                           ID2D1Geometry_CombineWithGeometry                            (ID2D1Geometry* this, ID2D1Geometry* inputGeometry, D2D1_COMBINE_MODE combineMode, const D2D_MATRIX_3X2_F* inputGeometryTransform, FLOAT flatteningTolerance, ID2D1SimplifiedGeometrySink* geometrySink) { return ((HRESULT (WINAPI*)(ID2D1Geometry*, ID2D1Geometry*, D2D1_COMBINE_MODE, const D2D_MATRIX_3X2_F*, FLOAT, ID2D1SimplifiedGeometrySink*))this->v->tbl[11])(this, inputGeometry, combineMode, inputGeometryTransform, flatteningTolerance, geometrySink); }
static inline HRESULT                           ID2D1Geometry_Outline                                        (ID2D1Geometry* this, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, ID2D1SimplifiedGeometrySink* geometrySink) { return ((HRESULT (WINAPI*)(ID2D1Geometry*, const D2D_MATRIX_3X2_F*, FLOAT, ID2D1SimplifiedGeometrySink*))this->v->tbl[12])(this, worldTransform, flatteningTolerance, geometrySink); }
static inline HRESULT                           ID2D1Geometry_ComputeArea                                    (ID2D1Geometry* this, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, FLOAT* area) { return ((HRESULT (WINAPI*)(ID2D1Geometry*, const D2D_MATRIX_3X2_F*, FLOAT, FLOAT*))this->v->tbl[13])(this, worldTransform, flatteningTolerance, area); }
static inline HRESULT                           ID2D1Geometry_ComputeLength                                  (ID2D1Geometry* this, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, FLOAT* length) { return ((HRESULT (WINAPI*)(ID2D1Geometry*, const D2D_MATRIX_3X2_F*, FLOAT, FLOAT*))this->v->tbl[14])(this, worldTransform, flatteningTolerance, length); }
static inline HRESULT                           ID2D1Geometry_ComputePointAtLength                           (ID2D1Geometry* this, FLOAT length, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, D2D_POINT_2F* point, D2D_POINT_2F* unitTangentVector) { return ((HRESULT (WINAPI*)(ID2D1Geometry*, FLOAT, const D2D_MATRIX_3X2_F*, FLOAT, D2D_POINT_2F*, D2D_POINT_2F*))this->v->tbl[15])(this, length, worldTransform, flatteningTolerance, point, unitTangentVector); }
static inline HRESULT                           ID2D1Geometry_Widen                                          (ID2D1Geometry* this, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, ID2D1SimplifiedGeometrySink* geometrySink) { return ((HRESULT (WINAPI*)(ID2D1Geometry*, FLOAT, ID2D1StrokeStyle*, const D2D_MATRIX_3X2_F*, FLOAT, ID2D1SimplifiedGeometrySink*))this->v->tbl[16])(this, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, geometrySink); }

static inline HRESULT                           ID2D1GeometryGroup_QueryInterface                            (ID2D1GeometryGroup* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1GeometryGroup*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1GeometryGroup_AddRef                                    (ID2D1GeometryGroup* this) { return ((UINT32 (WINAPI*)(ID2D1GeometryGroup*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1GeometryGroup_Release                                   (ID2D1GeometryGroup* this) { return ((UINT32 (WINAPI*)(ID2D1GeometryGroup*))this->v->tbl[2])(this); }
static inline void                              ID2D1GeometryGroup_GetFactory                                (ID2D1GeometryGroup* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1GeometryGroup*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline HRESULT                           ID2D1GeometryGroup_GetBounds                                 (ID2D1GeometryGroup* this, const D2D_MATRIX_3X2_F* worldTransform, D2D_RECT_F* bounds) { return ((HRESULT (WINAPI*)(ID2D1GeometryGroup*, const D2D_MATRIX_3X2_F*, D2D_RECT_F*))this->v->tbl[4])(this, worldTransform, bounds); }
static inline HRESULT                           ID2D1GeometryGroup_GetWidenedBounds                          (ID2D1GeometryGroup* this, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, D2D_RECT_F* bounds) { return ((HRESULT (WINAPI*)(ID2D1GeometryGroup*, FLOAT, ID2D1StrokeStyle*, const D2D_MATRIX_3X2_F*, FLOAT, D2D_RECT_F*))this->v->tbl[5])(this, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, bounds); }
static inline HRESULT                           ID2D1GeometryGroup_StrokeContainsPoint                       (ID2D1GeometryGroup* this, D2D_POINT_2F point, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, BOOL* contains) { return ((HRESULT (WINAPI*)(ID2D1GeometryGroup*, D2D_POINT_2F, FLOAT, ID2D1StrokeStyle*, const D2D_MATRIX_3X2_F*, FLOAT, BOOL*))this->v->tbl[6])(this, point, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, contains); }
static inline HRESULT                           ID2D1GeometryGroup_FillContainsPoint                         (ID2D1GeometryGroup* this, D2D_POINT_2F point, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, BOOL* contains) { return ((HRESULT (WINAPI*)(ID2D1GeometryGroup*, D2D_POINT_2F, const D2D_MATRIX_3X2_F*, FLOAT, BOOL*))this->v->tbl[7])(this, point, worldTransform, flatteningTolerance, contains); }
static inline HRESULT                           ID2D1GeometryGroup_CompareWithGeometry                       (ID2D1GeometryGroup* this, ID2D1Geometry* inputGeometry, const D2D_MATRIX_3X2_F* inputGeometryTransform, FLOAT flatteningTolerance, D2D1_GEOMETRY_RELATION* relation) { return ((HRESULT (WINAPI*)(ID2D1GeometryGroup*, ID2D1Geometry*, const D2D_MATRIX_3X2_F*, FLOAT, D2D1_GEOMETRY_RELATION*))this->v->tbl[8])(this, inputGeometry, inputGeometryTransform, flatteningTolerance, relation); }
static inline HRESULT                           ID2D1GeometryGroup_Simplify                                  (ID2D1GeometryGroup* this, D2D1_GEOMETRY_SIMPLIFICATION_OPTION simplificationOption, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, ID2D1SimplifiedGeometrySink* geometrySink) { return ((HRESULT (WINAPI*)(ID2D1GeometryGroup*, D2D1_GEOMETRY_SIMPLIFICATION_OPTION, const D2D_MATRIX_3X2_F*, FLOAT, ID2D1SimplifiedGeometrySink*))this->v->tbl[9])(this, simplificationOption, worldTransform, flatteningTolerance, geometrySink); }
static inline HRESULT                           ID2D1GeometryGroup_Tessellate                                (ID2D1GeometryGroup* this, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, ID2D1TessellationSink* tessellationSink) { return ((HRESULT (WINAPI*)(ID2D1GeometryGroup*, const D2D_MATRIX_3X2_F*, FLOAT, ID2D1TessellationSink*))this->v->tbl[10])(this, worldTransform, flatteningTolerance, tessellationSink); }
static inline HRESULT                           ID2D1GeometryGroup_CombineWithGeometry                       (ID2D1GeometryGroup* this, ID2D1Geometry* inputGeometry, D2D1_COMBINE_MODE combineMode, const D2D_MATRIX_3X2_F* inputGeometryTransform, FLOAT flatteningTolerance, ID2D1SimplifiedGeometrySink* geometrySink) { return ((HRESULT (WINAPI*)(ID2D1GeometryGroup*, ID2D1Geometry*, D2D1_COMBINE_MODE, const D2D_MATRIX_3X2_F*, FLOAT, ID2D1SimplifiedGeometrySink*))this->v->tbl[11])(this, inputGeometry, combineMode, inputGeometryTransform, flatteningTolerance, geometrySink); }
static inline HRESULT                           ID2D1GeometryGroup_Outline                                   (ID2D1GeometryGroup* this, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, ID2D1SimplifiedGeometrySink* geometrySink) { return ((HRESULT (WINAPI*)(ID2D1GeometryGroup*, const D2D_MATRIX_3X2_F*, FLOAT, ID2D1SimplifiedGeometrySink*))this->v->tbl[12])(this, worldTransform, flatteningTolerance, geometrySink); }
static inline HRESULT                           ID2D1GeometryGroup_ComputeArea                               (ID2D1GeometryGroup* this, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, FLOAT* area) { return ((HRESULT (WINAPI*)(ID2D1GeometryGroup*, const D2D_MATRIX_3X2_F*, FLOAT, FLOAT*))this->v->tbl[13])(this, worldTransform, flatteningTolerance, area); }
static inline HRESULT                           ID2D1GeometryGroup_ComputeLength                             (ID2D1GeometryGroup* this, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, FLOAT* length) { return ((HRESULT (WINAPI*)(ID2D1GeometryGroup*, const D2D_MATRIX_3X2_F*, FLOAT, FLOAT*))this->v->tbl[14])(this, worldTransform, flatteningTolerance, length); }
static inline HRESULT                           ID2D1GeometryGroup_ComputePointAtLength                      (ID2D1GeometryGroup* this, FLOAT length, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, D2D_POINT_2F* point, D2D_POINT_2F* unitTangentVector) { return ((HRESULT (WINAPI*)(ID2D1GeometryGroup*, FLOAT, const D2D_MATRIX_3X2_F*, FLOAT, D2D_POINT_2F*, D2D_POINT_2F*))this->v->tbl[15])(this, length, worldTransform, flatteningTolerance, point, unitTangentVector); }
static inline HRESULT                           ID2D1GeometryGroup_Widen                                     (ID2D1GeometryGroup* this, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, ID2D1SimplifiedGeometrySink* geometrySink) { return ((HRESULT (WINAPI*)(ID2D1GeometryGroup*, FLOAT, ID2D1StrokeStyle*, const D2D_MATRIX_3X2_F*, FLOAT, ID2D1SimplifiedGeometrySink*))this->v->tbl[16])(this, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, geometrySink); }
static inline D2D1_FILL_MODE                    ID2D1GeometryGroup_GetFillMode                               (ID2D1GeometryGroup* this) { return ((D2D1_FILL_MODE (WINAPI*)(ID2D1GeometryGroup*))this->v->tbl[17])(this); }
static inline UINT32                            ID2D1GeometryGroup_GetSourceGeometryCount                    (ID2D1GeometryGroup* this) { return ((UINT32 (WINAPI*)(ID2D1GeometryGroup*))this->v->tbl[18])(this); }
static inline void                              ID2D1GeometryGroup_GetSourceGeometries                       (ID2D1GeometryGroup* this, ID2D1Geometry** geometries, UINT32 geometriesCount) { ((void (WINAPI*)(ID2D1GeometryGroup*, ID2D1Geometry**, UINT32))this->v->tbl[19])(this, geometries, geometriesCount); }

static inline HRESULT                           ID2D1GeometryRealization_QueryInterface                      (ID2D1GeometryRealization* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1GeometryRealization*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1GeometryRealization_AddRef                              (ID2D1GeometryRealization* this) { return ((UINT32 (WINAPI*)(ID2D1GeometryRealization*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1GeometryRealization_Release                             (ID2D1GeometryRealization* this) { return ((UINT32 (WINAPI*)(ID2D1GeometryRealization*))this->v->tbl[2])(this); }
static inline void                              ID2D1GeometryRealization_GetFactory                          (ID2D1GeometryRealization* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1GeometryRealization*, ID2D1Factory**))this->v->tbl[3])(this, factory); }

static inline HRESULT                           ID2D1GeometrySink_QueryInterface                             (ID2D1GeometrySink* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1GeometrySink*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1GeometrySink_AddRef                                     (ID2D1GeometrySink* this) { return ((UINT32 (WINAPI*)(ID2D1GeometrySink*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1GeometrySink_Release                                    (ID2D1GeometrySink* this) { return ((UINT32 (WINAPI*)(ID2D1GeometrySink*))this->v->tbl[2])(this); }
static inline void                              ID2D1GeometrySink_SetFillMode                                (ID2D1GeometrySink* this, D2D1_FILL_MODE fillMode) { ((void (WINAPI*)(ID2D1GeometrySink*, D2D1_FILL_MODE))this->v->tbl[3])(this, fillMode); }
static inline void                              ID2D1GeometrySink_SetSegmentFlags                            (ID2D1GeometrySink* this, D2D1_PATH_SEGMENT vertexFlags) { ((void (WINAPI*)(ID2D1GeometrySink*, D2D1_PATH_SEGMENT))this->v->tbl[4])(this, vertexFlags); }
static inline void                              ID2D1GeometrySink_BeginFigure                                (ID2D1GeometrySink* this, D2D_POINT_2F startPoint, D2D1_FIGURE_BEGIN figureBegin) { ((void (WINAPI*)(ID2D1GeometrySink*, D2D_POINT_2F, D2D1_FIGURE_BEGIN))this->v->tbl[5])(this, startPoint, figureBegin); }
static inline void                              ID2D1GeometrySink_AddLines                                   (ID2D1GeometrySink* this, const D2D_POINT_2F* points, UINT32 pointsCount) { ((void (WINAPI*)(ID2D1GeometrySink*, const D2D_POINT_2F*, UINT32))this->v->tbl[6])(this, points, pointsCount); }
static inline void                              ID2D1GeometrySink_AddBeziers                                 (ID2D1GeometrySink* this, const D2D1_BEZIER_SEGMENT* beziers, UINT32 beziersCount) { ((void (WINAPI*)(ID2D1GeometrySink*, const D2D1_BEZIER_SEGMENT*, UINT32))this->v->tbl[7])(this, beziers, beziersCount); }
static inline void                              ID2D1GeometrySink_EndFigure                                  (ID2D1GeometrySink* this, D2D1_FIGURE_END figureEnd) { ((void (WINAPI*)(ID2D1GeometrySink*, D2D1_FIGURE_END))this->v->tbl[8])(this, figureEnd); }
static inline HRESULT                           ID2D1GeometrySink_Close                                      (ID2D1GeometrySink* this) { return ((HRESULT (WINAPI*)(ID2D1GeometrySink*))this->v->tbl[9])(this); }
static inline void                              ID2D1GeometrySink_AddLine                                    (ID2D1GeometrySink* this, D2D_POINT_2F point) { ((void (WINAPI*)(ID2D1GeometrySink*, D2D_POINT_2F))this->v->tbl[10])(this, point); }
static inline void                              ID2D1GeometrySink_AddBezier                                  (ID2D1GeometrySink* this, const D2D1_BEZIER_SEGMENT* bezier) { ((void (WINAPI*)(ID2D1GeometrySink*, const D2D1_BEZIER_SEGMENT*))this->v->tbl[11])(this, bezier); }
static inline void                              ID2D1GeometrySink_AddQuadraticBezier                         (ID2D1GeometrySink* this, const D2D1_QUADRATIC_BEZIER_SEGMENT* bezier) { ((void (WINAPI*)(ID2D1GeometrySink*, const D2D1_QUADRATIC_BEZIER_SEGMENT*))this->v->tbl[12])(this, bezier); }
static inline void                              ID2D1GeometrySink_AddQuadraticBeziers                        (ID2D1GeometrySink* this, const D2D1_QUADRATIC_BEZIER_SEGMENT* beziers, UINT32 beziersCount) { ((void (WINAPI*)(ID2D1GeometrySink*, const D2D1_QUADRATIC_BEZIER_SEGMENT*, UINT32))this->v->tbl[13])(this, beziers, beziersCount); }
static inline void                              ID2D1GeometrySink_AddArc                                     (ID2D1GeometrySink* this, const D2D1_ARC_SEGMENT* arc) { ((void (WINAPI*)(ID2D1GeometrySink*, const D2D1_ARC_SEGMENT*))this->v->tbl[14])(this, arc); }

static inline HRESULT                           ID2D1GradientMesh_QueryInterface                             (ID2D1GradientMesh* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1GradientMesh*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1GradientMesh_AddRef                                     (ID2D1GradientMesh* this) { return ((UINT32 (WINAPI*)(ID2D1GradientMesh*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1GradientMesh_Release                                    (ID2D1GradientMesh* this) { return ((UINT32 (WINAPI*)(ID2D1GradientMesh*))this->v->tbl[2])(this); }
static inline void                              ID2D1GradientMesh_GetFactory                                 (ID2D1GradientMesh* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1GradientMesh*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline UINT32                            ID2D1GradientMesh_GetPatchCount                              (ID2D1GradientMesh* this) { return ((UINT32 (WINAPI*)(ID2D1GradientMesh*))this->v->tbl[4])(this); }
static inline HRESULT                           ID2D1GradientMesh_GetPatches                                 (ID2D1GradientMesh* this, UINT32 startIndex, D2D1_GRADIENT_MESH_PATCH* patches, UINT32 patchesCount) { return ((HRESULT (WINAPI*)(ID2D1GradientMesh*, UINT32, D2D1_GRADIENT_MESH_PATCH*, UINT32))this->v->tbl[5])(this, startIndex, patches, patchesCount); }

static inline HRESULT                           ID2D1GradientStopCollection_QueryInterface                   (ID2D1GradientStopCollection* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1GradientStopCollection*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1GradientStopCollection_AddRef                           (ID2D1GradientStopCollection* this) { return ((UINT32 (WINAPI*)(ID2D1GradientStopCollection*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1GradientStopCollection_Release                          (ID2D1GradientStopCollection* this) { return ((UINT32 (WINAPI*)(ID2D1GradientStopCollection*))this->v->tbl[2])(this); }
static inline void                              ID2D1GradientStopCollection_GetFactory                       (ID2D1GradientStopCollection* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1GradientStopCollection*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline UINT32                            ID2D1GradientStopCollection_GetGradientStopCount             (ID2D1GradientStopCollection* this) { return ((UINT32 (WINAPI*)(ID2D1GradientStopCollection*))this->v->tbl[4])(this); }
static inline void                              ID2D1GradientStopCollection_GetGradientStops                 (ID2D1GradientStopCollection* this, D2D1_GRADIENT_STOP* gradientStops, UINT32 gradientStopsCount) { ((void (WINAPI*)(ID2D1GradientStopCollection*, D2D1_GRADIENT_STOP*, UINT32))this->v->tbl[5])(this, gradientStops, gradientStopsCount); }
static inline D2D1_GAMMA                        ID2D1GradientStopCollection_GetColorInterpolationGamma       (ID2D1GradientStopCollection* this) { return ((D2D1_GAMMA (WINAPI*)(ID2D1GradientStopCollection*))this->v->tbl[6])(this); }
static inline D2D1_EXTEND_MODE                  ID2D1GradientStopCollection_GetExtendMode                    (ID2D1GradientStopCollection* this) { return ((D2D1_EXTEND_MODE (WINAPI*)(ID2D1GradientStopCollection*))this->v->tbl[7])(this); }

static inline HRESULT                           ID2D1GradientStopCollection1_QueryInterface                  (ID2D1GradientStopCollection1* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1GradientStopCollection1*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1GradientStopCollection1_AddRef                          (ID2D1GradientStopCollection1* this) { return ((UINT32 (WINAPI*)(ID2D1GradientStopCollection1*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1GradientStopCollection1_Release                         (ID2D1GradientStopCollection1* this) { return ((UINT32 (WINAPI*)(ID2D1GradientStopCollection1*))this->v->tbl[2])(this); }
static inline void                              ID2D1GradientStopCollection1_GetFactory                      (ID2D1GradientStopCollection1* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1GradientStopCollection1*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline UINT32                            ID2D1GradientStopCollection1_GetGradientStopCount            (ID2D1GradientStopCollection1* this) { return ((UINT32 (WINAPI*)(ID2D1GradientStopCollection1*))this->v->tbl[4])(this); }
static inline void                              ID2D1GradientStopCollection1_GetGradientStops                (ID2D1GradientStopCollection1* this, D2D1_GRADIENT_STOP* gradientStops, UINT32 gradientStopsCount) { ((void (WINAPI*)(ID2D1GradientStopCollection1*, D2D1_GRADIENT_STOP*, UINT32))this->v->tbl[5])(this, gradientStops, gradientStopsCount); }
static inline D2D1_GAMMA                        ID2D1GradientStopCollection1_GetColorInterpolationGamma      (ID2D1GradientStopCollection1* this) { return ((D2D1_GAMMA (WINAPI*)(ID2D1GradientStopCollection1*))this->v->tbl[6])(this); }
static inline D2D1_EXTEND_MODE                  ID2D1GradientStopCollection1_GetExtendMode                   (ID2D1GradientStopCollection1* this) { return ((D2D1_EXTEND_MODE (WINAPI*)(ID2D1GradientStopCollection1*))this->v->tbl[7])(this); }
static inline void                              ID2D1GradientStopCollection1_GetGradientStops1               (ID2D1GradientStopCollection1* this, D2D1_GRADIENT_STOP* gradientStops, UINT32 gradientStopsCount) { ((void (WINAPI*)(ID2D1GradientStopCollection1*, D2D1_GRADIENT_STOP*, UINT32))this->v->tbl[8])(this, gradientStops, gradientStopsCount); }
static inline D2D1_COLOR_SPACE                  ID2D1GradientStopCollection1_GetPreInterpolationSpace        (ID2D1GradientStopCollection1* this) { return ((D2D1_COLOR_SPACE (WINAPI*)(ID2D1GradientStopCollection1*))this->v->tbl[9])(this); }
static inline D2D1_COLOR_SPACE                  ID2D1GradientStopCollection1_GetPostInterpolationSpace       (ID2D1GradientStopCollection1* this) { return ((D2D1_COLOR_SPACE (WINAPI*)(ID2D1GradientStopCollection1*))this->v->tbl[10])(this); }
static inline D2D1_BUFFER_PRECISION             ID2D1GradientStopCollection1_GetBufferPrecision              (ID2D1GradientStopCollection1* this) { return ((D2D1_BUFFER_PRECISION (WINAPI*)(ID2D1GradientStopCollection1*))this->v->tbl[11])(this); }
static inline D2D1_COLOR_INTERPOLATION_MODE     ID2D1GradientStopCollection1_GetColorInterpolationMode       (ID2D1GradientStopCollection1* this) { return ((D2D1_COLOR_INTERPOLATION_MODE (WINAPI*)(ID2D1GradientStopCollection1*))this->v->tbl[12])(this); }

static inline HRESULT                           ID2D1HwndRenderTarget_QueryInterface                         (ID2D1HwndRenderTarget* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1HwndRenderTarget*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1HwndRenderTarget_AddRef                                 (ID2D1HwndRenderTarget* this) { return ((UINT32 (WINAPI*)(ID2D1HwndRenderTarget*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1HwndRenderTarget_Release                                (ID2D1HwndRenderTarget* this) { return ((UINT32 (WINAPI*)(ID2D1HwndRenderTarget*))this->v->tbl[2])(this); }
static inline void                              ID2D1HwndRenderTarget_GetFactory                             (ID2D1HwndRenderTarget* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1HwndRenderTarget*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline HRESULT                           ID2D1HwndRenderTarget_CreateBitmap                           (ID2D1HwndRenderTarget* this, D2D_SIZE_U size, const void* srcData, UINT32 pitch, const D2D1_BITMAP_PROPERTIES* bitmapProperties, ID2D1Bitmap** bitmap) { return ((HRESULT (WINAPI*)(ID2D1HwndRenderTarget*, D2D_SIZE_U, const void*, UINT32, const D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap**))this->v->tbl[4])(this, size, srcData, pitch, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1HwndRenderTarget_CreateBitmapFromWicBitmap              (ID2D1HwndRenderTarget* this, IWICBitmapSource* wicBitmapSource, const D2D1_BITMAP_PROPERTIES* bitmapProperties, ID2D1Bitmap** bitmap) { return ((HRESULT (WINAPI*)(ID2D1HwndRenderTarget*, IWICBitmapSource*, const D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap**))this->v->tbl[5])(this, wicBitmapSource, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1HwndRenderTarget_CreateSharedBitmap                     (ID2D1HwndRenderTarget* this, const GUID* riid, void* data, const D2D1_BITMAP_PROPERTIES* bitmapProperties, ID2D1Bitmap** bitmap) { return ((HRESULT (WINAPI*)(ID2D1HwndRenderTarget*, const GUID*, void*, const D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap**))this->v->tbl[6])(this, riid, data, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1HwndRenderTarget_CreateBitmapBrush                      (ID2D1HwndRenderTarget* this, ID2D1Bitmap* bitmap, const D2D1_BITMAP_BRUSH_PROPERTIES* bitmapBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1BitmapBrush** bitmapBrush) { return ((HRESULT (WINAPI*)(ID2D1HwndRenderTarget*, ID2D1Bitmap*, const D2D1_BITMAP_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1BitmapBrush**))this->v->tbl[7])(this, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush); }
static inline HRESULT                           ID2D1HwndRenderTarget_CreateSolidColorBrush                  (ID2D1HwndRenderTarget* this, const D2D1_COLOR_F* color, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1SolidColorBrush** solidColorBrush) { return ((HRESULT (WINAPI*)(ID2D1HwndRenderTarget*, const D2D1_COLOR_F*, const D2D1_BRUSH_PROPERTIES*, ID2D1SolidColorBrush**))this->v->tbl[8])(this, color, brushProperties, solidColorBrush); }
static inline HRESULT                           ID2D1HwndRenderTarget_CreateGradientStopCollection           (ID2D1HwndRenderTarget* this, const D2D1_GRADIENT_STOP* gradientStops, UINT32 gradientStopsCount, D2D1_GAMMA colorInterpolationGamma, D2D1_EXTEND_MODE extendMode, ID2D1GradientStopCollection** gradientStopCollection) { return ((HRESULT (WINAPI*)(ID2D1HwndRenderTarget*, const D2D1_GRADIENT_STOP*, UINT32, D2D1_GAMMA, D2D1_EXTEND_MODE, ID2D1GradientStopCollection**))this->v->tbl[9])(this, gradientStops, gradientStopsCount, colorInterpolationGamma, extendMode, gradientStopCollection); }
static inline HRESULT                           ID2D1HwndRenderTarget_CreateLinearGradientBrush              (ID2D1HwndRenderTarget* this, const D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES* linearGradientBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1GradientStopCollection* gradientStopCollection, ID2D1LinearGradientBrush** linearGradientBrush) { return ((HRESULT (WINAPI*)(ID2D1HwndRenderTarget*, const D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection*, ID2D1LinearGradientBrush**))this->v->tbl[10])(this, linearGradientBrushProperties, brushProperties, gradientStopCollection, linearGradientBrush); }
static inline HRESULT                           ID2D1HwndRenderTarget_CreateRadialGradientBrush              (ID2D1HwndRenderTarget* this, const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES* radialGradientBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1GradientStopCollection* gradientStopCollection, ID2D1RadialGradientBrush** radialGradientBrush) { return ((HRESULT (WINAPI*)(ID2D1HwndRenderTarget*, const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection*, ID2D1RadialGradientBrush**))this->v->tbl[11])(this, radialGradientBrushProperties, brushProperties, gradientStopCollection, radialGradientBrush); }
static inline HRESULT                           ID2D1HwndRenderTarget_CreateCompatibleRenderTarget           (ID2D1HwndRenderTarget* this, const D2D_SIZE_F* desiredSize, const D2D_SIZE_U* desiredPixelSize, const D2D1_PIXEL_FORMAT* desiredFormat, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS options, ID2D1BitmapRenderTarget** bitmapRenderTarget) { return ((HRESULT (WINAPI*)(ID2D1HwndRenderTarget*, const D2D_SIZE_F*, const D2D_SIZE_U*, const D2D1_PIXEL_FORMAT*, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, ID2D1BitmapRenderTarget**))this->v->tbl[12])(this, desiredSize, desiredPixelSize, desiredFormat, options, bitmapRenderTarget); }
static inline HRESULT                           ID2D1HwndRenderTarget_CreateLayer                            (ID2D1HwndRenderTarget* this, const D2D_SIZE_F* size, ID2D1Layer** layer) { return ((HRESULT (WINAPI*)(ID2D1HwndRenderTarget*, const D2D_SIZE_F*, ID2D1Layer**))this->v->tbl[13])(this, size, layer); }
static inline HRESULT                           ID2D1HwndRenderTarget_CreateMesh                             (ID2D1HwndRenderTarget* this, ID2D1Mesh** mesh) { return ((HRESULT (WINAPI*)(ID2D1HwndRenderTarget*, ID2D1Mesh**))this->v->tbl[14])(this, mesh); }
static inline void                              ID2D1HwndRenderTarget_DrawLine                               (ID2D1HwndRenderTarget* this, D2D_POINT_2F point0, D2D_POINT_2F point1, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1HwndRenderTarget*, D2D_POINT_2F, D2D_POINT_2F, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[15])(this, point0, point1, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1HwndRenderTarget_DrawRectangle                          (ID2D1HwndRenderTarget* this, const D2D_RECT_F* rect, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1HwndRenderTarget*, const D2D_RECT_F*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[16])(this, rect, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1HwndRenderTarget_FillRectangle                          (ID2D1HwndRenderTarget* this, const D2D_RECT_F* rect, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1HwndRenderTarget*, const D2D_RECT_F*, ID2D1Brush*))this->v->tbl[17])(this, rect, brush); }
static inline void                              ID2D1HwndRenderTarget_DrawRoundedRectangle                   (ID2D1HwndRenderTarget* this, const D2D1_ROUNDED_RECT* roundedRect, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1HwndRenderTarget*, const D2D1_ROUNDED_RECT*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[18])(this, roundedRect, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1HwndRenderTarget_FillRoundedRectangle                   (ID2D1HwndRenderTarget* this, const D2D1_ROUNDED_RECT* roundedRect, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1HwndRenderTarget*, const D2D1_ROUNDED_RECT*, ID2D1Brush*))this->v->tbl[19])(this, roundedRect, brush); }
static inline void                              ID2D1HwndRenderTarget_DrawEllipse                            (ID2D1HwndRenderTarget* this, const D2D1_ELLIPSE* ellipse, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1HwndRenderTarget*, const D2D1_ELLIPSE*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[20])(this, ellipse, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1HwndRenderTarget_FillEllipse                            (ID2D1HwndRenderTarget* this, const D2D1_ELLIPSE* ellipse, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1HwndRenderTarget*, const D2D1_ELLIPSE*, ID2D1Brush*))this->v->tbl[21])(this, ellipse, brush); }
static inline void                              ID2D1HwndRenderTarget_DrawGeometry                           (ID2D1HwndRenderTarget* this, ID2D1Geometry* geometry, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1HwndRenderTarget*, ID2D1Geometry*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[22])(this, geometry, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1HwndRenderTarget_FillGeometry                           (ID2D1HwndRenderTarget* this, ID2D1Geometry* geometry, ID2D1Brush* brush, ID2D1Brush* opacityBrush) { ((void (WINAPI*)(ID2D1HwndRenderTarget*, ID2D1Geometry*, ID2D1Brush*, ID2D1Brush*))this->v->tbl[23])(this, geometry, brush, opacityBrush); }
static inline void                              ID2D1HwndRenderTarget_FillMesh                               (ID2D1HwndRenderTarget* this, ID2D1Mesh* mesh, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1HwndRenderTarget*, ID2D1Mesh*, ID2D1Brush*))this->v->tbl[24])(this, mesh, brush); }
static inline void                              ID2D1HwndRenderTarget_FillOpacityMask                        (ID2D1HwndRenderTarget* this, ID2D1Bitmap* opacityMask, ID2D1Brush* brush, D2D1_OPACITY_MASK_CONTENT content, const D2D_RECT_F* destinationRectangle, const D2D_RECT_F* sourceRectangle) { ((void (WINAPI*)(ID2D1HwndRenderTarget*, ID2D1Bitmap*, ID2D1Brush*, D2D1_OPACITY_MASK_CONTENT, const D2D_RECT_F*, const D2D_RECT_F*))this->v->tbl[25])(this, opacityMask, brush, content, destinationRectangle, sourceRectangle); }
static inline void                              ID2D1HwndRenderTarget_DrawBitmap                             (ID2D1HwndRenderTarget* this, ID2D1Bitmap* bitmap, const D2D_RECT_F* destinationRectangle, FLOAT opacity, D2D1_BITMAP_INTERPOLATION_MODE interpolationMode, const D2D_RECT_F* sourceRectangle) { ((void (WINAPI*)(ID2D1HwndRenderTarget*, ID2D1Bitmap*, const D2D_RECT_F*, FLOAT, D2D1_BITMAP_INTERPOLATION_MODE, const D2D_RECT_F*))this->v->tbl[26])(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle); }
static inline void                              ID2D1HwndRenderTarget_DrawText                               (ID2D1HwndRenderTarget* this, const WCHAR* string, UINT32 stringLength, IDWriteTextFormat* textFormat, const D2D_RECT_F* layoutRect, ID2D1Brush* defaultFillBrush, D2D1_DRAW_TEXT_OPTIONS options, DWRITE_MEASURING_MODE measuringMode) { ((void (WINAPI*)(ID2D1HwndRenderTarget*, const WCHAR*, UINT32, IDWriteTextFormat*, const D2D_RECT_F*, ID2D1Brush*, D2D1_DRAW_TEXT_OPTIONS, DWRITE_MEASURING_MODE))this->v->tbl[27])(this, string, stringLength, textFormat, layoutRect, defaultFillBrush, options, measuringMode); }
static inline void                              ID2D1HwndRenderTarget_DrawTextLayout                         (ID2D1HwndRenderTarget* this, D2D_POINT_2F origin, IDWriteTextLayout* textLayout, ID2D1Brush* defaultFillBrush, D2D1_DRAW_TEXT_OPTIONS options) { ((void (WINAPI*)(ID2D1HwndRenderTarget*, D2D_POINT_2F, IDWriteTextLayout*, ID2D1Brush*, D2D1_DRAW_TEXT_OPTIONS))this->v->tbl[28])(this, origin, textLayout, defaultFillBrush, options); }
static inline void                              ID2D1HwndRenderTarget_DrawGlyphRun                           (ID2D1HwndRenderTarget* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, ID2D1Brush* foregroundBrush, DWRITE_MEASURING_MODE measuringMode) { ((void (WINAPI*)(ID2D1HwndRenderTarget*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, ID2D1Brush*, DWRITE_MEASURING_MODE))this->v->tbl[29])(this, baselineOrigin, glyphRun, foregroundBrush, measuringMode); }
static inline void                              ID2D1HwndRenderTarget_SetTransform                           (ID2D1HwndRenderTarget* this, const D2D_MATRIX_3X2_F* transform) { ((void (WINAPI*)(ID2D1HwndRenderTarget*, const D2D_MATRIX_3X2_F*))this->v->tbl[30])(this, transform); }
static inline void                              ID2D1HwndRenderTarget_GetTransform                           (ID2D1HwndRenderTarget* this, D2D_MATRIX_3X2_F* transform) { ((void (WINAPI*)(ID2D1HwndRenderTarget*, D2D_MATRIX_3X2_F*))this->v->tbl[31])(this, transform); }
static inline void                              ID2D1HwndRenderTarget_SetAntialiasMode                       (ID2D1HwndRenderTarget* this, D2D1_ANTIALIAS_MODE antialiasMode) { ((void (WINAPI*)(ID2D1HwndRenderTarget*, D2D1_ANTIALIAS_MODE))this->v->tbl[32])(this, antialiasMode); }
static inline D2D1_ANTIALIAS_MODE               ID2D1HwndRenderTarget_GetAntialiasMode                       (ID2D1HwndRenderTarget* this) { return ((D2D1_ANTIALIAS_MODE (WINAPI*)(ID2D1HwndRenderTarget*))this->v->tbl[33])(this); }
static inline void                              ID2D1HwndRenderTarget_SetTextAntialiasMode                   (ID2D1HwndRenderTarget* this, D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode) { ((void (WINAPI*)(ID2D1HwndRenderTarget*, D2D1_TEXT_ANTIALIAS_MODE))this->v->tbl[34])(this, textAntialiasMode); }
static inline D2D1_TEXT_ANTIALIAS_MODE          ID2D1HwndRenderTarget_GetTextAntialiasMode                   (ID2D1HwndRenderTarget* this) { return ((D2D1_TEXT_ANTIALIAS_MODE (WINAPI*)(ID2D1HwndRenderTarget*))this->v->tbl[35])(this); }
static inline void                              ID2D1HwndRenderTarget_SetTextRenderingParams                 (ID2D1HwndRenderTarget* this, IDWriteRenderingParams* textRenderingParams) { ((void (WINAPI*)(ID2D1HwndRenderTarget*, IDWriteRenderingParams*))this->v->tbl[36])(this, textRenderingParams); }
static inline void                              ID2D1HwndRenderTarget_GetTextRenderingParams                 (ID2D1HwndRenderTarget* this, IDWriteRenderingParams** textRenderingParams) { ((void (WINAPI*)(ID2D1HwndRenderTarget*, IDWriteRenderingParams**))this->v->tbl[37])(this, textRenderingParams); }
static inline void                              ID2D1HwndRenderTarget_SetTags                                (ID2D1HwndRenderTarget* this, UINT64 tag1, UINT64 tag2) { ((void (WINAPI*)(ID2D1HwndRenderTarget*, UINT64, UINT64))this->v->tbl[38])(this, tag1, tag2); }
static inline void                              ID2D1HwndRenderTarget_GetTags                                (ID2D1HwndRenderTarget* this, UINT64* tag1, UINT64* tag2) { ((void (WINAPI*)(ID2D1HwndRenderTarget*, UINT64*, UINT64*))this->v->tbl[39])(this, tag1, tag2); }
static inline void                              ID2D1HwndRenderTarget_PushLayer                              (ID2D1HwndRenderTarget* this, const D2D1_LAYER_PARAMETERS* layerParameters, ID2D1Layer* layer) { ((void (WINAPI*)(ID2D1HwndRenderTarget*, const D2D1_LAYER_PARAMETERS*, ID2D1Layer*))this->v->tbl[40])(this, layerParameters, layer); }
static inline void                              ID2D1HwndRenderTarget_PopLayer                               (ID2D1HwndRenderTarget* this) { ((void (WINAPI*)(ID2D1HwndRenderTarget*))this->v->tbl[41])(this); }
static inline HRESULT                           ID2D1HwndRenderTarget_Flush                                  (ID2D1HwndRenderTarget* this, UINT64* tag1, UINT64* tag2) { return ((HRESULT (WINAPI*)(ID2D1HwndRenderTarget*, UINT64*, UINT64*))this->v->tbl[42])(this, tag1, tag2); }
static inline void                              ID2D1HwndRenderTarget_SaveDrawingState                       (ID2D1HwndRenderTarget* this, ID2D1DrawingStateBlock* drawingStateBlock) { ((void (WINAPI*)(ID2D1HwndRenderTarget*, ID2D1DrawingStateBlock*))this->v->tbl[43])(this, drawingStateBlock); }
static inline void                              ID2D1HwndRenderTarget_RestoreDrawingState                    (ID2D1HwndRenderTarget* this, ID2D1DrawingStateBlock* drawingStateBlock) { ((void (WINAPI*)(ID2D1HwndRenderTarget*, ID2D1DrawingStateBlock*))this->v->tbl[44])(this, drawingStateBlock); }
static inline void                              ID2D1HwndRenderTarget_PushAxisAlignedClip                    (ID2D1HwndRenderTarget* this, const D2D_RECT_F* clipRect, D2D1_ANTIALIAS_MODE antialiasMode) { ((void (WINAPI*)(ID2D1HwndRenderTarget*, const D2D_RECT_F*, D2D1_ANTIALIAS_MODE))this->v->tbl[45])(this, clipRect, antialiasMode); }
static inline void                              ID2D1HwndRenderTarget_PopAxisAlignedClip                     (ID2D1HwndRenderTarget* this) { ((void (WINAPI*)(ID2D1HwndRenderTarget*))this->v->tbl[46])(this); }
static inline void                              ID2D1HwndRenderTarget_Clear                                  (ID2D1HwndRenderTarget* this, const D2D1_COLOR_F* clearColor) { ((void (WINAPI*)(ID2D1HwndRenderTarget*, const D2D1_COLOR_F*))this->v->tbl[47])(this, clearColor); }
static inline void                              ID2D1HwndRenderTarget_BeginDraw                              (ID2D1HwndRenderTarget* this) { ((void (WINAPI*)(ID2D1HwndRenderTarget*))this->v->tbl[48])(this); }
static inline HRESULT                           ID2D1HwndRenderTarget_EndDraw                                (ID2D1HwndRenderTarget* this, UINT64* tag1, UINT64* tag2) { return ((HRESULT (WINAPI*)(ID2D1HwndRenderTarget*, UINT64*, UINT64*))this->v->tbl[49])(this, tag1, tag2); }
static inline D2D1_PIXEL_FORMAT                 ID2D1HwndRenderTarget_GetPixelFormat                         (ID2D1HwndRenderTarget* this) { D2D1_PIXEL_FORMAT _return; ((void (WINAPI*)(ID2D1HwndRenderTarget*, D2D1_PIXEL_FORMAT*))this->v->tbl[50])(this, &_return); return _return; }
static inline void                              ID2D1HwndRenderTarget_SetDpi                                 (ID2D1HwndRenderTarget* this, FLOAT dpiX, FLOAT dpiY) { ((void (WINAPI*)(ID2D1HwndRenderTarget*, FLOAT, FLOAT))this->v->tbl[51])(this, dpiX, dpiY); }
static inline void                              ID2D1HwndRenderTarget_GetDpi                                 (ID2D1HwndRenderTarget* this, FLOAT* dpiX, FLOAT* dpiY) { ((void (WINAPI*)(ID2D1HwndRenderTarget*, FLOAT*, FLOAT*))this->v->tbl[52])(this, dpiX, dpiY); }
static inline D2D_SIZE_F                        ID2D1HwndRenderTarget_GetSize                                (ID2D1HwndRenderTarget* this) { D2D_SIZE_F _return; ((void (WINAPI*)(ID2D1HwndRenderTarget*, D2D_SIZE_F*))this->v->tbl[53])(this, &_return); return _return; }
static inline D2D_SIZE_U                        ID2D1HwndRenderTarget_GetPixelSize                           (ID2D1HwndRenderTarget* this) { D2D_SIZE_U _return; ((void (WINAPI*)(ID2D1HwndRenderTarget*, D2D_SIZE_U*))this->v->tbl[54])(this, &_return); return _return; }
static inline UINT32                            ID2D1HwndRenderTarget_GetMaximumBitmapSize                   (ID2D1HwndRenderTarget* this) { return ((UINT32 (WINAPI*)(ID2D1HwndRenderTarget*))this->v->tbl[55])(this); }
static inline BOOL                              ID2D1HwndRenderTarget_IsSupported                            (ID2D1HwndRenderTarget* this, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties) { return ((BOOL (WINAPI*)(ID2D1HwndRenderTarget*, const D2D1_RENDER_TARGET_PROPERTIES*))this->v->tbl[56])(this, renderTargetProperties); }
static inline D2D1_WINDOW_STATE                 ID2D1HwndRenderTarget_CheckWindowState                       (ID2D1HwndRenderTarget* this) { return ((D2D1_WINDOW_STATE (WINAPI*)(ID2D1HwndRenderTarget*))this->v->tbl[57])(this); }
static inline HRESULT                           ID2D1HwndRenderTarget_Resize                                 (ID2D1HwndRenderTarget* this, const D2D_SIZE_U* pixelSize) { return ((HRESULT (WINAPI*)(ID2D1HwndRenderTarget*, const D2D_SIZE_U*))this->v->tbl[58])(this, pixelSize); }
static inline HWND                              ID2D1HwndRenderTarget_GetHwnd                                (ID2D1HwndRenderTarget* this) { return ((HWND (WINAPI*)(ID2D1HwndRenderTarget*))this->v->tbl[59])(this); }

static inline HRESULT                           ID2D1Image_QueryInterface                                    (ID2D1Image* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1Image*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1Image_AddRef                                            (ID2D1Image* this) { return ((UINT32 (WINAPI*)(ID2D1Image*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1Image_Release                                           (ID2D1Image* this) { return ((UINT32 (WINAPI*)(ID2D1Image*))this->v->tbl[2])(this); }
static inline void                              ID2D1Image_GetFactory                                        (ID2D1Image* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1Image*, ID2D1Factory**))this->v->tbl[3])(this, factory); }

static inline HRESULT                           ID2D1ImageBrush_QueryInterface                               (ID2D1ImageBrush* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1ImageBrush*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1ImageBrush_AddRef                                       (ID2D1ImageBrush* this) { return ((UINT32 (WINAPI*)(ID2D1ImageBrush*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1ImageBrush_Release                                      (ID2D1ImageBrush* this) { return ((UINT32 (WINAPI*)(ID2D1ImageBrush*))this->v->tbl[2])(this); }
static inline void                              ID2D1ImageBrush_GetFactory                                   (ID2D1ImageBrush* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1ImageBrush*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline void                              ID2D1ImageBrush_SetOpacity                                   (ID2D1ImageBrush* this, FLOAT opacity) { ((void (WINAPI*)(ID2D1ImageBrush*, FLOAT))this->v->tbl[4])(this, opacity); }
static inline void                              ID2D1ImageBrush_SetTransform                                 (ID2D1ImageBrush* this, const D2D_MATRIX_3X2_F* transform) { ((void (WINAPI*)(ID2D1ImageBrush*, const D2D_MATRIX_3X2_F*))this->v->tbl[5])(this, transform); }
static inline FLOAT                             ID2D1ImageBrush_GetOpacity                                   (ID2D1ImageBrush* this) { return ((FLOAT (WINAPI*)(ID2D1ImageBrush*))this->v->tbl[6])(this); }
static inline void                              ID2D1ImageBrush_GetTransform                                 (ID2D1ImageBrush* this, D2D_MATRIX_3X2_F* transform) { ((void (WINAPI*)(ID2D1ImageBrush*, D2D_MATRIX_3X2_F*))this->v->tbl[7])(this, transform); }
static inline void                              ID2D1ImageBrush_SetImage                                     (ID2D1ImageBrush* this, ID2D1Image* image) { ((void (WINAPI*)(ID2D1ImageBrush*, ID2D1Image*))this->v->tbl[8])(this, image); }
static inline void                              ID2D1ImageBrush_SetExtendModeX                               (ID2D1ImageBrush* this, D2D1_EXTEND_MODE extendModeX) { ((void (WINAPI*)(ID2D1ImageBrush*, D2D1_EXTEND_MODE))this->v->tbl[9])(this, extendModeX); }
static inline void                              ID2D1ImageBrush_SetExtendModeY                               (ID2D1ImageBrush* this, D2D1_EXTEND_MODE extendModeY) { ((void (WINAPI*)(ID2D1ImageBrush*, D2D1_EXTEND_MODE))this->v->tbl[10])(this, extendModeY); }
static inline void                              ID2D1ImageBrush_SetInterpolationMode                         (ID2D1ImageBrush* this, D2D1_INTERPOLATION_MODE interpolationMode) { ((void (WINAPI*)(ID2D1ImageBrush*, D2D1_INTERPOLATION_MODE))this->v->tbl[11])(this, interpolationMode); }
static inline void                              ID2D1ImageBrush_SetSourceRectangle                           (ID2D1ImageBrush* this, const D2D_RECT_F* sourceRectangle) { ((void (WINAPI*)(ID2D1ImageBrush*, const D2D_RECT_F*))this->v->tbl[12])(this, sourceRectangle); }
static inline void                              ID2D1ImageBrush_GetImage                                     (ID2D1ImageBrush* this, ID2D1Image** image) { ((void (WINAPI*)(ID2D1ImageBrush*, ID2D1Image**))this->v->tbl[13])(this, image); }
static inline D2D1_EXTEND_MODE                  ID2D1ImageBrush_GetExtendModeX                               (ID2D1ImageBrush* this) { return ((D2D1_EXTEND_MODE (WINAPI*)(ID2D1ImageBrush*))this->v->tbl[14])(this); }
static inline D2D1_EXTEND_MODE                  ID2D1ImageBrush_GetExtendModeY                               (ID2D1ImageBrush* this) { return ((D2D1_EXTEND_MODE (WINAPI*)(ID2D1ImageBrush*))this->v->tbl[15])(this); }
static inline D2D1_INTERPOLATION_MODE           ID2D1ImageBrush_GetInterpolationMode                         (ID2D1ImageBrush* this) { return ((D2D1_INTERPOLATION_MODE (WINAPI*)(ID2D1ImageBrush*))this->v->tbl[16])(this); }
static inline void                              ID2D1ImageBrush_GetSourceRectangle                           (ID2D1ImageBrush* this, D2D_RECT_F* sourceRectangle) { ((void (WINAPI*)(ID2D1ImageBrush*, D2D_RECT_F*))this->v->tbl[17])(this, sourceRectangle); }

static inline HRESULT                           ID2D1ImageSource_QueryInterface                              (ID2D1ImageSource* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1ImageSource*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1ImageSource_AddRef                                      (ID2D1ImageSource* this) { return ((UINT32 (WINAPI*)(ID2D1ImageSource*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1ImageSource_Release                                     (ID2D1ImageSource* this) { return ((UINT32 (WINAPI*)(ID2D1ImageSource*))this->v->tbl[2])(this); }
static inline void                              ID2D1ImageSource_GetFactory                                  (ID2D1ImageSource* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1ImageSource*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline HRESULT                           ID2D1ImageSource_OfferResources                              (ID2D1ImageSource* this) { return ((HRESULT (WINAPI*)(ID2D1ImageSource*))this->v->tbl[4])(this); }
static inline HRESULT                           ID2D1ImageSource_TryReclaimResources                         (ID2D1ImageSource* this, BOOL* resourcesDiscarded) { return ((HRESULT (WINAPI*)(ID2D1ImageSource*, BOOL*))this->v->tbl[5])(this, resourcesDiscarded); }

static inline HRESULT                           ID2D1ImageSourceFromWic_QueryInterface                       (ID2D1ImageSourceFromWic* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1ImageSourceFromWic*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1ImageSourceFromWic_AddRef                               (ID2D1ImageSourceFromWic* this) { return ((UINT32 (WINAPI*)(ID2D1ImageSourceFromWic*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1ImageSourceFromWic_Release                              (ID2D1ImageSourceFromWic* this) { return ((UINT32 (WINAPI*)(ID2D1ImageSourceFromWic*))this->v->tbl[2])(this); }
static inline void                              ID2D1ImageSourceFromWic_GetFactory                           (ID2D1ImageSourceFromWic* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1ImageSourceFromWic*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline HRESULT                           ID2D1ImageSourceFromWic_OfferResources                       (ID2D1ImageSourceFromWic* this) { return ((HRESULT (WINAPI*)(ID2D1ImageSourceFromWic*))this->v->tbl[4])(this); }
static inline HRESULT                           ID2D1ImageSourceFromWic_TryReclaimResources                  (ID2D1ImageSourceFromWic* this, BOOL* resourcesDiscarded) { return ((HRESULT (WINAPI*)(ID2D1ImageSourceFromWic*, BOOL*))this->v->tbl[5])(this, resourcesDiscarded); }
static inline HRESULT                           ID2D1ImageSourceFromWic_EnsureCached                         (ID2D1ImageSourceFromWic* this, const D2D_RECT_U* rectangleToFill) { return ((HRESULT (WINAPI*)(ID2D1ImageSourceFromWic*, const D2D_RECT_U*))this->v->tbl[6])(this, rectangleToFill); }
static inline HRESULT                           ID2D1ImageSourceFromWic_TrimCache                            (ID2D1ImageSourceFromWic* this, const D2D_RECT_U* rectangleToPreserve) { return ((HRESULT (WINAPI*)(ID2D1ImageSourceFromWic*, const D2D_RECT_U*))this->v->tbl[7])(this, rectangleToPreserve); }
static inline void                              ID2D1ImageSourceFromWic_GetSource                            (ID2D1ImageSourceFromWic* this, IWICBitmapSource** wicBitmapSource) { ((void (WINAPI*)(ID2D1ImageSourceFromWic*, IWICBitmapSource**))this->v->tbl[8])(this, wicBitmapSource); }

static inline HRESULT                           ID2D1Ink_QueryInterface                                      (ID2D1Ink* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1Ink*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1Ink_AddRef                                              (ID2D1Ink* this) { return ((UINT32 (WINAPI*)(ID2D1Ink*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1Ink_Release                                             (ID2D1Ink* this) { return ((UINT32 (WINAPI*)(ID2D1Ink*))this->v->tbl[2])(this); }
static inline void                              ID2D1Ink_GetFactory                                          (ID2D1Ink* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1Ink*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline void                              ID2D1Ink_SetStartPoint                                       (ID2D1Ink* this, const D2D1_INK_POINT* startPoint) { ((void (WINAPI*)(ID2D1Ink*, const D2D1_INK_POINT*))this->v->tbl[4])(this, startPoint); }
static inline D2D1_INK_POINT                    ID2D1Ink_GetStartPoint                                       (ID2D1Ink* this) { D2D1_INK_POINT _return; ((void (WINAPI*)(ID2D1Ink*, D2D1_INK_POINT*))this->v->tbl[5])(this, &_return); return _return; }
static inline HRESULT                           ID2D1Ink_AddSegments                                         (ID2D1Ink* this, const D2D1_INK_BEZIER_SEGMENT* segments, UINT32 segmentsCount) { return ((HRESULT (WINAPI*)(ID2D1Ink*, const D2D1_INK_BEZIER_SEGMENT*, UINT32))this->v->tbl[6])(this, segments, segmentsCount); }
static inline HRESULT                           ID2D1Ink_RemoveSegmentsAtEnd                                 (ID2D1Ink* this, UINT32 segmentsCount) { return ((HRESULT (WINAPI*)(ID2D1Ink*, UINT32))this->v->tbl[7])(this, segmentsCount); }
static inline HRESULT                           ID2D1Ink_SetSegments                                         (ID2D1Ink* this, UINT32 startSegment, const D2D1_INK_BEZIER_SEGMENT* segments, UINT32 segmentsCount) { return ((HRESULT (WINAPI*)(ID2D1Ink*, UINT32, const D2D1_INK_BEZIER_SEGMENT*, UINT32))this->v->tbl[8])(this, startSegment, segments, segmentsCount); }
static inline HRESULT                           ID2D1Ink_SetSegmentAtEnd                                     (ID2D1Ink* this, const D2D1_INK_BEZIER_SEGMENT* segment) { return ((HRESULT (WINAPI*)(ID2D1Ink*, const D2D1_INK_BEZIER_SEGMENT*))this->v->tbl[9])(this, segment); }
static inline UINT32                            ID2D1Ink_GetSegmentCount                                     (ID2D1Ink* this) { return ((UINT32 (WINAPI*)(ID2D1Ink*))this->v->tbl[10])(this); }
static inline HRESULT                           ID2D1Ink_GetSegments                                         (ID2D1Ink* this, UINT32 startSegment, D2D1_INK_BEZIER_SEGMENT* segments, UINT32 segmentsCount) { return ((HRESULT (WINAPI*)(ID2D1Ink*, UINT32, D2D1_INK_BEZIER_SEGMENT*, UINT32))this->v->tbl[11])(this, startSegment, segments, segmentsCount); }
static inline HRESULT                           ID2D1Ink_StreamAsGeometry                                    (ID2D1Ink* this, ID2D1InkStyle* inkStyle, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, ID2D1SimplifiedGeometrySink* geometrySink) { return ((HRESULT (WINAPI*)(ID2D1Ink*, ID2D1InkStyle*, const D2D_MATRIX_3X2_F*, FLOAT, ID2D1SimplifiedGeometrySink*))this->v->tbl[12])(this, inkStyle, worldTransform, flatteningTolerance, geometrySink); }
static inline HRESULT                           ID2D1Ink_GetBounds                                           (ID2D1Ink* this, ID2D1InkStyle* inkStyle, const D2D_MATRIX_3X2_F* worldTransform, D2D_RECT_F* bounds) { return ((HRESULT (WINAPI*)(ID2D1Ink*, ID2D1InkStyle*, const D2D_MATRIX_3X2_F*, D2D_RECT_F*))this->v->tbl[13])(this, inkStyle, worldTransform, bounds); }

static inline HRESULT                           ID2D1InkStyle_QueryInterface                                 (ID2D1InkStyle* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1InkStyle*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1InkStyle_AddRef                                         (ID2D1InkStyle* this) { return ((UINT32 (WINAPI*)(ID2D1InkStyle*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1InkStyle_Release                                        (ID2D1InkStyle* this) { return ((UINT32 (WINAPI*)(ID2D1InkStyle*))this->v->tbl[2])(this); }
static inline void                              ID2D1InkStyle_GetFactory                                     (ID2D1InkStyle* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1InkStyle*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline void                              ID2D1InkStyle_SetNibTransform                                (ID2D1InkStyle* this, const D2D_MATRIX_3X2_F* transform) { ((void (WINAPI*)(ID2D1InkStyle*, const D2D_MATRIX_3X2_F*))this->v->tbl[4])(this, transform); }
static inline void                              ID2D1InkStyle_GetNibTransform                                (ID2D1InkStyle* this, D2D_MATRIX_3X2_F* transform) { ((void (WINAPI*)(ID2D1InkStyle*, D2D_MATRIX_3X2_F*))this->v->tbl[5])(this, transform); }
static inline void                              ID2D1InkStyle_SetNibShape                                    (ID2D1InkStyle* this, D2D1_INK_NIB_SHAPE nibShape) { ((void (WINAPI*)(ID2D1InkStyle*, D2D1_INK_NIB_SHAPE))this->v->tbl[6])(this, nibShape); }
static inline D2D1_INK_NIB_SHAPE                ID2D1InkStyle_GetNibShape                                    (ID2D1InkStyle* this) { return ((D2D1_INK_NIB_SHAPE (WINAPI*)(ID2D1InkStyle*))this->v->tbl[7])(this); }

static inline HRESULT                           ID2D1Layer_QueryInterface                                    (ID2D1Layer* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1Layer*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1Layer_AddRef                                            (ID2D1Layer* this) { return ((UINT32 (WINAPI*)(ID2D1Layer*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1Layer_Release                                           (ID2D1Layer* this) { return ((UINT32 (WINAPI*)(ID2D1Layer*))this->v->tbl[2])(this); }
static inline void                              ID2D1Layer_GetFactory                                        (ID2D1Layer* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1Layer*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline D2D_SIZE_F                        ID2D1Layer_GetSize                                           (ID2D1Layer* this) { D2D_SIZE_F _return; ((void (WINAPI*)(ID2D1Layer*, D2D_SIZE_F*))this->v->tbl[4])(this, &_return); return _return; }

static inline HRESULT                           ID2D1LinearGradientBrush_QueryInterface                      (ID2D1LinearGradientBrush* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1LinearGradientBrush*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1LinearGradientBrush_AddRef                              (ID2D1LinearGradientBrush* this) { return ((UINT32 (WINAPI*)(ID2D1LinearGradientBrush*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1LinearGradientBrush_Release                             (ID2D1LinearGradientBrush* this) { return ((UINT32 (WINAPI*)(ID2D1LinearGradientBrush*))this->v->tbl[2])(this); }
static inline void                              ID2D1LinearGradientBrush_GetFactory                          (ID2D1LinearGradientBrush* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1LinearGradientBrush*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline void                              ID2D1LinearGradientBrush_SetOpacity                          (ID2D1LinearGradientBrush* this, FLOAT opacity) { ((void (WINAPI*)(ID2D1LinearGradientBrush*, FLOAT))this->v->tbl[4])(this, opacity); }
static inline void                              ID2D1LinearGradientBrush_SetTransform                        (ID2D1LinearGradientBrush* this, const D2D_MATRIX_3X2_F* transform) { ((void (WINAPI*)(ID2D1LinearGradientBrush*, const D2D_MATRIX_3X2_F*))this->v->tbl[5])(this, transform); }
static inline FLOAT                             ID2D1LinearGradientBrush_GetOpacity                          (ID2D1LinearGradientBrush* this) { return ((FLOAT (WINAPI*)(ID2D1LinearGradientBrush*))this->v->tbl[6])(this); }
static inline void                              ID2D1LinearGradientBrush_GetTransform                        (ID2D1LinearGradientBrush* this, D2D_MATRIX_3X2_F* transform) { ((void (WINAPI*)(ID2D1LinearGradientBrush*, D2D_MATRIX_3X2_F*))this->v->tbl[7])(this, transform); }
static inline void                              ID2D1LinearGradientBrush_SetStartPoint                       (ID2D1LinearGradientBrush* this, D2D_POINT_2F startPoint) { ((void (WINAPI*)(ID2D1LinearGradientBrush*, D2D_POINT_2F))this->v->tbl[8])(this, startPoint); }
static inline void                              ID2D1LinearGradientBrush_SetEndPoint                         (ID2D1LinearGradientBrush* this, D2D_POINT_2F endPoint) { ((void (WINAPI*)(ID2D1LinearGradientBrush*, D2D_POINT_2F))this->v->tbl[9])(this, endPoint); }
static inline D2D_POINT_2F                      ID2D1LinearGradientBrush_GetStartPoint                       (ID2D1LinearGradientBrush* this) { D2D_POINT_2F _return; ((void (WINAPI*)(ID2D1LinearGradientBrush*, D2D_POINT_2F*))this->v->tbl[10])(this, &_return); return _return; }
static inline D2D_POINT_2F                      ID2D1LinearGradientBrush_GetEndPoint                         (ID2D1LinearGradientBrush* this) { D2D_POINT_2F _return; ((void (WINAPI*)(ID2D1LinearGradientBrush*, D2D_POINT_2F*))this->v->tbl[11])(this, &_return); return _return; }
static inline void                              ID2D1LinearGradientBrush_GetGradientStopCollection           (ID2D1LinearGradientBrush* this, ID2D1GradientStopCollection** gradientStopCollection) { ((void (WINAPI*)(ID2D1LinearGradientBrush*, ID2D1GradientStopCollection**))this->v->tbl[12])(this, gradientStopCollection); }

static inline HRESULT                           ID2D1LookupTable3D_QueryInterface                            (ID2D1LookupTable3D* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1LookupTable3D*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1LookupTable3D_AddRef                                    (ID2D1LookupTable3D* this) { return ((UINT32 (WINAPI*)(ID2D1LookupTable3D*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1LookupTable3D_Release                                   (ID2D1LookupTable3D* this) { return ((UINT32 (WINAPI*)(ID2D1LookupTable3D*))this->v->tbl[2])(this); }
static inline void                              ID2D1LookupTable3D_GetFactory                                (ID2D1LookupTable3D* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1LookupTable3D*, ID2D1Factory**))this->v->tbl[3])(this, factory); }

static inline HRESULT                           ID2D1Mesh_QueryInterface                                     (ID2D1Mesh* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1Mesh*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1Mesh_AddRef                                             (ID2D1Mesh* this) { return ((UINT32 (WINAPI*)(ID2D1Mesh*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1Mesh_Release                                            (ID2D1Mesh* this) { return ((UINT32 (WINAPI*)(ID2D1Mesh*))this->v->tbl[2])(this); }
static inline void                              ID2D1Mesh_GetFactory                                         (ID2D1Mesh* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1Mesh*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline HRESULT                           ID2D1Mesh_Open                                               (ID2D1Mesh* this, ID2D1TessellationSink** tessellationSink) { return ((HRESULT (WINAPI*)(ID2D1Mesh*, ID2D1TessellationSink**))this->v->tbl[4])(this, tessellationSink); }

static inline HRESULT                           ID2D1Multithread_QueryInterface                              (ID2D1Multithread* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1Multithread*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1Multithread_AddRef                                      (ID2D1Multithread* this) { return ((UINT32 (WINAPI*)(ID2D1Multithread*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1Multithread_Release                                     (ID2D1Multithread* this) { return ((UINT32 (WINAPI*)(ID2D1Multithread*))this->v->tbl[2])(this); }
static inline BOOL                              ID2D1Multithread_GetMultithreadProtected                     (ID2D1Multithread* this) { return ((BOOL (WINAPI*)(ID2D1Multithread*))this->v->tbl[3])(this); }
static inline void                              ID2D1Multithread_Enter                                       (ID2D1Multithread* this) { ((void (WINAPI*)(ID2D1Multithread*))this->v->tbl[4])(this); }
static inline void                              ID2D1Multithread_Leave                                       (ID2D1Multithread* this) { ((void (WINAPI*)(ID2D1Multithread*))this->v->tbl[5])(this); }

static inline HRESULT                           ID2D1OffsetTransform_QueryInterface                          (ID2D1OffsetTransform* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1OffsetTransform*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1OffsetTransform_AddRef                                  (ID2D1OffsetTransform* this) { return ((UINT32 (WINAPI*)(ID2D1OffsetTransform*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1OffsetTransform_Release                                 (ID2D1OffsetTransform* this) { return ((UINT32 (WINAPI*)(ID2D1OffsetTransform*))this->v->tbl[2])(this); }
static inline UINT32                            ID2D1OffsetTransform_GetInputCount                           (ID2D1OffsetTransform* this) { return ((UINT32 (WINAPI*)(ID2D1OffsetTransform*))this->v->tbl[3])(this); }
static inline void                              ID2D1OffsetTransform_SetOffset                               (ID2D1OffsetTransform* this, POINT offset) { ((void (WINAPI*)(ID2D1OffsetTransform*, POINT))this->v->tbl[4])(this, offset); }
static inline POINT                             ID2D1OffsetTransform_GetOffset                               (ID2D1OffsetTransform* this) { POINT _return; ((void (WINAPI*)(ID2D1OffsetTransform*, POINT*))this->v->tbl[5])(this, &_return); return _return; }

static inline HRESULT                           ID2D1PathGeometry_QueryInterface                             (ID2D1PathGeometry* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1PathGeometry*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1PathGeometry_AddRef                                     (ID2D1PathGeometry* this) { return ((UINT32 (WINAPI*)(ID2D1PathGeometry*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1PathGeometry_Release                                    (ID2D1PathGeometry* this) { return ((UINT32 (WINAPI*)(ID2D1PathGeometry*))this->v->tbl[2])(this); }
static inline void                              ID2D1PathGeometry_GetFactory                                 (ID2D1PathGeometry* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1PathGeometry*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline HRESULT                           ID2D1PathGeometry_GetBounds                                  (ID2D1PathGeometry* this, const D2D_MATRIX_3X2_F* worldTransform, D2D_RECT_F* bounds) { return ((HRESULT (WINAPI*)(ID2D1PathGeometry*, const D2D_MATRIX_3X2_F*, D2D_RECT_F*))this->v->tbl[4])(this, worldTransform, bounds); }
static inline HRESULT                           ID2D1PathGeometry_GetWidenedBounds                           (ID2D1PathGeometry* this, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, D2D_RECT_F* bounds) { return ((HRESULT (WINAPI*)(ID2D1PathGeometry*, FLOAT, ID2D1StrokeStyle*, const D2D_MATRIX_3X2_F*, FLOAT, D2D_RECT_F*))this->v->tbl[5])(this, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, bounds); }
static inline HRESULT                           ID2D1PathGeometry_StrokeContainsPoint                        (ID2D1PathGeometry* this, D2D_POINT_2F point, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, BOOL* contains) { return ((HRESULT (WINAPI*)(ID2D1PathGeometry*, D2D_POINT_2F, FLOAT, ID2D1StrokeStyle*, const D2D_MATRIX_3X2_F*, FLOAT, BOOL*))this->v->tbl[6])(this, point, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, contains); }
static inline HRESULT                           ID2D1PathGeometry_FillContainsPoint                          (ID2D1PathGeometry* this, D2D_POINT_2F point, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, BOOL* contains) { return ((HRESULT (WINAPI*)(ID2D1PathGeometry*, D2D_POINT_2F, const D2D_MATRIX_3X2_F*, FLOAT, BOOL*))this->v->tbl[7])(this, point, worldTransform, flatteningTolerance, contains); }
static inline HRESULT                           ID2D1PathGeometry_CompareWithGeometry                        (ID2D1PathGeometry* this, ID2D1Geometry* inputGeometry, const D2D_MATRIX_3X2_F* inputGeometryTransform, FLOAT flatteningTolerance, D2D1_GEOMETRY_RELATION* relation) { return ((HRESULT (WINAPI*)(ID2D1PathGeometry*, ID2D1Geometry*, const D2D_MATRIX_3X2_F*, FLOAT, D2D1_GEOMETRY_RELATION*))this->v->tbl[8])(this, inputGeometry, inputGeometryTransform, flatteningTolerance, relation); }
static inline HRESULT                           ID2D1PathGeometry_Simplify                                   (ID2D1PathGeometry* this, D2D1_GEOMETRY_SIMPLIFICATION_OPTION simplificationOption, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, ID2D1SimplifiedGeometrySink* geometrySink) { return ((HRESULT (WINAPI*)(ID2D1PathGeometry*, D2D1_GEOMETRY_SIMPLIFICATION_OPTION, const D2D_MATRIX_3X2_F*, FLOAT, ID2D1SimplifiedGeometrySink*))this->v->tbl[9])(this, simplificationOption, worldTransform, flatteningTolerance, geometrySink); }
static inline HRESULT                           ID2D1PathGeometry_Tessellate                                 (ID2D1PathGeometry* this, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, ID2D1TessellationSink* tessellationSink) { return ((HRESULT (WINAPI*)(ID2D1PathGeometry*, const D2D_MATRIX_3X2_F*, FLOAT, ID2D1TessellationSink*))this->v->tbl[10])(this, worldTransform, flatteningTolerance, tessellationSink); }
static inline HRESULT                           ID2D1PathGeometry_CombineWithGeometry                        (ID2D1PathGeometry* this, ID2D1Geometry* inputGeometry, D2D1_COMBINE_MODE combineMode, const D2D_MATRIX_3X2_F* inputGeometryTransform, FLOAT flatteningTolerance, ID2D1SimplifiedGeometrySink* geometrySink) { return ((HRESULT (WINAPI*)(ID2D1PathGeometry*, ID2D1Geometry*, D2D1_COMBINE_MODE, const D2D_MATRIX_3X2_F*, FLOAT, ID2D1SimplifiedGeometrySink*))this->v->tbl[11])(this, inputGeometry, combineMode, inputGeometryTransform, flatteningTolerance, geometrySink); }
static inline HRESULT                           ID2D1PathGeometry_Outline                                    (ID2D1PathGeometry* this, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, ID2D1SimplifiedGeometrySink* geometrySink) { return ((HRESULT (WINAPI*)(ID2D1PathGeometry*, const D2D_MATRIX_3X2_F*, FLOAT, ID2D1SimplifiedGeometrySink*))this->v->tbl[12])(this, worldTransform, flatteningTolerance, geometrySink); }
static inline HRESULT                           ID2D1PathGeometry_ComputeArea                                (ID2D1PathGeometry* this, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, FLOAT* area) { return ((HRESULT (WINAPI*)(ID2D1PathGeometry*, const D2D_MATRIX_3X2_F*, FLOAT, FLOAT*))this->v->tbl[13])(this, worldTransform, flatteningTolerance, area); }
static inline HRESULT                           ID2D1PathGeometry_ComputeLength                              (ID2D1PathGeometry* this, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, FLOAT* length) { return ((HRESULT (WINAPI*)(ID2D1PathGeometry*, const D2D_MATRIX_3X2_F*, FLOAT, FLOAT*))this->v->tbl[14])(this, worldTransform, flatteningTolerance, length); }
static inline HRESULT                           ID2D1PathGeometry_ComputePointAtLength                       (ID2D1PathGeometry* this, FLOAT length, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, D2D_POINT_2F* point, D2D_POINT_2F* unitTangentVector) { return ((HRESULT (WINAPI*)(ID2D1PathGeometry*, FLOAT, const D2D_MATRIX_3X2_F*, FLOAT, D2D_POINT_2F*, D2D_POINT_2F*))this->v->tbl[15])(this, length, worldTransform, flatteningTolerance, point, unitTangentVector); }
static inline HRESULT                           ID2D1PathGeometry_Widen                                      (ID2D1PathGeometry* this, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, ID2D1SimplifiedGeometrySink* geometrySink) { return ((HRESULT (WINAPI*)(ID2D1PathGeometry*, FLOAT, ID2D1StrokeStyle*, const D2D_MATRIX_3X2_F*, FLOAT, ID2D1SimplifiedGeometrySink*))this->v->tbl[16])(this, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, geometrySink); }
static inline HRESULT                           ID2D1PathGeometry_Open                                       (ID2D1PathGeometry* this, ID2D1GeometrySink** geometrySink) { return ((HRESULT (WINAPI*)(ID2D1PathGeometry*, ID2D1GeometrySink**))this->v->tbl[17])(this, geometrySink); }
static inline HRESULT                           ID2D1PathGeometry_Stream                                     (ID2D1PathGeometry* this, ID2D1GeometrySink* geometrySink) { return ((HRESULT (WINAPI*)(ID2D1PathGeometry*, ID2D1GeometrySink*))this->v->tbl[18])(this, geometrySink); }
static inline HRESULT                           ID2D1PathGeometry_GetSegmentCount                            (ID2D1PathGeometry* this, UINT32* count) { return ((HRESULT (WINAPI*)(ID2D1PathGeometry*, UINT32*))this->v->tbl[19])(this, count); }
static inline HRESULT                           ID2D1PathGeometry_GetFigureCount                             (ID2D1PathGeometry* this, UINT32* count) { return ((HRESULT (WINAPI*)(ID2D1PathGeometry*, UINT32*))this->v->tbl[20])(this, count); }

static inline HRESULT                           ID2D1PathGeometry1_QueryInterface                            (ID2D1PathGeometry1* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1PathGeometry1*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1PathGeometry1_AddRef                                    (ID2D1PathGeometry1* this) { return ((UINT32 (WINAPI*)(ID2D1PathGeometry1*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1PathGeometry1_Release                                   (ID2D1PathGeometry1* this) { return ((UINT32 (WINAPI*)(ID2D1PathGeometry1*))this->v->tbl[2])(this); }
static inline void                              ID2D1PathGeometry1_GetFactory                                (ID2D1PathGeometry1* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1PathGeometry1*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline HRESULT                           ID2D1PathGeometry1_GetBounds                                 (ID2D1PathGeometry1* this, const D2D_MATRIX_3X2_F* worldTransform, D2D_RECT_F* bounds) { return ((HRESULT (WINAPI*)(ID2D1PathGeometry1*, const D2D_MATRIX_3X2_F*, D2D_RECT_F*))this->v->tbl[4])(this, worldTransform, bounds); }
static inline HRESULT                           ID2D1PathGeometry1_GetWidenedBounds                          (ID2D1PathGeometry1* this, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, D2D_RECT_F* bounds) { return ((HRESULT (WINAPI*)(ID2D1PathGeometry1*, FLOAT, ID2D1StrokeStyle*, const D2D_MATRIX_3X2_F*, FLOAT, D2D_RECT_F*))this->v->tbl[5])(this, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, bounds); }
static inline HRESULT                           ID2D1PathGeometry1_StrokeContainsPoint                       (ID2D1PathGeometry1* this, D2D_POINT_2F point, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, BOOL* contains) { return ((HRESULT (WINAPI*)(ID2D1PathGeometry1*, D2D_POINT_2F, FLOAT, ID2D1StrokeStyle*, const D2D_MATRIX_3X2_F*, FLOAT, BOOL*))this->v->tbl[6])(this, point, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, contains); }
static inline HRESULT                           ID2D1PathGeometry1_FillContainsPoint                         (ID2D1PathGeometry1* this, D2D_POINT_2F point, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, BOOL* contains) { return ((HRESULT (WINAPI*)(ID2D1PathGeometry1*, D2D_POINT_2F, const D2D_MATRIX_3X2_F*, FLOAT, BOOL*))this->v->tbl[7])(this, point, worldTransform, flatteningTolerance, contains); }
static inline HRESULT                           ID2D1PathGeometry1_CompareWithGeometry                       (ID2D1PathGeometry1* this, ID2D1Geometry* inputGeometry, const D2D_MATRIX_3X2_F* inputGeometryTransform, FLOAT flatteningTolerance, D2D1_GEOMETRY_RELATION* relation) { return ((HRESULT (WINAPI*)(ID2D1PathGeometry1*, ID2D1Geometry*, const D2D_MATRIX_3X2_F*, FLOAT, D2D1_GEOMETRY_RELATION*))this->v->tbl[8])(this, inputGeometry, inputGeometryTransform, flatteningTolerance, relation); }
static inline HRESULT                           ID2D1PathGeometry1_Simplify                                  (ID2D1PathGeometry1* this, D2D1_GEOMETRY_SIMPLIFICATION_OPTION simplificationOption, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, ID2D1SimplifiedGeometrySink* geometrySink) { return ((HRESULT (WINAPI*)(ID2D1PathGeometry1*, D2D1_GEOMETRY_SIMPLIFICATION_OPTION, const D2D_MATRIX_3X2_F*, FLOAT, ID2D1SimplifiedGeometrySink*))this->v->tbl[9])(this, simplificationOption, worldTransform, flatteningTolerance, geometrySink); }
static inline HRESULT                           ID2D1PathGeometry1_Tessellate                                (ID2D1PathGeometry1* this, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, ID2D1TessellationSink* tessellationSink) { return ((HRESULT (WINAPI*)(ID2D1PathGeometry1*, const D2D_MATRIX_3X2_F*, FLOAT, ID2D1TessellationSink*))this->v->tbl[10])(this, worldTransform, flatteningTolerance, tessellationSink); }
static inline HRESULT                           ID2D1PathGeometry1_CombineWithGeometry                       (ID2D1PathGeometry1* this, ID2D1Geometry* inputGeometry, D2D1_COMBINE_MODE combineMode, const D2D_MATRIX_3X2_F* inputGeometryTransform, FLOAT flatteningTolerance, ID2D1SimplifiedGeometrySink* geometrySink) { return ((HRESULT (WINAPI*)(ID2D1PathGeometry1*, ID2D1Geometry*, D2D1_COMBINE_MODE, const D2D_MATRIX_3X2_F*, FLOAT, ID2D1SimplifiedGeometrySink*))this->v->tbl[11])(this, inputGeometry, combineMode, inputGeometryTransform, flatteningTolerance, geometrySink); }
static inline HRESULT                           ID2D1PathGeometry1_Outline                                   (ID2D1PathGeometry1* this, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, ID2D1SimplifiedGeometrySink* geometrySink) { return ((HRESULT (WINAPI*)(ID2D1PathGeometry1*, const D2D_MATRIX_3X2_F*, FLOAT, ID2D1SimplifiedGeometrySink*))this->v->tbl[12])(this, worldTransform, flatteningTolerance, geometrySink); }
static inline HRESULT                           ID2D1PathGeometry1_ComputeArea                               (ID2D1PathGeometry1* this, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, FLOAT* area) { return ((HRESULT (WINAPI*)(ID2D1PathGeometry1*, const D2D_MATRIX_3X2_F*, FLOAT, FLOAT*))this->v->tbl[13])(this, worldTransform, flatteningTolerance, area); }
static inline HRESULT                           ID2D1PathGeometry1_ComputeLength                             (ID2D1PathGeometry1* this, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, FLOAT* length) { return ((HRESULT (WINAPI*)(ID2D1PathGeometry1*, const D2D_MATRIX_3X2_F*, FLOAT, FLOAT*))this->v->tbl[14])(this, worldTransform, flatteningTolerance, length); }
static inline HRESULT                           ID2D1PathGeometry1_ComputePointAtLength                      (ID2D1PathGeometry1* this, FLOAT length, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, D2D_POINT_2F* point, D2D_POINT_2F* unitTangentVector) { return ((HRESULT (WINAPI*)(ID2D1PathGeometry1*, FLOAT, const D2D_MATRIX_3X2_F*, FLOAT, D2D_POINT_2F*, D2D_POINT_2F*))this->v->tbl[15])(this, length, worldTransform, flatteningTolerance, point, unitTangentVector); }
static inline HRESULT                           ID2D1PathGeometry1_Widen                                     (ID2D1PathGeometry1* this, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, ID2D1SimplifiedGeometrySink* geometrySink) { return ((HRESULT (WINAPI*)(ID2D1PathGeometry1*, FLOAT, ID2D1StrokeStyle*, const D2D_MATRIX_3X2_F*, FLOAT, ID2D1SimplifiedGeometrySink*))this->v->tbl[16])(this, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, geometrySink); }
static inline HRESULT                           ID2D1PathGeometry1_Open                                      (ID2D1PathGeometry1* this, ID2D1GeometrySink** geometrySink) { return ((HRESULT (WINAPI*)(ID2D1PathGeometry1*, ID2D1GeometrySink**))this->v->tbl[17])(this, geometrySink); }
static inline HRESULT                           ID2D1PathGeometry1_Stream                                    (ID2D1PathGeometry1* this, ID2D1GeometrySink* geometrySink) { return ((HRESULT (WINAPI*)(ID2D1PathGeometry1*, ID2D1GeometrySink*))this->v->tbl[18])(this, geometrySink); }
static inline HRESULT                           ID2D1PathGeometry1_GetSegmentCount                           (ID2D1PathGeometry1* this, UINT32* count) { return ((HRESULT (WINAPI*)(ID2D1PathGeometry1*, UINT32*))this->v->tbl[19])(this, count); }
static inline HRESULT                           ID2D1PathGeometry1_GetFigureCount                            (ID2D1PathGeometry1* this, UINT32* count) { return ((HRESULT (WINAPI*)(ID2D1PathGeometry1*, UINT32*))this->v->tbl[20])(this, count); }
static inline HRESULT                           ID2D1PathGeometry1_ComputePointAndSegmentAtLength            (ID2D1PathGeometry1* this, FLOAT length, UINT32 startSegment, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, D2D1_POINT_DESCRIPTION* pointDescription) { return ((HRESULT (WINAPI*)(ID2D1PathGeometry1*, FLOAT, UINT32, const D2D_MATRIX_3X2_F*, FLOAT, D2D1_POINT_DESCRIPTION*))this->v->tbl[21])(this, length, startSegment, worldTransform, flatteningTolerance, pointDescription); }

static inline HRESULT                           ID2D1PrintControl_QueryInterface                             (ID2D1PrintControl* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1PrintControl*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1PrintControl_AddRef                                     (ID2D1PrintControl* this) { return ((UINT32 (WINAPI*)(ID2D1PrintControl*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1PrintControl_Release                                    (ID2D1PrintControl* this) { return ((UINT32 (WINAPI*)(ID2D1PrintControl*))this->v->tbl[2])(this); }
static inline HRESULT                           ID2D1PrintControl_AddPage                                    (ID2D1PrintControl* this, ID2D1CommandList* commandList, D2D_SIZE_F pageSize, IStream* pagePrintTicketStream, UINT64* tag1, UINT64* tag2) { return ((HRESULT (WINAPI*)(ID2D1PrintControl*, ID2D1CommandList*, D2D_SIZE_F, IStream*, UINT64*, UINT64*))this->v->tbl[3])(this, commandList, pageSize, pagePrintTicketStream, tag1, tag2); }
static inline HRESULT                           ID2D1PrintControl_Close                                      (ID2D1PrintControl* this) { return ((HRESULT (WINAPI*)(ID2D1PrintControl*))this->v->tbl[4])(this); }

static inline HRESULT                           ID2D1Properties_QueryInterface                               (ID2D1Properties* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1Properties*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1Properties_AddRef                                       (ID2D1Properties* this) { return ((UINT32 (WINAPI*)(ID2D1Properties*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1Properties_Release                                      (ID2D1Properties* this) { return ((UINT32 (WINAPI*)(ID2D1Properties*))this->v->tbl[2])(this); }
static inline UINT32                            ID2D1Properties_GetPropertyCount                             (ID2D1Properties* this) { return ((UINT32 (WINAPI*)(ID2D1Properties*))this->v->tbl[3])(this); }
static inline HRESULT                           ID2D1Properties_GetPropertyName                              (ID2D1Properties* this, UINT32 index, WCHAR* name, UINT32 nameCount) { return ((HRESULT (WINAPI*)(ID2D1Properties*, UINT32, WCHAR*, UINT32))this->v->tbl[4])(this, index, name, nameCount); }
static inline UINT32                            ID2D1Properties_GetPropertyNameLength                        (ID2D1Properties* this, UINT32 index) { return ((UINT32 (WINAPI*)(ID2D1Properties*, UINT32))this->v->tbl[5])(this, index); }
static inline D2D1_PROPERTY_TYPE                ID2D1Properties_GetType                                      (ID2D1Properties* this, UINT32 index) { return ((D2D1_PROPERTY_TYPE (WINAPI*)(ID2D1Properties*, UINT32))this->v->tbl[6])(this, index); }
static inline UINT32                            ID2D1Properties_GetPropertyIndex                             (ID2D1Properties* this, const WCHAR* name) { return ((UINT32 (WINAPI*)(ID2D1Properties*, const WCHAR*))this->v->tbl[7])(this, name); }
static inline HRESULT                           ID2D1Properties_SetValueByName                               (ID2D1Properties* this, const WCHAR* name, D2D1_PROPERTY_TYPE type, const UINT8* data, UINT32 dataSize) { return ((HRESULT (WINAPI*)(ID2D1Properties*, const WCHAR*, D2D1_PROPERTY_TYPE, const UINT8*, UINT32))this->v->tbl[8])(this, name, type, data, dataSize); }
static inline HRESULT                           ID2D1Properties_SetValue                                     (ID2D1Properties* this, UINT32 index, D2D1_PROPERTY_TYPE type, const UINT8* data, UINT32 dataSize) { return ((HRESULT (WINAPI*)(ID2D1Properties*, UINT32, D2D1_PROPERTY_TYPE, const UINT8*, UINT32))this->v->tbl[9])(this, index, type, data, dataSize); }
static inline HRESULT                           ID2D1Properties_GetValueByName                               (ID2D1Properties* this, const WCHAR* name, D2D1_PROPERTY_TYPE type, UINT8* data, UINT32 dataSize) { return ((HRESULT (WINAPI*)(ID2D1Properties*, const WCHAR*, D2D1_PROPERTY_TYPE, UINT8*, UINT32))this->v->tbl[10])(this, name, type, data, dataSize); }
static inline HRESULT                           ID2D1Properties_GetValue                                     (ID2D1Properties* this, UINT32 index, D2D1_PROPERTY_TYPE type, UINT8* data, UINT32 dataSize) { return ((HRESULT (WINAPI*)(ID2D1Properties*, UINT32, D2D1_PROPERTY_TYPE, UINT8*, UINT32))this->v->tbl[11])(this, index, type, data, dataSize); }
static inline UINT32                            ID2D1Properties_GetValueSize                                 (ID2D1Properties* this, UINT32 index) { return ((UINT32 (WINAPI*)(ID2D1Properties*, UINT32))this->v->tbl[12])(this, index); }
static inline HRESULT                           ID2D1Properties_GetSubProperties                             (ID2D1Properties* this, UINT32 index, ID2D1Properties** subProperties) { return ((HRESULT (WINAPI*)(ID2D1Properties*, UINT32, ID2D1Properties**))this->v->tbl[13])(this, index, subProperties); }

static inline HRESULT                           ID2D1RadialGradientBrush_QueryInterface                      (ID2D1RadialGradientBrush* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1RadialGradientBrush*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1RadialGradientBrush_AddRef                              (ID2D1RadialGradientBrush* this) { return ((UINT32 (WINAPI*)(ID2D1RadialGradientBrush*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1RadialGradientBrush_Release                             (ID2D1RadialGradientBrush* this) { return ((UINT32 (WINAPI*)(ID2D1RadialGradientBrush*))this->v->tbl[2])(this); }
static inline void                              ID2D1RadialGradientBrush_GetFactory                          (ID2D1RadialGradientBrush* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1RadialGradientBrush*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline void                              ID2D1RadialGradientBrush_SetOpacity                          (ID2D1RadialGradientBrush* this, FLOAT opacity) { ((void (WINAPI*)(ID2D1RadialGradientBrush*, FLOAT))this->v->tbl[4])(this, opacity); }
static inline void                              ID2D1RadialGradientBrush_SetTransform                        (ID2D1RadialGradientBrush* this, const D2D_MATRIX_3X2_F* transform) { ((void (WINAPI*)(ID2D1RadialGradientBrush*, const D2D_MATRIX_3X2_F*))this->v->tbl[5])(this, transform); }
static inline FLOAT                             ID2D1RadialGradientBrush_GetOpacity                          (ID2D1RadialGradientBrush* this) { return ((FLOAT (WINAPI*)(ID2D1RadialGradientBrush*))this->v->tbl[6])(this); }
static inline void                              ID2D1RadialGradientBrush_GetTransform                        (ID2D1RadialGradientBrush* this, D2D_MATRIX_3X2_F* transform) { ((void (WINAPI*)(ID2D1RadialGradientBrush*, D2D_MATRIX_3X2_F*))this->v->tbl[7])(this, transform); }
static inline void                              ID2D1RadialGradientBrush_SetCenter                           (ID2D1RadialGradientBrush* this, D2D_POINT_2F center) { ((void (WINAPI*)(ID2D1RadialGradientBrush*, D2D_POINT_2F))this->v->tbl[8])(this, center); }
static inline void                              ID2D1RadialGradientBrush_SetGradientOriginOffset             (ID2D1RadialGradientBrush* this, D2D_POINT_2F gradientOriginOffset) { ((void (WINAPI*)(ID2D1RadialGradientBrush*, D2D_POINT_2F))this->v->tbl[9])(this, gradientOriginOffset); }
static inline void                              ID2D1RadialGradientBrush_SetRadiusX                          (ID2D1RadialGradientBrush* this, FLOAT radiusX) { ((void (WINAPI*)(ID2D1RadialGradientBrush*, FLOAT))this->v->tbl[10])(this, radiusX); }
static inline void                              ID2D1RadialGradientBrush_SetRadiusY                          (ID2D1RadialGradientBrush* this, FLOAT radiusY) { ((void (WINAPI*)(ID2D1RadialGradientBrush*, FLOAT))this->v->tbl[11])(this, radiusY); }
static inline D2D_POINT_2F                      ID2D1RadialGradientBrush_GetCenter                           (ID2D1RadialGradientBrush* this) { D2D_POINT_2F _return; ((void (WINAPI*)(ID2D1RadialGradientBrush*, D2D_POINT_2F*))this->v->tbl[12])(this, &_return); return _return; }
static inline D2D_POINT_2F                      ID2D1RadialGradientBrush_GetGradientOriginOffset             (ID2D1RadialGradientBrush* this) { D2D_POINT_2F _return; ((void (WINAPI*)(ID2D1RadialGradientBrush*, D2D_POINT_2F*))this->v->tbl[13])(this, &_return); return _return; }
static inline FLOAT                             ID2D1RadialGradientBrush_GetRadiusX                          (ID2D1RadialGradientBrush* this) { return ((FLOAT (WINAPI*)(ID2D1RadialGradientBrush*))this->v->tbl[14])(this); }
static inline FLOAT                             ID2D1RadialGradientBrush_GetRadiusY                          (ID2D1RadialGradientBrush* this) { return ((FLOAT (WINAPI*)(ID2D1RadialGradientBrush*))this->v->tbl[15])(this); }
static inline void                              ID2D1RadialGradientBrush_GetGradientStopCollection           (ID2D1RadialGradientBrush* this, ID2D1GradientStopCollection** gradientStopCollection) { ((void (WINAPI*)(ID2D1RadialGradientBrush*, ID2D1GradientStopCollection**))this->v->tbl[16])(this, gradientStopCollection); }

static inline HRESULT                           ID2D1RectangleGeometry_QueryInterface                        (ID2D1RectangleGeometry* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1RectangleGeometry*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1RectangleGeometry_AddRef                                (ID2D1RectangleGeometry* this) { return ((UINT32 (WINAPI*)(ID2D1RectangleGeometry*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1RectangleGeometry_Release                               (ID2D1RectangleGeometry* this) { return ((UINT32 (WINAPI*)(ID2D1RectangleGeometry*))this->v->tbl[2])(this); }
static inline void                              ID2D1RectangleGeometry_GetFactory                            (ID2D1RectangleGeometry* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1RectangleGeometry*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline HRESULT                           ID2D1RectangleGeometry_GetBounds                             (ID2D1RectangleGeometry* this, const D2D_MATRIX_3X2_F* worldTransform, D2D_RECT_F* bounds) { return ((HRESULT (WINAPI*)(ID2D1RectangleGeometry*, const D2D_MATRIX_3X2_F*, D2D_RECT_F*))this->v->tbl[4])(this, worldTransform, bounds); }
static inline HRESULT                           ID2D1RectangleGeometry_GetWidenedBounds                      (ID2D1RectangleGeometry* this, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, D2D_RECT_F* bounds) { return ((HRESULT (WINAPI*)(ID2D1RectangleGeometry*, FLOAT, ID2D1StrokeStyle*, const D2D_MATRIX_3X2_F*, FLOAT, D2D_RECT_F*))this->v->tbl[5])(this, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, bounds); }
static inline HRESULT                           ID2D1RectangleGeometry_StrokeContainsPoint                   (ID2D1RectangleGeometry* this, D2D_POINT_2F point, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, BOOL* contains) { return ((HRESULT (WINAPI*)(ID2D1RectangleGeometry*, D2D_POINT_2F, FLOAT, ID2D1StrokeStyle*, const D2D_MATRIX_3X2_F*, FLOAT, BOOL*))this->v->tbl[6])(this, point, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, contains); }
static inline HRESULT                           ID2D1RectangleGeometry_FillContainsPoint                     (ID2D1RectangleGeometry* this, D2D_POINT_2F point, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, BOOL* contains) { return ((HRESULT (WINAPI*)(ID2D1RectangleGeometry*, D2D_POINT_2F, const D2D_MATRIX_3X2_F*, FLOAT, BOOL*))this->v->tbl[7])(this, point, worldTransform, flatteningTolerance, contains); }
static inline HRESULT                           ID2D1RectangleGeometry_CompareWithGeometry                   (ID2D1RectangleGeometry* this, ID2D1Geometry* inputGeometry, const D2D_MATRIX_3X2_F* inputGeometryTransform, FLOAT flatteningTolerance, D2D1_GEOMETRY_RELATION* relation) { return ((HRESULT (WINAPI*)(ID2D1RectangleGeometry*, ID2D1Geometry*, const D2D_MATRIX_3X2_F*, FLOAT, D2D1_GEOMETRY_RELATION*))this->v->tbl[8])(this, inputGeometry, inputGeometryTransform, flatteningTolerance, relation); }
static inline HRESULT                           ID2D1RectangleGeometry_Simplify                              (ID2D1RectangleGeometry* this, D2D1_GEOMETRY_SIMPLIFICATION_OPTION simplificationOption, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, ID2D1SimplifiedGeometrySink* geometrySink) { return ((HRESULT (WINAPI*)(ID2D1RectangleGeometry*, D2D1_GEOMETRY_SIMPLIFICATION_OPTION, const D2D_MATRIX_3X2_F*, FLOAT, ID2D1SimplifiedGeometrySink*))this->v->tbl[9])(this, simplificationOption, worldTransform, flatteningTolerance, geometrySink); }
static inline HRESULT                           ID2D1RectangleGeometry_Tessellate                            (ID2D1RectangleGeometry* this, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, ID2D1TessellationSink* tessellationSink) { return ((HRESULT (WINAPI*)(ID2D1RectangleGeometry*, const D2D_MATRIX_3X2_F*, FLOAT, ID2D1TessellationSink*))this->v->tbl[10])(this, worldTransform, flatteningTolerance, tessellationSink); }
static inline HRESULT                           ID2D1RectangleGeometry_CombineWithGeometry                   (ID2D1RectangleGeometry* this, ID2D1Geometry* inputGeometry, D2D1_COMBINE_MODE combineMode, const D2D_MATRIX_3X2_F* inputGeometryTransform, FLOAT flatteningTolerance, ID2D1SimplifiedGeometrySink* geometrySink) { return ((HRESULT (WINAPI*)(ID2D1RectangleGeometry*, ID2D1Geometry*, D2D1_COMBINE_MODE, const D2D_MATRIX_3X2_F*, FLOAT, ID2D1SimplifiedGeometrySink*))this->v->tbl[11])(this, inputGeometry, combineMode, inputGeometryTransform, flatteningTolerance, geometrySink); }
static inline HRESULT                           ID2D1RectangleGeometry_Outline                               (ID2D1RectangleGeometry* this, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, ID2D1SimplifiedGeometrySink* geometrySink) { return ((HRESULT (WINAPI*)(ID2D1RectangleGeometry*, const D2D_MATRIX_3X2_F*, FLOAT, ID2D1SimplifiedGeometrySink*))this->v->tbl[12])(this, worldTransform, flatteningTolerance, geometrySink); }
static inline HRESULT                           ID2D1RectangleGeometry_ComputeArea                           (ID2D1RectangleGeometry* this, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, FLOAT* area) { return ((HRESULT (WINAPI*)(ID2D1RectangleGeometry*, const D2D_MATRIX_3X2_F*, FLOAT, FLOAT*))this->v->tbl[13])(this, worldTransform, flatteningTolerance, area); }
static inline HRESULT                           ID2D1RectangleGeometry_ComputeLength                         (ID2D1RectangleGeometry* this, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, FLOAT* length) { return ((HRESULT (WINAPI*)(ID2D1RectangleGeometry*, const D2D_MATRIX_3X2_F*, FLOAT, FLOAT*))this->v->tbl[14])(this, worldTransform, flatteningTolerance, length); }
static inline HRESULT                           ID2D1RectangleGeometry_ComputePointAtLength                  (ID2D1RectangleGeometry* this, FLOAT length, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, D2D_POINT_2F* point, D2D_POINT_2F* unitTangentVector) { return ((HRESULT (WINAPI*)(ID2D1RectangleGeometry*, FLOAT, const D2D_MATRIX_3X2_F*, FLOAT, D2D_POINT_2F*, D2D_POINT_2F*))this->v->tbl[15])(this, length, worldTransform, flatteningTolerance, point, unitTangentVector); }
static inline HRESULT                           ID2D1RectangleGeometry_Widen                                 (ID2D1RectangleGeometry* this, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, ID2D1SimplifiedGeometrySink* geometrySink) { return ((HRESULT (WINAPI*)(ID2D1RectangleGeometry*, FLOAT, ID2D1StrokeStyle*, const D2D_MATRIX_3X2_F*, FLOAT, ID2D1SimplifiedGeometrySink*))this->v->tbl[16])(this, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, geometrySink); }
static inline void                              ID2D1RectangleGeometry_GetRect                               (ID2D1RectangleGeometry* this, D2D_RECT_F* rect) { ((void (WINAPI*)(ID2D1RectangleGeometry*, D2D_RECT_F*))this->v->tbl[17])(this, rect); }

static inline HRESULT                           ID2D1RenderInfo_QueryInterface                               (ID2D1RenderInfo* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1RenderInfo*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1RenderInfo_AddRef                                       (ID2D1RenderInfo* this) { return ((UINT32 (WINAPI*)(ID2D1RenderInfo*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1RenderInfo_Release                                      (ID2D1RenderInfo* this) { return ((UINT32 (WINAPI*)(ID2D1RenderInfo*))this->v->tbl[2])(this); }
static inline HRESULT                           ID2D1RenderInfo_SetInputDescription                          (ID2D1RenderInfo* this, UINT32 inputIndex, D2D1_INPUT_DESCRIPTION inputDescription) { return ((HRESULT (WINAPI*)(ID2D1RenderInfo*, UINT32, D2D1_INPUT_DESCRIPTION))this->v->tbl[3])(this, inputIndex, inputDescription); }
static inline HRESULT                           ID2D1RenderInfo_SetOutputBuffer                              (ID2D1RenderInfo* this, D2D1_BUFFER_PRECISION bufferPrecision, D2D1_CHANNEL_DEPTH channelDepth) { return ((HRESULT (WINAPI*)(ID2D1RenderInfo*, D2D1_BUFFER_PRECISION, D2D1_CHANNEL_DEPTH))this->v->tbl[4])(this, bufferPrecision, channelDepth); }
static inline void                              ID2D1RenderInfo_SetCached                                    (ID2D1RenderInfo* this, BOOL isCached) { ((void (WINAPI*)(ID2D1RenderInfo*, BOOL))this->v->tbl[5])(this, isCached); }
static inline void                              ID2D1RenderInfo_SetInstructionCountHint                      (ID2D1RenderInfo* this, UINT32 instructionCount) { ((void (WINAPI*)(ID2D1RenderInfo*, UINT32))this->v->tbl[6])(this, instructionCount); }

static inline HRESULT                           ID2D1RenderTarget_QueryInterface                             (ID2D1RenderTarget* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1RenderTarget*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1RenderTarget_AddRef                                     (ID2D1RenderTarget* this) { return ((UINT32 (WINAPI*)(ID2D1RenderTarget*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1RenderTarget_Release                                    (ID2D1RenderTarget* this) { return ((UINT32 (WINAPI*)(ID2D1RenderTarget*))this->v->tbl[2])(this); }
static inline void                              ID2D1RenderTarget_GetFactory                                 (ID2D1RenderTarget* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1RenderTarget*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline HRESULT                           ID2D1RenderTarget_CreateBitmap                               (ID2D1RenderTarget* this, D2D_SIZE_U size, const void* srcData, UINT32 pitch, const D2D1_BITMAP_PROPERTIES* bitmapProperties, ID2D1Bitmap** bitmap) { return ((HRESULT (WINAPI*)(ID2D1RenderTarget*, D2D_SIZE_U, const void*, UINT32, const D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap**))this->v->tbl[4])(this, size, srcData, pitch, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1RenderTarget_CreateBitmapFromWicBitmap                  (ID2D1RenderTarget* this, IWICBitmapSource* wicBitmapSource, const D2D1_BITMAP_PROPERTIES* bitmapProperties, ID2D1Bitmap** bitmap) { return ((HRESULT (WINAPI*)(ID2D1RenderTarget*, IWICBitmapSource*, const D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap**))this->v->tbl[5])(this, wicBitmapSource, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1RenderTarget_CreateSharedBitmap                         (ID2D1RenderTarget* this, const GUID* riid, void* data, const D2D1_BITMAP_PROPERTIES* bitmapProperties, ID2D1Bitmap** bitmap) { return ((HRESULT (WINAPI*)(ID2D1RenderTarget*, const GUID*, void*, const D2D1_BITMAP_PROPERTIES*, ID2D1Bitmap**))this->v->tbl[6])(this, riid, data, bitmapProperties, bitmap); }
static inline HRESULT                           ID2D1RenderTarget_CreateBitmapBrush                          (ID2D1RenderTarget* this, ID2D1Bitmap* bitmap, const D2D1_BITMAP_BRUSH_PROPERTIES* bitmapBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1BitmapBrush** bitmapBrush) { return ((HRESULT (WINAPI*)(ID2D1RenderTarget*, ID2D1Bitmap*, const D2D1_BITMAP_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1BitmapBrush**))this->v->tbl[7])(this, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush); }
static inline HRESULT                           ID2D1RenderTarget_CreateSolidColorBrush                      (ID2D1RenderTarget* this, const D2D1_COLOR_F* color, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1SolidColorBrush** solidColorBrush) { return ((HRESULT (WINAPI*)(ID2D1RenderTarget*, const D2D1_COLOR_F*, const D2D1_BRUSH_PROPERTIES*, ID2D1SolidColorBrush**))this->v->tbl[8])(this, color, brushProperties, solidColorBrush); }
static inline HRESULT                           ID2D1RenderTarget_CreateGradientStopCollection               (ID2D1RenderTarget* this, const D2D1_GRADIENT_STOP* gradientStops, UINT32 gradientStopsCount, D2D1_GAMMA colorInterpolationGamma, D2D1_EXTEND_MODE extendMode, ID2D1GradientStopCollection** gradientStopCollection) { return ((HRESULT (WINAPI*)(ID2D1RenderTarget*, const D2D1_GRADIENT_STOP*, UINT32, D2D1_GAMMA, D2D1_EXTEND_MODE, ID2D1GradientStopCollection**))this->v->tbl[9])(this, gradientStops, gradientStopsCount, colorInterpolationGamma, extendMode, gradientStopCollection); }
static inline HRESULT                           ID2D1RenderTarget_CreateLinearGradientBrush                  (ID2D1RenderTarget* this, const D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES* linearGradientBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1GradientStopCollection* gradientStopCollection, ID2D1LinearGradientBrush** linearGradientBrush) { return ((HRESULT (WINAPI*)(ID2D1RenderTarget*, const D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection*, ID2D1LinearGradientBrush**))this->v->tbl[10])(this, linearGradientBrushProperties, brushProperties, gradientStopCollection, linearGradientBrush); }
static inline HRESULT                           ID2D1RenderTarget_CreateRadialGradientBrush                  (ID2D1RenderTarget* this, const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES* radialGradientBrushProperties, const D2D1_BRUSH_PROPERTIES* brushProperties, ID2D1GradientStopCollection* gradientStopCollection, ID2D1RadialGradientBrush** radialGradientBrush) { return ((HRESULT (WINAPI*)(ID2D1RenderTarget*, const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, const D2D1_BRUSH_PROPERTIES*, ID2D1GradientStopCollection*, ID2D1RadialGradientBrush**))this->v->tbl[11])(this, radialGradientBrushProperties, brushProperties, gradientStopCollection, radialGradientBrush); }
static inline HRESULT                           ID2D1RenderTarget_CreateCompatibleRenderTarget               (ID2D1RenderTarget* this, const D2D_SIZE_F* desiredSize, const D2D_SIZE_U* desiredPixelSize, const D2D1_PIXEL_FORMAT* desiredFormat, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS options, ID2D1BitmapRenderTarget** bitmapRenderTarget) { return ((HRESULT (WINAPI*)(ID2D1RenderTarget*, const D2D_SIZE_F*, const D2D_SIZE_U*, const D2D1_PIXEL_FORMAT*, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, ID2D1BitmapRenderTarget**))this->v->tbl[12])(this, desiredSize, desiredPixelSize, desiredFormat, options, bitmapRenderTarget); }
static inline HRESULT                           ID2D1RenderTarget_CreateLayer                                (ID2D1RenderTarget* this, const D2D_SIZE_F* size, ID2D1Layer** layer) { return ((HRESULT (WINAPI*)(ID2D1RenderTarget*, const D2D_SIZE_F*, ID2D1Layer**))this->v->tbl[13])(this, size, layer); }
static inline HRESULT                           ID2D1RenderTarget_CreateMesh                                 (ID2D1RenderTarget* this, ID2D1Mesh** mesh) { return ((HRESULT (WINAPI*)(ID2D1RenderTarget*, ID2D1Mesh**))this->v->tbl[14])(this, mesh); }
static inline void                              ID2D1RenderTarget_DrawLine                                   (ID2D1RenderTarget* this, D2D_POINT_2F point0, D2D_POINT_2F point1, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1RenderTarget*, D2D_POINT_2F, D2D_POINT_2F, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[15])(this, point0, point1, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1RenderTarget_DrawRectangle                              (ID2D1RenderTarget* this, const D2D_RECT_F* rect, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1RenderTarget*, const D2D_RECT_F*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[16])(this, rect, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1RenderTarget_FillRectangle                              (ID2D1RenderTarget* this, const D2D_RECT_F* rect, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1RenderTarget*, const D2D_RECT_F*, ID2D1Brush*))this->v->tbl[17])(this, rect, brush); }
static inline void                              ID2D1RenderTarget_DrawRoundedRectangle                       (ID2D1RenderTarget* this, const D2D1_ROUNDED_RECT* roundedRect, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1RenderTarget*, const D2D1_ROUNDED_RECT*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[18])(this, roundedRect, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1RenderTarget_FillRoundedRectangle                       (ID2D1RenderTarget* this, const D2D1_ROUNDED_RECT* roundedRect, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1RenderTarget*, const D2D1_ROUNDED_RECT*, ID2D1Brush*))this->v->tbl[19])(this, roundedRect, brush); }
static inline void                              ID2D1RenderTarget_DrawEllipse                                (ID2D1RenderTarget* this, const D2D1_ELLIPSE* ellipse, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1RenderTarget*, const D2D1_ELLIPSE*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[20])(this, ellipse, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1RenderTarget_FillEllipse                                (ID2D1RenderTarget* this, const D2D1_ELLIPSE* ellipse, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1RenderTarget*, const D2D1_ELLIPSE*, ID2D1Brush*))this->v->tbl[21])(this, ellipse, brush); }
static inline void                              ID2D1RenderTarget_DrawGeometry                               (ID2D1RenderTarget* this, ID2D1Geometry* geometry, ID2D1Brush* brush, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle) { ((void (WINAPI*)(ID2D1RenderTarget*, ID2D1Geometry*, ID2D1Brush*, FLOAT, ID2D1StrokeStyle*))this->v->tbl[22])(this, geometry, brush, strokeWidth, strokeStyle); }
static inline void                              ID2D1RenderTarget_FillGeometry                               (ID2D1RenderTarget* this, ID2D1Geometry* geometry, ID2D1Brush* brush, ID2D1Brush* opacityBrush) { ((void (WINAPI*)(ID2D1RenderTarget*, ID2D1Geometry*, ID2D1Brush*, ID2D1Brush*))this->v->tbl[23])(this, geometry, brush, opacityBrush); }
static inline void                              ID2D1RenderTarget_FillMesh                                   (ID2D1RenderTarget* this, ID2D1Mesh* mesh, ID2D1Brush* brush) { ((void (WINAPI*)(ID2D1RenderTarget*, ID2D1Mesh*, ID2D1Brush*))this->v->tbl[24])(this, mesh, brush); }
static inline void                              ID2D1RenderTarget_FillOpacityMask                            (ID2D1RenderTarget* this, ID2D1Bitmap* opacityMask, ID2D1Brush* brush, D2D1_OPACITY_MASK_CONTENT content, const D2D_RECT_F* destinationRectangle, const D2D_RECT_F* sourceRectangle) { ((void (WINAPI*)(ID2D1RenderTarget*, ID2D1Bitmap*, ID2D1Brush*, D2D1_OPACITY_MASK_CONTENT, const D2D_RECT_F*, const D2D_RECT_F*))this->v->tbl[25])(this, opacityMask, brush, content, destinationRectangle, sourceRectangle); }
static inline void                              ID2D1RenderTarget_DrawBitmap                                 (ID2D1RenderTarget* this, ID2D1Bitmap* bitmap, const D2D_RECT_F* destinationRectangle, FLOAT opacity, D2D1_BITMAP_INTERPOLATION_MODE interpolationMode, const D2D_RECT_F* sourceRectangle) { ((void (WINAPI*)(ID2D1RenderTarget*, ID2D1Bitmap*, const D2D_RECT_F*, FLOAT, D2D1_BITMAP_INTERPOLATION_MODE, const D2D_RECT_F*))this->v->tbl[26])(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle); }
static inline void                              ID2D1RenderTarget_DrawText                                   (ID2D1RenderTarget* this, const WCHAR* string, UINT32 stringLength, IDWriteTextFormat* textFormat, const D2D_RECT_F* layoutRect, ID2D1Brush* defaultFillBrush, D2D1_DRAW_TEXT_OPTIONS options, DWRITE_MEASURING_MODE measuringMode) { ((void (WINAPI*)(ID2D1RenderTarget*, const WCHAR*, UINT32, IDWriteTextFormat*, const D2D_RECT_F*, ID2D1Brush*, D2D1_DRAW_TEXT_OPTIONS, DWRITE_MEASURING_MODE))this->v->tbl[27])(this, string, stringLength, textFormat, layoutRect, defaultFillBrush, options, measuringMode); }
static inline void                              ID2D1RenderTarget_DrawTextLayout                             (ID2D1RenderTarget* this, D2D_POINT_2F origin, IDWriteTextLayout* textLayout, ID2D1Brush* defaultFillBrush, D2D1_DRAW_TEXT_OPTIONS options) { ((void (WINAPI*)(ID2D1RenderTarget*, D2D_POINT_2F, IDWriteTextLayout*, ID2D1Brush*, D2D1_DRAW_TEXT_OPTIONS))this->v->tbl[28])(this, origin, textLayout, defaultFillBrush, options); }
static inline void                              ID2D1RenderTarget_DrawGlyphRun                               (ID2D1RenderTarget* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, ID2D1Brush* foregroundBrush, DWRITE_MEASURING_MODE measuringMode) { ((void (WINAPI*)(ID2D1RenderTarget*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, ID2D1Brush*, DWRITE_MEASURING_MODE))this->v->tbl[29])(this, baselineOrigin, glyphRun, foregroundBrush, measuringMode); }
static inline void                              ID2D1RenderTarget_SetTransform                               (ID2D1RenderTarget* this, const D2D_MATRIX_3X2_F* transform) { ((void (WINAPI*)(ID2D1RenderTarget*, const D2D_MATRIX_3X2_F*))this->v->tbl[30])(this, transform); }
static inline void                              ID2D1RenderTarget_GetTransform                               (ID2D1RenderTarget* this, D2D_MATRIX_3X2_F* transform) { ((void (WINAPI*)(ID2D1RenderTarget*, D2D_MATRIX_3X2_F*))this->v->tbl[31])(this, transform); }
static inline void                              ID2D1RenderTarget_SetAntialiasMode                           (ID2D1RenderTarget* this, D2D1_ANTIALIAS_MODE antialiasMode) { ((void (WINAPI*)(ID2D1RenderTarget*, D2D1_ANTIALIAS_MODE))this->v->tbl[32])(this, antialiasMode); }
static inline D2D1_ANTIALIAS_MODE               ID2D1RenderTarget_GetAntialiasMode                           (ID2D1RenderTarget* this) { return ((D2D1_ANTIALIAS_MODE (WINAPI*)(ID2D1RenderTarget*))this->v->tbl[33])(this); }
static inline void                              ID2D1RenderTarget_SetTextAntialiasMode                       (ID2D1RenderTarget* this, D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode) { ((void (WINAPI*)(ID2D1RenderTarget*, D2D1_TEXT_ANTIALIAS_MODE))this->v->tbl[34])(this, textAntialiasMode); }
static inline D2D1_TEXT_ANTIALIAS_MODE          ID2D1RenderTarget_GetTextAntialiasMode                       (ID2D1RenderTarget* this) { return ((D2D1_TEXT_ANTIALIAS_MODE (WINAPI*)(ID2D1RenderTarget*))this->v->tbl[35])(this); }
static inline void                              ID2D1RenderTarget_SetTextRenderingParams                     (ID2D1RenderTarget* this, IDWriteRenderingParams* textRenderingParams) { ((void (WINAPI*)(ID2D1RenderTarget*, IDWriteRenderingParams*))this->v->tbl[36])(this, textRenderingParams); }
static inline void                              ID2D1RenderTarget_GetTextRenderingParams                     (ID2D1RenderTarget* this, IDWriteRenderingParams** textRenderingParams) { ((void (WINAPI*)(ID2D1RenderTarget*, IDWriteRenderingParams**))this->v->tbl[37])(this, textRenderingParams); }
static inline void                              ID2D1RenderTarget_SetTags                                    (ID2D1RenderTarget* this, UINT64 tag1, UINT64 tag2) { ((void (WINAPI*)(ID2D1RenderTarget*, UINT64, UINT64))this->v->tbl[38])(this, tag1, tag2); }
static inline void                              ID2D1RenderTarget_GetTags                                    (ID2D1RenderTarget* this, UINT64* tag1, UINT64* tag2) { ((void (WINAPI*)(ID2D1RenderTarget*, UINT64*, UINT64*))this->v->tbl[39])(this, tag1, tag2); }
static inline void                              ID2D1RenderTarget_PushLayer                                  (ID2D1RenderTarget* this, const D2D1_LAYER_PARAMETERS* layerParameters, ID2D1Layer* layer) { ((void (WINAPI*)(ID2D1RenderTarget*, const D2D1_LAYER_PARAMETERS*, ID2D1Layer*))this->v->tbl[40])(this, layerParameters, layer); }
static inline void                              ID2D1RenderTarget_PopLayer                                   (ID2D1RenderTarget* this) { ((void (WINAPI*)(ID2D1RenderTarget*))this->v->tbl[41])(this); }
static inline HRESULT                           ID2D1RenderTarget_Flush                                      (ID2D1RenderTarget* this, UINT64* tag1, UINT64* tag2) { return ((HRESULT (WINAPI*)(ID2D1RenderTarget*, UINT64*, UINT64*))this->v->tbl[42])(this, tag1, tag2); }
static inline void                              ID2D1RenderTarget_SaveDrawingState                           (ID2D1RenderTarget* this, ID2D1DrawingStateBlock* drawingStateBlock) { ((void (WINAPI*)(ID2D1RenderTarget*, ID2D1DrawingStateBlock*))this->v->tbl[43])(this, drawingStateBlock); }
static inline void                              ID2D1RenderTarget_RestoreDrawingState                        (ID2D1RenderTarget* this, ID2D1DrawingStateBlock* drawingStateBlock) { ((void (WINAPI*)(ID2D1RenderTarget*, ID2D1DrawingStateBlock*))this->v->tbl[44])(this, drawingStateBlock); }
static inline void                              ID2D1RenderTarget_PushAxisAlignedClip                        (ID2D1RenderTarget* this, const D2D_RECT_F* clipRect, D2D1_ANTIALIAS_MODE antialiasMode) { ((void (WINAPI*)(ID2D1RenderTarget*, const D2D_RECT_F*, D2D1_ANTIALIAS_MODE))this->v->tbl[45])(this, clipRect, antialiasMode); }
static inline void                              ID2D1RenderTarget_PopAxisAlignedClip                         (ID2D1RenderTarget* this) { ((void (WINAPI*)(ID2D1RenderTarget*))this->v->tbl[46])(this); }
static inline void                              ID2D1RenderTarget_Clear                                      (ID2D1RenderTarget* this, const D2D1_COLOR_F* clearColor) { ((void (WINAPI*)(ID2D1RenderTarget*, const D2D1_COLOR_F*))this->v->tbl[47])(this, clearColor); }
static inline void                              ID2D1RenderTarget_BeginDraw                                  (ID2D1RenderTarget* this) { ((void (WINAPI*)(ID2D1RenderTarget*))this->v->tbl[48])(this); }
static inline HRESULT                           ID2D1RenderTarget_EndDraw                                    (ID2D1RenderTarget* this, UINT64* tag1, UINT64* tag2) { return ((HRESULT (WINAPI*)(ID2D1RenderTarget*, UINT64*, UINT64*))this->v->tbl[49])(this, tag1, tag2); }
static inline D2D1_PIXEL_FORMAT                 ID2D1RenderTarget_GetPixelFormat                             (ID2D1RenderTarget* this) { D2D1_PIXEL_FORMAT _return; ((void (WINAPI*)(ID2D1RenderTarget*, D2D1_PIXEL_FORMAT*))this->v->tbl[50])(this, &_return); return _return; }
static inline void                              ID2D1RenderTarget_SetDpi                                     (ID2D1RenderTarget* this, FLOAT dpiX, FLOAT dpiY) { ((void (WINAPI*)(ID2D1RenderTarget*, FLOAT, FLOAT))this->v->tbl[51])(this, dpiX, dpiY); }
static inline void                              ID2D1RenderTarget_GetDpi                                     (ID2D1RenderTarget* this, FLOAT* dpiX, FLOAT* dpiY) { ((void (WINAPI*)(ID2D1RenderTarget*, FLOAT*, FLOAT*))this->v->tbl[52])(this, dpiX, dpiY); }
static inline D2D_SIZE_F                        ID2D1RenderTarget_GetSize                                    (ID2D1RenderTarget* this) { D2D_SIZE_F _return; ((void (WINAPI*)(ID2D1RenderTarget*, D2D_SIZE_F*))this->v->tbl[53])(this, &_return); return _return; }
static inline D2D_SIZE_U                        ID2D1RenderTarget_GetPixelSize                               (ID2D1RenderTarget* this) { D2D_SIZE_U _return; ((void (WINAPI*)(ID2D1RenderTarget*, D2D_SIZE_U*))this->v->tbl[54])(this, &_return); return _return; }
static inline UINT32                            ID2D1RenderTarget_GetMaximumBitmapSize                       (ID2D1RenderTarget* this) { return ((UINT32 (WINAPI*)(ID2D1RenderTarget*))this->v->tbl[55])(this); }
static inline BOOL                              ID2D1RenderTarget_IsSupported                                (ID2D1RenderTarget* this, const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties) { return ((BOOL (WINAPI*)(ID2D1RenderTarget*, const D2D1_RENDER_TARGET_PROPERTIES*))this->v->tbl[56])(this, renderTargetProperties); }

static inline HRESULT                           ID2D1Resource_QueryInterface                                 (ID2D1Resource* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1Resource*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1Resource_AddRef                                         (ID2D1Resource* this) { return ((UINT32 (WINAPI*)(ID2D1Resource*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1Resource_Release                                        (ID2D1Resource* this) { return ((UINT32 (WINAPI*)(ID2D1Resource*))this->v->tbl[2])(this); }
static inline void                              ID2D1Resource_GetFactory                                     (ID2D1Resource* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1Resource*, ID2D1Factory**))this->v->tbl[3])(this, factory); }

static inline HRESULT                           ID2D1ResourceTexture_QueryInterface                          (ID2D1ResourceTexture* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1ResourceTexture*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1ResourceTexture_AddRef                                  (ID2D1ResourceTexture* this) { return ((UINT32 (WINAPI*)(ID2D1ResourceTexture*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1ResourceTexture_Release                                 (ID2D1ResourceTexture* this) { return ((UINT32 (WINAPI*)(ID2D1ResourceTexture*))this->v->tbl[2])(this); }
static inline HRESULT                           ID2D1ResourceTexture_Update                                  (ID2D1ResourceTexture* this, const UINT32* minimumExtents, const UINT32* maximimumExtents, const UINT32* strides, UINT32 dimensions, const UINT8* data, UINT32 dataCount) { return ((HRESULT (WINAPI*)(ID2D1ResourceTexture*, const UINT32*, const UINT32*, const UINT32*, UINT32, const UINT8*, UINT32))this->v->tbl[3])(this, minimumExtents, maximimumExtents, strides, dimensions, data, dataCount); }

static inline HRESULT                           ID2D1RoundedRectangleGeometry_QueryInterface                 (ID2D1RoundedRectangleGeometry* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1RoundedRectangleGeometry*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1RoundedRectangleGeometry_AddRef                         (ID2D1RoundedRectangleGeometry* this) { return ((UINT32 (WINAPI*)(ID2D1RoundedRectangleGeometry*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1RoundedRectangleGeometry_Release                        (ID2D1RoundedRectangleGeometry* this) { return ((UINT32 (WINAPI*)(ID2D1RoundedRectangleGeometry*))this->v->tbl[2])(this); }
static inline void                              ID2D1RoundedRectangleGeometry_GetFactory                     (ID2D1RoundedRectangleGeometry* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1RoundedRectangleGeometry*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline HRESULT                           ID2D1RoundedRectangleGeometry_GetBounds                      (ID2D1RoundedRectangleGeometry* this, const D2D_MATRIX_3X2_F* worldTransform, D2D_RECT_F* bounds) { return ((HRESULT (WINAPI*)(ID2D1RoundedRectangleGeometry*, const D2D_MATRIX_3X2_F*, D2D_RECT_F*))this->v->tbl[4])(this, worldTransform, bounds); }
static inline HRESULT                           ID2D1RoundedRectangleGeometry_GetWidenedBounds               (ID2D1RoundedRectangleGeometry* this, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, D2D_RECT_F* bounds) { return ((HRESULT (WINAPI*)(ID2D1RoundedRectangleGeometry*, FLOAT, ID2D1StrokeStyle*, const D2D_MATRIX_3X2_F*, FLOAT, D2D_RECT_F*))this->v->tbl[5])(this, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, bounds); }
static inline HRESULT                           ID2D1RoundedRectangleGeometry_StrokeContainsPoint            (ID2D1RoundedRectangleGeometry* this, D2D_POINT_2F point, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, BOOL* contains) { return ((HRESULT (WINAPI*)(ID2D1RoundedRectangleGeometry*, D2D_POINT_2F, FLOAT, ID2D1StrokeStyle*, const D2D_MATRIX_3X2_F*, FLOAT, BOOL*))this->v->tbl[6])(this, point, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, contains); }
static inline HRESULT                           ID2D1RoundedRectangleGeometry_FillContainsPoint              (ID2D1RoundedRectangleGeometry* this, D2D_POINT_2F point, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, BOOL* contains) { return ((HRESULT (WINAPI*)(ID2D1RoundedRectangleGeometry*, D2D_POINT_2F, const D2D_MATRIX_3X2_F*, FLOAT, BOOL*))this->v->tbl[7])(this, point, worldTransform, flatteningTolerance, contains); }
static inline HRESULT                           ID2D1RoundedRectangleGeometry_CompareWithGeometry            (ID2D1RoundedRectangleGeometry* this, ID2D1Geometry* inputGeometry, const D2D_MATRIX_3X2_F* inputGeometryTransform, FLOAT flatteningTolerance, D2D1_GEOMETRY_RELATION* relation) { return ((HRESULT (WINAPI*)(ID2D1RoundedRectangleGeometry*, ID2D1Geometry*, const D2D_MATRIX_3X2_F*, FLOAT, D2D1_GEOMETRY_RELATION*))this->v->tbl[8])(this, inputGeometry, inputGeometryTransform, flatteningTolerance, relation); }
static inline HRESULT                           ID2D1RoundedRectangleGeometry_Simplify                       (ID2D1RoundedRectangleGeometry* this, D2D1_GEOMETRY_SIMPLIFICATION_OPTION simplificationOption, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, ID2D1SimplifiedGeometrySink* geometrySink) { return ((HRESULT (WINAPI*)(ID2D1RoundedRectangleGeometry*, D2D1_GEOMETRY_SIMPLIFICATION_OPTION, const D2D_MATRIX_3X2_F*, FLOAT, ID2D1SimplifiedGeometrySink*))this->v->tbl[9])(this, simplificationOption, worldTransform, flatteningTolerance, geometrySink); }
static inline HRESULT                           ID2D1RoundedRectangleGeometry_Tessellate                     (ID2D1RoundedRectangleGeometry* this, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, ID2D1TessellationSink* tessellationSink) { return ((HRESULT (WINAPI*)(ID2D1RoundedRectangleGeometry*, const D2D_MATRIX_3X2_F*, FLOAT, ID2D1TessellationSink*))this->v->tbl[10])(this, worldTransform, flatteningTolerance, tessellationSink); }
static inline HRESULT                           ID2D1RoundedRectangleGeometry_CombineWithGeometry            (ID2D1RoundedRectangleGeometry* this, ID2D1Geometry* inputGeometry, D2D1_COMBINE_MODE combineMode, const D2D_MATRIX_3X2_F* inputGeometryTransform, FLOAT flatteningTolerance, ID2D1SimplifiedGeometrySink* geometrySink) { return ((HRESULT (WINAPI*)(ID2D1RoundedRectangleGeometry*, ID2D1Geometry*, D2D1_COMBINE_MODE, const D2D_MATRIX_3X2_F*, FLOAT, ID2D1SimplifiedGeometrySink*))this->v->tbl[11])(this, inputGeometry, combineMode, inputGeometryTransform, flatteningTolerance, geometrySink); }
static inline HRESULT                           ID2D1RoundedRectangleGeometry_Outline                        (ID2D1RoundedRectangleGeometry* this, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, ID2D1SimplifiedGeometrySink* geometrySink) { return ((HRESULT (WINAPI*)(ID2D1RoundedRectangleGeometry*, const D2D_MATRIX_3X2_F*, FLOAT, ID2D1SimplifiedGeometrySink*))this->v->tbl[12])(this, worldTransform, flatteningTolerance, geometrySink); }
static inline HRESULT                           ID2D1RoundedRectangleGeometry_ComputeArea                    (ID2D1RoundedRectangleGeometry* this, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, FLOAT* area) { return ((HRESULT (WINAPI*)(ID2D1RoundedRectangleGeometry*, const D2D_MATRIX_3X2_F*, FLOAT, FLOAT*))this->v->tbl[13])(this, worldTransform, flatteningTolerance, area); }
static inline HRESULT                           ID2D1RoundedRectangleGeometry_ComputeLength                  (ID2D1RoundedRectangleGeometry* this, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, FLOAT* length) { return ((HRESULT (WINAPI*)(ID2D1RoundedRectangleGeometry*, const D2D_MATRIX_3X2_F*, FLOAT, FLOAT*))this->v->tbl[14])(this, worldTransform, flatteningTolerance, length); }
static inline HRESULT                           ID2D1RoundedRectangleGeometry_ComputePointAtLength           (ID2D1RoundedRectangleGeometry* this, FLOAT length, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, D2D_POINT_2F* point, D2D_POINT_2F* unitTangentVector) { return ((HRESULT (WINAPI*)(ID2D1RoundedRectangleGeometry*, FLOAT, const D2D_MATRIX_3X2_F*, FLOAT, D2D_POINT_2F*, D2D_POINT_2F*))this->v->tbl[15])(this, length, worldTransform, flatteningTolerance, point, unitTangentVector); }
static inline HRESULT                           ID2D1RoundedRectangleGeometry_Widen                          (ID2D1RoundedRectangleGeometry* this, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, ID2D1SimplifiedGeometrySink* geometrySink) { return ((HRESULT (WINAPI*)(ID2D1RoundedRectangleGeometry*, FLOAT, ID2D1StrokeStyle*, const D2D_MATRIX_3X2_F*, FLOAT, ID2D1SimplifiedGeometrySink*))this->v->tbl[16])(this, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, geometrySink); }
static inline void                              ID2D1RoundedRectangleGeometry_GetRoundedRect                 (ID2D1RoundedRectangleGeometry* this, D2D1_ROUNDED_RECT* roundedRect) { ((void (WINAPI*)(ID2D1RoundedRectangleGeometry*, D2D1_ROUNDED_RECT*))this->v->tbl[17])(this, roundedRect); }

static inline HRESULT                           ID2D1SimplifiedGeometrySink_QueryInterface                   (ID2D1SimplifiedGeometrySink* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1SimplifiedGeometrySink*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1SimplifiedGeometrySink_AddRef                           (ID2D1SimplifiedGeometrySink* this) { return ((UINT32 (WINAPI*)(ID2D1SimplifiedGeometrySink*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1SimplifiedGeometrySink_Release                          (ID2D1SimplifiedGeometrySink* this) { return ((UINT32 (WINAPI*)(ID2D1SimplifiedGeometrySink*))this->v->tbl[2])(this); }
static inline void                              ID2D1SimplifiedGeometrySink_SetFillMode                      (ID2D1SimplifiedGeometrySink* this, D2D1_FILL_MODE fillMode) { ((void (WINAPI*)(ID2D1SimplifiedGeometrySink*, D2D1_FILL_MODE))this->v->tbl[3])(this, fillMode); }
static inline void                              ID2D1SimplifiedGeometrySink_SetSegmentFlags                  (ID2D1SimplifiedGeometrySink* this, D2D1_PATH_SEGMENT vertexFlags) { ((void (WINAPI*)(ID2D1SimplifiedGeometrySink*, D2D1_PATH_SEGMENT))this->v->tbl[4])(this, vertexFlags); }
static inline void                              ID2D1SimplifiedGeometrySink_BeginFigure                      (ID2D1SimplifiedGeometrySink* this, D2D_POINT_2F startPoint, D2D1_FIGURE_BEGIN figureBegin) { ((void (WINAPI*)(ID2D1SimplifiedGeometrySink*, D2D_POINT_2F, D2D1_FIGURE_BEGIN))this->v->tbl[5])(this, startPoint, figureBegin); }
static inline void                              ID2D1SimplifiedGeometrySink_AddLines                         (ID2D1SimplifiedGeometrySink* this, const D2D_POINT_2F* points, UINT32 pointsCount) { ((void (WINAPI*)(ID2D1SimplifiedGeometrySink*, const D2D_POINT_2F*, UINT32))this->v->tbl[6])(this, points, pointsCount); }
static inline void                              ID2D1SimplifiedGeometrySink_AddBeziers                       (ID2D1SimplifiedGeometrySink* this, const D2D1_BEZIER_SEGMENT* beziers, UINT32 beziersCount) { ((void (WINAPI*)(ID2D1SimplifiedGeometrySink*, const D2D1_BEZIER_SEGMENT*, UINT32))this->v->tbl[7])(this, beziers, beziersCount); }
static inline void                              ID2D1SimplifiedGeometrySink_EndFigure                        (ID2D1SimplifiedGeometrySink* this, D2D1_FIGURE_END figureEnd) { ((void (WINAPI*)(ID2D1SimplifiedGeometrySink*, D2D1_FIGURE_END))this->v->tbl[8])(this, figureEnd); }
static inline HRESULT                           ID2D1SimplifiedGeometrySink_Close                            (ID2D1SimplifiedGeometrySink* this) { return ((HRESULT (WINAPI*)(ID2D1SimplifiedGeometrySink*))this->v->tbl[9])(this); }

static inline HRESULT                           ID2D1SolidColorBrush_QueryInterface                          (ID2D1SolidColorBrush* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1SolidColorBrush*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1SolidColorBrush_AddRef                                  (ID2D1SolidColorBrush* this) { return ((UINT32 (WINAPI*)(ID2D1SolidColorBrush*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1SolidColorBrush_Release                                 (ID2D1SolidColorBrush* this) { return ((UINT32 (WINAPI*)(ID2D1SolidColorBrush*))this->v->tbl[2])(this); }
static inline void                              ID2D1SolidColorBrush_GetFactory                              (ID2D1SolidColorBrush* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1SolidColorBrush*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline void                              ID2D1SolidColorBrush_SetOpacity                              (ID2D1SolidColorBrush* this, FLOAT opacity) { ((void (WINAPI*)(ID2D1SolidColorBrush*, FLOAT))this->v->tbl[4])(this, opacity); }
static inline void                              ID2D1SolidColorBrush_SetTransform                            (ID2D1SolidColorBrush* this, const D2D_MATRIX_3X2_F* transform) { ((void (WINAPI*)(ID2D1SolidColorBrush*, const D2D_MATRIX_3X2_F*))this->v->tbl[5])(this, transform); }
static inline FLOAT                             ID2D1SolidColorBrush_GetOpacity                              (ID2D1SolidColorBrush* this) { return ((FLOAT (WINAPI*)(ID2D1SolidColorBrush*))this->v->tbl[6])(this); }
static inline void                              ID2D1SolidColorBrush_GetTransform                            (ID2D1SolidColorBrush* this, D2D_MATRIX_3X2_F* transform) { ((void (WINAPI*)(ID2D1SolidColorBrush*, D2D_MATRIX_3X2_F*))this->v->tbl[7])(this, transform); }
static inline void                              ID2D1SolidColorBrush_SetColor                                (ID2D1SolidColorBrush* this, const D2D1_COLOR_F* color) { ((void (WINAPI*)(ID2D1SolidColorBrush*, const D2D1_COLOR_F*))this->v->tbl[8])(this, color); }
static inline D2D1_COLOR_F                      ID2D1SolidColorBrush_GetColor                                (ID2D1SolidColorBrush* this) { D2D1_COLOR_F _return; ((void (WINAPI*)(ID2D1SolidColorBrush*, D2D1_COLOR_F*))this->v->tbl[9])(this, &_return); return _return; }

static inline HRESULT                           ID2D1SourceTransform_QueryInterface                          (ID2D1SourceTransform* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1SourceTransform*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1SourceTransform_AddRef                                  (ID2D1SourceTransform* this) { return ((UINT32 (WINAPI*)(ID2D1SourceTransform*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1SourceTransform_Release                                 (ID2D1SourceTransform* this) { return ((UINT32 (WINAPI*)(ID2D1SourceTransform*))this->v->tbl[2])(this); }
static inline UINT32                            ID2D1SourceTransform_GetInputCount                           (ID2D1SourceTransform* this) { return ((UINT32 (WINAPI*)(ID2D1SourceTransform*))this->v->tbl[3])(this); }
static inline HRESULT                           ID2D1SourceTransform_MapOutputRectToInputRects               (ID2D1SourceTransform* this, const RECT* outputRect, RECT* inputRects, UINT32 inputRectsCount) { return ((HRESULT (WINAPI*)(ID2D1SourceTransform*, const RECT*, RECT*, UINT32))this->v->tbl[4])(this, outputRect, inputRects, inputRectsCount); }
static inline HRESULT                           ID2D1SourceTransform_MapInputRectsToOutputRect               (ID2D1SourceTransform* this, const RECT* inputRects, const RECT* inputOpaqueSubRects, UINT32 inputRectCount, RECT* outputRect, RECT* outputOpaqueSubRect) { return ((HRESULT (WINAPI*)(ID2D1SourceTransform*, const RECT*, const RECT*, UINT32, RECT*, RECT*))this->v->tbl[5])(this, inputRects, inputOpaqueSubRects, inputRectCount, outputRect, outputOpaqueSubRect); }
static inline HRESULT                           ID2D1SourceTransform_MapInvalidRect                          (ID2D1SourceTransform* this, UINT32 inputIndex, RECT invalidInputRect, RECT* invalidOutputRect) { return ((HRESULT (WINAPI*)(ID2D1SourceTransform*, UINT32, RECT, RECT*))this->v->tbl[6])(this, inputIndex, invalidInputRect, invalidOutputRect); }
static inline HRESULT                           ID2D1SourceTransform_SetRenderInfo                           (ID2D1SourceTransform* this, ID2D1RenderInfo* renderInfo) { return ((HRESULT (WINAPI*)(ID2D1SourceTransform*, ID2D1RenderInfo*))this->v->tbl[7])(this, renderInfo); }
static inline HRESULT                           ID2D1SourceTransform_Draw                                    (ID2D1SourceTransform* this, ID2D1Bitmap1* target, const RECT* drawRect, D2D_POINT_2U targetOrigin) { return ((HRESULT (WINAPI*)(ID2D1SourceTransform*, ID2D1Bitmap1*, const RECT*, D2D_POINT_2U))this->v->tbl[8])(this, target, drawRect, targetOrigin); }

static inline HRESULT                           ID2D1SpriteBatch_QueryInterface                              (ID2D1SpriteBatch* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1SpriteBatch*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1SpriteBatch_AddRef                                      (ID2D1SpriteBatch* this) { return ((UINT32 (WINAPI*)(ID2D1SpriteBatch*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1SpriteBatch_Release                                     (ID2D1SpriteBatch* this) { return ((UINT32 (WINAPI*)(ID2D1SpriteBatch*))this->v->tbl[2])(this); }
static inline void                              ID2D1SpriteBatch_GetFactory                                  (ID2D1SpriteBatch* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1SpriteBatch*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline HRESULT                           ID2D1SpriteBatch_AddSprites                                  (ID2D1SpriteBatch* this, UINT32 spriteCount, const D2D_RECT_F* destinationRectangles, const D2D_RECT_U* sourceRectangles, const D2D1_COLOR_F* colors, const D2D_MATRIX_3X2_F* transforms, UINT32 destinationRectanglesStride, UINT32 sourceRectanglesStride, UINT32 colorsStride, UINT32 transformsStride) { return ((HRESULT (WINAPI*)(ID2D1SpriteBatch*, UINT32, const D2D_RECT_F*, const D2D_RECT_U*, const D2D1_COLOR_F*, const D2D_MATRIX_3X2_F*, UINT32, UINT32, UINT32, UINT32))this->v->tbl[4])(this, spriteCount, destinationRectangles, sourceRectangles, colors, transforms, destinationRectanglesStride, sourceRectanglesStride, colorsStride, transformsStride); }
static inline HRESULT                           ID2D1SpriteBatch_SetSprites                                  (ID2D1SpriteBatch* this, UINT32 startIndex, UINT32 spriteCount, const D2D_RECT_F* destinationRectangles, const D2D_RECT_U* sourceRectangles, const D2D1_COLOR_F* colors, const D2D_MATRIX_3X2_F* transforms, UINT32 destinationRectanglesStride, UINT32 sourceRectanglesStride, UINT32 colorsStride, UINT32 transformsStride) { return ((HRESULT (WINAPI*)(ID2D1SpriteBatch*, UINT32, UINT32, const D2D_RECT_F*, const D2D_RECT_U*, const D2D1_COLOR_F*, const D2D_MATRIX_3X2_F*, UINT32, UINT32, UINT32, UINT32))this->v->tbl[5])(this, startIndex, spriteCount, destinationRectangles, sourceRectangles, colors, transforms, destinationRectanglesStride, sourceRectanglesStride, colorsStride, transformsStride); }
static inline HRESULT                           ID2D1SpriteBatch_GetSprites                                  (ID2D1SpriteBatch* this, UINT32 startIndex, UINT32 spriteCount, D2D_RECT_F* destinationRectangles, D2D_RECT_U* sourceRectangles, D2D1_COLOR_F* colors, D2D_MATRIX_3X2_F* transforms) { return ((HRESULT (WINAPI*)(ID2D1SpriteBatch*, UINT32, UINT32, D2D_RECT_F*, D2D_RECT_U*, D2D1_COLOR_F*, D2D_MATRIX_3X2_F*))this->v->tbl[6])(this, startIndex, spriteCount, destinationRectangles, sourceRectangles, colors, transforms); }
static inline UINT32                            ID2D1SpriteBatch_GetSpriteCount                              (ID2D1SpriteBatch* this) { return ((UINT32 (WINAPI*)(ID2D1SpriteBatch*))this->v->tbl[7])(this); }
static inline void                              ID2D1SpriteBatch_Clear                                       (ID2D1SpriteBatch* this) { ((void (WINAPI*)(ID2D1SpriteBatch*))this->v->tbl[8])(this); }

static inline HRESULT                           ID2D1StrokeStyle_QueryInterface                              (ID2D1StrokeStyle* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1StrokeStyle*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1StrokeStyle_AddRef                                      (ID2D1StrokeStyle* this) { return ((UINT32 (WINAPI*)(ID2D1StrokeStyle*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1StrokeStyle_Release                                     (ID2D1StrokeStyle* this) { return ((UINT32 (WINAPI*)(ID2D1StrokeStyle*))this->v->tbl[2])(this); }
static inline void                              ID2D1StrokeStyle_GetFactory                                  (ID2D1StrokeStyle* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1StrokeStyle*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline D2D1_CAP_STYLE                    ID2D1StrokeStyle_GetStartCap                                 (ID2D1StrokeStyle* this) { return ((D2D1_CAP_STYLE (WINAPI*)(ID2D1StrokeStyle*))this->v->tbl[4])(this); }
static inline D2D1_CAP_STYLE                    ID2D1StrokeStyle_GetEndCap                                   (ID2D1StrokeStyle* this) { return ((D2D1_CAP_STYLE (WINAPI*)(ID2D1StrokeStyle*))this->v->tbl[5])(this); }
static inline D2D1_CAP_STYLE                    ID2D1StrokeStyle_GetDashCap                                  (ID2D1StrokeStyle* this) { return ((D2D1_CAP_STYLE (WINAPI*)(ID2D1StrokeStyle*))this->v->tbl[6])(this); }
static inline FLOAT                             ID2D1StrokeStyle_GetMiterLimit                               (ID2D1StrokeStyle* this) { return ((FLOAT (WINAPI*)(ID2D1StrokeStyle*))this->v->tbl[7])(this); }
static inline D2D1_LINE_JOIN                    ID2D1StrokeStyle_GetLineJoin                                 (ID2D1StrokeStyle* this) { return ((D2D1_LINE_JOIN (WINAPI*)(ID2D1StrokeStyle*))this->v->tbl[8])(this); }
static inline FLOAT                             ID2D1StrokeStyle_GetDashOffset                               (ID2D1StrokeStyle* this) { return ((FLOAT (WINAPI*)(ID2D1StrokeStyle*))this->v->tbl[9])(this); }
static inline D2D1_DASH_STYLE                   ID2D1StrokeStyle_GetDashStyle                                (ID2D1StrokeStyle* this) { return ((D2D1_DASH_STYLE (WINAPI*)(ID2D1StrokeStyle*))this->v->tbl[10])(this); }
static inline UINT32                            ID2D1StrokeStyle_GetDashesCount                              (ID2D1StrokeStyle* this) { return ((UINT32 (WINAPI*)(ID2D1StrokeStyle*))this->v->tbl[11])(this); }
static inline void                              ID2D1StrokeStyle_GetDashes                                   (ID2D1StrokeStyle* this, FLOAT* dashes, UINT32 dashesCount) { ((void (WINAPI*)(ID2D1StrokeStyle*, FLOAT*, UINT32))this->v->tbl[12])(this, dashes, dashesCount); }

static inline HRESULT                           ID2D1StrokeStyle1_QueryInterface                             (ID2D1StrokeStyle1* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1StrokeStyle1*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1StrokeStyle1_AddRef                                     (ID2D1StrokeStyle1* this) { return ((UINT32 (WINAPI*)(ID2D1StrokeStyle1*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1StrokeStyle1_Release                                    (ID2D1StrokeStyle1* this) { return ((UINT32 (WINAPI*)(ID2D1StrokeStyle1*))this->v->tbl[2])(this); }
static inline void                              ID2D1StrokeStyle1_GetFactory                                 (ID2D1StrokeStyle1* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1StrokeStyle1*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline D2D1_CAP_STYLE                    ID2D1StrokeStyle1_GetStartCap                                (ID2D1StrokeStyle1* this) { return ((D2D1_CAP_STYLE (WINAPI*)(ID2D1StrokeStyle1*))this->v->tbl[4])(this); }
static inline D2D1_CAP_STYLE                    ID2D1StrokeStyle1_GetEndCap                                  (ID2D1StrokeStyle1* this) { return ((D2D1_CAP_STYLE (WINAPI*)(ID2D1StrokeStyle1*))this->v->tbl[5])(this); }
static inline D2D1_CAP_STYLE                    ID2D1StrokeStyle1_GetDashCap                                 (ID2D1StrokeStyle1* this) { return ((D2D1_CAP_STYLE (WINAPI*)(ID2D1StrokeStyle1*))this->v->tbl[6])(this); }
static inline FLOAT                             ID2D1StrokeStyle1_GetMiterLimit                              (ID2D1StrokeStyle1* this) { return ((FLOAT (WINAPI*)(ID2D1StrokeStyle1*))this->v->tbl[7])(this); }
static inline D2D1_LINE_JOIN                    ID2D1StrokeStyle1_GetLineJoin                                (ID2D1StrokeStyle1* this) { return ((D2D1_LINE_JOIN (WINAPI*)(ID2D1StrokeStyle1*))this->v->tbl[8])(this); }
static inline FLOAT                             ID2D1StrokeStyle1_GetDashOffset                              (ID2D1StrokeStyle1* this) { return ((FLOAT (WINAPI*)(ID2D1StrokeStyle1*))this->v->tbl[9])(this); }
static inline D2D1_DASH_STYLE                   ID2D1StrokeStyle1_GetDashStyle                               (ID2D1StrokeStyle1* this) { return ((D2D1_DASH_STYLE (WINAPI*)(ID2D1StrokeStyle1*))this->v->tbl[10])(this); }
static inline UINT32                            ID2D1StrokeStyle1_GetDashesCount                             (ID2D1StrokeStyle1* this) { return ((UINT32 (WINAPI*)(ID2D1StrokeStyle1*))this->v->tbl[11])(this); }
static inline void                              ID2D1StrokeStyle1_GetDashes                                  (ID2D1StrokeStyle1* this, FLOAT* dashes, UINT32 dashesCount) { ((void (WINAPI*)(ID2D1StrokeStyle1*, FLOAT*, UINT32))this->v->tbl[12])(this, dashes, dashesCount); }
static inline D2D1_STROKE_TRANSFORM_TYPE        ID2D1StrokeStyle1_GetStrokeTransformType                     (ID2D1StrokeStyle1* this) { return ((D2D1_STROKE_TRANSFORM_TYPE (WINAPI*)(ID2D1StrokeStyle1*))this->v->tbl[13])(this); }

static inline HRESULT                           ID2D1SvgAttribute_QueryInterface                             (ID2D1SvgAttribute* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1SvgAttribute*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1SvgAttribute_AddRef                                     (ID2D1SvgAttribute* this) { return ((UINT32 (WINAPI*)(ID2D1SvgAttribute*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1SvgAttribute_Release                                    (ID2D1SvgAttribute* this) { return ((UINT32 (WINAPI*)(ID2D1SvgAttribute*))this->v->tbl[2])(this); }
static inline void                              ID2D1SvgAttribute_GetFactory                                 (ID2D1SvgAttribute* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1SvgAttribute*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline void                              ID2D1SvgAttribute_GetElement                                 (ID2D1SvgAttribute* this, ID2D1SvgElement** element) { ((void (WINAPI*)(ID2D1SvgAttribute*, ID2D1SvgElement**))this->v->tbl[4])(this, element); }
static inline HRESULT                           ID2D1SvgAttribute_Clone                                      (ID2D1SvgAttribute* this, ID2D1SvgAttribute** attribute) { return ((HRESULT (WINAPI*)(ID2D1SvgAttribute*, ID2D1SvgAttribute**))this->v->tbl[5])(this, attribute); }

static inline HRESULT                           ID2D1SvgDocument_QueryInterface                              (ID2D1SvgDocument* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1SvgDocument*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1SvgDocument_AddRef                                      (ID2D1SvgDocument* this) { return ((UINT32 (WINAPI*)(ID2D1SvgDocument*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1SvgDocument_Release                                     (ID2D1SvgDocument* this) { return ((UINT32 (WINAPI*)(ID2D1SvgDocument*))this->v->tbl[2])(this); }
static inline void                              ID2D1SvgDocument_GetFactory                                  (ID2D1SvgDocument* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1SvgDocument*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline HRESULT                           ID2D1SvgDocument_SetViewportSize                             (ID2D1SvgDocument* this, D2D_SIZE_F viewportSize) { return ((HRESULT (WINAPI*)(ID2D1SvgDocument*, D2D_SIZE_F))this->v->tbl[4])(this, viewportSize); }
static inline D2D_SIZE_F                        ID2D1SvgDocument_GetViewportSize                             (ID2D1SvgDocument* this) { D2D_SIZE_F _return; ((void (WINAPI*)(ID2D1SvgDocument*, D2D_SIZE_F*))this->v->tbl[5])(this, &_return); return _return; }
static inline HRESULT                           ID2D1SvgDocument_SetRoot                                     (ID2D1SvgDocument* this, ID2D1SvgElement* root) { return ((HRESULT (WINAPI*)(ID2D1SvgDocument*, ID2D1SvgElement*))this->v->tbl[6])(this, root); }
static inline void                              ID2D1SvgDocument_GetRoot                                     (ID2D1SvgDocument* this, ID2D1SvgElement** root) { ((void (WINAPI*)(ID2D1SvgDocument*, ID2D1SvgElement**))this->v->tbl[7])(this, root); }
static inline HRESULT                           ID2D1SvgDocument_FindElementById                             (ID2D1SvgDocument* this, const WCHAR* id, ID2D1SvgElement** svgElement) { return ((HRESULT (WINAPI*)(ID2D1SvgDocument*, const WCHAR*, ID2D1SvgElement**))this->v->tbl[8])(this, id, svgElement); }
static inline HRESULT                           ID2D1SvgDocument_Serialize                                   (ID2D1SvgDocument* this, IStream* outputXmlStream, ID2D1SvgElement* subtree) { return ((HRESULT (WINAPI*)(ID2D1SvgDocument*, IStream*, ID2D1SvgElement*))this->v->tbl[9])(this, outputXmlStream, subtree); }
static inline HRESULT                           ID2D1SvgDocument_Deserialize                                 (ID2D1SvgDocument* this, IStream* inputXmlStream, ID2D1SvgElement** subtree) { return ((HRESULT (WINAPI*)(ID2D1SvgDocument*, IStream*, ID2D1SvgElement**))this->v->tbl[10])(this, inputXmlStream, subtree); }
static inline HRESULT                           ID2D1SvgDocument_CreatePaint                                 (ID2D1SvgDocument* this, D2D1_SVG_PAINT_TYPE paintType, const D2D1_COLOR_F* color, const WCHAR* id, ID2D1SvgPaint** paint) { return ((HRESULT (WINAPI*)(ID2D1SvgDocument*, D2D1_SVG_PAINT_TYPE, const D2D1_COLOR_F*, const WCHAR*, ID2D1SvgPaint**))this->v->tbl[11])(this, paintType, color, id, paint); }
static inline HRESULT                           ID2D1SvgDocument_CreateStrokeDashArray                       (ID2D1SvgDocument* this, const D2D1_SVG_LENGTH* dashes, UINT32 dashesCount, ID2D1SvgStrokeDashArray** strokeDashArray) { return ((HRESULT (WINAPI*)(ID2D1SvgDocument*, const D2D1_SVG_LENGTH*, UINT32, ID2D1SvgStrokeDashArray**))this->v->tbl[12])(this, dashes, dashesCount, strokeDashArray); }
static inline HRESULT                           ID2D1SvgDocument_CreatePointCollection                       (ID2D1SvgDocument* this, const D2D_POINT_2F* points, UINT32 pointsCount, ID2D1SvgPointCollection** pointCollection) { return ((HRESULT (WINAPI*)(ID2D1SvgDocument*, const D2D_POINT_2F*, UINT32, ID2D1SvgPointCollection**))this->v->tbl[13])(this, points, pointsCount, pointCollection); }
static inline HRESULT                           ID2D1SvgDocument_CreatePathData                              (ID2D1SvgDocument* this, const FLOAT* segmentData, UINT32 segmentDataCount, const D2D1_SVG_PATH_COMMAND* commands, UINT32 commandsCount, ID2D1SvgPathData** pathData) { return ((HRESULT (WINAPI*)(ID2D1SvgDocument*, const FLOAT*, UINT32, const D2D1_SVG_PATH_COMMAND*, UINT32, ID2D1SvgPathData**))this->v->tbl[14])(this, segmentData, segmentDataCount, commands, commandsCount, pathData); }

static inline HRESULT                           ID2D1SvgElement_QueryInterface                               (ID2D1SvgElement* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1SvgElement*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1SvgElement_AddRef                                       (ID2D1SvgElement* this) { return ((UINT32 (WINAPI*)(ID2D1SvgElement*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1SvgElement_Release                                      (ID2D1SvgElement* this) { return ((UINT32 (WINAPI*)(ID2D1SvgElement*))this->v->tbl[2])(this); }
static inline void                              ID2D1SvgElement_GetFactory                                   (ID2D1SvgElement* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1SvgElement*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline void                              ID2D1SvgElement_GetDocument                                  (ID2D1SvgElement* this, ID2D1SvgDocument** document) { ((void (WINAPI*)(ID2D1SvgElement*, ID2D1SvgDocument**))this->v->tbl[4])(this, document); }
static inline HRESULT                           ID2D1SvgElement_GetTagName                                   (ID2D1SvgElement* this, WCHAR* name, UINT32 nameCount) { return ((HRESULT (WINAPI*)(ID2D1SvgElement*, WCHAR*, UINT32))this->v->tbl[5])(this, name, nameCount); }
static inline UINT32                            ID2D1SvgElement_GetTagNameLength                             (ID2D1SvgElement* this) { return ((UINT32 (WINAPI*)(ID2D1SvgElement*))this->v->tbl[6])(this); }
static inline BOOL                              ID2D1SvgElement_IsTextContent                                (ID2D1SvgElement* this) { return ((BOOL (WINAPI*)(ID2D1SvgElement*))this->v->tbl[7])(this); }
static inline void                              ID2D1SvgElement_GetParent                                    (ID2D1SvgElement* this, ID2D1SvgElement** parent) { ((void (WINAPI*)(ID2D1SvgElement*, ID2D1SvgElement**))this->v->tbl[8])(this, parent); }
static inline BOOL                              ID2D1SvgElement_HasChildren                                  (ID2D1SvgElement* this) { return ((BOOL (WINAPI*)(ID2D1SvgElement*))this->v->tbl[9])(this); }
static inline void                              ID2D1SvgElement_GetFirstChild                                (ID2D1SvgElement* this, ID2D1SvgElement** child) { ((void (WINAPI*)(ID2D1SvgElement*, ID2D1SvgElement**))this->v->tbl[10])(this, child); }
static inline void                              ID2D1SvgElement_GetLastChild                                 (ID2D1SvgElement* this, ID2D1SvgElement** child) { ((void (WINAPI*)(ID2D1SvgElement*, ID2D1SvgElement**))this->v->tbl[11])(this, child); }
static inline HRESULT                           ID2D1SvgElement_GetPreviousChild                             (ID2D1SvgElement* this, ID2D1SvgElement* referenceChild, ID2D1SvgElement** previousChild) { return ((HRESULT (WINAPI*)(ID2D1SvgElement*, ID2D1SvgElement*, ID2D1SvgElement**))this->v->tbl[12])(this, referenceChild, previousChild); }
static inline HRESULT                           ID2D1SvgElement_GetNextChild                                 (ID2D1SvgElement* this, ID2D1SvgElement* referenceChild, ID2D1SvgElement** nextChild) { return ((HRESULT (WINAPI*)(ID2D1SvgElement*, ID2D1SvgElement*, ID2D1SvgElement**))this->v->tbl[13])(this, referenceChild, nextChild); }
static inline HRESULT                           ID2D1SvgElement_InsertChildBefore                            (ID2D1SvgElement* this, ID2D1SvgElement* newChild, ID2D1SvgElement* referenceChild) { return ((HRESULT (WINAPI*)(ID2D1SvgElement*, ID2D1SvgElement*, ID2D1SvgElement*))this->v->tbl[14])(this, newChild, referenceChild); }
static inline HRESULT                           ID2D1SvgElement_AppendChild                                  (ID2D1SvgElement* this, ID2D1SvgElement* newChild) { return ((HRESULT (WINAPI*)(ID2D1SvgElement*, ID2D1SvgElement*))this->v->tbl[15])(this, newChild); }
static inline HRESULT                           ID2D1SvgElement_ReplaceChild                                 (ID2D1SvgElement* this, ID2D1SvgElement* newChild, ID2D1SvgElement* oldChild) { return ((HRESULT (WINAPI*)(ID2D1SvgElement*, ID2D1SvgElement*, ID2D1SvgElement*))this->v->tbl[16])(this, newChild, oldChild); }
static inline HRESULT                           ID2D1SvgElement_RemoveChild                                  (ID2D1SvgElement* this, ID2D1SvgElement* oldChild) { return ((HRESULT (WINAPI*)(ID2D1SvgElement*, ID2D1SvgElement*))this->v->tbl[17])(this, oldChild); }
static inline HRESULT                           ID2D1SvgElement_CreateChild                                  (ID2D1SvgElement* this, const WCHAR* tagName, ID2D1SvgElement** newChild) { return ((HRESULT (WINAPI*)(ID2D1SvgElement*, const WCHAR*, ID2D1SvgElement**))this->v->tbl[18])(this, tagName, newChild); }
static inline BOOL                              ID2D1SvgElement_IsAttributeSpecified                         (ID2D1SvgElement* this, const WCHAR* name, BOOL* inherited) { return ((BOOL (WINAPI*)(ID2D1SvgElement*, const WCHAR*, BOOL*))this->v->tbl[19])(this, name, inherited); }
static inline UINT32                            ID2D1SvgElement_GetSpecifiedAttributeCount                   (ID2D1SvgElement* this) { return ((UINT32 (WINAPI*)(ID2D1SvgElement*))this->v->tbl[20])(this); }
static inline HRESULT                           ID2D1SvgElement_GetSpecifiedAttributeName                    (ID2D1SvgElement* this, UINT32 index, WCHAR* name, UINT32 nameCount, BOOL* inherited) { return ((HRESULT (WINAPI*)(ID2D1SvgElement*, UINT32, WCHAR*, UINT32, BOOL*))this->v->tbl[21])(this, index, name, nameCount, inherited); }
static inline HRESULT                           ID2D1SvgElement_GetSpecifiedAttributeNameLength              (ID2D1SvgElement* this, UINT32 index, UINT32* nameLength, BOOL* inherited) { return ((HRESULT (WINAPI*)(ID2D1SvgElement*, UINT32, UINT32*, BOOL*))this->v->tbl[22])(this, index, nameLength, inherited); }
static inline HRESULT                           ID2D1SvgElement_RemoveAttribute                              (ID2D1SvgElement* this, const WCHAR* name) { return ((HRESULT (WINAPI*)(ID2D1SvgElement*, const WCHAR*))this->v->tbl[23])(this, name); }
static inline HRESULT                           ID2D1SvgElement_SetTextValue                                 (ID2D1SvgElement* this, const WCHAR* name, UINT32 nameCount) { return ((HRESULT (WINAPI*)(ID2D1SvgElement*, const WCHAR*, UINT32))this->v->tbl[24])(this, name, nameCount); }
static inline HRESULT                           ID2D1SvgElement_GetTextValue                                 (ID2D1SvgElement* this, WCHAR* name, UINT32 nameCount) { return ((HRESULT (WINAPI*)(ID2D1SvgElement*, WCHAR*, UINT32))this->v->tbl[25])(this, name, nameCount); }
static inline UINT32                            ID2D1SvgElement_GetTextValueLength                           (ID2D1SvgElement* this) { return ((UINT32 (WINAPI*)(ID2D1SvgElement*))this->v->tbl[26])(this); }
static inline HRESULT                           ID2D1SvgElement_SetAttributeValue                            (ID2D1SvgElement* this, const WCHAR* name, ID2D1SvgAttribute* value) { return ((HRESULT (WINAPI*)(ID2D1SvgElement*, const WCHAR*, ID2D1SvgAttribute*))this->v->tbl[27])(this, name, value); }
static inline HRESULT                           ID2D1SvgElement_SetAttributeValue1                           (ID2D1SvgElement* this, const WCHAR* name, D2D1_SVG_ATTRIBUTE_POD_TYPE type, const void* value, UINT32 valueSizeInBytes) { return ((HRESULT (WINAPI*)(ID2D1SvgElement*, const WCHAR*, D2D1_SVG_ATTRIBUTE_POD_TYPE, const void*, UINT32))this->v->tbl[28])(this, name, type, value, valueSizeInBytes); }
static inline HRESULT                           ID2D1SvgElement_SetAttributeValue2                           (ID2D1SvgElement* this, const WCHAR* name, D2D1_SVG_ATTRIBUTE_STRING_TYPE type, const WCHAR* value) { return ((HRESULT (WINAPI*)(ID2D1SvgElement*, const WCHAR*, D2D1_SVG_ATTRIBUTE_STRING_TYPE, const WCHAR*))this->v->tbl[29])(this, name, type, value); }
static inline HRESULT                           ID2D1SvgElement_GetAttributeValue                            (ID2D1SvgElement* this, const WCHAR* name, const GUID* riid, void** value) { return ((HRESULT (WINAPI*)(ID2D1SvgElement*, const WCHAR*, const GUID*, void**))this->v->tbl[30])(this, name, riid, value); }
static inline HRESULT                           ID2D1SvgElement_GetAttributeValue1                           (ID2D1SvgElement* this, const WCHAR* name, D2D1_SVG_ATTRIBUTE_POD_TYPE type, void* value, UINT32 valueSizeInBytes) { return ((HRESULT (WINAPI*)(ID2D1SvgElement*, const WCHAR*, D2D1_SVG_ATTRIBUTE_POD_TYPE, void*, UINT32))this->v->tbl[31])(this, name, type, value, valueSizeInBytes); }
static inline HRESULT                           ID2D1SvgElement_GetAttributeValue2                           (ID2D1SvgElement* this, const WCHAR* name, D2D1_SVG_ATTRIBUTE_STRING_TYPE type, WCHAR* value, UINT32 valueCount) { return ((HRESULT (WINAPI*)(ID2D1SvgElement*, const WCHAR*, D2D1_SVG_ATTRIBUTE_STRING_TYPE, WCHAR*, UINT32))this->v->tbl[32])(this, name, type, value, valueCount); }
static inline HRESULT                           ID2D1SvgElement_GetAttributeValueLength                      (ID2D1SvgElement* this, const WCHAR* name, D2D1_SVG_ATTRIBUTE_STRING_TYPE type, UINT32* valueLength) { return ((HRESULT (WINAPI*)(ID2D1SvgElement*, const WCHAR*, D2D1_SVG_ATTRIBUTE_STRING_TYPE, UINT32*))this->v->tbl[33])(this, name, type, valueLength); }

static inline HRESULT                           ID2D1SvgGlyphStyle_QueryInterface                            (ID2D1SvgGlyphStyle* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1SvgGlyphStyle*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1SvgGlyphStyle_AddRef                                    (ID2D1SvgGlyphStyle* this) { return ((UINT32 (WINAPI*)(ID2D1SvgGlyphStyle*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1SvgGlyphStyle_Release                                   (ID2D1SvgGlyphStyle* this) { return ((UINT32 (WINAPI*)(ID2D1SvgGlyphStyle*))this->v->tbl[2])(this); }
static inline void                              ID2D1SvgGlyphStyle_GetFactory                                (ID2D1SvgGlyphStyle* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1SvgGlyphStyle*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline HRESULT                           ID2D1SvgGlyphStyle_SetFill                                   (ID2D1SvgGlyphStyle* this, ID2D1Brush* brush) { return ((HRESULT (WINAPI*)(ID2D1SvgGlyphStyle*, ID2D1Brush*))this->v->tbl[4])(this, brush); }
static inline void                              ID2D1SvgGlyphStyle_GetFill                                   (ID2D1SvgGlyphStyle* this, ID2D1Brush** brush) { ((void (WINAPI*)(ID2D1SvgGlyphStyle*, ID2D1Brush**))this->v->tbl[5])(this, brush); }
static inline HRESULT                           ID2D1SvgGlyphStyle_SetStroke                                 (ID2D1SvgGlyphStyle* this, ID2D1Brush* brush, FLOAT strokeWidth, const FLOAT* dashes, UINT32 dashesCount, FLOAT dashOffset) { return ((HRESULT (WINAPI*)(ID2D1SvgGlyphStyle*, ID2D1Brush*, FLOAT, const FLOAT*, UINT32, FLOAT))this->v->tbl[6])(this, brush, strokeWidth, dashes, dashesCount, dashOffset); }
static inline UINT32                            ID2D1SvgGlyphStyle_GetStrokeDashesCount                      (ID2D1SvgGlyphStyle* this) { return ((UINT32 (WINAPI*)(ID2D1SvgGlyphStyle*))this->v->tbl[7])(this); }
static inline void                              ID2D1SvgGlyphStyle_GetStroke                                 (ID2D1SvgGlyphStyle* this, ID2D1Brush** brush, FLOAT* strokeWidth, FLOAT* dashes, UINT32 dashesCount, FLOAT* dashOffset) { ((void (WINAPI*)(ID2D1SvgGlyphStyle*, ID2D1Brush**, FLOAT*, FLOAT*, UINT32, FLOAT*))this->v->tbl[8])(this, brush, strokeWidth, dashes, dashesCount, dashOffset); }

static inline HRESULT                           ID2D1SvgPaint_QueryInterface                                 (ID2D1SvgPaint* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1SvgPaint*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1SvgPaint_AddRef                                         (ID2D1SvgPaint* this) { return ((UINT32 (WINAPI*)(ID2D1SvgPaint*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1SvgPaint_Release                                        (ID2D1SvgPaint* this) { return ((UINT32 (WINAPI*)(ID2D1SvgPaint*))this->v->tbl[2])(this); }
static inline void                              ID2D1SvgPaint_GetFactory                                     (ID2D1SvgPaint* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1SvgPaint*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline void                              ID2D1SvgPaint_GetElement                                     (ID2D1SvgPaint* this, ID2D1SvgElement** element) { ((void (WINAPI*)(ID2D1SvgPaint*, ID2D1SvgElement**))this->v->tbl[4])(this, element); }
static inline HRESULT                           ID2D1SvgPaint_Clone                                          (ID2D1SvgPaint* this, ID2D1SvgAttribute** attribute) { return ((HRESULT (WINAPI*)(ID2D1SvgPaint*, ID2D1SvgAttribute**))this->v->tbl[5])(this, attribute); }
static inline HRESULT                           ID2D1SvgPaint_SetPaintType                                   (ID2D1SvgPaint* this, D2D1_SVG_PAINT_TYPE paintType) { return ((HRESULT (WINAPI*)(ID2D1SvgPaint*, D2D1_SVG_PAINT_TYPE))this->v->tbl[6])(this, paintType); }
static inline D2D1_SVG_PAINT_TYPE               ID2D1SvgPaint_GetPaintType                                   (ID2D1SvgPaint* this) { return ((D2D1_SVG_PAINT_TYPE (WINAPI*)(ID2D1SvgPaint*))this->v->tbl[7])(this); }
static inline HRESULT                           ID2D1SvgPaint_SetColor                                       (ID2D1SvgPaint* this, const D2D1_COLOR_F* color) { return ((HRESULT (WINAPI*)(ID2D1SvgPaint*, const D2D1_COLOR_F*))this->v->tbl[8])(this, color); }
static inline void                              ID2D1SvgPaint_GetColor                                       (ID2D1SvgPaint* this, D2D1_COLOR_F* color) { ((void (WINAPI*)(ID2D1SvgPaint*, D2D1_COLOR_F*))this->v->tbl[9])(this, color); }
static inline HRESULT                           ID2D1SvgPaint_SetId                                          (ID2D1SvgPaint* this, const WCHAR* id) { return ((HRESULT (WINAPI*)(ID2D1SvgPaint*, const WCHAR*))this->v->tbl[10])(this, id); }
static inline HRESULT                           ID2D1SvgPaint_GetId                                          (ID2D1SvgPaint* this, WCHAR* id, UINT32 idCount) { return ((HRESULT (WINAPI*)(ID2D1SvgPaint*, WCHAR*, UINT32))this->v->tbl[11])(this, id, idCount); }
static inline UINT32                            ID2D1SvgPaint_GetIdLength                                    (ID2D1SvgPaint* this) { return ((UINT32 (WINAPI*)(ID2D1SvgPaint*))this->v->tbl[12])(this); }

static inline HRESULT                           ID2D1SvgPathData_QueryInterface                              (ID2D1SvgPathData* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1SvgPathData*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1SvgPathData_AddRef                                      (ID2D1SvgPathData* this) { return ((UINT32 (WINAPI*)(ID2D1SvgPathData*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1SvgPathData_Release                                     (ID2D1SvgPathData* this) { return ((UINT32 (WINAPI*)(ID2D1SvgPathData*))this->v->tbl[2])(this); }
static inline void                              ID2D1SvgPathData_GetFactory                                  (ID2D1SvgPathData* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1SvgPathData*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline void                              ID2D1SvgPathData_GetElement                                  (ID2D1SvgPathData* this, ID2D1SvgElement** element) { ((void (WINAPI*)(ID2D1SvgPathData*, ID2D1SvgElement**))this->v->tbl[4])(this, element); }
static inline HRESULT                           ID2D1SvgPathData_Clone                                       (ID2D1SvgPathData* this, ID2D1SvgAttribute** attribute) { return ((HRESULT (WINAPI*)(ID2D1SvgPathData*, ID2D1SvgAttribute**))this->v->tbl[5])(this, attribute); }
static inline HRESULT                           ID2D1SvgPathData_RemoveSegmentDataAtEnd                      (ID2D1SvgPathData* this, UINT32 dataCount) { return ((HRESULT (WINAPI*)(ID2D1SvgPathData*, UINT32))this->v->tbl[6])(this, dataCount); }
static inline HRESULT                           ID2D1SvgPathData_UpdateSegmentData                           (ID2D1SvgPathData* this, const FLOAT* data, UINT32 dataCount, UINT32 startIndex) { return ((HRESULT (WINAPI*)(ID2D1SvgPathData*, const FLOAT*, UINT32, UINT32))this->v->tbl[7])(this, data, dataCount, startIndex); }
static inline HRESULT                           ID2D1SvgPathData_GetSegmentData                              (ID2D1SvgPathData* this, FLOAT* data, UINT32 dataCount, UINT32 startIndex) { return ((HRESULT (WINAPI*)(ID2D1SvgPathData*, FLOAT*, UINT32, UINT32))this->v->tbl[8])(this, data, dataCount, startIndex); }
static inline UINT32                            ID2D1SvgPathData_GetSegmentDataCount                         (ID2D1SvgPathData* this) { return ((UINT32 (WINAPI*)(ID2D1SvgPathData*))this->v->tbl[9])(this); }
static inline HRESULT                           ID2D1SvgPathData_RemoveCommandsAtEnd                         (ID2D1SvgPathData* this, UINT32 commandsCount) { return ((HRESULT (WINAPI*)(ID2D1SvgPathData*, UINT32))this->v->tbl[10])(this, commandsCount); }
static inline HRESULT                           ID2D1SvgPathData_UpdateCommands                              (ID2D1SvgPathData* this, const D2D1_SVG_PATH_COMMAND* commands, UINT32 commandsCount, UINT32 startIndex) { return ((HRESULT (WINAPI*)(ID2D1SvgPathData*, const D2D1_SVG_PATH_COMMAND*, UINT32, UINT32))this->v->tbl[11])(this, commands, commandsCount, startIndex); }
static inline HRESULT                           ID2D1SvgPathData_GetCommands                                 (ID2D1SvgPathData* this, D2D1_SVG_PATH_COMMAND* commands, UINT32 commandsCount, UINT32 startIndex) { return ((HRESULT (WINAPI*)(ID2D1SvgPathData*, D2D1_SVG_PATH_COMMAND*, UINT32, UINT32))this->v->tbl[12])(this, commands, commandsCount, startIndex); }
static inline UINT32                            ID2D1SvgPathData_GetCommandsCount                            (ID2D1SvgPathData* this) { return ((UINT32 (WINAPI*)(ID2D1SvgPathData*))this->v->tbl[13])(this); }
static inline HRESULT                           ID2D1SvgPathData_CreatePathGeometry                          (ID2D1SvgPathData* this, D2D1_FILL_MODE fillMode, ID2D1PathGeometry1** pathGeometry) { return ((HRESULT (WINAPI*)(ID2D1SvgPathData*, D2D1_FILL_MODE, ID2D1PathGeometry1**))this->v->tbl[14])(this, fillMode, pathGeometry); }

static inline HRESULT                           ID2D1SvgPointCollection_QueryInterface                       (ID2D1SvgPointCollection* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1SvgPointCollection*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1SvgPointCollection_AddRef                               (ID2D1SvgPointCollection* this) { return ((UINT32 (WINAPI*)(ID2D1SvgPointCollection*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1SvgPointCollection_Release                              (ID2D1SvgPointCollection* this) { return ((UINT32 (WINAPI*)(ID2D1SvgPointCollection*))this->v->tbl[2])(this); }
static inline void                              ID2D1SvgPointCollection_GetFactory                           (ID2D1SvgPointCollection* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1SvgPointCollection*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline void                              ID2D1SvgPointCollection_GetElement                           (ID2D1SvgPointCollection* this, ID2D1SvgElement** element) { ((void (WINAPI*)(ID2D1SvgPointCollection*, ID2D1SvgElement**))this->v->tbl[4])(this, element); }
static inline HRESULT                           ID2D1SvgPointCollection_Clone                                (ID2D1SvgPointCollection* this, ID2D1SvgAttribute** attribute) { return ((HRESULT (WINAPI*)(ID2D1SvgPointCollection*, ID2D1SvgAttribute**))this->v->tbl[5])(this, attribute); }
static inline HRESULT                           ID2D1SvgPointCollection_RemovePointsAtEnd                    (ID2D1SvgPointCollection* this, UINT32 pointsCount) { return ((HRESULT (WINAPI*)(ID2D1SvgPointCollection*, UINT32))this->v->tbl[6])(this, pointsCount); }
static inline HRESULT                           ID2D1SvgPointCollection_UpdatePoints                         (ID2D1SvgPointCollection* this, const D2D_POINT_2F* points, UINT32 pointsCount, UINT32 startIndex) { return ((HRESULT (WINAPI*)(ID2D1SvgPointCollection*, const D2D_POINT_2F*, UINT32, UINT32))this->v->tbl[7])(this, points, pointsCount, startIndex); }
static inline HRESULT                           ID2D1SvgPointCollection_GetPoints                            (ID2D1SvgPointCollection* this, D2D_POINT_2F* points, UINT32 pointsCount, UINT32 startIndex) { return ((HRESULT (WINAPI*)(ID2D1SvgPointCollection*, D2D_POINT_2F*, UINT32, UINT32))this->v->tbl[8])(this, points, pointsCount, startIndex); }
static inline UINT32                            ID2D1SvgPointCollection_GetPointsCount                       (ID2D1SvgPointCollection* this) { return ((UINT32 (WINAPI*)(ID2D1SvgPointCollection*))this->v->tbl[9])(this); }

static inline HRESULT                           ID2D1SvgStrokeDashArray_QueryInterface                       (ID2D1SvgStrokeDashArray* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1SvgStrokeDashArray*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1SvgStrokeDashArray_AddRef                               (ID2D1SvgStrokeDashArray* this) { return ((UINT32 (WINAPI*)(ID2D1SvgStrokeDashArray*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1SvgStrokeDashArray_Release                              (ID2D1SvgStrokeDashArray* this) { return ((UINT32 (WINAPI*)(ID2D1SvgStrokeDashArray*))this->v->tbl[2])(this); }
static inline void                              ID2D1SvgStrokeDashArray_GetFactory                           (ID2D1SvgStrokeDashArray* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1SvgStrokeDashArray*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline void                              ID2D1SvgStrokeDashArray_GetElement                           (ID2D1SvgStrokeDashArray* this, ID2D1SvgElement** element) { ((void (WINAPI*)(ID2D1SvgStrokeDashArray*, ID2D1SvgElement**))this->v->tbl[4])(this, element); }
static inline HRESULT                           ID2D1SvgStrokeDashArray_Clone                                (ID2D1SvgStrokeDashArray* this, ID2D1SvgAttribute** attribute) { return ((HRESULT (WINAPI*)(ID2D1SvgStrokeDashArray*, ID2D1SvgAttribute**))this->v->tbl[5])(this, attribute); }
static inline HRESULT                           ID2D1SvgStrokeDashArray_RemoveDashesAtEnd                    (ID2D1SvgStrokeDashArray* this, UINT32 dashesCount) { return ((HRESULT (WINAPI*)(ID2D1SvgStrokeDashArray*, UINT32))this->v->tbl[6])(this, dashesCount); }
static inline HRESULT                           ID2D1SvgStrokeDashArray_UpdateDashes                         (ID2D1SvgStrokeDashArray* this, const D2D1_SVG_LENGTH* dashes, UINT32 dashesCount, UINT32 startIndex) { return ((HRESULT (WINAPI*)(ID2D1SvgStrokeDashArray*, const D2D1_SVG_LENGTH*, UINT32, UINT32))this->v->tbl[7])(this, dashes, dashesCount, startIndex); }
static inline HRESULT                           ID2D1SvgStrokeDashArray_UpdateDashes1                        (ID2D1SvgStrokeDashArray* this, const FLOAT* dashes, UINT32 dashesCount, UINT32 startIndex) { return ((HRESULT (WINAPI*)(ID2D1SvgStrokeDashArray*, const FLOAT*, UINT32, UINT32))this->v->tbl[8])(this, dashes, dashesCount, startIndex); }
static inline HRESULT                           ID2D1SvgStrokeDashArray_GetDashes                            (ID2D1SvgStrokeDashArray* this, D2D1_SVG_LENGTH* dashes, UINT32 dashesCount, UINT32 startIndex) { return ((HRESULT (WINAPI*)(ID2D1SvgStrokeDashArray*, D2D1_SVG_LENGTH*, UINT32, UINT32))this->v->tbl[9])(this, dashes, dashesCount, startIndex); }
static inline HRESULT                           ID2D1SvgStrokeDashArray_GetDashes1                           (ID2D1SvgStrokeDashArray* this, FLOAT* dashes, UINT32 dashesCount, UINT32 startIndex) { return ((HRESULT (WINAPI*)(ID2D1SvgStrokeDashArray*, FLOAT*, UINT32, UINT32))this->v->tbl[10])(this, dashes, dashesCount, startIndex); }
static inline UINT32                            ID2D1SvgStrokeDashArray_GetDashesCount                       (ID2D1SvgStrokeDashArray* this) { return ((UINT32 (WINAPI*)(ID2D1SvgStrokeDashArray*))this->v->tbl[11])(this); }

static inline HRESULT                           ID2D1TessellationSink_QueryInterface                         (ID2D1TessellationSink* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1TessellationSink*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1TessellationSink_AddRef                                 (ID2D1TessellationSink* this) { return ((UINT32 (WINAPI*)(ID2D1TessellationSink*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1TessellationSink_Release                                (ID2D1TessellationSink* this) { return ((UINT32 (WINAPI*)(ID2D1TessellationSink*))this->v->tbl[2])(this); }
static inline void                              ID2D1TessellationSink_AddTriangles                           (ID2D1TessellationSink* this, const D2D1_TRIANGLE* triangles, UINT32 trianglesCount) { ((void (WINAPI*)(ID2D1TessellationSink*, const D2D1_TRIANGLE*, UINT32))this->v->tbl[3])(this, triangles, trianglesCount); }
static inline HRESULT                           ID2D1TessellationSink_Close                                  (ID2D1TessellationSink* this) { return ((HRESULT (WINAPI*)(ID2D1TessellationSink*))this->v->tbl[4])(this); }

static inline HRESULT                           ID2D1Transform_QueryInterface                                (ID2D1Transform* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1Transform*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1Transform_AddRef                                        (ID2D1Transform* this) { return ((UINT32 (WINAPI*)(ID2D1Transform*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1Transform_Release                                       (ID2D1Transform* this) { return ((UINT32 (WINAPI*)(ID2D1Transform*))this->v->tbl[2])(this); }
static inline UINT32                            ID2D1Transform_GetInputCount                                 (ID2D1Transform* this) { return ((UINT32 (WINAPI*)(ID2D1Transform*))this->v->tbl[3])(this); }
static inline HRESULT                           ID2D1Transform_MapOutputRectToInputRects                     (ID2D1Transform* this, const RECT* outputRect, RECT* inputRects, UINT32 inputRectsCount) { return ((HRESULT (WINAPI*)(ID2D1Transform*, const RECT*, RECT*, UINT32))this->v->tbl[4])(this, outputRect, inputRects, inputRectsCount); }
static inline HRESULT                           ID2D1Transform_MapInputRectsToOutputRect                     (ID2D1Transform* this, const RECT* inputRects, const RECT* inputOpaqueSubRects, UINT32 inputRectCount, RECT* outputRect, RECT* outputOpaqueSubRect) { return ((HRESULT (WINAPI*)(ID2D1Transform*, const RECT*, const RECT*, UINT32, RECT*, RECT*))this->v->tbl[5])(this, inputRects, inputOpaqueSubRects, inputRectCount, outputRect, outputOpaqueSubRect); }
static inline HRESULT                           ID2D1Transform_MapInvalidRect                                (ID2D1Transform* this, UINT32 inputIndex, RECT invalidInputRect, RECT* invalidOutputRect) { return ((HRESULT (WINAPI*)(ID2D1Transform*, UINT32, RECT, RECT*))this->v->tbl[6])(this, inputIndex, invalidInputRect, invalidOutputRect); }

static inline HRESULT                           ID2D1TransformedGeometry_QueryInterface                      (ID2D1TransformedGeometry* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1TransformedGeometry*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1TransformedGeometry_AddRef                              (ID2D1TransformedGeometry* this) { return ((UINT32 (WINAPI*)(ID2D1TransformedGeometry*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1TransformedGeometry_Release                             (ID2D1TransformedGeometry* this) { return ((UINT32 (WINAPI*)(ID2D1TransformedGeometry*))this->v->tbl[2])(this); }
static inline void                              ID2D1TransformedGeometry_GetFactory                          (ID2D1TransformedGeometry* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1TransformedGeometry*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline HRESULT                           ID2D1TransformedGeometry_GetBounds                           (ID2D1TransformedGeometry* this, const D2D_MATRIX_3X2_F* worldTransform, D2D_RECT_F* bounds) { return ((HRESULT (WINAPI*)(ID2D1TransformedGeometry*, const D2D_MATRIX_3X2_F*, D2D_RECT_F*))this->v->tbl[4])(this, worldTransform, bounds); }
static inline HRESULT                           ID2D1TransformedGeometry_GetWidenedBounds                    (ID2D1TransformedGeometry* this, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, D2D_RECT_F* bounds) { return ((HRESULT (WINAPI*)(ID2D1TransformedGeometry*, FLOAT, ID2D1StrokeStyle*, const D2D_MATRIX_3X2_F*, FLOAT, D2D_RECT_F*))this->v->tbl[5])(this, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, bounds); }
static inline HRESULT                           ID2D1TransformedGeometry_StrokeContainsPoint                 (ID2D1TransformedGeometry* this, D2D_POINT_2F point, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, BOOL* contains) { return ((HRESULT (WINAPI*)(ID2D1TransformedGeometry*, D2D_POINT_2F, FLOAT, ID2D1StrokeStyle*, const D2D_MATRIX_3X2_F*, FLOAT, BOOL*))this->v->tbl[6])(this, point, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, contains); }
static inline HRESULT                           ID2D1TransformedGeometry_FillContainsPoint                   (ID2D1TransformedGeometry* this, D2D_POINT_2F point, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, BOOL* contains) { return ((HRESULT (WINAPI*)(ID2D1TransformedGeometry*, D2D_POINT_2F, const D2D_MATRIX_3X2_F*, FLOAT, BOOL*))this->v->tbl[7])(this, point, worldTransform, flatteningTolerance, contains); }
static inline HRESULT                           ID2D1TransformedGeometry_CompareWithGeometry                 (ID2D1TransformedGeometry* this, ID2D1Geometry* inputGeometry, const D2D_MATRIX_3X2_F* inputGeometryTransform, FLOAT flatteningTolerance, D2D1_GEOMETRY_RELATION* relation) { return ((HRESULT (WINAPI*)(ID2D1TransformedGeometry*, ID2D1Geometry*, const D2D_MATRIX_3X2_F*, FLOAT, D2D1_GEOMETRY_RELATION*))this->v->tbl[8])(this, inputGeometry, inputGeometryTransform, flatteningTolerance, relation); }
static inline HRESULT                           ID2D1TransformedGeometry_Simplify                            (ID2D1TransformedGeometry* this, D2D1_GEOMETRY_SIMPLIFICATION_OPTION simplificationOption, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, ID2D1SimplifiedGeometrySink* geometrySink) { return ((HRESULT (WINAPI*)(ID2D1TransformedGeometry*, D2D1_GEOMETRY_SIMPLIFICATION_OPTION, const D2D_MATRIX_3X2_F*, FLOAT, ID2D1SimplifiedGeometrySink*))this->v->tbl[9])(this, simplificationOption, worldTransform, flatteningTolerance, geometrySink); }
static inline HRESULT                           ID2D1TransformedGeometry_Tessellate                          (ID2D1TransformedGeometry* this, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, ID2D1TessellationSink* tessellationSink) { return ((HRESULT (WINAPI*)(ID2D1TransformedGeometry*, const D2D_MATRIX_3X2_F*, FLOAT, ID2D1TessellationSink*))this->v->tbl[10])(this, worldTransform, flatteningTolerance, tessellationSink); }
static inline HRESULT                           ID2D1TransformedGeometry_CombineWithGeometry                 (ID2D1TransformedGeometry* this, ID2D1Geometry* inputGeometry, D2D1_COMBINE_MODE combineMode, const D2D_MATRIX_3X2_F* inputGeometryTransform, FLOAT flatteningTolerance, ID2D1SimplifiedGeometrySink* geometrySink) { return ((HRESULT (WINAPI*)(ID2D1TransformedGeometry*, ID2D1Geometry*, D2D1_COMBINE_MODE, const D2D_MATRIX_3X2_F*, FLOAT, ID2D1SimplifiedGeometrySink*))this->v->tbl[11])(this, inputGeometry, combineMode, inputGeometryTransform, flatteningTolerance, geometrySink); }
static inline HRESULT                           ID2D1TransformedGeometry_Outline                             (ID2D1TransformedGeometry* this, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, ID2D1SimplifiedGeometrySink* geometrySink) { return ((HRESULT (WINAPI*)(ID2D1TransformedGeometry*, const D2D_MATRIX_3X2_F*, FLOAT, ID2D1SimplifiedGeometrySink*))this->v->tbl[12])(this, worldTransform, flatteningTolerance, geometrySink); }
static inline HRESULT                           ID2D1TransformedGeometry_ComputeArea                         (ID2D1TransformedGeometry* this, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, FLOAT* area) { return ((HRESULT (WINAPI*)(ID2D1TransformedGeometry*, const D2D_MATRIX_3X2_F*, FLOAT, FLOAT*))this->v->tbl[13])(this, worldTransform, flatteningTolerance, area); }
static inline HRESULT                           ID2D1TransformedGeometry_ComputeLength                       (ID2D1TransformedGeometry* this, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, FLOAT* length) { return ((HRESULT (WINAPI*)(ID2D1TransformedGeometry*, const D2D_MATRIX_3X2_F*, FLOAT, FLOAT*))this->v->tbl[14])(this, worldTransform, flatteningTolerance, length); }
static inline HRESULT                           ID2D1TransformedGeometry_ComputePointAtLength                (ID2D1TransformedGeometry* this, FLOAT length, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, D2D_POINT_2F* point, D2D_POINT_2F* unitTangentVector) { return ((HRESULT (WINAPI*)(ID2D1TransformedGeometry*, FLOAT, const D2D_MATRIX_3X2_F*, FLOAT, D2D_POINT_2F*, D2D_POINT_2F*))this->v->tbl[15])(this, length, worldTransform, flatteningTolerance, point, unitTangentVector); }
static inline HRESULT                           ID2D1TransformedGeometry_Widen                               (ID2D1TransformedGeometry* this, FLOAT strokeWidth, ID2D1StrokeStyle* strokeStyle, const D2D_MATRIX_3X2_F* worldTransform, FLOAT flatteningTolerance, ID2D1SimplifiedGeometrySink* geometrySink) { return ((HRESULT (WINAPI*)(ID2D1TransformedGeometry*, FLOAT, ID2D1StrokeStyle*, const D2D_MATRIX_3X2_F*, FLOAT, ID2D1SimplifiedGeometrySink*))this->v->tbl[16])(this, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, geometrySink); }
static inline void                              ID2D1TransformedGeometry_GetSourceGeometry                   (ID2D1TransformedGeometry* this, ID2D1Geometry** sourceGeometry) { ((void (WINAPI*)(ID2D1TransformedGeometry*, ID2D1Geometry**))this->v->tbl[17])(this, sourceGeometry); }
static inline void                              ID2D1TransformedGeometry_GetTransform                        (ID2D1TransformedGeometry* this, D2D_MATRIX_3X2_F* transform) { ((void (WINAPI*)(ID2D1TransformedGeometry*, D2D_MATRIX_3X2_F*))this->v->tbl[18])(this, transform); }

static inline HRESULT                           ID2D1TransformedImageSource_QueryInterface                   (ID2D1TransformedImageSource* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1TransformedImageSource*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1TransformedImageSource_AddRef                           (ID2D1TransformedImageSource* this) { return ((UINT32 (WINAPI*)(ID2D1TransformedImageSource*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1TransformedImageSource_Release                          (ID2D1TransformedImageSource* this) { return ((UINT32 (WINAPI*)(ID2D1TransformedImageSource*))this->v->tbl[2])(this); }
static inline void                              ID2D1TransformedImageSource_GetFactory                       (ID2D1TransformedImageSource* this, ID2D1Factory** factory) { ((void (WINAPI*)(ID2D1TransformedImageSource*, ID2D1Factory**))this->v->tbl[3])(this, factory); }
static inline void                              ID2D1TransformedImageSource_GetSource                        (ID2D1TransformedImageSource* this, ID2D1ImageSource** imageSource) { ((void (WINAPI*)(ID2D1TransformedImageSource*, ID2D1ImageSource**))this->v->tbl[4])(this, imageSource); }
static inline void                              ID2D1TransformedImageSource_GetProperties                    (ID2D1TransformedImageSource* this, D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES* properties) { ((void (WINAPI*)(ID2D1TransformedImageSource*, D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES*))this->v->tbl[5])(this, properties); }

static inline HRESULT                           ID2D1TransformGraph_QueryInterface                           (ID2D1TransformGraph* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1TransformGraph*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1TransformGraph_AddRef                                   (ID2D1TransformGraph* this) { return ((UINT32 (WINAPI*)(ID2D1TransformGraph*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1TransformGraph_Release                                  (ID2D1TransformGraph* this) { return ((UINT32 (WINAPI*)(ID2D1TransformGraph*))this->v->tbl[2])(this); }
static inline UINT32                            ID2D1TransformGraph_GetInputCount                            (ID2D1TransformGraph* this) { return ((UINT32 (WINAPI*)(ID2D1TransformGraph*))this->v->tbl[3])(this); }
static inline HRESULT                           ID2D1TransformGraph_SetSingleTransformNode                   (ID2D1TransformGraph* this, ID2D1TransformNode* node) { return ((HRESULT (WINAPI*)(ID2D1TransformGraph*, ID2D1TransformNode*))this->v->tbl[4])(this, node); }
static inline HRESULT                           ID2D1TransformGraph_AddNode                                  (ID2D1TransformGraph* this, ID2D1TransformNode* node) { return ((HRESULT (WINAPI*)(ID2D1TransformGraph*, ID2D1TransformNode*))this->v->tbl[5])(this, node); }
static inline HRESULT                           ID2D1TransformGraph_RemoveNode                               (ID2D1TransformGraph* this, ID2D1TransformNode* node) { return ((HRESULT (WINAPI*)(ID2D1TransformGraph*, ID2D1TransformNode*))this->v->tbl[6])(this, node); }
static inline HRESULT                           ID2D1TransformGraph_SetOutputNode                            (ID2D1TransformGraph* this, ID2D1TransformNode* node) { return ((HRESULT (WINAPI*)(ID2D1TransformGraph*, ID2D1TransformNode*))this->v->tbl[7])(this, node); }
static inline HRESULT                           ID2D1TransformGraph_ConnectNode                              (ID2D1TransformGraph* this, ID2D1TransformNode* fromNode, ID2D1TransformNode* toNode, UINT32 toNodeInputIndex) { return ((HRESULT (WINAPI*)(ID2D1TransformGraph*, ID2D1TransformNode*, ID2D1TransformNode*, UINT32))this->v->tbl[8])(this, fromNode, toNode, toNodeInputIndex); }
static inline HRESULT                           ID2D1TransformGraph_ConnectToEffectInput                     (ID2D1TransformGraph* this, UINT32 toEffectInputIndex, ID2D1TransformNode* node, UINT32 toNodeInputIndex) { return ((HRESULT (WINAPI*)(ID2D1TransformGraph*, UINT32, ID2D1TransformNode*, UINT32))this->v->tbl[9])(this, toEffectInputIndex, node, toNodeInputIndex); }
static inline void                              ID2D1TransformGraph_Clear                                    (ID2D1TransformGraph* this) { ((void (WINAPI*)(ID2D1TransformGraph*))this->v->tbl[10])(this); }
static inline HRESULT                           ID2D1TransformGraph_SetPassthroughGraph                      (ID2D1TransformGraph* this, UINT32 effectInputIndex) { return ((HRESULT (WINAPI*)(ID2D1TransformGraph*, UINT32))this->v->tbl[11])(this, effectInputIndex); }

static inline HRESULT                           ID2D1TransformNode_QueryInterface                            (ID2D1TransformNode* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1TransformNode*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1TransformNode_AddRef                                    (ID2D1TransformNode* this) { return ((UINT32 (WINAPI*)(ID2D1TransformNode*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1TransformNode_Release                                   (ID2D1TransformNode* this) { return ((UINT32 (WINAPI*)(ID2D1TransformNode*))this->v->tbl[2])(this); }
static inline UINT32                            ID2D1TransformNode_GetInputCount                             (ID2D1TransformNode* this) { return ((UINT32 (WINAPI*)(ID2D1TransformNode*))this->v->tbl[3])(this); }

static inline HRESULT                           ID2D1VertexBuffer_QueryInterface                             (ID2D1VertexBuffer* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(ID2D1VertexBuffer*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            ID2D1VertexBuffer_AddRef                                     (ID2D1VertexBuffer* this) { return ((UINT32 (WINAPI*)(ID2D1VertexBuffer*))this->v->tbl[1])(this); }
static inline UINT32                            ID2D1VertexBuffer_Release                                    (ID2D1VertexBuffer* this) { return ((UINT32 (WINAPI*)(ID2D1VertexBuffer*))this->v->tbl[2])(this); }
static inline HRESULT                           ID2D1VertexBuffer_Map                                        (ID2D1VertexBuffer* this, UINT8** data, UINT32 bufferSize) { return ((HRESULT (WINAPI*)(ID2D1VertexBuffer*, UINT8**, UINT32))this->v->tbl[3])(this, data, bufferSize); }
static inline HRESULT                           ID2D1VertexBuffer_Unmap                                      (ID2D1VertexBuffer* this) { return ((HRESULT (WINAPI*)(ID2D1VertexBuffer*))this->v->tbl[4])(this); }

// guids

DEFINE_GUID(IID_ID2D1AnalysisTransform,         0x0359dc30, 0x95e6, 0x4568, 0x90, 0x55, 0x27, 0x72, 0x0d, 0x13, 0x0e, 0x93);
DEFINE_GUID(IID_ID2D1Bitmap,                    0xa2296057, 0xea42, 0x4099, 0x98, 0x3b, 0x53, 0x9f, 0xb6, 0x50, 0x54, 0x26);
DEFINE_GUID(IID_ID2D1Bitmap1,                   0xa898a84c, 0x3873, 0x4588, 0xb0, 0x8b, 0xeb, 0xbf, 0x97, 0x8d, 0xf0, 0x41);
DEFINE_GUID(IID_ID2D1BitmapBrush,               0x2cd906aa, 0x12e2, 0x11dc, 0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9);
DEFINE_GUID(IID_ID2D1BitmapBrush1,              0x41343a53, 0xe41a, 0x49a2, 0x91, 0xcd, 0x21, 0x79, 0x3b, 0xbb, 0x62, 0xe5);
DEFINE_GUID(IID_ID2D1BitmapRenderTarget,        0x2cd90695, 0x12e2, 0x11dc, 0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9);
DEFINE_GUID(IID_ID2D1BlendTransform,            0x63ac0b32, 0xba44, 0x450f, 0x88, 0x06, 0x7f, 0x4c, 0xa1, 0xff, 0x2f, 0x1b);
DEFINE_GUID(IID_ID2D1BorderTransform,           0x4998735c, 0x3a19, 0x473c, 0x97, 0x81, 0x65, 0x68, 0x47, 0xe3, 0xa3, 0x47);
DEFINE_GUID(IID_ID2D1BoundsAdjustmentTransform, 0x90f732e2, 0x5092, 0x4606, 0xa8, 0x19, 0x86, 0x51, 0x97, 0x0b, 0xac, 0xcd);
DEFINE_GUID(IID_ID2D1Brush,                     0x2cd906a8, 0x12e2, 0x11dc, 0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9);
DEFINE_GUID(IID_ID2D1ColorContext,              0x1c4820bb, 0x5771, 0x4518, 0xa5, 0x81, 0x2f, 0xe4, 0xdd, 0x0e, 0xc6, 0x57);
DEFINE_GUID(IID_ID2D1ColorContext1,             0x1ab42875, 0xc57f, 0x4be9, 0xbd, 0x85, 0x9c, 0xd7, 0x8d, 0x6f, 0x55, 0xee);
DEFINE_GUID(IID_ID2D1CommandList,               0xb4f34a19, 0x2383, 0x4d76, 0x94, 0xf6, 0xec, 0x34, 0x36, 0x57, 0xc3, 0xdc);
DEFINE_GUID(IID_ID2D1CommandSink,               0x54d7898a, 0xa061, 0x40a7, 0xbe, 0xc7, 0xe4, 0x65, 0xbc, 0xba, 0x2c, 0x4f);
DEFINE_GUID(IID_ID2D1CommandSink1,              0x9eb767fd, 0x4269, 0x4467, 0xb8, 0xc2, 0xeb, 0x30, 0xcb, 0x30, 0x57, 0x43);
DEFINE_GUID(IID_ID2D1CommandSink2,              0x3bab440e, 0x417e, 0x47df, 0xa2, 0xe2, 0xbc, 0x0b, 0xe6, 0xa0, 0x09, 0x16);
DEFINE_GUID(IID_ID2D1CommandSink3,              0x18079135, 0x4cf3, 0x4868, 0xbc, 0x8e, 0x06, 0x06, 0x7e, 0x6d, 0x24, 0x2d);
DEFINE_GUID(IID_ID2D1CommandSink4,              0xc78a6519, 0x40d6, 0x4218, 0xb2, 0xde, 0xbe, 0xee, 0xb7, 0x44, 0xbb, 0x3e);
DEFINE_GUID(IID_ID2D1CommandSink5,              0x7047dd26, 0xb1e7, 0x44a7, 0x95, 0x9a, 0x83, 0x49, 0xe2, 0x14, 0x4f, 0xa8);
DEFINE_GUID(IID_ID2D1ComputeInfo,               0x5598b14b, 0x9fd7, 0x48b7, 0x9b, 0xdb, 0x8f, 0x09, 0x64, 0xeb, 0x38, 0xbc);
DEFINE_GUID(IID_ID2D1ComputeTransform,          0x0d85573c, 0x01e3, 0x4f7d, 0xbf, 0xd9, 0x0d, 0x60, 0x60, 0x8b, 0xf3, 0xc3);
DEFINE_GUID(IID_ID2D1ConcreteTransform,         0x1a799d8a, 0x69f7, 0x4e4c, 0x9f, 0xed, 0x43, 0x7c, 0xcc, 0x66, 0x84, 0xcc);
DEFINE_GUID(IID_ID2D1DCRenderTarget,            0x1c51bc64, 0xde61, 0x46fd, 0x98, 0x99, 0x63, 0xa5, 0xd8, 0xf0, 0x39, 0x50);
DEFINE_GUID(IID_ID2D1Device,                    0x47dd575d, 0xac05, 0x4cdd, 0x80, 0x49, 0x9b, 0x02, 0xcd, 0x16, 0xf4, 0x4c);
DEFINE_GUID(IID_ID2D1Device1,                   0xd21768e1, 0x23a4, 0x4823, 0xa1, 0x4b, 0x7c, 0x3e, 0xba, 0x85, 0xd6, 0x58);
DEFINE_GUID(IID_ID2D1Device2,                   0xa44472e1, 0x8dfb, 0x4e60, 0x84, 0x92, 0x6e, 0x28, 0x61, 0xc9, 0xca, 0x8b);
DEFINE_GUID(IID_ID2D1Device3,                   0x852f2087, 0x802c, 0x4037, 0xab, 0x60, 0xff, 0x2e, 0x7e, 0xe6, 0xfc, 0x01);
DEFINE_GUID(IID_ID2D1Device4,                   0xd7bdb159, 0x5683, 0x4a46, 0xbc, 0x9c, 0x72, 0xdc, 0x72, 0x0b, 0x85, 0x8b);
DEFINE_GUID(IID_ID2D1Device5,                   0xd55ba0a4, 0x6405, 0x4694, 0xae, 0xf5, 0x08, 0xee, 0x1a, 0x43, 0x58, 0xb4);
DEFINE_GUID(IID_ID2D1Device6,                   0x7bfef914, 0x2d75, 0x4bad, 0xbe, 0x87, 0xe1, 0x8d, 0xdb, 0x07, 0x7b, 0x6d);
DEFINE_GUID(IID_ID2D1Device7,                   0xf07c8968, 0xdd4e, 0x4ba6, 0x9c, 0xbd, 0xeb, 0x6d, 0x37, 0x52, 0xdc, 0xbb);
DEFINE_GUID(IID_ID2D1DeviceContext,             0xe8f7fe7a, 0x191c, 0x466d, 0xad, 0x95, 0x97, 0x56, 0x78, 0xbd, 0xa9, 0x98);
DEFINE_GUID(IID_ID2D1DeviceContext1,            0xd37f57e4, 0x6908, 0x459f, 0xa1, 0x99, 0xe7, 0x2f, 0x24, 0xf7, 0x99, 0x87);
DEFINE_GUID(IID_ID2D1DeviceContext2,            0x394ea6a3, 0x0c34, 0x4321, 0x95, 0x0b, 0x6c, 0xa2, 0x0f, 0x0b, 0xe6, 0xc7);
DEFINE_GUID(IID_ID2D1DeviceContext3,            0x235a7496, 0x8351, 0x414c, 0xbc, 0xd4, 0x66, 0x72, 0xab, 0x2d, 0x8e, 0x00);
DEFINE_GUID(IID_ID2D1DeviceContext4,            0x8c427831, 0x3d90, 0x4476, 0xb6, 0x47, 0xc4, 0xfa, 0xe3, 0x49, 0xe4, 0xdb);
DEFINE_GUID(IID_ID2D1DeviceContext5,            0x7836d248, 0x68cc, 0x4df6, 0xb9, 0xe8, 0xde, 0x99, 0x1b, 0xf6, 0x2e, 0xb7);
DEFINE_GUID(IID_ID2D1DeviceContext6,            0x985f7e37, 0x4ed0, 0x4a19, 0x98, 0xa3, 0x15, 0xb0, 0xed, 0xfd, 0xe3, 0x06);
DEFINE_GUID(IID_ID2D1DeviceContext7,            0xec891cf7, 0x9b69, 0x4851, 0x9d, 0xef, 0x4e, 0x09, 0x15, 0x77, 0x1e, 0x62);
DEFINE_GUID(IID_ID2D1DrawInfo,                  0x693ce632, 0x7f2f, 0x45de, 0x93, 0xfe, 0x18, 0xd8, 0x8b, 0x37, 0xaa, 0x21);
DEFINE_GUID(IID_ID2D1DrawingStateBlock,         0x28506e39, 0xebf6, 0x46a1, 0xbb, 0x47, 0xfd, 0x85, 0x56, 0x5a, 0xb9, 0x57);
DEFINE_GUID(IID_ID2D1DrawingStateBlock1,        0x689f1f85, 0xc72e, 0x4e33, 0x8f, 0x19, 0x85, 0x75, 0x4e, 0xfd, 0x5a, 0xce);
DEFINE_GUID(IID_ID2D1DrawTransform,             0x36bfdcb6, 0x9739, 0x435d, 0xa3, 0x0d, 0xa6, 0x53, 0xbe, 0xff, 0x6a, 0x6f);
DEFINE_GUID(IID_ID2D1Effect,                    0x28211a43, 0x7d89, 0x476f, 0x81, 0x81, 0x2d, 0x61, 0x59, 0xb2, 0x20, 0xad);
DEFINE_GUID(IID_ID2D1EffectContext,             0x3d9f916b, 0x27dc, 0x4ad7, 0xb4, 0xf1, 0x64, 0x94, 0x53, 0x40, 0xf5, 0x63);
DEFINE_GUID(IID_ID2D1EffectContext1,            0x84ab595a, 0xfc81, 0x4546, 0xba, 0xcd, 0xe8, 0xef, 0x4d, 0x8a, 0xbe, 0x7a);
DEFINE_GUID(IID_ID2D1EffectContext2,            0x577ad2a0, 0x9fc7, 0x4dda, 0x8b, 0x18, 0xda, 0xb8, 0x10, 0x14, 0x00, 0x52);
DEFINE_GUID(IID_ID2D1EffectImpl,                0xa248fd3f, 0x3e6c, 0x4e63, 0x9f, 0x03, 0x7f, 0x68, 0xec, 0xc9, 0x1d, 0xb9);
DEFINE_GUID(IID_ID2D1EllipseGeometry,           0x2cd906a4, 0x12e2, 0x11dc, 0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9);
DEFINE_GUID(IID_ID2D1Factory,                   0x06152247, 0x6f50, 0x465a, 0x92, 0x45, 0x11, 0x8b, 0xfd, 0x3b, 0x60, 0x07);
DEFINE_GUID(IID_ID2D1Factory1,                  0xbb12d362, 0xdaee, 0x4b9a, 0xaa, 0x1d, 0x14, 0xba, 0x40, 0x1c, 0xfa, 0x1f);
DEFINE_GUID(IID_ID2D1Factory2,                  0x94f81a73, 0x9212, 0x4376, 0x9c, 0x58, 0xb1, 0x6a, 0x3a, 0x0d, 0x39, 0x92);
DEFINE_GUID(IID_ID2D1Factory3,                  0x0869759f, 0x4f00, 0x413f, 0xb0, 0x3e, 0x2b, 0xda, 0x45, 0x40, 0x4d, 0x0f);
DEFINE_GUID(IID_ID2D1Factory4,                  0xbd4ec2d2, 0x0662, 0x4bee, 0xba, 0x8e, 0x6f, 0x29, 0xf0, 0x32, 0xe0, 0x96);
DEFINE_GUID(IID_ID2D1Factory5,                  0xc4349994, 0x838e, 0x4b0f, 0x8c, 0xab, 0x44, 0x99, 0x7d, 0x9e, 0xea, 0xcc);
DEFINE_GUID(IID_ID2D1Factory6,                  0xf9976f46, 0xf642, 0x44c1, 0x97, 0xca, 0xda, 0x32, 0xea, 0x2a, 0x26, 0x35);
DEFINE_GUID(IID_ID2D1Factory7,                  0xbdc2bdd3, 0xb96c, 0x4de6, 0xbd, 0xf7, 0x99, 0xd4, 0x74, 0x54, 0x54, 0xde);
DEFINE_GUID(IID_ID2D1Factory8,                  0x677c9311, 0xf36d, 0x4b1f, 0xae, 0x86, 0x86, 0xd1, 0x22, 0x3f, 0xfd, 0x3a);
DEFINE_GUID(IID_ID2D1GdiInteropRenderTarget,    0xe0db51c3, 0x6f77, 0x4bae, 0xb3, 0xd5, 0xe4, 0x75, 0x09, 0xb3, 0x58, 0x38);
DEFINE_GUID(IID_ID2D1GdiMetafile,               0x2f543dc3, 0xcfc1, 0x4211, 0x86, 0x4f, 0xcf, 0xd9, 0x1c, 0x6f, 0x33, 0x95);
DEFINE_GUID(IID_ID2D1GdiMetafile1,              0x2e69f9e8, 0xdd3f, 0x4bf9, 0x95, 0xba, 0xc0, 0x4f, 0x49, 0xd7, 0x88, 0xdf);
DEFINE_GUID(IID_ID2D1GdiMetafileSink,           0x82237326, 0x8111, 0x4f7c, 0xbc, 0xf4, 0xb5, 0xc1, 0x17, 0x55, 0x64, 0xfe);
DEFINE_GUID(IID_ID2D1GdiMetafileSink1,          0xfd0ecb6b, 0x91e6, 0x411e, 0x86, 0x55, 0x39, 0x5e, 0x76, 0x0f, 0x91, 0xb4);
DEFINE_GUID(IID_ID2D1Geometry,                  0x2cd906a1, 0x12e2, 0x11dc, 0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9);
DEFINE_GUID(IID_ID2D1GeometryGroup,             0x2cd906a6, 0x12e2, 0x11dc, 0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9);
DEFINE_GUID(IID_ID2D1GeometryRealization,       0xa16907d7, 0xbc02, 0x4801, 0x99, 0xe8, 0x8c, 0xf7, 0xf4, 0x85, 0xf7, 0x74);
DEFINE_GUID(IID_ID2D1GeometrySink,              0x2cd9069f, 0x12e2, 0x11dc, 0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9);
DEFINE_GUID(IID_ID2D1GradientMesh,              0xf292e401, 0xc050, 0x4cde, 0x83, 0xd7, 0x04, 0x96, 0x2d, 0x3b, 0x23, 0xc2);
DEFINE_GUID(IID_ID2D1GradientStopCollection,    0x2cd906a7, 0x12e2, 0x11dc, 0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9);
DEFINE_GUID(IID_ID2D1GradientStopCollection1,   0xae1572f4, 0x5dd0, 0x4777, 0x99, 0x8b, 0x92, 0x79, 0x47, 0x2a, 0xe6, 0x3b);
DEFINE_GUID(IID_ID2D1HwndRenderTarget,          0x2cd90698, 0x12e2, 0x11dc, 0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9);
DEFINE_GUID(IID_ID2D1Image,                     0x65019f75, 0x8da2, 0x497c, 0xb3, 0x2c, 0xdf, 0xa3, 0x4e, 0x48, 0xed, 0xe6);
DEFINE_GUID(IID_ID2D1ImageBrush,                0xfe9e984d, 0x3f95, 0x407c, 0xb5, 0xdb, 0xcb, 0x94, 0xd4, 0xe8, 0xf8, 0x7c);
DEFINE_GUID(IID_ID2D1ImageSource,               0xc9b664e5, 0x74a1, 0x4378, 0x9a, 0xc2, 0xee, 0xfc, 0x37, 0xa3, 0xf4, 0xd8);
DEFINE_GUID(IID_ID2D1ImageSourceFromWic,        0x77395441, 0x1c8f, 0x4555, 0x86, 0x83, 0xf5, 0x0d, 0xab, 0x0f, 0xe7, 0x92);
DEFINE_GUID(IID_ID2D1Ink,                       0xb499923b, 0x7029, 0x478f, 0xa8, 0xb3, 0x43, 0x2c, 0x7c, 0x5f, 0x53, 0x12);
DEFINE_GUID(IID_ID2D1InkStyle,                  0xbae8b344, 0x23fc, 0x4071, 0x8c, 0xb5, 0xd0, 0x5d, 0x6f, 0x07, 0x38, 0x48);
DEFINE_GUID(IID_ID2D1Layer,                     0x2cd9069b, 0x12e2, 0x11dc, 0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9);
DEFINE_GUID(IID_ID2D1LinearGradientBrush,       0x2cd906ab, 0x12e2, 0x11dc, 0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9);
DEFINE_GUID(IID_ID2D1LookupTable3D,             0x53dd9855, 0xa3b0, 0x4d5b, 0x82, 0xe1, 0x26, 0xe2, 0x5c, 0x5e, 0x57, 0x97);
DEFINE_GUID(IID_ID2D1Mesh,                      0x2cd906c2, 0x12e2, 0x11dc, 0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9);
DEFINE_GUID(IID_ID2D1Multithread,               0x31e6e7bc, 0xe0ff, 0x4d46, 0x8c, 0x64, 0xa0, 0xa8, 0xc4, 0x1c, 0x15, 0xd3);
DEFINE_GUID(IID_ID2D1OffsetTransform,           0x3fe6adea, 0x7643, 0x4f53, 0xbd, 0x14, 0xa0, 0xce, 0x63, 0xf2, 0x40, 0x42);
DEFINE_GUID(IID_ID2D1PathGeometry,              0x2cd906a5, 0x12e2, 0x11dc, 0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9);
DEFINE_GUID(IID_ID2D1PathGeometry1,             0x62baa2d2, 0xab54, 0x41b7, 0xb8, 0x72, 0x78, 0x7e, 0x01, 0x06, 0xa4, 0x21);
DEFINE_GUID(IID_ID2D1PrintControl,              0x2c1d867d, 0xc290, 0x41c8, 0xae, 0x7e, 0x34, 0xa9, 0x87, 0x02, 0xe9, 0xa5);
DEFINE_GUID(IID_ID2D1Properties,                0x483473d7, 0xcd46, 0x4f9d, 0x9d, 0x3a, 0x31, 0x12, 0xaa, 0x80, 0x15, 0x9d);
DEFINE_GUID(IID_ID2D1RadialGradientBrush,       0x2cd906ac, 0x12e2, 0x11dc, 0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9);
DEFINE_GUID(IID_ID2D1RectangleGeometry,         0x2cd906a2, 0x12e2, 0x11dc, 0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9);
DEFINE_GUID(IID_ID2D1RenderInfo,                0x519ae1bd, 0xd19a, 0x420d, 0xb8, 0x49, 0x36, 0x4f, 0x59, 0x47, 0x76, 0xb7);
DEFINE_GUID(IID_ID2D1RenderTarget,              0x2cd90694, 0x12e2, 0x11dc, 0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9);
DEFINE_GUID(IID_ID2D1Resource,                  0x2cd90691, 0x12e2, 0x11dc, 0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9);
DEFINE_GUID(IID_ID2D1ResourceTexture,           0x688d15c3, 0x02b0, 0x438d, 0xb1, 0x3a, 0xd1, 0xb4, 0x4c, 0x32, 0xc3, 0x9a);
DEFINE_GUID(IID_ID2D1RoundedRectangleGeometry,  0x2cd906a3, 0x12e2, 0x11dc, 0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9);
DEFINE_GUID(IID_ID2D1SimplifiedGeometrySink,    0x2cd9069e, 0x12e2, 0x11dc, 0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9);
DEFINE_GUID(IID_ID2D1SolidColorBrush,           0x2cd906a9, 0x12e2, 0x11dc, 0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9);
DEFINE_GUID(IID_ID2D1SourceTransform,           0xdb1800dd, 0x0c34, 0x4cf9, 0xbe, 0x90, 0x31, 0xcc, 0x0a, 0x56, 0x53, 0xe1);
DEFINE_GUID(IID_ID2D1SpriteBatch,               0x4dc583bf, 0x3a10, 0x438a, 0x87, 0x22, 0xe9, 0x76, 0x52, 0x24, 0xf1, 0xf1);
DEFINE_GUID(IID_ID2D1StrokeStyle,               0x2cd9069d, 0x12e2, 0x11dc, 0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9);
DEFINE_GUID(IID_ID2D1StrokeStyle1,              0x10a72a66, 0xe91c, 0x43f4, 0x99, 0x3f, 0xdd, 0xf4, 0xb8, 0x2b, 0x0b, 0x4a);
DEFINE_GUID(IID_ID2D1SvgAttribute,              0xc9cdb0dd, 0xf8c9, 0x4e70, 0xb7, 0xc2, 0x30, 0x1c, 0x80, 0x29, 0x2c, 0x5e);
DEFINE_GUID(IID_ID2D1SvgDocument,               0x86b88e4d, 0xafa4, 0x4d7b, 0x88, 0xe4, 0x68, 0xa5, 0x1c, 0x4a, 0x0a, 0xec);
DEFINE_GUID(IID_ID2D1SvgElement,                0xac7b67a6, 0x183e, 0x49c1, 0xa8, 0x23, 0x0e, 0xbe, 0x40, 0xb0, 0xdb, 0x29);
DEFINE_GUID(IID_ID2D1SvgGlyphStyle,             0xaf671749, 0xd241, 0x4db8, 0x8e, 0x41, 0xdc, 0xc2, 0xe5, 0xc1, 0xa4, 0x38);
DEFINE_GUID(IID_ID2D1SvgPaint,                  0xd59bab0a, 0x68a2, 0x455b, 0xa5, 0xdc, 0x9e, 0xb2, 0x85, 0x4e, 0x24, 0x90);
DEFINE_GUID(IID_ID2D1SvgPathData,               0xc095e4f4, 0xbb98, 0x43d6, 0x97, 0x45, 0x4d, 0x1b, 0x84, 0xec, 0x98, 0x88);
DEFINE_GUID(IID_ID2D1SvgPointCollection,        0x9dbe4c0d, 0x3572, 0x4dd9, 0x98, 0x25, 0x55, 0x30, 0x81, 0x3b, 0xb7, 0x12);
DEFINE_GUID(IID_ID2D1SvgStrokeDashArray,        0xf1c0ca52, 0x92a3, 0x4f00, 0xb4, 0xce, 0xf3, 0x56, 0x91, 0xef, 0xd9, 0xd9);
DEFINE_GUID(IID_ID2D1TessellationSink,          0x2cd906c1, 0x12e2, 0x11dc, 0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9);
DEFINE_GUID(IID_ID2D1Transform,                 0xef1a287d, 0x342a, 0x4f76, 0x8f, 0xdb, 0xda, 0x0d, 0x6e, 0xa9, 0xf9, 0x2b);
DEFINE_GUID(IID_ID2D1TransformedGeometry,       0x2cd906bb, 0x12e2, 0x11dc, 0x9f, 0xed, 0x00, 0x11, 0x43, 0xa0, 0x55, 0xf9);
DEFINE_GUID(IID_ID2D1TransformedImageSource,    0x7f1f79e5, 0x2796, 0x416c, 0x8f, 0x55, 0x70, 0x0f, 0x91, 0x14, 0x45, 0xe5);
DEFINE_GUID(IID_ID2D1TransformGraph,            0x13d29038, 0xc3e6, 0x4034, 0x90, 0x81, 0x13, 0xb5, 0x3a, 0x41, 0x79, 0x92);
DEFINE_GUID(IID_ID2D1TransformNode,             0xb2efe1e7, 0x729f, 0x4102, 0x94, 0x9f, 0x50, 0x5f, 0xa2, 0x1b, 0xf6, 0x66);
DEFINE_GUID(IID_ID2D1VertexBuffer,              0x9b8b1336, 0x00a5, 0x4668, 0x92, 0xb7, 0xce, 0xd5, 0xd8, 0xbf, 0x9b, 0x7b);

// functions

EXTERN_C FLOAT        DECLSPEC_IMPORT WINAPI D2D1ComputeMaximumScaleFactor                   (const D2D_MATRIX_3X2_F* matrix) WIN_NOEXCEPT;
EXTERN_C D2D1_COLOR_F DECLSPEC_IMPORT WINAPI D2D1ConvertColorSpace                           (D2D1_COLOR_SPACE sourceColorSpace, D2D1_COLOR_SPACE destinationColorSpace, const D2D1_COLOR_F* color) WIN_NOEXCEPT;
EXTERN_C HRESULT      DECLSPEC_IMPORT WINAPI D2D1CreateDevice                                (IDXGIDevice* dxgiDevice, const D2D1_CREATION_PROPERTIES* creationProperties, ID2D1Device** d2dDevice) WIN_NOEXCEPT;
EXTERN_C HRESULT      DECLSPEC_IMPORT WINAPI D2D1CreateDeviceContext                         (IDXGISurface* dxgiSurface, const D2D1_CREATION_PROPERTIES* creationProperties, ID2D1DeviceContext** d2dDeviceContext) WIN_NOEXCEPT;
EXTERN_C HRESULT      DECLSPEC_IMPORT WINAPI D2D1CreateFactory                               (D2D1_FACTORY_TYPE factoryType, const GUID* riid, const D2D1_FACTORY_OPTIONS* pFactoryOptions, void** ppIFactory) WIN_NOEXCEPT;
EXTERN_C void         DECLSPEC_IMPORT WINAPI D2D1GetGradientMeshInteriorPointsFromCoonsPatch (const D2D_POINT_2F* pPoint0, const D2D_POINT_2F* pPoint1, const D2D_POINT_2F* pPoint2, const D2D_POINT_2F* pPoint3, const D2D_POINT_2F* pPoint4, const D2D_POINT_2F* pPoint5, const D2D_POINT_2F* pPoint6, const D2D_POINT_2F* pPoint7, const D2D_POINT_2F* pPoint8, const D2D_POINT_2F* pPoint9, const D2D_POINT_2F* pPoint10, const D2D_POINT_2F* pPoint11, D2D_POINT_2F* pTensorPoint11, D2D_POINT_2F* pTensorPoint12, D2D_POINT_2F* pTensorPoint21, D2D_POINT_2F* pTensorPoint22) WIN_NOEXCEPT;
EXTERN_C BOOL         DECLSPEC_IMPORT WINAPI D2D1InvertMatrix                                (D2D_MATRIX_3X2_F* matrix) WIN_NOEXCEPT;
EXTERN_C BOOL         DECLSPEC_IMPORT WINAPI D2D1IsMatrixInvertible                          (const D2D_MATRIX_3X2_F* matrix) WIN_NOEXCEPT;
EXTERN_C void         DECLSPEC_IMPORT WINAPI D2D1MakeRotateMatrix                            (FLOAT angle, D2D_POINT_2F center, D2D_MATRIX_3X2_F* matrix) WIN_NOEXCEPT;
EXTERN_C void         DECLSPEC_IMPORT WINAPI D2D1MakeSkewMatrix                              (FLOAT angleX, FLOAT angleY, D2D_POINT_2F center, D2D_MATRIX_3X2_F* matrix) WIN_NOEXCEPT;
EXTERN_C void         DECLSPEC_IMPORT WINAPI D2D1SinCos                                      (FLOAT angle, FLOAT* s, FLOAT* c) WIN_NOEXCEPT;
EXTERN_C FLOAT        DECLSPEC_IMPORT WINAPI D2D1Tan                                         (FLOAT angle) WIN_NOEXCEPT;
EXTERN_C FLOAT        DECLSPEC_IMPORT WINAPI D2D1Vec3Length                                  (FLOAT x, FLOAT y, FLOAT z) WIN_NOEXCEPT;
