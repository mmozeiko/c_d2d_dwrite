#pragma once

// generated by https://github.com/mmozeiko/c_d2d_dwrite

#include <combaseapi.h>
#include <dcommon.h>

#pragma comment (lib, "dwrite")

typedef interface ID2D1SimplifiedGeometrySink ID2D1SimplifiedGeometrySink;
typedef interface ID2D1SimplifiedGeometrySink IDWriteGeometrySink;

// interfaces

typedef struct IDWriteAsyncResult              { struct { void* tbl[]; }* v; } IDWriteAsyncResult;
typedef struct IDWriteBitmapRenderTarget       { struct { void* tbl[]; }* v; } IDWriteBitmapRenderTarget;
typedef struct IDWriteBitmapRenderTarget1      { struct { void* tbl[]; }* v; } IDWriteBitmapRenderTarget1;
typedef struct IDWriteColorGlyphRunEnumerator  { struct { void* tbl[]; }* v; } IDWriteColorGlyphRunEnumerator;
typedef struct IDWriteColorGlyphRunEnumerator1 { struct { void* tbl[]; }* v; } IDWriteColorGlyphRunEnumerator1;
typedef struct IDWriteFactory                  { struct { void* tbl[]; }* v; } IDWriteFactory;
typedef struct IDWriteFactory1                 { struct { void* tbl[]; }* v; } IDWriteFactory1;
typedef struct IDWriteFactory2                 { struct { void* tbl[]; }* v; } IDWriteFactory2;
typedef struct IDWriteFactory3                 { struct { void* tbl[]; }* v; } IDWriteFactory3;
typedef struct IDWriteFactory4                 { struct { void* tbl[]; }* v; } IDWriteFactory4;
typedef struct IDWriteFactory5                 { struct { void* tbl[]; }* v; } IDWriteFactory5;
typedef struct IDWriteFactory6                 { struct { void* tbl[]; }* v; } IDWriteFactory6;
typedef struct IDWriteFactory7                 { struct { void* tbl[]; }* v; } IDWriteFactory7;
typedef struct IDWriteFont                     { struct { void* tbl[]; }* v; } IDWriteFont;
typedef struct IDWriteFont1                    { struct { void* tbl[]; }* v; } IDWriteFont1;
typedef struct IDWriteFont2                    { struct { void* tbl[]; }* v; } IDWriteFont2;
typedef struct IDWriteFont3                    { struct { void* tbl[]; }* v; } IDWriteFont3;
typedef struct IDWriteFontCollection           { struct { void* tbl[]; }* v; } IDWriteFontCollection;
typedef struct IDWriteFontCollection1          { struct { void* tbl[]; }* v; } IDWriteFontCollection1;
typedef struct IDWriteFontCollection2          { struct { void* tbl[]; }* v; } IDWriteFontCollection2;
typedef struct IDWriteFontCollection3          { struct { void* tbl[]; }* v; } IDWriteFontCollection3;
typedef struct IDWriteFontCollectionLoader     { struct { void* tbl[]; }* v; } IDWriteFontCollectionLoader;
typedef struct IDWriteFontDownloadListener     { struct { void* tbl[]; }* v; } IDWriteFontDownloadListener;
typedef struct IDWriteFontDownloadQueue        { struct { void* tbl[]; }* v; } IDWriteFontDownloadQueue;
typedef struct IDWriteFontFace                 { struct { void* tbl[]; }* v; } IDWriteFontFace;
typedef struct IDWriteFontFace1                { struct { void* tbl[]; }* v; } IDWriteFontFace1;
typedef struct IDWriteFontFace2                { struct { void* tbl[]; }* v; } IDWriteFontFace2;
typedef struct IDWriteFontFace3                { struct { void* tbl[]; }* v; } IDWriteFontFace3;
typedef struct IDWriteFontFace4                { struct { void* tbl[]; }* v; } IDWriteFontFace4;
typedef struct IDWriteFontFace5                { struct { void* tbl[]; }* v; } IDWriteFontFace5;
typedef struct IDWriteFontFace6                { struct { void* tbl[]; }* v; } IDWriteFontFace6;
typedef struct IDWriteFontFaceReference        { struct { void* tbl[]; }* v; } IDWriteFontFaceReference;
typedef struct IDWriteFontFaceReference1       { struct { void* tbl[]; }* v; } IDWriteFontFaceReference1;
typedef struct IDWriteFontFallback             { struct { void* tbl[]; }* v; } IDWriteFontFallback;
typedef struct IDWriteFontFallback1            { struct { void* tbl[]; }* v; } IDWriteFontFallback1;
typedef struct IDWriteFontFallbackBuilder      { struct { void* tbl[]; }* v; } IDWriteFontFallbackBuilder;
typedef struct IDWriteFontFamily               { struct { void* tbl[]; }* v; } IDWriteFontFamily;
typedef struct IDWriteFontFamily1              { struct { void* tbl[]; }* v; } IDWriteFontFamily1;
typedef struct IDWriteFontFamily2              { struct { void* tbl[]; }* v; } IDWriteFontFamily2;
typedef struct IDWriteFontFile                 { struct { void* tbl[]; }* v; } IDWriteFontFile;
typedef struct IDWriteFontFileEnumerator       { struct { void* tbl[]; }* v; } IDWriteFontFileEnumerator;
typedef struct IDWriteFontFileLoader           { struct { void* tbl[]; }* v; } IDWriteFontFileLoader;
typedef struct IDWriteFontFileStream           { struct { void* tbl[]; }* v; } IDWriteFontFileStream;
typedef struct IDWriteFontList                 { struct { void* tbl[]; }* v; } IDWriteFontList;
typedef struct IDWriteFontList1                { struct { void* tbl[]; }* v; } IDWriteFontList1;
typedef struct IDWriteFontList2                { struct { void* tbl[]; }* v; } IDWriteFontList2;
typedef struct IDWriteFontResource             { struct { void* tbl[]; }* v; } IDWriteFontResource;
typedef struct IDWriteFontSet                  { struct { void* tbl[]; }* v; } IDWriteFontSet;
typedef struct IDWriteFontSet1                 { struct { void* tbl[]; }* v; } IDWriteFontSet1;
typedef struct IDWriteFontSet2                 { struct { void* tbl[]; }* v; } IDWriteFontSet2;
typedef struct IDWriteFontSet3                 { struct { void* tbl[]; }* v; } IDWriteFontSet3;
typedef struct IDWriteFontSet4                 { struct { void* tbl[]; }* v; } IDWriteFontSet4;
typedef struct IDWriteFontSetBuilder           { struct { void* tbl[]; }* v; } IDWriteFontSetBuilder;
typedef struct IDWriteFontSetBuilder1          { struct { void* tbl[]; }* v; } IDWriteFontSetBuilder1;
typedef struct IDWriteFontSetBuilder2          { struct { void* tbl[]; }* v; } IDWriteFontSetBuilder2;
typedef struct IDWriteGdiInterop               { struct { void* tbl[]; }* v; } IDWriteGdiInterop;
typedef struct IDWriteGdiInterop1              { struct { void* tbl[]; }* v; } IDWriteGdiInterop1;
typedef struct IDWriteGlyphRunAnalysis         { struct { void* tbl[]; }* v; } IDWriteGlyphRunAnalysis;
typedef struct IDWriteInlineObject             { struct { void* tbl[]; }* v; } IDWriteInlineObject;
typedef struct IDWriteInMemoryFontFileLoader   { struct { void* tbl[]; }* v; } IDWriteInMemoryFontFileLoader;
typedef struct IDWriteLocalFontFileLoader      { struct { void* tbl[]; }* v; } IDWriteLocalFontFileLoader;
typedef struct IDWriteLocalizedStrings         { struct { void* tbl[]; }* v; } IDWriteLocalizedStrings;
typedef struct IDWriteNumberSubstitution       { struct { void* tbl[]; }* v; } IDWriteNumberSubstitution;
typedef struct IDWritePixelSnapping            { struct { void* tbl[]; }* v; } IDWritePixelSnapping;
typedef struct IDWriteRemoteFontFileLoader     { struct { void* tbl[]; }* v; } IDWriteRemoteFontFileLoader;
typedef struct IDWriteRemoteFontFileStream     { struct { void* tbl[]; }* v; } IDWriteRemoteFontFileStream;
typedef struct IDWriteRenderingParams          { struct { void* tbl[]; }* v; } IDWriteRenderingParams;
typedef struct IDWriteRenderingParams1         { struct { void* tbl[]; }* v; } IDWriteRenderingParams1;
typedef struct IDWriteRenderingParams2         { struct { void* tbl[]; }* v; } IDWriteRenderingParams2;
typedef struct IDWriteRenderingParams3         { struct { void* tbl[]; }* v; } IDWriteRenderingParams3;
typedef struct IDWriteStringList               { struct { void* tbl[]; }* v; } IDWriteStringList;
typedef struct IDWriteTextAnalysisSink         { struct { void* tbl[]; }* v; } IDWriteTextAnalysisSink;
typedef struct IDWriteTextAnalysisSink1        { struct { void* tbl[]; }* v; } IDWriteTextAnalysisSink1;
typedef struct IDWriteTextAnalysisSource       { struct { void* tbl[]; }* v; } IDWriteTextAnalysisSource;
typedef struct IDWriteTextAnalysisSource1      { struct { void* tbl[]; }* v; } IDWriteTextAnalysisSource1;
typedef struct IDWriteTextAnalyzer             { struct { void* tbl[]; }* v; } IDWriteTextAnalyzer;
typedef struct IDWriteTextAnalyzer1            { struct { void* tbl[]; }* v; } IDWriteTextAnalyzer1;
typedef struct IDWriteTextAnalyzer2            { struct { void* tbl[]; }* v; } IDWriteTextAnalyzer2;
typedef struct IDWriteTextFormat               { struct { void* tbl[]; }* v; } IDWriteTextFormat;
typedef struct IDWriteTextFormat1              { struct { void* tbl[]; }* v; } IDWriteTextFormat1;
typedef struct IDWriteTextFormat2              { struct { void* tbl[]; }* v; } IDWriteTextFormat2;
typedef struct IDWriteTextFormat3              { struct { void* tbl[]; }* v; } IDWriteTextFormat3;
typedef struct IDWriteTextLayout               { struct { void* tbl[]; }* v; } IDWriteTextLayout;
typedef struct IDWriteTextLayout1              { struct { void* tbl[]; }* v; } IDWriteTextLayout1;
typedef struct IDWriteTextLayout2              { struct { void* tbl[]; }* v; } IDWriteTextLayout2;
typedef struct IDWriteTextLayout3              { struct { void* tbl[]; }* v; } IDWriteTextLayout3;
typedef struct IDWriteTextLayout4              { struct { void* tbl[]; }* v; } IDWriteTextLayout4;
typedef struct IDWriteTextRenderer             { struct { void* tbl[]; }* v; } IDWriteTextRenderer;
typedef struct IDWriteTextRenderer1            { struct { void* tbl[]; }* v; } IDWriteTextRenderer1;
typedef struct IDWriteTypography               { struct { void* tbl[]; }* v; } IDWriteTypography;

// constants

#define DWRITE_ALPHA_MAX 255
#ifndef DWRITE_E_DOWNLOADCANCELLED
#define DWRITE_E_DOWNLOADCANCELLED ((HRESULT)0x8898500eL)
#endif
#ifndef DWRITE_E_DOWNLOADFAILED
#define DWRITE_E_DOWNLOADFAILED ((HRESULT)0x8898500fL)
#endif
#ifndef DWRITE_E_REMOTEFONT
#define DWRITE_E_REMOTEFONT ((HRESULT)0x8898500dL)
#endif
#ifndef DWRITE_E_TOOMANYDOWNLOADS
#define DWRITE_E_TOOMANYDOWNLOADS ((HRESULT)0x88985010L)
#endif
#define DWRITE_ERR_BASE 20480
#define DWRITE_STANDARD_FONT_AXIS_COUNT 5
#define FACILITY_DWRITE 2200

// enums

typedef enum DWRITE_AUTOMATIC_FONT_AXES {
    DWRITE_AUTOMATIC_FONT_AXES_NONE         = 0,
    DWRITE_AUTOMATIC_FONT_AXES_OPTICAL_SIZE = 1,
} DWRITE_AUTOMATIC_FONT_AXES;

typedef enum DWRITE_BASELINE {
    DWRITE_BASELINE_DEFAULT            = 0,
    DWRITE_BASELINE_ROMAN              = 1,
    DWRITE_BASELINE_CENTRAL            = 2,
    DWRITE_BASELINE_MATH               = 3,
    DWRITE_BASELINE_HANGING            = 4,
    DWRITE_BASELINE_IDEOGRAPHIC_BOTTOM = 5,
    DWRITE_BASELINE_IDEOGRAPHIC_TOP    = 6,
    DWRITE_BASELINE_MINIMUM            = 7,
    DWRITE_BASELINE_MAXIMUM            = 8,
} DWRITE_BASELINE;

typedef enum DWRITE_BREAK_CONDITION {
    DWRITE_BREAK_CONDITION_NEUTRAL       = 0,
    DWRITE_BREAK_CONDITION_CAN_BREAK     = 1,
    DWRITE_BREAK_CONDITION_MAY_NOT_BREAK = 2,
    DWRITE_BREAK_CONDITION_MUST_BREAK    = 3,
} DWRITE_BREAK_CONDITION;

typedef enum DWRITE_CONTAINER_TYPE {
    DWRITE_CONTAINER_TYPE_UNKNOWN = 0,
    DWRITE_CONTAINER_TYPE_WOFF    = 1,
    DWRITE_CONTAINER_TYPE_WOFF2   = 2,
} DWRITE_CONTAINER_TYPE;

typedef enum DWRITE_FACTORY_TYPE {
    DWRITE_FACTORY_TYPE_SHARED   = 0,
    DWRITE_FACTORY_TYPE_ISOLATED = 1,
} DWRITE_FACTORY_TYPE;

typedef enum DWRITE_FLOW_DIRECTION {
    DWRITE_FLOW_DIRECTION_TOP_TO_BOTTOM = 0,
    DWRITE_FLOW_DIRECTION_BOTTOM_TO_TOP = 1,
    DWRITE_FLOW_DIRECTION_LEFT_TO_RIGHT = 2,
    DWRITE_FLOW_DIRECTION_RIGHT_TO_LEFT = 3,
} DWRITE_FLOW_DIRECTION;

typedef enum DWRITE_FONT_AXIS_ATTRIBUTES {
    DWRITE_FONT_AXIS_ATTRIBUTES_NONE     = 0,
    DWRITE_FONT_AXIS_ATTRIBUTES_VARIABLE = 1,
    DWRITE_FONT_AXIS_ATTRIBUTES_HIDDEN   = 2,
} DWRITE_FONT_AXIS_ATTRIBUTES;

typedef enum DWRITE_FONT_AXIS_TAG {
    DWRITE_FONT_AXIS_TAG_WEIGHT       = 0x74686777,
    DWRITE_FONT_AXIS_TAG_WIDTH        = 0x68746477,
    DWRITE_FONT_AXIS_TAG_SLANT        = 0x746e6c73,
    DWRITE_FONT_AXIS_TAG_OPTICAL_SIZE = 0x7a73706f,
    DWRITE_FONT_AXIS_TAG_ITALIC       = 0x6c617469,
} DWRITE_FONT_AXIS_TAG;

typedef enum DWRITE_FONT_FACE_TYPE {
    DWRITE_FONT_FACE_TYPE_CFF                 = 0,
    DWRITE_FONT_FACE_TYPE_TRUETYPE            = 1,
    DWRITE_FONT_FACE_TYPE_OPENTYPE_COLLECTION = 2,
    DWRITE_FONT_FACE_TYPE_TYPE1               = 3,
    DWRITE_FONT_FACE_TYPE_VECTOR              = 4,
    DWRITE_FONT_FACE_TYPE_BITMAP              = 5,
    DWRITE_FONT_FACE_TYPE_UNKNOWN             = 6,
    DWRITE_FONT_FACE_TYPE_RAW_CFF             = 7,
    DWRITE_FONT_FACE_TYPE_TRUETYPE_COLLECTION = 2,
} DWRITE_FONT_FACE_TYPE;

typedef enum DWRITE_FONT_FAMILY_MODEL {
    DWRITE_FONT_FAMILY_MODEL_TYPOGRAPHIC          = 0,
    DWRITE_FONT_FAMILY_MODEL_WEIGHT_STRETCH_STYLE = 1,
} DWRITE_FONT_FAMILY_MODEL;

typedef enum DWRITE_FONT_FEATURE_TAG {
    DWRITE_FONT_FEATURE_TAG_ALTERNATIVE_FRACTIONS            = 0x63726661,
    DWRITE_FONT_FEATURE_TAG_PETITE_CAPITALS_FROM_CAPITALS    = 0x63703263,
    DWRITE_FONT_FEATURE_TAG_SMALL_CAPITALS_FROM_CAPITALS     = 0x63733263,
    DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_ALTERNATES            = 0x746c6163,
    DWRITE_FONT_FEATURE_TAG_CASE_SENSITIVE_FORMS             = 0x65736163,
    DWRITE_FONT_FEATURE_TAG_GLYPH_COMPOSITION_DECOMPOSITION  = 0x706d6363,
    DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_LIGATURES             = 0x67696c63,
    DWRITE_FONT_FEATURE_TAG_CAPITAL_SPACING                  = 0x70737063,
    DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_SWASH                 = 0x68777363,
    DWRITE_FONT_FEATURE_TAG_CURSIVE_POSITIONING              = 0x73727563,
    DWRITE_FONT_FEATURE_TAG_DEFAULT                          = 0x746c6664,
    DWRITE_FONT_FEATURE_TAG_DISCRETIONARY_LIGATURES          = 0x67696c64,
    DWRITE_FONT_FEATURE_TAG_EXPERT_FORMS                     = 0x74707865,
    DWRITE_FONT_FEATURE_TAG_FRACTIONS                        = 0x63617266,
    DWRITE_FONT_FEATURE_TAG_FULL_WIDTH                       = 0x64697766,
    DWRITE_FONT_FEATURE_TAG_HALF_FORMS                       = 0x666c6168,
    DWRITE_FONT_FEATURE_TAG_HALANT_FORMS                     = 0x6e6c6168,
    DWRITE_FONT_FEATURE_TAG_ALTERNATE_HALF_WIDTH             = 0x746c6168,
    DWRITE_FONT_FEATURE_TAG_HISTORICAL_FORMS                 = 0x74736968,
    DWRITE_FONT_FEATURE_TAG_HORIZONTAL_KANA_ALTERNATES       = 0x616e6b68,
    DWRITE_FONT_FEATURE_TAG_HISTORICAL_LIGATURES             = 0x67696c68,
    DWRITE_FONT_FEATURE_TAG_HALF_WIDTH                       = 0x64697768,
    DWRITE_FONT_FEATURE_TAG_HOJO_KANJI_FORMS                 = 0x6f6a6f68,
    DWRITE_FONT_FEATURE_TAG_JIS04_FORMS                      = 0x3430706a,
    DWRITE_FONT_FEATURE_TAG_JIS78_FORMS                      = 0x3837706a,
    DWRITE_FONT_FEATURE_TAG_JIS83_FORMS                      = 0x3338706a,
    DWRITE_FONT_FEATURE_TAG_JIS90_FORMS                      = 0x3039706a,
    DWRITE_FONT_FEATURE_TAG_KERNING                          = 0x6e72656b,
    DWRITE_FONT_FEATURE_TAG_STANDARD_LIGATURES               = 0x6167696c,
    DWRITE_FONT_FEATURE_TAG_LINING_FIGURES                   = 0x6d756e6c,
    DWRITE_FONT_FEATURE_TAG_LOCALIZED_FORMS                  = 0x6c636f6c,
    DWRITE_FONT_FEATURE_TAG_MARK_POSITIONING                 = 0x6b72616d,
    DWRITE_FONT_FEATURE_TAG_MATHEMATICAL_GREEK               = 0x6b72676d,
    DWRITE_FONT_FEATURE_TAG_MARK_TO_MARK_POSITIONING         = 0x6b6d6b6d,
    DWRITE_FONT_FEATURE_TAG_ALTERNATE_ANNOTATION_FORMS       = 0x746c616e,
    DWRITE_FONT_FEATURE_TAG_NLC_KANJI_FORMS                  = 0x6b636c6e,
    DWRITE_FONT_FEATURE_TAG_OLD_STYLE_FIGURES                = 0x6d756e6f,
    DWRITE_FONT_FEATURE_TAG_ORDINALS                         = 0x6e64726f,
    DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_ALTERNATE_WIDTH     = 0x746c6170,
    DWRITE_FONT_FEATURE_TAG_PETITE_CAPITALS                  = 0x70616370,
    DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_FIGURES             = 0x6d756e70,
    DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_WIDTHS              = 0x64697770,
    DWRITE_FONT_FEATURE_TAG_QUARTER_WIDTHS                   = 0x64697771,
    DWRITE_FONT_FEATURE_TAG_REQUIRED_LIGATURES               = 0x67696c72,
    DWRITE_FONT_FEATURE_TAG_RUBY_NOTATION_FORMS              = 0x79627572,
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_ALTERNATES             = 0x746c6173,
    DWRITE_FONT_FEATURE_TAG_SCIENTIFIC_INFERIORS             = 0x666e6973,
    DWRITE_FONT_FEATURE_TAG_SMALL_CAPITALS                   = 0x70636d73,
    DWRITE_FONT_FEATURE_TAG_SIMPLIFIED_FORMS                 = 0x6c706d73,
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1                  = 0x31307373,
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_2                  = 0x32307373,
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_3                  = 0x33307373,
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_4                  = 0x34307373,
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_5                  = 0x35307373,
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_6                  = 0x36307373,
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_7                  = 0x37307373,
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_8                  = 0x38307373,
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_9                  = 0x39307373,
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_10                 = 0x30317373,
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_11                 = 0x31317373,
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_12                 = 0x32317373,
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_13                 = 0x33317373,
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_14                 = 0x34317373,
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_15                 = 0x35317373,
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_16                 = 0x36317373,
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_17                 = 0x37317373,
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_18                 = 0x38317373,
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_19                 = 0x39317373,
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_20                 = 0x30327373,
    DWRITE_FONT_FEATURE_TAG_SUBSCRIPT                        = 0x73627573,
    DWRITE_FONT_FEATURE_TAG_SUPERSCRIPT                      = 0x73707573,
    DWRITE_FONT_FEATURE_TAG_SWASH                            = 0x68737773,
    DWRITE_FONT_FEATURE_TAG_TITLING                          = 0x6c746974,
    DWRITE_FONT_FEATURE_TAG_TRADITIONAL_NAME_FORMS           = 0x6d616e74,
    DWRITE_FONT_FEATURE_TAG_TABULAR_FIGURES                  = 0x6d756e74,
    DWRITE_FONT_FEATURE_TAG_TRADITIONAL_FORMS                = 0x64617274,
    DWRITE_FONT_FEATURE_TAG_THIRD_WIDTHS                     = 0x64697774,
    DWRITE_FONT_FEATURE_TAG_UNICASE                          = 0x63696e75,
    DWRITE_FONT_FEATURE_TAG_VERTICAL_WRITING                 = 0x74726576,
    DWRITE_FONT_FEATURE_TAG_VERTICAL_ALTERNATES_AND_ROTATION = 0x32747276,
    DWRITE_FONT_FEATURE_TAG_SLASHED_ZERO                     = 0x6f72657a,
} DWRITE_FONT_FEATURE_TAG;

typedef enum DWRITE_FONT_FILE_TYPE {
    DWRITE_FONT_FILE_TYPE_UNKNOWN             = 0,
    DWRITE_FONT_FILE_TYPE_CFF                 = 1,
    DWRITE_FONT_FILE_TYPE_TRUETYPE            = 2,
    DWRITE_FONT_FILE_TYPE_OPENTYPE_COLLECTION = 3,
    DWRITE_FONT_FILE_TYPE_TYPE1_PFM           = 4,
    DWRITE_FONT_FILE_TYPE_TYPE1_PFB           = 5,
    DWRITE_FONT_FILE_TYPE_VECTOR              = 6,
    DWRITE_FONT_FILE_TYPE_BITMAP              = 7,
    DWRITE_FONT_FILE_TYPE_TRUETYPE_COLLECTION = 3,
} DWRITE_FONT_FILE_TYPE;

typedef enum DWRITE_FONT_LINE_GAP_USAGE {
    DWRITE_FONT_LINE_GAP_USAGE_DEFAULT  = 0,
    DWRITE_FONT_LINE_GAP_USAGE_DISABLED = 1,
    DWRITE_FONT_LINE_GAP_USAGE_ENABLED  = 2,
} DWRITE_FONT_LINE_GAP_USAGE;

typedef enum DWRITE_FONT_PROPERTY_ID {
    DWRITE_FONT_PROPERTY_ID_NONE                             = 0,
    DWRITE_FONT_PROPERTY_ID_WEIGHT_STRETCH_STYLE_FAMILY_NAME = 1,
    DWRITE_FONT_PROPERTY_ID_TYPOGRAPHIC_FAMILY_NAME          = 2,
    DWRITE_FONT_PROPERTY_ID_WEIGHT_STRETCH_STYLE_FACE_NAME   = 3,
    DWRITE_FONT_PROPERTY_ID_FULL_NAME                        = 4,
    DWRITE_FONT_PROPERTY_ID_WIN32_FAMILY_NAME                = 5,
    DWRITE_FONT_PROPERTY_ID_POSTSCRIPT_NAME                  = 6,
    DWRITE_FONT_PROPERTY_ID_DESIGN_SCRIPT_LANGUAGE_TAG       = 7,
    DWRITE_FONT_PROPERTY_ID_SUPPORTED_SCRIPT_LANGUAGE_TAG    = 8,
    DWRITE_FONT_PROPERTY_ID_SEMANTIC_TAG                     = 9,
    DWRITE_FONT_PROPERTY_ID_WEIGHT                           = 10,
    DWRITE_FONT_PROPERTY_ID_STRETCH                          = 11,
    DWRITE_FONT_PROPERTY_ID_STYLE                            = 12,
    DWRITE_FONT_PROPERTY_ID_TYPOGRAPHIC_FACE_NAME            = 13,
    DWRITE_FONT_PROPERTY_ID_TOTAL                            = 13,
    DWRITE_FONT_PROPERTY_ID_TOTAL_RS3                        = 14,
    DWRITE_FONT_PROPERTY_ID_PREFERRED_FAMILY_NAME            = 2,
    DWRITE_FONT_PROPERTY_ID_FAMILY_NAME                      = 1,
    DWRITE_FONT_PROPERTY_ID_FACE_NAME                        = 3,
} DWRITE_FONT_PROPERTY_ID;

typedef enum DWRITE_FONT_SIMULATIONS {
    DWRITE_FONT_SIMULATIONS_NONE    = 0,
    DWRITE_FONT_SIMULATIONS_BOLD    = 1,
    DWRITE_FONT_SIMULATIONS_OBLIQUE = 2,
} DWRITE_FONT_SIMULATIONS;

typedef enum DWRITE_FONT_SOURCE_TYPE {
    DWRITE_FONT_SOURCE_TYPE_UNKNOWN              = 0,
    DWRITE_FONT_SOURCE_TYPE_PER_MACHINE          = 1,
    DWRITE_FONT_SOURCE_TYPE_PER_USER             = 2,
    DWRITE_FONT_SOURCE_TYPE_APPX_PACKAGE         = 3,
    DWRITE_FONT_SOURCE_TYPE_REMOTE_FONT_PROVIDER = 4,
} DWRITE_FONT_SOURCE_TYPE;

typedef enum DWRITE_FONT_STRETCH {
    DWRITE_FONT_STRETCH_UNDEFINED       = 0,
    DWRITE_FONT_STRETCH_ULTRA_CONDENSED = 1,
    DWRITE_FONT_STRETCH_EXTRA_CONDENSED = 2,
    DWRITE_FONT_STRETCH_CONDENSED       = 3,
    DWRITE_FONT_STRETCH_SEMI_CONDENSED  = 4,
    DWRITE_FONT_STRETCH_NORMAL          = 5,
    DWRITE_FONT_STRETCH_MEDIUM          = 5,
    DWRITE_FONT_STRETCH_SEMI_EXPANDED   = 6,
    DWRITE_FONT_STRETCH_EXPANDED        = 7,
    DWRITE_FONT_STRETCH_EXTRA_EXPANDED  = 8,
    DWRITE_FONT_STRETCH_ULTRA_EXPANDED  = 9,
} DWRITE_FONT_STRETCH;

typedef enum DWRITE_FONT_STYLE {
    DWRITE_FONT_STYLE_NORMAL  = 0,
    DWRITE_FONT_STYLE_OBLIQUE = 1,
    DWRITE_FONT_STYLE_ITALIC  = 2,
} DWRITE_FONT_STYLE;

typedef enum DWRITE_FONT_WEIGHT {
    DWRITE_FONT_WEIGHT_THIN        = 100,
    DWRITE_FONT_WEIGHT_EXTRA_LIGHT = 200,
    DWRITE_FONT_WEIGHT_ULTRA_LIGHT = 200,
    DWRITE_FONT_WEIGHT_LIGHT       = 300,
    DWRITE_FONT_WEIGHT_SEMI_LIGHT  = 350,
    DWRITE_FONT_WEIGHT_NORMAL      = 400,
    DWRITE_FONT_WEIGHT_REGULAR     = 400,
    DWRITE_FONT_WEIGHT_MEDIUM      = 500,
    DWRITE_FONT_WEIGHT_DEMI_BOLD   = 600,
    DWRITE_FONT_WEIGHT_SEMI_BOLD   = 600,
    DWRITE_FONT_WEIGHT_BOLD        = 700,
    DWRITE_FONT_WEIGHT_EXTRA_BOLD  = 800,
    DWRITE_FONT_WEIGHT_ULTRA_BOLD  = 800,
    DWRITE_FONT_WEIGHT_BLACK       = 900,
    DWRITE_FONT_WEIGHT_HEAVY       = 900,
    DWRITE_FONT_WEIGHT_EXTRA_BLACK = 950,
    DWRITE_FONT_WEIGHT_ULTRA_BLACK = 950,
} DWRITE_FONT_WEIGHT;

typedef enum DWRITE_GLYPH_ORIENTATION_ANGLE {
    DWRITE_GLYPH_ORIENTATION_ANGLE_0_DEGREES   = 0,
    DWRITE_GLYPH_ORIENTATION_ANGLE_90_DEGREES  = 1,
    DWRITE_GLYPH_ORIENTATION_ANGLE_180_DEGREES = 2,
    DWRITE_GLYPH_ORIENTATION_ANGLE_270_DEGREES = 3,
} DWRITE_GLYPH_ORIENTATION_ANGLE;

typedef enum DWRITE_GRID_FIT_MODE {
    DWRITE_GRID_FIT_MODE_DEFAULT  = 0,
    DWRITE_GRID_FIT_MODE_DISABLED = 1,
    DWRITE_GRID_FIT_MODE_ENABLED  = 2,
} DWRITE_GRID_FIT_MODE;

typedef enum DWRITE_INFORMATIONAL_STRING_ID {
    DWRITE_INFORMATIONAL_STRING_NONE                             = 0,
    DWRITE_INFORMATIONAL_STRING_COPYRIGHT_NOTICE                 = 1,
    DWRITE_INFORMATIONAL_STRING_VERSION_STRINGS                  = 2,
    DWRITE_INFORMATIONAL_STRING_TRADEMARK                        = 3,
    DWRITE_INFORMATIONAL_STRING_MANUFACTURER                     = 4,
    DWRITE_INFORMATIONAL_STRING_DESIGNER                         = 5,
    DWRITE_INFORMATIONAL_STRING_DESIGNER_URL                     = 6,
    DWRITE_INFORMATIONAL_STRING_DESCRIPTION                      = 7,
    DWRITE_INFORMATIONAL_STRING_FONT_VENDOR_URL                  = 8,
    DWRITE_INFORMATIONAL_STRING_LICENSE_DESCRIPTION              = 9,
    DWRITE_INFORMATIONAL_STRING_LICENSE_INFO_URL                 = 10,
    DWRITE_INFORMATIONAL_STRING_WIN32_FAMILY_NAMES               = 11,
    DWRITE_INFORMATIONAL_STRING_WIN32_SUBFAMILY_NAMES            = 12,
    DWRITE_INFORMATIONAL_STRING_TYPOGRAPHIC_FAMILY_NAMES         = 13,
    DWRITE_INFORMATIONAL_STRING_TYPOGRAPHIC_SUBFAMILY_NAMES      = 14,
    DWRITE_INFORMATIONAL_STRING_SAMPLE_TEXT                      = 15,
    DWRITE_INFORMATIONAL_STRING_FULL_NAME                        = 16,
    DWRITE_INFORMATIONAL_STRING_POSTSCRIPT_NAME                  = 17,
    DWRITE_INFORMATIONAL_STRING_POSTSCRIPT_CID_NAME              = 18,
    DWRITE_INFORMATIONAL_STRING_WEIGHT_STRETCH_STYLE_FAMILY_NAME = 19,
    DWRITE_INFORMATIONAL_STRING_DESIGN_SCRIPT_LANGUAGE_TAG       = 20,
    DWRITE_INFORMATIONAL_STRING_SUPPORTED_SCRIPT_LANGUAGE_TAG    = 21,
    DWRITE_INFORMATIONAL_STRING_PREFERRED_FAMILY_NAMES           = 13,
    DWRITE_INFORMATIONAL_STRING_PREFERRED_SUBFAMILY_NAMES        = 14,
    DWRITE_INFORMATIONAL_STRING_WWS_FAMILY_NAME                  = 19,
} DWRITE_INFORMATIONAL_STRING_ID;

typedef enum DWRITE_LINE_SPACING_METHOD {
    DWRITE_LINE_SPACING_METHOD_DEFAULT      = 0,
    DWRITE_LINE_SPACING_METHOD_UNIFORM      = 1,
    DWRITE_LINE_SPACING_METHOD_PROPORTIONAL = 2,
} DWRITE_LINE_SPACING_METHOD;

typedef enum DWRITE_LOCALITY {
    DWRITE_LOCALITY_REMOTE  = 0,
    DWRITE_LOCALITY_PARTIAL = 1,
    DWRITE_LOCALITY_LOCAL   = 2,
} DWRITE_LOCALITY;

typedef enum DWRITE_NUMBER_SUBSTITUTION_METHOD {
    DWRITE_NUMBER_SUBSTITUTION_METHOD_FROM_CULTURE = 0,
    DWRITE_NUMBER_SUBSTITUTION_METHOD_CONTEXTUAL   = 1,
    DWRITE_NUMBER_SUBSTITUTION_METHOD_NONE         = 2,
    DWRITE_NUMBER_SUBSTITUTION_METHOD_NATIONAL     = 3,
    DWRITE_NUMBER_SUBSTITUTION_METHOD_TRADITIONAL  = 4,
} DWRITE_NUMBER_SUBSTITUTION_METHOD;

typedef enum DWRITE_OPTICAL_ALIGNMENT {
    DWRITE_OPTICAL_ALIGNMENT_NONE             = 0,
    DWRITE_OPTICAL_ALIGNMENT_NO_SIDE_BEARINGS = 1,
} DWRITE_OPTICAL_ALIGNMENT;

typedef enum DWRITE_OUTLINE_THRESHOLD {
    DWRITE_OUTLINE_THRESHOLD_ANTIALIASED = 0,
    DWRITE_OUTLINE_THRESHOLD_ALIASED     = 1,
} DWRITE_OUTLINE_THRESHOLD;

typedef enum DWRITE_PANOSE_ARM_STYLE {
    DWRITE_PANOSE_ARM_STYLE_ANY                           = 0,
    DWRITE_PANOSE_ARM_STYLE_NO_FIT                        = 1,
    DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_HORIZONTAL      = 2,
    DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_WEDGE           = 3,
    DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_VERTICAL        = 4,
    DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_SINGLE_SERIF    = 5,
    DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_DOUBLE_SERIF    = 6,
    DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_HORIZONTAL   = 7,
    DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_WEDGE        = 8,
    DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_VERTICAL     = 9,
    DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_SINGLE_SERIF = 10,
    DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_DOUBLE_SERIF = 11,
    DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_HORZ            = 2,
    DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_VERT            = 4,
    DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_HORZ                = 7,
    DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_WEDGE               = 8,
    DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_VERT                = 9,
    DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_SINGLE_SERIF        = 10,
    DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_DOUBLE_SERIF        = 11,
} DWRITE_PANOSE_ARM_STYLE;

typedef enum DWRITE_PANOSE_ASPECT {
    DWRITE_PANOSE_ASPECT_ANY             = 0,
    DWRITE_PANOSE_ASPECT_NO_FIT          = 1,
    DWRITE_PANOSE_ASPECT_SUPER_CONDENSED = 2,
    DWRITE_PANOSE_ASPECT_VERY_CONDENSED  = 3,
    DWRITE_PANOSE_ASPECT_CONDENSED       = 4,
    DWRITE_PANOSE_ASPECT_NORMAL          = 5,
    DWRITE_PANOSE_ASPECT_EXTENDED        = 6,
    DWRITE_PANOSE_ASPECT_VERY_EXTENDED   = 7,
    DWRITE_PANOSE_ASPECT_SUPER_EXTENDED  = 8,
    DWRITE_PANOSE_ASPECT_MONOSPACED      = 9,
} DWRITE_PANOSE_ASPECT;

typedef enum DWRITE_PANOSE_ASPECT_RATIO {
    DWRITE_PANOSE_ASPECT_RATIO_ANY            = 0,
    DWRITE_PANOSE_ASPECT_RATIO_NO_FIT         = 1,
    DWRITE_PANOSE_ASPECT_RATIO_VERY_CONDENSED = 2,
    DWRITE_PANOSE_ASPECT_RATIO_CONDENSED      = 3,
    DWRITE_PANOSE_ASPECT_RATIO_NORMAL         = 4,
    DWRITE_PANOSE_ASPECT_RATIO_EXPANDED       = 5,
    DWRITE_PANOSE_ASPECT_RATIO_VERY_EXPANDED  = 6,
} DWRITE_PANOSE_ASPECT_RATIO;

typedef enum DWRITE_PANOSE_CHARACTER_RANGES {
    DWRITE_PANOSE_CHARACTER_RANGES_ANY                 = 0,
    DWRITE_PANOSE_CHARACTER_RANGES_NO_FIT              = 1,
    DWRITE_PANOSE_CHARACTER_RANGES_EXTENDED_COLLECTION = 2,
    DWRITE_PANOSE_CHARACTER_RANGES_LITERALS            = 3,
    DWRITE_PANOSE_CHARACTER_RANGES_NO_LOWER_CASE       = 4,
    DWRITE_PANOSE_CHARACTER_RANGES_SMALL_CAPS          = 5,
} DWRITE_PANOSE_CHARACTER_RANGES;

typedef enum DWRITE_PANOSE_CONTRAST {
    DWRITE_PANOSE_CONTRAST_ANY               = 0,
    DWRITE_PANOSE_CONTRAST_NO_FIT            = 1,
    DWRITE_PANOSE_CONTRAST_NONE              = 2,
    DWRITE_PANOSE_CONTRAST_VERY_LOW          = 3,
    DWRITE_PANOSE_CONTRAST_LOW               = 4,
    DWRITE_PANOSE_CONTRAST_MEDIUM_LOW        = 5,
    DWRITE_PANOSE_CONTRAST_MEDIUM            = 6,
    DWRITE_PANOSE_CONTRAST_MEDIUM_HIGH       = 7,
    DWRITE_PANOSE_CONTRAST_HIGH              = 8,
    DWRITE_PANOSE_CONTRAST_VERY_HIGH         = 9,
    DWRITE_PANOSE_CONTRAST_HORIZONTAL_LOW    = 10,
    DWRITE_PANOSE_CONTRAST_HORIZONTAL_MEDIUM = 11,
    DWRITE_PANOSE_CONTRAST_HORIZONTAL_HIGH   = 12,
    DWRITE_PANOSE_CONTRAST_BROKEN            = 13,
} DWRITE_PANOSE_CONTRAST;

typedef enum DWRITE_PANOSE_DECORATIVE_CLASS {
    DWRITE_PANOSE_DECORATIVE_CLASS_ANY                  = 0,
    DWRITE_PANOSE_DECORATIVE_CLASS_NO_FIT               = 1,
    DWRITE_PANOSE_DECORATIVE_CLASS_DERIVATIVE           = 2,
    DWRITE_PANOSE_DECORATIVE_CLASS_NONSTANDARD_TOPOLOGY = 3,
    DWRITE_PANOSE_DECORATIVE_CLASS_NONSTANDARD_ELEMENTS = 4,
    DWRITE_PANOSE_DECORATIVE_CLASS_NONSTANDARD_ASPECT   = 5,
    DWRITE_PANOSE_DECORATIVE_CLASS_INITIALS             = 6,
    DWRITE_PANOSE_DECORATIVE_CLASS_CARTOON              = 7,
    DWRITE_PANOSE_DECORATIVE_CLASS_PICTURE_STEMS        = 8,
    DWRITE_PANOSE_DECORATIVE_CLASS_ORNAMENTED           = 9,
    DWRITE_PANOSE_DECORATIVE_CLASS_TEXT_AND_BACKGROUND  = 10,
    DWRITE_PANOSE_DECORATIVE_CLASS_COLLAGE              = 11,
    DWRITE_PANOSE_DECORATIVE_CLASS_MONTAGE              = 12,
} DWRITE_PANOSE_DECORATIVE_CLASS;

typedef enum DWRITE_PANOSE_DECORATIVE_TOPOLOGY {
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_ANY                      = 0,
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_NO_FIT                   = 1,
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_STANDARD                 = 2,
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_SQUARE                   = 3,
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_MULTIPLE_SEGMENT         = 4,
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_ART_DECO                 = 5,
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_UNEVEN_WEIGHTING         = 6,
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_DIVERSE_ARMS             = 7,
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_DIVERSE_FORMS            = 8,
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_LOMBARDIC_FORMS          = 9,
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_UPPER_CASE_IN_LOWER_CASE = 10,
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_IMPLIED_TOPOLOGY         = 11,
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_HORSESHOE_E_AND_A        = 12,
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_CURSIVE                  = 13,
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_BLACKLETTER              = 14,
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_SWASH_VARIANCE           = 15,
} DWRITE_PANOSE_DECORATIVE_TOPOLOGY;

typedef enum DWRITE_PANOSE_FAMILY {
    DWRITE_PANOSE_FAMILY_ANY          = 0,
    DWRITE_PANOSE_FAMILY_NO_FIT       = 1,
    DWRITE_PANOSE_FAMILY_TEXT_DISPLAY = 2,
    DWRITE_PANOSE_FAMILY_SCRIPT       = 3,
    DWRITE_PANOSE_FAMILY_DECORATIVE   = 4,
    DWRITE_PANOSE_FAMILY_SYMBOL       = 5,
    DWRITE_PANOSE_FAMILY_PICTORIAL    = 5,
} DWRITE_PANOSE_FAMILY;

typedef enum DWRITE_PANOSE_FILL {
    DWRITE_PANOSE_FILL_ANY                 = 0,
    DWRITE_PANOSE_FILL_NO_FIT              = 1,
    DWRITE_PANOSE_FILL_STANDARD_SOLID_FILL = 2,
    DWRITE_PANOSE_FILL_NO_FILL             = 3,
    DWRITE_PANOSE_FILL_PATTERNED_FILL      = 4,
    DWRITE_PANOSE_FILL_COMPLEX_FILL        = 5,
    DWRITE_PANOSE_FILL_SHAPED_FILL         = 6,
    DWRITE_PANOSE_FILL_DRAWN_DISTRESSED    = 7,
} DWRITE_PANOSE_FILL;

typedef enum DWRITE_PANOSE_FINIALS {
    DWRITE_PANOSE_FINIALS_ANY                  = 0,
    DWRITE_PANOSE_FINIALS_NO_FIT               = 1,
    DWRITE_PANOSE_FINIALS_NONE_NO_LOOPS        = 2,
    DWRITE_PANOSE_FINIALS_NONE_CLOSED_LOOPS    = 3,
    DWRITE_PANOSE_FINIALS_NONE_OPEN_LOOPS      = 4,
    DWRITE_PANOSE_FINIALS_SHARP_NO_LOOPS       = 5,
    DWRITE_PANOSE_FINIALS_SHARP_CLOSED_LOOPS   = 6,
    DWRITE_PANOSE_FINIALS_SHARP_OPEN_LOOPS     = 7,
    DWRITE_PANOSE_FINIALS_TAPERED_NO_LOOPS     = 8,
    DWRITE_PANOSE_FINIALS_TAPERED_CLOSED_LOOPS = 9,
    DWRITE_PANOSE_FINIALS_TAPERED_OPEN_LOOPS   = 10,
    DWRITE_PANOSE_FINIALS_ROUND_NO_LOOPS       = 11,
    DWRITE_PANOSE_FINIALS_ROUND_CLOSED_LOOPS   = 12,
    DWRITE_PANOSE_FINIALS_ROUND_OPEN_LOOPS     = 13,
} DWRITE_PANOSE_FINIALS;

typedef enum DWRITE_PANOSE_LETTERFORM {
    DWRITE_PANOSE_LETTERFORM_ANY                = 0,
    DWRITE_PANOSE_LETTERFORM_NO_FIT             = 1,
    DWRITE_PANOSE_LETTERFORM_NORMAL_CONTACT     = 2,
    DWRITE_PANOSE_LETTERFORM_NORMAL_WEIGHTED    = 3,
    DWRITE_PANOSE_LETTERFORM_NORMAL_BOXED       = 4,
    DWRITE_PANOSE_LETTERFORM_NORMAL_FLATTENED   = 5,
    DWRITE_PANOSE_LETTERFORM_NORMAL_ROUNDED     = 6,
    DWRITE_PANOSE_LETTERFORM_NORMAL_OFF_CENTER  = 7,
    DWRITE_PANOSE_LETTERFORM_NORMAL_SQUARE      = 8,
    DWRITE_PANOSE_LETTERFORM_OBLIQUE_CONTACT    = 9,
    DWRITE_PANOSE_LETTERFORM_OBLIQUE_WEIGHTED   = 10,
    DWRITE_PANOSE_LETTERFORM_OBLIQUE_BOXED      = 11,
    DWRITE_PANOSE_LETTERFORM_OBLIQUE_FLATTENED  = 12,
    DWRITE_PANOSE_LETTERFORM_OBLIQUE_ROUNDED    = 13,
    DWRITE_PANOSE_LETTERFORM_OBLIQUE_OFF_CENTER = 14,
    DWRITE_PANOSE_LETTERFORM_OBLIQUE_SQUARE     = 15,
} DWRITE_PANOSE_LETTERFORM;

typedef enum DWRITE_PANOSE_LINING {
    DWRITE_PANOSE_LINING_ANY      = 0,
    DWRITE_PANOSE_LINING_NO_FIT   = 1,
    DWRITE_PANOSE_LINING_NONE     = 2,
    DWRITE_PANOSE_LINING_INLINE   = 3,
    DWRITE_PANOSE_LINING_OUTLINE  = 4,
    DWRITE_PANOSE_LINING_ENGRAVED = 5,
    DWRITE_PANOSE_LINING_SHADOW   = 6,
    DWRITE_PANOSE_LINING_RELIEF   = 7,
    DWRITE_PANOSE_LINING_BACKDROP = 8,
} DWRITE_PANOSE_LINING;

typedef enum DWRITE_PANOSE_MIDLINE {
    DWRITE_PANOSE_MIDLINE_ANY              = 0,
    DWRITE_PANOSE_MIDLINE_NO_FIT           = 1,
    DWRITE_PANOSE_MIDLINE_STANDARD_TRIMMED = 2,
    DWRITE_PANOSE_MIDLINE_STANDARD_POINTED = 3,
    DWRITE_PANOSE_MIDLINE_STANDARD_SERIFED = 4,
    DWRITE_PANOSE_MIDLINE_HIGH_TRIMMED     = 5,
    DWRITE_PANOSE_MIDLINE_HIGH_POINTED     = 6,
    DWRITE_PANOSE_MIDLINE_HIGH_SERIFED     = 7,
    DWRITE_PANOSE_MIDLINE_CONSTANT_TRIMMED = 8,
    DWRITE_PANOSE_MIDLINE_CONSTANT_POINTED = 9,
    DWRITE_PANOSE_MIDLINE_CONSTANT_SERIFED = 10,
    DWRITE_PANOSE_MIDLINE_LOW_TRIMMED      = 11,
    DWRITE_PANOSE_MIDLINE_LOW_POINTED      = 12,
    DWRITE_PANOSE_MIDLINE_LOW_SERIFED      = 13,
} DWRITE_PANOSE_MIDLINE;

typedef enum DWRITE_PANOSE_PROPORTION {
    DWRITE_PANOSE_PROPORTION_ANY            = 0,
    DWRITE_PANOSE_PROPORTION_NO_FIT         = 1,
    DWRITE_PANOSE_PROPORTION_OLD_STYLE      = 2,
    DWRITE_PANOSE_PROPORTION_MODERN         = 3,
    DWRITE_PANOSE_PROPORTION_EVEN_WIDTH     = 4,
    DWRITE_PANOSE_PROPORTION_EXPANDED       = 5,
    DWRITE_PANOSE_PROPORTION_CONDENSED      = 6,
    DWRITE_PANOSE_PROPORTION_VERY_EXPANDED  = 7,
    DWRITE_PANOSE_PROPORTION_VERY_CONDENSED = 8,
    DWRITE_PANOSE_PROPORTION_MONOSPACED     = 9,
} DWRITE_PANOSE_PROPORTION;

typedef enum DWRITE_PANOSE_SCRIPT_FORM {
    DWRITE_PANOSE_SCRIPT_FORM_ANY                          = 0,
    DWRITE_PANOSE_SCRIPT_FORM_NO_FIT                       = 1,
    DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_NO_WRAPPING          = 2,
    DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_SOME_WRAPPING        = 3,
    DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_MORE_WRAPPING        = 4,
    DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_EXTREME_WRAPPING     = 5,
    DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_NO_WRAPPING          = 6,
    DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_SOME_WRAPPING        = 7,
    DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_MORE_WRAPPING        = 8,
    DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_EXTREME_WRAPPING     = 9,
    DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_NO_WRAPPING      = 10,
    DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_SOME_WRAPPING    = 11,
    DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_MORE_WRAPPING    = 12,
    DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_EXTREME_WRAPPING = 13,
} DWRITE_PANOSE_SCRIPT_FORM;

typedef enum DWRITE_PANOSE_SCRIPT_TOPOLOGY {
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_ANY                      = 0,
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_NO_FIT                   = 1,
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_ROMAN_DISCONNECTED       = 2,
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_ROMAN_TRAILING           = 3,
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_ROMAN_CONNECTED          = 4,
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_CURSIVE_DISCONNECTED     = 5,
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_CURSIVE_TRAILING         = 6,
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_CURSIVE_CONNECTED        = 7,
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_BLACKLETTER_DISCONNECTED = 8,
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_BLACKLETTER_TRAILING     = 9,
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_BLACKLETTER_CONNECTED    = 10,
} DWRITE_PANOSE_SCRIPT_TOPOLOGY;

typedef enum DWRITE_PANOSE_SERIF_STYLE {
    DWRITE_PANOSE_SERIF_STYLE_ANY                = 0,
    DWRITE_PANOSE_SERIF_STYLE_NO_FIT             = 1,
    DWRITE_PANOSE_SERIF_STYLE_COVE               = 2,
    DWRITE_PANOSE_SERIF_STYLE_OBTUSE_COVE        = 3,
    DWRITE_PANOSE_SERIF_STYLE_SQUARE_COVE        = 4,
    DWRITE_PANOSE_SERIF_STYLE_OBTUSE_SQUARE_COVE = 5,
    DWRITE_PANOSE_SERIF_STYLE_SQUARE             = 6,
    DWRITE_PANOSE_SERIF_STYLE_THIN               = 7,
    DWRITE_PANOSE_SERIF_STYLE_OVAL               = 8,
    DWRITE_PANOSE_SERIF_STYLE_EXAGGERATED        = 9,
    DWRITE_PANOSE_SERIF_STYLE_TRIANGLE           = 10,
    DWRITE_PANOSE_SERIF_STYLE_NORMAL_SANS        = 11,
    DWRITE_PANOSE_SERIF_STYLE_OBTUSE_SANS        = 12,
    DWRITE_PANOSE_SERIF_STYLE_PERPENDICULAR_SANS = 13,
    DWRITE_PANOSE_SERIF_STYLE_FLARED             = 14,
    DWRITE_PANOSE_SERIF_STYLE_ROUNDED            = 15,
    DWRITE_PANOSE_SERIF_STYLE_SCRIPT             = 16,
    DWRITE_PANOSE_SERIF_STYLE_PERP_SANS          = 13,
    DWRITE_PANOSE_SERIF_STYLE_BONE               = 8,
} DWRITE_PANOSE_SERIF_STYLE;

typedef enum DWRITE_PANOSE_SPACING {
    DWRITE_PANOSE_SPACING_ANY                 = 0,
    DWRITE_PANOSE_SPACING_NO_FIT              = 1,
    DWRITE_PANOSE_SPACING_PROPORTIONAL_SPACED = 2,
    DWRITE_PANOSE_SPACING_MONOSPACED          = 3,
} DWRITE_PANOSE_SPACING;

typedef enum DWRITE_PANOSE_STROKE_VARIATION {
    DWRITE_PANOSE_STROKE_VARIATION_ANY                  = 0,
    DWRITE_PANOSE_STROKE_VARIATION_NO_FIT               = 1,
    DWRITE_PANOSE_STROKE_VARIATION_NO_VARIATION         = 2,
    DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_DIAGONAL     = 3,
    DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_TRANSITIONAL = 4,
    DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_VERTICAL     = 5,
    DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_HORIZONTAL   = 6,
    DWRITE_PANOSE_STROKE_VARIATION_RAPID_VERTICAL       = 7,
    DWRITE_PANOSE_STROKE_VARIATION_RAPID_HORIZONTAL     = 8,
    DWRITE_PANOSE_STROKE_VARIATION_INSTANT_VERTICAL     = 9,
    DWRITE_PANOSE_STROKE_VARIATION_INSTANT_HORIZONTAL   = 10,
} DWRITE_PANOSE_STROKE_VARIATION;

typedef enum DWRITE_PANOSE_SYMBOL_ASPECT_RATIO {
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_ANY                = 0,
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NO_FIT             = 1,
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NO_WIDTH           = 2,
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_EXCEPTIONALLY_WIDE = 3,
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_SUPER_WIDE         = 4,
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_VERY_WIDE          = 5,
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_WIDE               = 6,
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NORMAL             = 7,
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NARROW             = 8,
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_VERY_NARROW        = 9,
} DWRITE_PANOSE_SYMBOL_ASPECT_RATIO;

typedef enum DWRITE_PANOSE_SYMBOL_KIND {
    DWRITE_PANOSE_SYMBOL_KIND_ANY               = 0,
    DWRITE_PANOSE_SYMBOL_KIND_NO_FIT            = 1,
    DWRITE_PANOSE_SYMBOL_KIND_MONTAGES          = 2,
    DWRITE_PANOSE_SYMBOL_KIND_PICTURES          = 3,
    DWRITE_PANOSE_SYMBOL_KIND_SHAPES            = 4,
    DWRITE_PANOSE_SYMBOL_KIND_SCIENTIFIC        = 5,
    DWRITE_PANOSE_SYMBOL_KIND_MUSIC             = 6,
    DWRITE_PANOSE_SYMBOL_KIND_EXPERT            = 7,
    DWRITE_PANOSE_SYMBOL_KIND_PATTERNS          = 8,
    DWRITE_PANOSE_SYMBOL_KIND_BOARDERS          = 9,
    DWRITE_PANOSE_SYMBOL_KIND_ICONS             = 10,
    DWRITE_PANOSE_SYMBOL_KIND_LOGOS             = 11,
    DWRITE_PANOSE_SYMBOL_KIND_INDUSTRY_SPECIFIC = 12,
} DWRITE_PANOSE_SYMBOL_KIND;

typedef enum DWRITE_PANOSE_TOOL_KIND {
    DWRITE_PANOSE_TOOL_KIND_ANY                = 0,
    DWRITE_PANOSE_TOOL_KIND_NO_FIT             = 1,
    DWRITE_PANOSE_TOOL_KIND_FLAT_NIB           = 2,
    DWRITE_PANOSE_TOOL_KIND_PRESSURE_POINT     = 3,
    DWRITE_PANOSE_TOOL_KIND_ENGRAVED           = 4,
    DWRITE_PANOSE_TOOL_KIND_BALL               = 5,
    DWRITE_PANOSE_TOOL_KIND_BRUSH              = 6,
    DWRITE_PANOSE_TOOL_KIND_ROUGH              = 7,
    DWRITE_PANOSE_TOOL_KIND_FELT_PEN_BRUSH_TIP = 8,
    DWRITE_PANOSE_TOOL_KIND_WILD_BRUSH         = 9,
} DWRITE_PANOSE_TOOL_KIND;

typedef enum DWRITE_PANOSE_WEIGHT {
    DWRITE_PANOSE_WEIGHT_ANY         = 0,
    DWRITE_PANOSE_WEIGHT_NO_FIT      = 1,
    DWRITE_PANOSE_WEIGHT_VERY_LIGHT  = 2,
    DWRITE_PANOSE_WEIGHT_LIGHT       = 3,
    DWRITE_PANOSE_WEIGHT_THIN        = 4,
    DWRITE_PANOSE_WEIGHT_BOOK        = 5,
    DWRITE_PANOSE_WEIGHT_MEDIUM      = 6,
    DWRITE_PANOSE_WEIGHT_DEMI        = 7,
    DWRITE_PANOSE_WEIGHT_BOLD        = 8,
    DWRITE_PANOSE_WEIGHT_HEAVY       = 9,
    DWRITE_PANOSE_WEIGHT_BLACK       = 10,
    DWRITE_PANOSE_WEIGHT_EXTRA_BLACK = 11,
    DWRITE_PANOSE_WEIGHT_NORD        = 11,
} DWRITE_PANOSE_WEIGHT;

typedef enum DWRITE_PANOSE_XASCENT {
    DWRITE_PANOSE_XASCENT_ANY       = 0,
    DWRITE_PANOSE_XASCENT_NO_FIT    = 1,
    DWRITE_PANOSE_XASCENT_VERY_LOW  = 2,
    DWRITE_PANOSE_XASCENT_LOW       = 3,
    DWRITE_PANOSE_XASCENT_MEDIUM    = 4,
    DWRITE_PANOSE_XASCENT_HIGH      = 5,
    DWRITE_PANOSE_XASCENT_VERY_HIGH = 6,
} DWRITE_PANOSE_XASCENT;

typedef enum DWRITE_PANOSE_XHEIGHT {
    DWRITE_PANOSE_XHEIGHT_ANY               = 0,
    DWRITE_PANOSE_XHEIGHT_NO_FIT            = 1,
    DWRITE_PANOSE_XHEIGHT_CONSTANT_SMALL    = 2,
    DWRITE_PANOSE_XHEIGHT_CONSTANT_STANDARD = 3,
    DWRITE_PANOSE_XHEIGHT_CONSTANT_LARGE    = 4,
    DWRITE_PANOSE_XHEIGHT_DUCKING_SMALL     = 5,
    DWRITE_PANOSE_XHEIGHT_DUCKING_STANDARD  = 6,
    DWRITE_PANOSE_XHEIGHT_DUCKING_LARGE     = 7,
    DWRITE_PANOSE_XHEIGHT_CONSTANT_STD      = 3,
    DWRITE_PANOSE_XHEIGHT_DUCKING_STD       = 6,
} DWRITE_PANOSE_XHEIGHT;

typedef enum DWRITE_PARAGRAPH_ALIGNMENT {
    DWRITE_PARAGRAPH_ALIGNMENT_NEAR   = 0,
    DWRITE_PARAGRAPH_ALIGNMENT_FAR    = 1,
    DWRITE_PARAGRAPH_ALIGNMENT_CENTER = 2,
} DWRITE_PARAGRAPH_ALIGNMENT;

typedef enum DWRITE_PIXEL_GEOMETRY {
    DWRITE_PIXEL_GEOMETRY_FLAT = 0,
    DWRITE_PIXEL_GEOMETRY_RGB  = 1,
    DWRITE_PIXEL_GEOMETRY_BGR  = 2,
} DWRITE_PIXEL_GEOMETRY;

typedef enum DWRITE_READING_DIRECTION {
    DWRITE_READING_DIRECTION_LEFT_TO_RIGHT = 0,
    DWRITE_READING_DIRECTION_RIGHT_TO_LEFT = 1,
    DWRITE_READING_DIRECTION_TOP_TO_BOTTOM = 2,
    DWRITE_READING_DIRECTION_BOTTOM_TO_TOP = 3,
} DWRITE_READING_DIRECTION;

typedef enum DWRITE_RENDERING_MODE {
    DWRITE_RENDERING_MODE_DEFAULT                     = 0,
    DWRITE_RENDERING_MODE_ALIASED                     = 1,
    DWRITE_RENDERING_MODE_GDI_CLASSIC                 = 2,
    DWRITE_RENDERING_MODE_GDI_NATURAL                 = 3,
    DWRITE_RENDERING_MODE_NATURAL                     = 4,
    DWRITE_RENDERING_MODE_NATURAL_SYMMETRIC           = 5,
    DWRITE_RENDERING_MODE_OUTLINE                     = 6,
    DWRITE_RENDERING_MODE_CLEARTYPE_GDI_CLASSIC       = 2,
    DWRITE_RENDERING_MODE_CLEARTYPE_GDI_NATURAL       = 3,
    DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL           = 4,
    DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL_SYMMETRIC = 5,
} DWRITE_RENDERING_MODE;

typedef enum DWRITE_RENDERING_MODE1 {
    DWRITE_RENDERING_MODE1_DEFAULT                       = 0,
    DWRITE_RENDERING_MODE1_ALIASED                       = 1,
    DWRITE_RENDERING_MODE1_GDI_CLASSIC                   = 2,
    DWRITE_RENDERING_MODE1_GDI_NATURAL                   = 3,
    DWRITE_RENDERING_MODE1_NATURAL                       = 4,
    DWRITE_RENDERING_MODE1_NATURAL_SYMMETRIC             = 5,
    DWRITE_RENDERING_MODE1_OUTLINE                       = 6,
    DWRITE_RENDERING_MODE1_NATURAL_SYMMETRIC_DOWNSAMPLED = 7,
} DWRITE_RENDERING_MODE1;

typedef enum DWRITE_SCRIPT_SHAPES {
    DWRITE_SCRIPT_SHAPES_DEFAULT   = 0,
    DWRITE_SCRIPT_SHAPES_NO_VISUAL = 1,
} DWRITE_SCRIPT_SHAPES;

typedef enum DWRITE_TEXT_ALIGNMENT {
    DWRITE_TEXT_ALIGNMENT_LEADING   = 0,
    DWRITE_TEXT_ALIGNMENT_TRAILING  = 1,
    DWRITE_TEXT_ALIGNMENT_CENTER    = 2,
    DWRITE_TEXT_ALIGNMENT_JUSTIFIED = 3,
} DWRITE_TEXT_ALIGNMENT;

typedef enum DWRITE_TEXT_ANTIALIAS_MODE {
    DWRITE_TEXT_ANTIALIAS_MODE_CLEARTYPE = 0,
    DWRITE_TEXT_ANTIALIAS_MODE_GRAYSCALE = 1,
} DWRITE_TEXT_ANTIALIAS_MODE;

typedef enum DWRITE_TEXTURE_TYPE {
    DWRITE_TEXTURE_ALIASED_1x1   = 0,
    DWRITE_TEXTURE_CLEARTYPE_3x1 = 1,
} DWRITE_TEXTURE_TYPE;

typedef enum DWRITE_TRIMMING_GRANULARITY {
    DWRITE_TRIMMING_GRANULARITY_NONE      = 0,
    DWRITE_TRIMMING_GRANULARITY_CHARACTER = 1,
    DWRITE_TRIMMING_GRANULARITY_WORD      = 2,
} DWRITE_TRIMMING_GRANULARITY;

typedef enum DWRITE_VERTICAL_GLYPH_ORIENTATION {
    DWRITE_VERTICAL_GLYPH_ORIENTATION_DEFAULT = 0,
    DWRITE_VERTICAL_GLYPH_ORIENTATION_STACKED = 1,
} DWRITE_VERTICAL_GLYPH_ORIENTATION;

typedef enum DWRITE_WORD_WRAPPING {
    DWRITE_WORD_WRAPPING_WRAP            = 0,
    DWRITE_WORD_WRAPPING_NO_WRAP         = 1,
    DWRITE_WORD_WRAPPING_EMERGENCY_BREAK = 2,
    DWRITE_WORD_WRAPPING_WHOLE_WORD      = 3,
    DWRITE_WORD_WRAPPING_CHARACTER       = 4,
} DWRITE_WORD_WRAPPING;

// structs

typedef struct DWRITE_CARET_METRICS {
    INT16 slopeRise;
    INT16 slopeRun;
    INT16 offset;
} DWRITE_CARET_METRICS;

typedef struct DWRITE_CLUSTER_METRICS {
    FLOAT  width;
    UINT16 length;
    UINT16 canWrapLineAfter : 1;
    UINT16 isWhitespace : 1;
    UINT16 isNewline : 1;
    UINT16 isSoftHyphen : 1;
    UINT16 isRightToLeft : 1;
    UINT16 padding : 11;
} DWRITE_CLUSTER_METRICS;

typedef struct DWRITE_COLOR_F {
    FLOAT r;
    FLOAT g;
    FLOAT b;
    FLOAT a;
} DWRITE_COLOR_F;

typedef struct DWRITE_GLYPH_OFFSET {
    FLOAT advanceOffset;
    FLOAT ascenderOffset;
} DWRITE_GLYPH_OFFSET;

typedef struct DWRITE_GLYPH_RUN {
    IDWriteFontFace*     fontFace;
    FLOAT                fontEmSize;
    UINT32               glyphCount;
    UINT16*              glyphIndices;
    FLOAT*               glyphAdvances;
    DWRITE_GLYPH_OFFSET* glyphOffsets;
    BOOL                 isSideways;
    UINT32               bidiLevel;
} DWRITE_GLYPH_RUN;

typedef struct DWRITE_GLYPH_RUN_DESCRIPTION {
    WCHAR*  localeName;
    WCHAR*  string;
    UINT32  stringLength;
    UINT16* clusterMap;
    UINT32  textPosition;
} DWRITE_GLYPH_RUN_DESCRIPTION;

typedef struct DWRITE_COLOR_GLYPH_RUN {
    DWRITE_GLYPH_RUN              glyphRun;
    DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription;
    FLOAT                         baselineOriginX;
    FLOAT                         baselineOriginY;
    DWRITE_COLOR_F                runColor;
    UINT16                        paletteIndex;
} DWRITE_COLOR_GLYPH_RUN;

typedef struct DWRITE_COLOR_GLYPH_RUN1 {
    DWRITE_COLOR_GLYPH_RUN          Base;
    enum DWRITE_GLYPH_IMAGE_FORMATS glyphImageFormat;
    DWRITE_MEASURING_MODE           measuringMode;
} DWRITE_COLOR_GLYPH_RUN1;

typedef struct DWRITE_FILE_FRAGMENT {
    UINT64 fileOffset;
    UINT64 fragmentSize;
} DWRITE_FILE_FRAGMENT;

typedef struct DWRITE_FONT_AXIS_RANGE {
    DWRITE_FONT_AXIS_TAG axisTag;
    FLOAT                minValue;
    FLOAT                maxValue;
} DWRITE_FONT_AXIS_RANGE;

typedef struct DWRITE_FONT_AXIS_VALUE {
    DWRITE_FONT_AXIS_TAG axisTag;
    FLOAT                value;
} DWRITE_FONT_AXIS_VALUE;

typedef struct DWRITE_FONT_FEATURE {
    DWRITE_FONT_FEATURE_TAG nameTag;
    UINT32                  parameter;
} DWRITE_FONT_FEATURE;

typedef struct DWRITE_FONT_METRICS {
    UINT16 designUnitsPerEm;
    UINT16 ascent;
    UINT16 descent;
    INT16  lineGap;
    UINT16 capHeight;
    UINT16 xHeight;
    INT16  underlinePosition;
    UINT16 underlineThickness;
    INT16  strikethroughPosition;
    UINT16 strikethroughThickness;
} DWRITE_FONT_METRICS;

typedef struct DWRITE_FONT_METRICS1 {
    DWRITE_FONT_METRICS Base;
    INT16               glyphBoxLeft;
    INT16               glyphBoxTop;
    INT16               glyphBoxRight;
    INT16               glyphBoxBottom;
    INT16               subscriptPositionX;
    INT16               subscriptPositionY;
    INT16               subscriptSizeX;
    INT16               subscriptSizeY;
    INT16               superscriptPositionX;
    INT16               superscriptPositionY;
    INT16               superscriptSizeX;
    INT16               superscriptSizeY;
    BOOL                hasTypographicMetrics;
} DWRITE_FONT_METRICS1;

typedef struct DWRITE_FONT_PROPERTY {
    DWRITE_FONT_PROPERTY_ID propertyId;
    WCHAR*                  propertyValue;
    WCHAR*                  localeName;
} DWRITE_FONT_PROPERTY;

typedef struct DWRITE_GLYPH_IMAGE_DATA {
    void*      imageData;
    UINT32     imageDataSize;
    UINT32     uniqueDataId;
    UINT32     pixelsPerEm;
    D2D_SIZE_U pixelSize;
    POINT      horizontalLeftOrigin;
    POINT      horizontalRightOrigin;
    POINT      verticalTopOrigin;
    POINT      verticalBottomOrigin;
} DWRITE_GLYPH_IMAGE_DATA;

typedef struct DWRITE_GLYPH_METRICS {
    INT32  leftSideBearing;
    UINT32 advanceWidth;
    INT32  rightSideBearing;
    INT32  topSideBearing;
    UINT32 advanceHeight;
    INT32  bottomSideBearing;
    INT32  verticalOriginY;
} DWRITE_GLYPH_METRICS;

typedef struct DWRITE_HIT_TEST_METRICS {
    UINT32 textPosition;
    UINT32 length;
    FLOAT  left;
    FLOAT  top;
    FLOAT  width;
    FLOAT  height;
    UINT32 bidiLevel;
    BOOL   isText;
    BOOL   isTrimmed;
} DWRITE_HIT_TEST_METRICS;

typedef struct DWRITE_INLINE_OBJECT_METRICS {
    FLOAT width;
    FLOAT height;
    FLOAT baseline;
    BOOL  supportsSideways;
} DWRITE_INLINE_OBJECT_METRICS;

typedef struct DWRITE_JUSTIFICATION_OPPORTUNITY {
    FLOAT  expansionMinimum;
    FLOAT  expansionMaximum;
    FLOAT  compressionMaximum;
    UINT32 expansionPriority : 8;
    UINT32 compressionPriority : 8;
    UINT32 allowResidualExpansion : 1;
    UINT32 allowResidualCompression : 1;
    UINT32 applyToLeadingEdge : 1;
    UINT32 applyToTrailingEdge : 1;
    UINT32 reserved : 12;
} DWRITE_JUSTIFICATION_OPPORTUNITY;

typedef struct DWRITE_LINE_BREAKPOINT {
    UINT8 breakConditionBefore : 2;
    UINT8 breakConditionAfter : 2;
    UINT8 isWhitespace : 1;
    UINT8 isSoftHyphen : 1;
    UINT8 padding : 2;
} DWRITE_LINE_BREAKPOINT;

typedef struct DWRITE_LINE_METRICS {
    UINT32 length;
    UINT32 trailingWhitespaceLength;
    UINT32 newlineLength;
    FLOAT  height;
    FLOAT  baseline;
    BOOL   isTrimmed;
} DWRITE_LINE_METRICS;

typedef struct DWRITE_LINE_METRICS1 {
    DWRITE_LINE_METRICS Base;
    FLOAT               leadingBefore;
    FLOAT               leadingAfter;
} DWRITE_LINE_METRICS1;

typedef struct DWRITE_LINE_SPACING {
    DWRITE_LINE_SPACING_METHOD method;
    FLOAT                      height;
    FLOAT                      baseline;
    FLOAT                      leadingBefore;
    DWRITE_FONT_LINE_GAP_USAGE fontLineGapUsage;
} DWRITE_LINE_SPACING;

typedef struct DWRITE_MATRIX {
    FLOAT m11;
    FLOAT m12;
    FLOAT m21;
    FLOAT m22;
    FLOAT dx;
    FLOAT dy;
} DWRITE_MATRIX;

typedef struct DWRITE_OVERHANG_METRICS {
    FLOAT left;
    FLOAT top;
    FLOAT right;
    FLOAT bottom;
} DWRITE_OVERHANG_METRICS;

typedef union DWRITE_PANOSE {
    UINT8       values[10];
    UINT8       familyKind;
    struct {
        UINT8 familyKind;
        UINT8 serifStyle;
        UINT8 weight;
        UINT8 proportion;
        UINT8 contrast;
        UINT8 strokeVariation;
        UINT8 armStyle;
        UINT8 letterform;
        UINT8 midline;
        UINT8 xHeight;
    } text;
    struct {
        UINT8 familyKind;
        UINT8 toolKind;
        UINT8 weight;
        UINT8 spacing;
        UINT8 aspectRatio;
        UINT8 contrast;
        UINT8 scriptTopology;
        UINT8 scriptForm;
        UINT8 finials;
        UINT8 xAscent;
    } script;
    struct {
        UINT8 familyKind;
        UINT8 decorativeClass;
        UINT8 weight;
        UINT8 aspect;
        UINT8 contrast;
        UINT8 serifVariant;
        UINT8 fill;
        UINT8 lining;
        UINT8 decorativeTopology;
        UINT8 characterRange;
    } decorative;
    struct {
        UINT8 familyKind;
        UINT8 symbolKind;
        UINT8 weight;
        UINT8 spacing;
        UINT8 aspectRatioAndContrast;
        UINT8 aspectRatio94;
        UINT8 aspectRatio119;
        UINT8 aspectRatio157;
        UINT8 aspectRatio163;
        UINT8 aspectRatio211;
    } symbol;
} DWRITE_PANOSE;

typedef struct DWRITE_SCRIPT_ANALYSIS {
    UINT16               script;
    DWRITE_SCRIPT_SHAPES shapes;
} DWRITE_SCRIPT_ANALYSIS;

typedef struct DWRITE_SCRIPT_PROPERTIES {
    UINT32 isoScriptCode;
    UINT32 isoScriptNumber;
    UINT32 clusterLookahead;
    UINT32 justificationCharacter;
    UINT32 restrictCaretToClusters : 1;
    UINT32 usesWordDividers : 1;
    UINT32 isDiscreteWriting : 1;
    UINT32 isBlockWriting : 1;
    UINT32 isDistributedWithinCluster : 1;
    UINT32 isConnectedWriting : 1;
    UINT32 isCursiveWriting : 1;
    UINT32 reserved : 25;
} DWRITE_SCRIPT_PROPERTIES;

typedef struct DWRITE_SHAPING_GLYPH_PROPERTIES {
    UINT16 justification : 4;
    UINT16 isClusterStart : 1;
    UINT16 isDiacritic : 1;
    UINT16 isZeroWidthSpace : 1;
    UINT16 reserved : 9;
} DWRITE_SHAPING_GLYPH_PROPERTIES;

typedef struct DWRITE_SHAPING_TEXT_PROPERTIES {
    UINT16 isShapedAlone : 1;
    UINT16 reserved1 : 1;
    UINT16 canBreakShapingAfter : 1;
    UINT16 reserved : 13;
} DWRITE_SHAPING_TEXT_PROPERTIES;

typedef struct DWRITE_STRIKETHROUGH {
    FLOAT                    width;
    FLOAT                    thickness;
    FLOAT                    offset;
    DWRITE_READING_DIRECTION readingDirection;
    DWRITE_FLOW_DIRECTION    flowDirection;
    WCHAR*                   localeName;
    DWRITE_MEASURING_MODE    measuringMode;
} DWRITE_STRIKETHROUGH;

typedef struct DWRITE_TEXT_METRICS {
    FLOAT  left;
    FLOAT  top;
    FLOAT  width;
    FLOAT  widthIncludingTrailingWhitespace;
    FLOAT  height;
    FLOAT  layoutWidth;
    FLOAT  layoutHeight;
    UINT32 maxBidiReorderingDepth;
    UINT32 lineCount;
} DWRITE_TEXT_METRICS;

typedef struct DWRITE_TEXT_METRICS1 {
    DWRITE_TEXT_METRICS Base;
    FLOAT               heightIncludingTrailingWhitespace;
} DWRITE_TEXT_METRICS1;

typedef struct DWRITE_TEXT_RANGE {
    UINT32 startPosition;
    UINT32 length;
} DWRITE_TEXT_RANGE;

typedef struct DWRITE_TRIMMING {
    DWRITE_TRIMMING_GRANULARITY granularity;
    UINT32                      delimiter;
    UINT32                      delimiterCount;
} DWRITE_TRIMMING;

typedef struct DWRITE_TYPOGRAPHIC_FEATURES {
    DWRITE_FONT_FEATURE* features;
    UINT32               featureCount;
} DWRITE_TYPOGRAPHIC_FEATURES;

typedef struct DWRITE_UNDERLINE {
    FLOAT                    width;
    FLOAT                    thickness;
    FLOAT                    offset;
    FLOAT                    runHeight;
    DWRITE_READING_DIRECTION readingDirection;
    DWRITE_FLOW_DIRECTION    flowDirection;
    WCHAR*                   localeName;
    DWRITE_MEASURING_MODE    measuringMode;
} DWRITE_UNDERLINE;

typedef struct DWRITE_UNICODE_RANGE {
    UINT32 first;
    UINT32 last;
} DWRITE_UNICODE_RANGE;

// methods

static inline HRESULT                           IDWriteAsyncResult_QueryInterface                            (IDWriteAsyncResult* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteAsyncResult*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteAsyncResult_AddRef                                    (IDWriteAsyncResult* this) { return ((UINT32 (WINAPI*)(IDWriteAsyncResult*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteAsyncResult_Release                                   (IDWriteAsyncResult* this) { return ((UINT32 (WINAPI*)(IDWriteAsyncResult*))this->v->tbl[2])(this); }
static inline HANDLE                            IDWriteAsyncResult_GetWaitHandle                             (IDWriteAsyncResult* this) { return ((HANDLE (WINAPI*)(IDWriteAsyncResult*))this->v->tbl[3])(this); }
static inline HRESULT                           IDWriteAsyncResult_GetResult                                 (IDWriteAsyncResult* this) { return ((HRESULT (WINAPI*)(IDWriteAsyncResult*))this->v->tbl[4])(this); }

static inline HRESULT                           IDWriteBitmapRenderTarget_QueryInterface                     (IDWriteBitmapRenderTarget* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteBitmapRenderTarget*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteBitmapRenderTarget_AddRef                             (IDWriteBitmapRenderTarget* this) { return ((UINT32 (WINAPI*)(IDWriteBitmapRenderTarget*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteBitmapRenderTarget_Release                            (IDWriteBitmapRenderTarget* this) { return ((UINT32 (WINAPI*)(IDWriteBitmapRenderTarget*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteBitmapRenderTarget_DrawGlyphRun                       (IDWriteBitmapRenderTarget* this, FLOAT baselineOriginX, FLOAT baselineOriginY, DWRITE_MEASURING_MODE measuringMode, const DWRITE_GLYPH_RUN* glyphRun, IDWriteRenderingParams* renderingParams, COLORREF textColor, RECT* blackBoxRect) { return ((HRESULT (WINAPI*)(IDWriteBitmapRenderTarget*, FLOAT, FLOAT, DWRITE_MEASURING_MODE, const DWRITE_GLYPH_RUN*, IDWriteRenderingParams*, COLORREF, RECT*))this->v->tbl[3])(this, baselineOriginX, baselineOriginY, measuringMode, glyphRun, renderingParams, textColor, blackBoxRect); }
static inline HDC                               IDWriteBitmapRenderTarget_GetMemoryDC                        (IDWriteBitmapRenderTarget* this) { return ((HDC (WINAPI*)(IDWriteBitmapRenderTarget*))this->v->tbl[4])(this); }
static inline FLOAT                             IDWriteBitmapRenderTarget_GetPixelsPerDip                    (IDWriteBitmapRenderTarget* this) { return ((FLOAT (WINAPI*)(IDWriteBitmapRenderTarget*))this->v->tbl[5])(this); }
static inline HRESULT                           IDWriteBitmapRenderTarget_SetPixelsPerDip                    (IDWriteBitmapRenderTarget* this, FLOAT pixelsPerDip) { return ((HRESULT (WINAPI*)(IDWriteBitmapRenderTarget*, FLOAT))this->v->tbl[6])(this, pixelsPerDip); }
static inline HRESULT                           IDWriteBitmapRenderTarget_GetCurrentTransform                (IDWriteBitmapRenderTarget* this, DWRITE_MATRIX* transform) { return ((HRESULT (WINAPI*)(IDWriteBitmapRenderTarget*, DWRITE_MATRIX*))this->v->tbl[7])(this, transform); }
static inline HRESULT                           IDWriteBitmapRenderTarget_SetCurrentTransform                (IDWriteBitmapRenderTarget* this, const DWRITE_MATRIX* transform) { return ((HRESULT (WINAPI*)(IDWriteBitmapRenderTarget*, const DWRITE_MATRIX*))this->v->tbl[8])(this, transform); }
static inline HRESULT                           IDWriteBitmapRenderTarget_GetSize                            (IDWriteBitmapRenderTarget* this, SIZE* size) { return ((HRESULT (WINAPI*)(IDWriteBitmapRenderTarget*, SIZE*))this->v->tbl[9])(this, size); }
static inline HRESULT                           IDWriteBitmapRenderTarget_Resize                             (IDWriteBitmapRenderTarget* this, UINT32 width, UINT32 height) { return ((HRESULT (WINAPI*)(IDWriteBitmapRenderTarget*, UINT32, UINT32))this->v->tbl[10])(this, width, height); }

static inline HRESULT                           IDWriteBitmapRenderTarget1_QueryInterface                    (IDWriteBitmapRenderTarget1* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteBitmapRenderTarget1*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteBitmapRenderTarget1_AddRef                            (IDWriteBitmapRenderTarget1* this) { return ((UINT32 (WINAPI*)(IDWriteBitmapRenderTarget1*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteBitmapRenderTarget1_Release                           (IDWriteBitmapRenderTarget1* this) { return ((UINT32 (WINAPI*)(IDWriteBitmapRenderTarget1*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteBitmapRenderTarget1_DrawGlyphRun                      (IDWriteBitmapRenderTarget1* this, FLOAT baselineOriginX, FLOAT baselineOriginY, DWRITE_MEASURING_MODE measuringMode, const DWRITE_GLYPH_RUN* glyphRun, IDWriteRenderingParams* renderingParams, COLORREF textColor, RECT* blackBoxRect) { return ((HRESULT (WINAPI*)(IDWriteBitmapRenderTarget1*, FLOAT, FLOAT, DWRITE_MEASURING_MODE, const DWRITE_GLYPH_RUN*, IDWriteRenderingParams*, COLORREF, RECT*))this->v->tbl[3])(this, baselineOriginX, baselineOriginY, measuringMode, glyphRun, renderingParams, textColor, blackBoxRect); }
static inline HDC                               IDWriteBitmapRenderTarget1_GetMemoryDC                       (IDWriteBitmapRenderTarget1* this) { return ((HDC (WINAPI*)(IDWriteBitmapRenderTarget1*))this->v->tbl[4])(this); }
static inline FLOAT                             IDWriteBitmapRenderTarget1_GetPixelsPerDip                   (IDWriteBitmapRenderTarget1* this) { return ((FLOAT (WINAPI*)(IDWriteBitmapRenderTarget1*))this->v->tbl[5])(this); }
static inline HRESULT                           IDWriteBitmapRenderTarget1_SetPixelsPerDip                   (IDWriteBitmapRenderTarget1* this, FLOAT pixelsPerDip) { return ((HRESULT (WINAPI*)(IDWriteBitmapRenderTarget1*, FLOAT))this->v->tbl[6])(this, pixelsPerDip); }
static inline HRESULT                           IDWriteBitmapRenderTarget1_GetCurrentTransform               (IDWriteBitmapRenderTarget1* this, DWRITE_MATRIX* transform) { return ((HRESULT (WINAPI*)(IDWriteBitmapRenderTarget1*, DWRITE_MATRIX*))this->v->tbl[7])(this, transform); }
static inline HRESULT                           IDWriteBitmapRenderTarget1_SetCurrentTransform               (IDWriteBitmapRenderTarget1* this, const DWRITE_MATRIX* transform) { return ((HRESULT (WINAPI*)(IDWriteBitmapRenderTarget1*, const DWRITE_MATRIX*))this->v->tbl[8])(this, transform); }
static inline HRESULT                           IDWriteBitmapRenderTarget1_GetSize                           (IDWriteBitmapRenderTarget1* this, SIZE* size) { return ((HRESULT (WINAPI*)(IDWriteBitmapRenderTarget1*, SIZE*))this->v->tbl[9])(this, size); }
static inline HRESULT                           IDWriteBitmapRenderTarget1_Resize                            (IDWriteBitmapRenderTarget1* this, UINT32 width, UINT32 height) { return ((HRESULT (WINAPI*)(IDWriteBitmapRenderTarget1*, UINT32, UINT32))this->v->tbl[10])(this, width, height); }
static inline DWRITE_TEXT_ANTIALIAS_MODE        IDWriteBitmapRenderTarget1_GetTextAntialiasMode              (IDWriteBitmapRenderTarget1* this) { return ((DWRITE_TEXT_ANTIALIAS_MODE (WINAPI*)(IDWriteBitmapRenderTarget1*))this->v->tbl[11])(this); }
static inline HRESULT                           IDWriteBitmapRenderTarget1_SetTextAntialiasMode              (IDWriteBitmapRenderTarget1* this, DWRITE_TEXT_ANTIALIAS_MODE antialiasMode) { return ((HRESULT (WINAPI*)(IDWriteBitmapRenderTarget1*, DWRITE_TEXT_ANTIALIAS_MODE))this->v->tbl[12])(this, antialiasMode); }

static inline HRESULT                           IDWriteColorGlyphRunEnumerator_QueryInterface                (IDWriteColorGlyphRunEnumerator* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteColorGlyphRunEnumerator*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteColorGlyphRunEnumerator_AddRef                        (IDWriteColorGlyphRunEnumerator* this) { return ((UINT32 (WINAPI*)(IDWriteColorGlyphRunEnumerator*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteColorGlyphRunEnumerator_Release                       (IDWriteColorGlyphRunEnumerator* this) { return ((UINT32 (WINAPI*)(IDWriteColorGlyphRunEnumerator*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteColorGlyphRunEnumerator_MoveNext                      (IDWriteColorGlyphRunEnumerator* this, BOOL* hasRun) { return ((HRESULT (WINAPI*)(IDWriteColorGlyphRunEnumerator*, BOOL*))this->v->tbl[3])(this, hasRun); }
static inline HRESULT                           IDWriteColorGlyphRunEnumerator_GetCurrentRun                 (IDWriteColorGlyphRunEnumerator* this, const DWRITE_COLOR_GLYPH_RUN** colorGlyphRun) { return ((HRESULT (WINAPI*)(IDWriteColorGlyphRunEnumerator*, const DWRITE_COLOR_GLYPH_RUN**))this->v->tbl[4])(this, colorGlyphRun); }

static inline HRESULT                           IDWriteColorGlyphRunEnumerator1_QueryInterface               (IDWriteColorGlyphRunEnumerator1* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteColorGlyphRunEnumerator1*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteColorGlyphRunEnumerator1_AddRef                       (IDWriteColorGlyphRunEnumerator1* this) { return ((UINT32 (WINAPI*)(IDWriteColorGlyphRunEnumerator1*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteColorGlyphRunEnumerator1_Release                      (IDWriteColorGlyphRunEnumerator1* this) { return ((UINT32 (WINAPI*)(IDWriteColorGlyphRunEnumerator1*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteColorGlyphRunEnumerator1_MoveNext                     (IDWriteColorGlyphRunEnumerator1* this, BOOL* hasRun) { return ((HRESULT (WINAPI*)(IDWriteColorGlyphRunEnumerator1*, BOOL*))this->v->tbl[3])(this, hasRun); }
static inline HRESULT                           IDWriteColorGlyphRunEnumerator1_GetCurrentRun                (IDWriteColorGlyphRunEnumerator1* this, const DWRITE_COLOR_GLYPH_RUN** colorGlyphRun) { return ((HRESULT (WINAPI*)(IDWriteColorGlyphRunEnumerator1*, const DWRITE_COLOR_GLYPH_RUN**))this->v->tbl[4])(this, colorGlyphRun); }
static inline HRESULT                           IDWriteColorGlyphRunEnumerator1_GetCurrentRun1               (IDWriteColorGlyphRunEnumerator1* this, const DWRITE_COLOR_GLYPH_RUN1** colorGlyphRun) { return ((HRESULT (WINAPI*)(IDWriteColorGlyphRunEnumerator1*, const DWRITE_COLOR_GLYPH_RUN1**))this->v->tbl[5])(this, colorGlyphRun); }

static inline HRESULT                           IDWriteFactory_QueryInterface                                (IDWriteFactory* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFactory*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFactory_AddRef                                        (IDWriteFactory* this) { return ((UINT32 (WINAPI*)(IDWriteFactory*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFactory_Release                                       (IDWriteFactory* this) { return ((UINT32 (WINAPI*)(IDWriteFactory*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteFactory_GetSystemFontCollection                       (IDWriteFactory* this, IDWriteFontCollection** fontCollection, BOOL checkForUpdates) { return ((HRESULT (WINAPI*)(IDWriteFactory*, IDWriteFontCollection**, BOOL))this->v->tbl[3])(this, fontCollection, checkForUpdates); }
static inline HRESULT                           IDWriteFactory_CreateCustomFontCollection                    (IDWriteFactory* this, IDWriteFontCollectionLoader* collectionLoader, const void* collectionKey, UINT32 collectionKeySize, IDWriteFontCollection** fontCollection) { return ((HRESULT (WINAPI*)(IDWriteFactory*, IDWriteFontCollectionLoader*, const void*, UINT32, IDWriteFontCollection**))this->v->tbl[4])(this, collectionLoader, collectionKey, collectionKeySize, fontCollection); }
static inline HRESULT                           IDWriteFactory_RegisterFontCollectionLoader                  (IDWriteFactory* this, IDWriteFontCollectionLoader* fontCollectionLoader) { return ((HRESULT (WINAPI*)(IDWriteFactory*, IDWriteFontCollectionLoader*))this->v->tbl[5])(this, fontCollectionLoader); }
static inline HRESULT                           IDWriteFactory_UnregisterFontCollectionLoader                (IDWriteFactory* this, IDWriteFontCollectionLoader* fontCollectionLoader) { return ((HRESULT (WINAPI*)(IDWriteFactory*, IDWriteFontCollectionLoader*))this->v->tbl[6])(this, fontCollectionLoader); }
static inline HRESULT                           IDWriteFactory_CreateFontFileReference                       (IDWriteFactory* this, const WCHAR* filePath, const FILETIME* lastWriteTime, IDWriteFontFile** fontFile) { return ((HRESULT (WINAPI*)(IDWriteFactory*, const WCHAR*, const FILETIME*, IDWriteFontFile**))this->v->tbl[7])(this, filePath, lastWriteTime, fontFile); }
static inline HRESULT                           IDWriteFactory_CreateCustomFontFileReference                 (IDWriteFactory* this, const void* fontFileReferenceKey, UINT32 fontFileReferenceKeySize, IDWriteFontFileLoader* fontFileLoader, IDWriteFontFile** fontFile) { return ((HRESULT (WINAPI*)(IDWriteFactory*, const void*, UINT32, IDWriteFontFileLoader*, IDWriteFontFile**))this->v->tbl[8])(this, fontFileReferenceKey, fontFileReferenceKeySize, fontFileLoader, fontFile); }
static inline HRESULT                           IDWriteFactory_CreateFontFace                                (IDWriteFactory* this, DWRITE_FONT_FACE_TYPE fontFaceType, UINT32 numberOfFiles, IDWriteFontFile** fontFiles, UINT32 faceIndex, DWRITE_FONT_SIMULATIONS fontFaceSimulationFlags, IDWriteFontFace** fontFace) { return ((HRESULT (WINAPI*)(IDWriteFactory*, DWRITE_FONT_FACE_TYPE, UINT32, IDWriteFontFile**, UINT32, DWRITE_FONT_SIMULATIONS, IDWriteFontFace**))this->v->tbl[9])(this, fontFaceType, numberOfFiles, fontFiles, faceIndex, fontFaceSimulationFlags, fontFace); }
static inline HRESULT                           IDWriteFactory_CreateRenderingParams                         (IDWriteFactory* this, IDWriteRenderingParams** renderingParams) { return ((HRESULT (WINAPI*)(IDWriteFactory*, IDWriteRenderingParams**))this->v->tbl[10])(this, renderingParams); }
static inline HRESULT                           IDWriteFactory_CreateMonitorRenderingParams                  (IDWriteFactory* this, HMONITOR monitor, IDWriteRenderingParams** renderingParams) { return ((HRESULT (WINAPI*)(IDWriteFactory*, HMONITOR, IDWriteRenderingParams**))this->v->tbl[11])(this, monitor, renderingParams); }
static inline HRESULT                           IDWriteFactory_CreateCustomRenderingParams                   (IDWriteFactory* this, FLOAT gamma, FLOAT enhancedContrast, FLOAT clearTypeLevel, DWRITE_PIXEL_GEOMETRY pixelGeometry, DWRITE_RENDERING_MODE renderingMode, IDWriteRenderingParams** renderingParams) { return ((HRESULT (WINAPI*)(IDWriteFactory*, FLOAT, FLOAT, FLOAT, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams**))this->v->tbl[12])(this, gamma, enhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, renderingParams); }
static inline HRESULT                           IDWriteFactory_RegisterFontFileLoader                        (IDWriteFactory* this, IDWriteFontFileLoader* fontFileLoader) { return ((HRESULT (WINAPI*)(IDWriteFactory*, IDWriteFontFileLoader*))this->v->tbl[13])(this, fontFileLoader); }
static inline HRESULT                           IDWriteFactory_UnregisterFontFileLoader                      (IDWriteFactory* this, IDWriteFontFileLoader* fontFileLoader) { return ((HRESULT (WINAPI*)(IDWriteFactory*, IDWriteFontFileLoader*))this->v->tbl[14])(this, fontFileLoader); }
static inline HRESULT                           IDWriteFactory_CreateTextFormat                              (IDWriteFactory* this, const WCHAR* fontFamilyName, IDWriteFontCollection* fontCollection, DWRITE_FONT_WEIGHT fontWeight, DWRITE_FONT_STYLE fontStyle, DWRITE_FONT_STRETCH fontStretch, FLOAT fontSize, const WCHAR* localeName, IDWriteTextFormat** textFormat) { return ((HRESULT (WINAPI*)(IDWriteFactory*, const WCHAR*, IDWriteFontCollection*, DWRITE_FONT_WEIGHT, DWRITE_FONT_STYLE, DWRITE_FONT_STRETCH, FLOAT, const WCHAR*, IDWriteTextFormat**))this->v->tbl[15])(this, fontFamilyName, fontCollection, fontWeight, fontStyle, fontStretch, fontSize, localeName, textFormat); }
static inline HRESULT                           IDWriteFactory_CreateTypography                              (IDWriteFactory* this, IDWriteTypography** typography) { return ((HRESULT (WINAPI*)(IDWriteFactory*, IDWriteTypography**))this->v->tbl[16])(this, typography); }
static inline HRESULT                           IDWriteFactory_GetGdiInterop                                 (IDWriteFactory* this, IDWriteGdiInterop** gdiInterop) { return ((HRESULT (WINAPI*)(IDWriteFactory*, IDWriteGdiInterop**))this->v->tbl[17])(this, gdiInterop); }
static inline HRESULT                           IDWriteFactory_CreateTextLayout                              (IDWriteFactory* this, const WCHAR* string, UINT32 stringLength, IDWriteTextFormat* textFormat, FLOAT maxWidth, FLOAT maxHeight, IDWriteTextLayout** textLayout) { return ((HRESULT (WINAPI*)(IDWriteFactory*, const WCHAR*, UINT32, IDWriteTextFormat*, FLOAT, FLOAT, IDWriteTextLayout**))this->v->tbl[18])(this, string, stringLength, textFormat, maxWidth, maxHeight, textLayout); }
static inline HRESULT                           IDWriteFactory_CreateGdiCompatibleTextLayout                 (IDWriteFactory* this, const WCHAR* string, UINT32 stringLength, IDWriteTextFormat* textFormat, FLOAT layoutWidth, FLOAT layoutHeight, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, BOOL useGdiNatural, IDWriteTextLayout** textLayout) { return ((HRESULT (WINAPI*)(IDWriteFactory*, const WCHAR*, UINT32, IDWriteTextFormat*, FLOAT, FLOAT, FLOAT, const DWRITE_MATRIX*, BOOL, IDWriteTextLayout**))this->v->tbl[19])(this, string, stringLength, textFormat, layoutWidth, layoutHeight, pixelsPerDip, transform, useGdiNatural, textLayout); }
static inline HRESULT                           IDWriteFactory_CreateEllipsisTrimmingSign                    (IDWriteFactory* this, IDWriteTextFormat* textFormat, IDWriteInlineObject** trimmingSign) { return ((HRESULT (WINAPI*)(IDWriteFactory*, IDWriteTextFormat*, IDWriteInlineObject**))this->v->tbl[20])(this, textFormat, trimmingSign); }
static inline HRESULT                           IDWriteFactory_CreateTextAnalyzer                            (IDWriteFactory* this, IDWriteTextAnalyzer** textAnalyzer) { return ((HRESULT (WINAPI*)(IDWriteFactory*, IDWriteTextAnalyzer**))this->v->tbl[21])(this, textAnalyzer); }
static inline HRESULT                           IDWriteFactory_CreateNumberSubstitution                      (IDWriteFactory* this, DWRITE_NUMBER_SUBSTITUTION_METHOD substitutionMethod, const WCHAR* localeName, BOOL ignoreUserOverride, IDWriteNumberSubstitution** numberSubstitution) { return ((HRESULT (WINAPI*)(IDWriteFactory*, DWRITE_NUMBER_SUBSTITUTION_METHOD, const WCHAR*, BOOL, IDWriteNumberSubstitution**))this->v->tbl[22])(this, substitutionMethod, localeName, ignoreUserOverride, numberSubstitution); }
static inline HRESULT                           IDWriteFactory_CreateGlyphRunAnalysis                        (IDWriteFactory* this, const DWRITE_GLYPH_RUN* glyphRun, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, DWRITE_RENDERING_MODE renderingMode, DWRITE_MEASURING_MODE measuringMode, FLOAT baselineOriginX, FLOAT baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis) { return ((HRESULT (WINAPI*)(IDWriteFactory*, const DWRITE_GLYPH_RUN*, FLOAT, const DWRITE_MATRIX*, DWRITE_RENDERING_MODE, DWRITE_MEASURING_MODE, FLOAT, FLOAT, IDWriteGlyphRunAnalysis**))this->v->tbl[23])(this, glyphRun, pixelsPerDip, transform, renderingMode, measuringMode, baselineOriginX, baselineOriginY, glyphRunAnalysis); }

static inline HRESULT                           IDWriteFactory1_QueryInterface                               (IDWriteFactory1* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFactory1*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFactory1_AddRef                                       (IDWriteFactory1* this) { return ((UINT32 (WINAPI*)(IDWriteFactory1*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFactory1_Release                                      (IDWriteFactory1* this) { return ((UINT32 (WINAPI*)(IDWriteFactory1*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteFactory1_GetSystemFontCollection                      (IDWriteFactory1* this, IDWriteFontCollection** fontCollection, BOOL checkForUpdates) { return ((HRESULT (WINAPI*)(IDWriteFactory1*, IDWriteFontCollection**, BOOL))this->v->tbl[3])(this, fontCollection, checkForUpdates); }
static inline HRESULT                           IDWriteFactory1_CreateCustomFontCollection                   (IDWriteFactory1* this, IDWriteFontCollectionLoader* collectionLoader, const void* collectionKey, UINT32 collectionKeySize, IDWriteFontCollection** fontCollection) { return ((HRESULT (WINAPI*)(IDWriteFactory1*, IDWriteFontCollectionLoader*, const void*, UINT32, IDWriteFontCollection**))this->v->tbl[4])(this, collectionLoader, collectionKey, collectionKeySize, fontCollection); }
static inline HRESULT                           IDWriteFactory1_RegisterFontCollectionLoader                 (IDWriteFactory1* this, IDWriteFontCollectionLoader* fontCollectionLoader) { return ((HRESULT (WINAPI*)(IDWriteFactory1*, IDWriteFontCollectionLoader*))this->v->tbl[5])(this, fontCollectionLoader); }
static inline HRESULT                           IDWriteFactory1_UnregisterFontCollectionLoader               (IDWriteFactory1* this, IDWriteFontCollectionLoader* fontCollectionLoader) { return ((HRESULT (WINAPI*)(IDWriteFactory1*, IDWriteFontCollectionLoader*))this->v->tbl[6])(this, fontCollectionLoader); }
static inline HRESULT                           IDWriteFactory1_CreateFontFileReference                      (IDWriteFactory1* this, const WCHAR* filePath, const FILETIME* lastWriteTime, IDWriteFontFile** fontFile) { return ((HRESULT (WINAPI*)(IDWriteFactory1*, const WCHAR*, const FILETIME*, IDWriteFontFile**))this->v->tbl[7])(this, filePath, lastWriteTime, fontFile); }
static inline HRESULT                           IDWriteFactory1_CreateCustomFontFileReference                (IDWriteFactory1* this, const void* fontFileReferenceKey, UINT32 fontFileReferenceKeySize, IDWriteFontFileLoader* fontFileLoader, IDWriteFontFile** fontFile) { return ((HRESULT (WINAPI*)(IDWriteFactory1*, const void*, UINT32, IDWriteFontFileLoader*, IDWriteFontFile**))this->v->tbl[8])(this, fontFileReferenceKey, fontFileReferenceKeySize, fontFileLoader, fontFile); }
static inline HRESULT                           IDWriteFactory1_CreateFontFace                               (IDWriteFactory1* this, DWRITE_FONT_FACE_TYPE fontFaceType, UINT32 numberOfFiles, IDWriteFontFile** fontFiles, UINT32 faceIndex, DWRITE_FONT_SIMULATIONS fontFaceSimulationFlags, IDWriteFontFace** fontFace) { return ((HRESULT (WINAPI*)(IDWriteFactory1*, DWRITE_FONT_FACE_TYPE, UINT32, IDWriteFontFile**, UINT32, DWRITE_FONT_SIMULATIONS, IDWriteFontFace**))this->v->tbl[9])(this, fontFaceType, numberOfFiles, fontFiles, faceIndex, fontFaceSimulationFlags, fontFace); }
static inline HRESULT                           IDWriteFactory1_CreateRenderingParams                        (IDWriteFactory1* this, IDWriteRenderingParams** renderingParams) { return ((HRESULT (WINAPI*)(IDWriteFactory1*, IDWriteRenderingParams**))this->v->tbl[10])(this, renderingParams); }
static inline HRESULT                           IDWriteFactory1_CreateMonitorRenderingParams                 (IDWriteFactory1* this, HMONITOR monitor, IDWriteRenderingParams** renderingParams) { return ((HRESULT (WINAPI*)(IDWriteFactory1*, HMONITOR, IDWriteRenderingParams**))this->v->tbl[11])(this, monitor, renderingParams); }
static inline HRESULT                           IDWriteFactory1_CreateCustomRenderingParams                  (IDWriteFactory1* this, FLOAT gamma, FLOAT enhancedContrast, FLOAT clearTypeLevel, DWRITE_PIXEL_GEOMETRY pixelGeometry, DWRITE_RENDERING_MODE renderingMode, IDWriteRenderingParams** renderingParams) { return ((HRESULT (WINAPI*)(IDWriteFactory1*, FLOAT, FLOAT, FLOAT, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams**))this->v->tbl[12])(this, gamma, enhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, renderingParams); }
static inline HRESULT                           IDWriteFactory1_RegisterFontFileLoader                       (IDWriteFactory1* this, IDWriteFontFileLoader* fontFileLoader) { return ((HRESULT (WINAPI*)(IDWriteFactory1*, IDWriteFontFileLoader*))this->v->tbl[13])(this, fontFileLoader); }
static inline HRESULT                           IDWriteFactory1_UnregisterFontFileLoader                     (IDWriteFactory1* this, IDWriteFontFileLoader* fontFileLoader) { return ((HRESULT (WINAPI*)(IDWriteFactory1*, IDWriteFontFileLoader*))this->v->tbl[14])(this, fontFileLoader); }
static inline HRESULT                           IDWriteFactory1_CreateTextFormat                             (IDWriteFactory1* this, const WCHAR* fontFamilyName, IDWriteFontCollection* fontCollection, DWRITE_FONT_WEIGHT fontWeight, DWRITE_FONT_STYLE fontStyle, DWRITE_FONT_STRETCH fontStretch, FLOAT fontSize, const WCHAR* localeName, IDWriteTextFormat** textFormat) { return ((HRESULT (WINAPI*)(IDWriteFactory1*, const WCHAR*, IDWriteFontCollection*, DWRITE_FONT_WEIGHT, DWRITE_FONT_STYLE, DWRITE_FONT_STRETCH, FLOAT, const WCHAR*, IDWriteTextFormat**))this->v->tbl[15])(this, fontFamilyName, fontCollection, fontWeight, fontStyle, fontStretch, fontSize, localeName, textFormat); }
static inline HRESULT                           IDWriteFactory1_CreateTypography                             (IDWriteFactory1* this, IDWriteTypography** typography) { return ((HRESULT (WINAPI*)(IDWriteFactory1*, IDWriteTypography**))this->v->tbl[16])(this, typography); }
static inline HRESULT                           IDWriteFactory1_GetGdiInterop                                (IDWriteFactory1* this, IDWriteGdiInterop** gdiInterop) { return ((HRESULT (WINAPI*)(IDWriteFactory1*, IDWriteGdiInterop**))this->v->tbl[17])(this, gdiInterop); }
static inline HRESULT                           IDWriteFactory1_CreateTextLayout                             (IDWriteFactory1* this, const WCHAR* string, UINT32 stringLength, IDWriteTextFormat* textFormat, FLOAT maxWidth, FLOAT maxHeight, IDWriteTextLayout** textLayout) { return ((HRESULT (WINAPI*)(IDWriteFactory1*, const WCHAR*, UINT32, IDWriteTextFormat*, FLOAT, FLOAT, IDWriteTextLayout**))this->v->tbl[18])(this, string, stringLength, textFormat, maxWidth, maxHeight, textLayout); }
static inline HRESULT                           IDWriteFactory1_CreateGdiCompatibleTextLayout                (IDWriteFactory1* this, const WCHAR* string, UINT32 stringLength, IDWriteTextFormat* textFormat, FLOAT layoutWidth, FLOAT layoutHeight, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, BOOL useGdiNatural, IDWriteTextLayout** textLayout) { return ((HRESULT (WINAPI*)(IDWriteFactory1*, const WCHAR*, UINT32, IDWriteTextFormat*, FLOAT, FLOAT, FLOAT, const DWRITE_MATRIX*, BOOL, IDWriteTextLayout**))this->v->tbl[19])(this, string, stringLength, textFormat, layoutWidth, layoutHeight, pixelsPerDip, transform, useGdiNatural, textLayout); }
static inline HRESULT                           IDWriteFactory1_CreateEllipsisTrimmingSign                   (IDWriteFactory1* this, IDWriteTextFormat* textFormat, IDWriteInlineObject** trimmingSign) { return ((HRESULT (WINAPI*)(IDWriteFactory1*, IDWriteTextFormat*, IDWriteInlineObject**))this->v->tbl[20])(this, textFormat, trimmingSign); }
static inline HRESULT                           IDWriteFactory1_CreateTextAnalyzer                           (IDWriteFactory1* this, IDWriteTextAnalyzer** textAnalyzer) { return ((HRESULT (WINAPI*)(IDWriteFactory1*, IDWriteTextAnalyzer**))this->v->tbl[21])(this, textAnalyzer); }
static inline HRESULT                           IDWriteFactory1_CreateNumberSubstitution                     (IDWriteFactory1* this, DWRITE_NUMBER_SUBSTITUTION_METHOD substitutionMethod, const WCHAR* localeName, BOOL ignoreUserOverride, IDWriteNumberSubstitution** numberSubstitution) { return ((HRESULT (WINAPI*)(IDWriteFactory1*, DWRITE_NUMBER_SUBSTITUTION_METHOD, const WCHAR*, BOOL, IDWriteNumberSubstitution**))this->v->tbl[22])(this, substitutionMethod, localeName, ignoreUserOverride, numberSubstitution); }
static inline HRESULT                           IDWriteFactory1_CreateGlyphRunAnalysis                       (IDWriteFactory1* this, const DWRITE_GLYPH_RUN* glyphRun, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, DWRITE_RENDERING_MODE renderingMode, DWRITE_MEASURING_MODE measuringMode, FLOAT baselineOriginX, FLOAT baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis) { return ((HRESULT (WINAPI*)(IDWriteFactory1*, const DWRITE_GLYPH_RUN*, FLOAT, const DWRITE_MATRIX*, DWRITE_RENDERING_MODE, DWRITE_MEASURING_MODE, FLOAT, FLOAT, IDWriteGlyphRunAnalysis**))this->v->tbl[23])(this, glyphRun, pixelsPerDip, transform, renderingMode, measuringMode, baselineOriginX, baselineOriginY, glyphRunAnalysis); }
static inline HRESULT                           IDWriteFactory1_GetEudcFontCollection                        (IDWriteFactory1* this, IDWriteFontCollection** fontCollection, BOOL checkForUpdates) { return ((HRESULT (WINAPI*)(IDWriteFactory1*, IDWriteFontCollection**, BOOL))this->v->tbl[24])(this, fontCollection, checkForUpdates); }
static inline HRESULT                           IDWriteFactory1_CreateCustomRenderingParams1                 (IDWriteFactory1* this, FLOAT gamma, FLOAT enhancedContrast, FLOAT enhancedContrastGrayscale, FLOAT clearTypeLevel, DWRITE_PIXEL_GEOMETRY pixelGeometry, DWRITE_RENDERING_MODE renderingMode, IDWriteRenderingParams1** renderingParams) { return ((HRESULT (WINAPI*)(IDWriteFactory1*, FLOAT, FLOAT, FLOAT, FLOAT, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams1**))this->v->tbl[25])(this, gamma, enhancedContrast, enhancedContrastGrayscale, clearTypeLevel, pixelGeometry, renderingMode, renderingParams); }

static inline HRESULT                           IDWriteFactory2_QueryInterface                               (IDWriteFactory2* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFactory2*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFactory2_AddRef                                       (IDWriteFactory2* this) { return ((UINT32 (WINAPI*)(IDWriteFactory2*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFactory2_Release                                      (IDWriteFactory2* this) { return ((UINT32 (WINAPI*)(IDWriteFactory2*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteFactory2_GetSystemFontCollection                      (IDWriteFactory2* this, IDWriteFontCollection** fontCollection, BOOL checkForUpdates) { return ((HRESULT (WINAPI*)(IDWriteFactory2*, IDWriteFontCollection**, BOOL))this->v->tbl[3])(this, fontCollection, checkForUpdates); }
static inline HRESULT                           IDWriteFactory2_CreateCustomFontCollection                   (IDWriteFactory2* this, IDWriteFontCollectionLoader* collectionLoader, const void* collectionKey, UINT32 collectionKeySize, IDWriteFontCollection** fontCollection) { return ((HRESULT (WINAPI*)(IDWriteFactory2*, IDWriteFontCollectionLoader*, const void*, UINT32, IDWriteFontCollection**))this->v->tbl[4])(this, collectionLoader, collectionKey, collectionKeySize, fontCollection); }
static inline HRESULT                           IDWriteFactory2_RegisterFontCollectionLoader                 (IDWriteFactory2* this, IDWriteFontCollectionLoader* fontCollectionLoader) { return ((HRESULT (WINAPI*)(IDWriteFactory2*, IDWriteFontCollectionLoader*))this->v->tbl[5])(this, fontCollectionLoader); }
static inline HRESULT                           IDWriteFactory2_UnregisterFontCollectionLoader               (IDWriteFactory2* this, IDWriteFontCollectionLoader* fontCollectionLoader) { return ((HRESULT (WINAPI*)(IDWriteFactory2*, IDWriteFontCollectionLoader*))this->v->tbl[6])(this, fontCollectionLoader); }
static inline HRESULT                           IDWriteFactory2_CreateFontFileReference                      (IDWriteFactory2* this, const WCHAR* filePath, const FILETIME* lastWriteTime, IDWriteFontFile** fontFile) { return ((HRESULT (WINAPI*)(IDWriteFactory2*, const WCHAR*, const FILETIME*, IDWriteFontFile**))this->v->tbl[7])(this, filePath, lastWriteTime, fontFile); }
static inline HRESULT                           IDWriteFactory2_CreateCustomFontFileReference                (IDWriteFactory2* this, const void* fontFileReferenceKey, UINT32 fontFileReferenceKeySize, IDWriteFontFileLoader* fontFileLoader, IDWriteFontFile** fontFile) { return ((HRESULT (WINAPI*)(IDWriteFactory2*, const void*, UINT32, IDWriteFontFileLoader*, IDWriteFontFile**))this->v->tbl[8])(this, fontFileReferenceKey, fontFileReferenceKeySize, fontFileLoader, fontFile); }
static inline HRESULT                           IDWriteFactory2_CreateFontFace                               (IDWriteFactory2* this, DWRITE_FONT_FACE_TYPE fontFaceType, UINT32 numberOfFiles, IDWriteFontFile** fontFiles, UINT32 faceIndex, DWRITE_FONT_SIMULATIONS fontFaceSimulationFlags, IDWriteFontFace** fontFace) { return ((HRESULT (WINAPI*)(IDWriteFactory2*, DWRITE_FONT_FACE_TYPE, UINT32, IDWriteFontFile**, UINT32, DWRITE_FONT_SIMULATIONS, IDWriteFontFace**))this->v->tbl[9])(this, fontFaceType, numberOfFiles, fontFiles, faceIndex, fontFaceSimulationFlags, fontFace); }
static inline HRESULT                           IDWriteFactory2_CreateRenderingParams                        (IDWriteFactory2* this, IDWriteRenderingParams** renderingParams) { return ((HRESULT (WINAPI*)(IDWriteFactory2*, IDWriteRenderingParams**))this->v->tbl[10])(this, renderingParams); }
static inline HRESULT                           IDWriteFactory2_CreateMonitorRenderingParams                 (IDWriteFactory2* this, HMONITOR monitor, IDWriteRenderingParams** renderingParams) { return ((HRESULT (WINAPI*)(IDWriteFactory2*, HMONITOR, IDWriteRenderingParams**))this->v->tbl[11])(this, monitor, renderingParams); }
static inline HRESULT                           IDWriteFactory2_CreateCustomRenderingParams                  (IDWriteFactory2* this, FLOAT gamma, FLOAT enhancedContrast, FLOAT clearTypeLevel, DWRITE_PIXEL_GEOMETRY pixelGeometry, DWRITE_RENDERING_MODE renderingMode, IDWriteRenderingParams** renderingParams) { return ((HRESULT (WINAPI*)(IDWriteFactory2*, FLOAT, FLOAT, FLOAT, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams**))this->v->tbl[12])(this, gamma, enhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, renderingParams); }
static inline HRESULT                           IDWriteFactory2_RegisterFontFileLoader                       (IDWriteFactory2* this, IDWriteFontFileLoader* fontFileLoader) { return ((HRESULT (WINAPI*)(IDWriteFactory2*, IDWriteFontFileLoader*))this->v->tbl[13])(this, fontFileLoader); }
static inline HRESULT                           IDWriteFactory2_UnregisterFontFileLoader                     (IDWriteFactory2* this, IDWriteFontFileLoader* fontFileLoader) { return ((HRESULT (WINAPI*)(IDWriteFactory2*, IDWriteFontFileLoader*))this->v->tbl[14])(this, fontFileLoader); }
static inline HRESULT                           IDWriteFactory2_CreateTextFormat                             (IDWriteFactory2* this, const WCHAR* fontFamilyName, IDWriteFontCollection* fontCollection, DWRITE_FONT_WEIGHT fontWeight, DWRITE_FONT_STYLE fontStyle, DWRITE_FONT_STRETCH fontStretch, FLOAT fontSize, const WCHAR* localeName, IDWriteTextFormat** textFormat) { return ((HRESULT (WINAPI*)(IDWriteFactory2*, const WCHAR*, IDWriteFontCollection*, DWRITE_FONT_WEIGHT, DWRITE_FONT_STYLE, DWRITE_FONT_STRETCH, FLOAT, const WCHAR*, IDWriteTextFormat**))this->v->tbl[15])(this, fontFamilyName, fontCollection, fontWeight, fontStyle, fontStretch, fontSize, localeName, textFormat); }
static inline HRESULT                           IDWriteFactory2_CreateTypography                             (IDWriteFactory2* this, IDWriteTypography** typography) { return ((HRESULT (WINAPI*)(IDWriteFactory2*, IDWriteTypography**))this->v->tbl[16])(this, typography); }
static inline HRESULT                           IDWriteFactory2_GetGdiInterop                                (IDWriteFactory2* this, IDWriteGdiInterop** gdiInterop) { return ((HRESULT (WINAPI*)(IDWriteFactory2*, IDWriteGdiInterop**))this->v->tbl[17])(this, gdiInterop); }
static inline HRESULT                           IDWriteFactory2_CreateTextLayout                             (IDWriteFactory2* this, const WCHAR* string, UINT32 stringLength, IDWriteTextFormat* textFormat, FLOAT maxWidth, FLOAT maxHeight, IDWriteTextLayout** textLayout) { return ((HRESULT (WINAPI*)(IDWriteFactory2*, const WCHAR*, UINT32, IDWriteTextFormat*, FLOAT, FLOAT, IDWriteTextLayout**))this->v->tbl[18])(this, string, stringLength, textFormat, maxWidth, maxHeight, textLayout); }
static inline HRESULT                           IDWriteFactory2_CreateGdiCompatibleTextLayout                (IDWriteFactory2* this, const WCHAR* string, UINT32 stringLength, IDWriteTextFormat* textFormat, FLOAT layoutWidth, FLOAT layoutHeight, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, BOOL useGdiNatural, IDWriteTextLayout** textLayout) { return ((HRESULT (WINAPI*)(IDWriteFactory2*, const WCHAR*, UINT32, IDWriteTextFormat*, FLOAT, FLOAT, FLOAT, const DWRITE_MATRIX*, BOOL, IDWriteTextLayout**))this->v->tbl[19])(this, string, stringLength, textFormat, layoutWidth, layoutHeight, pixelsPerDip, transform, useGdiNatural, textLayout); }
static inline HRESULT                           IDWriteFactory2_CreateEllipsisTrimmingSign                   (IDWriteFactory2* this, IDWriteTextFormat* textFormat, IDWriteInlineObject** trimmingSign) { return ((HRESULT (WINAPI*)(IDWriteFactory2*, IDWriteTextFormat*, IDWriteInlineObject**))this->v->tbl[20])(this, textFormat, trimmingSign); }
static inline HRESULT                           IDWriteFactory2_CreateTextAnalyzer                           (IDWriteFactory2* this, IDWriteTextAnalyzer** textAnalyzer) { return ((HRESULT (WINAPI*)(IDWriteFactory2*, IDWriteTextAnalyzer**))this->v->tbl[21])(this, textAnalyzer); }
static inline HRESULT                           IDWriteFactory2_CreateNumberSubstitution                     (IDWriteFactory2* this, DWRITE_NUMBER_SUBSTITUTION_METHOD substitutionMethod, const WCHAR* localeName, BOOL ignoreUserOverride, IDWriteNumberSubstitution** numberSubstitution) { return ((HRESULT (WINAPI*)(IDWriteFactory2*, DWRITE_NUMBER_SUBSTITUTION_METHOD, const WCHAR*, BOOL, IDWriteNumberSubstitution**))this->v->tbl[22])(this, substitutionMethod, localeName, ignoreUserOverride, numberSubstitution); }
static inline HRESULT                           IDWriteFactory2_CreateGlyphRunAnalysis                       (IDWriteFactory2* this, const DWRITE_GLYPH_RUN* glyphRun, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, DWRITE_RENDERING_MODE renderingMode, DWRITE_MEASURING_MODE measuringMode, FLOAT baselineOriginX, FLOAT baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis) { return ((HRESULT (WINAPI*)(IDWriteFactory2*, const DWRITE_GLYPH_RUN*, FLOAT, const DWRITE_MATRIX*, DWRITE_RENDERING_MODE, DWRITE_MEASURING_MODE, FLOAT, FLOAT, IDWriteGlyphRunAnalysis**))this->v->tbl[23])(this, glyphRun, pixelsPerDip, transform, renderingMode, measuringMode, baselineOriginX, baselineOriginY, glyphRunAnalysis); }
static inline HRESULT                           IDWriteFactory2_GetEudcFontCollection                        (IDWriteFactory2* this, IDWriteFontCollection** fontCollection, BOOL checkForUpdates) { return ((HRESULT (WINAPI*)(IDWriteFactory2*, IDWriteFontCollection**, BOOL))this->v->tbl[24])(this, fontCollection, checkForUpdates); }
static inline HRESULT                           IDWriteFactory2_CreateCustomRenderingParams1                 (IDWriteFactory2* this, FLOAT gamma, FLOAT enhancedContrast, FLOAT enhancedContrastGrayscale, FLOAT clearTypeLevel, DWRITE_PIXEL_GEOMETRY pixelGeometry, DWRITE_RENDERING_MODE renderingMode, IDWriteRenderingParams1** renderingParams) { return ((HRESULT (WINAPI*)(IDWriteFactory2*, FLOAT, FLOAT, FLOAT, FLOAT, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams1**))this->v->tbl[25])(this, gamma, enhancedContrast, enhancedContrastGrayscale, clearTypeLevel, pixelGeometry, renderingMode, renderingParams); }
static inline HRESULT                           IDWriteFactory2_GetSystemFontFallback                        (IDWriteFactory2* this, IDWriteFontFallback** fontFallback) { return ((HRESULT (WINAPI*)(IDWriteFactory2*, IDWriteFontFallback**))this->v->tbl[26])(this, fontFallback); }
static inline HRESULT                           IDWriteFactory2_CreateFontFallbackBuilder                    (IDWriteFactory2* this, IDWriteFontFallbackBuilder** fontFallbackBuilder) { return ((HRESULT (WINAPI*)(IDWriteFactory2*, IDWriteFontFallbackBuilder**))this->v->tbl[27])(this, fontFallbackBuilder); }
static inline HRESULT                           IDWriteFactory2_TranslateColorGlyphRun                       (IDWriteFactory2* this, FLOAT baselineOriginX, FLOAT baselineOriginY, const DWRITE_GLYPH_RUN* glyphRun, const DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription, DWRITE_MEASURING_MODE measuringMode, const DWRITE_MATRIX* worldToDeviceTransform, UINT32 colorPaletteIndex, IDWriteColorGlyphRunEnumerator** colorLayers) { return ((HRESULT (WINAPI*)(IDWriteFactory2*, FLOAT, FLOAT, const DWRITE_GLYPH_RUN*, const DWRITE_GLYPH_RUN_DESCRIPTION*, DWRITE_MEASURING_MODE, const DWRITE_MATRIX*, UINT32, IDWriteColorGlyphRunEnumerator**))this->v->tbl[28])(this, baselineOriginX, baselineOriginY, glyphRun, glyphRunDescription, measuringMode, worldToDeviceTransform, colorPaletteIndex, colorLayers); }
static inline HRESULT                           IDWriteFactory2_CreateCustomRenderingParams2                 (IDWriteFactory2* this, FLOAT gamma, FLOAT enhancedContrast, FLOAT grayscaleEnhancedContrast, FLOAT clearTypeLevel, DWRITE_PIXEL_GEOMETRY pixelGeometry, DWRITE_RENDERING_MODE renderingMode, DWRITE_GRID_FIT_MODE gridFitMode, IDWriteRenderingParams2** renderingParams) { return ((HRESULT (WINAPI*)(IDWriteFactory2*, FLOAT, FLOAT, FLOAT, FLOAT, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, DWRITE_GRID_FIT_MODE, IDWriteRenderingParams2**))this->v->tbl[29])(this, gamma, enhancedContrast, grayscaleEnhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, gridFitMode, renderingParams); }
static inline HRESULT                           IDWriteFactory2_CreateGlyphRunAnalysis1                      (IDWriteFactory2* this, const DWRITE_GLYPH_RUN* glyphRun, const DWRITE_MATRIX* transform, DWRITE_RENDERING_MODE renderingMode, DWRITE_MEASURING_MODE measuringMode, DWRITE_GRID_FIT_MODE gridFitMode, DWRITE_TEXT_ANTIALIAS_MODE antialiasMode, FLOAT baselineOriginX, FLOAT baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis) { return ((HRESULT (WINAPI*)(IDWriteFactory2*, const DWRITE_GLYPH_RUN*, const DWRITE_MATRIX*, DWRITE_RENDERING_MODE, DWRITE_MEASURING_MODE, DWRITE_GRID_FIT_MODE, DWRITE_TEXT_ANTIALIAS_MODE, FLOAT, FLOAT, IDWriteGlyphRunAnalysis**))this->v->tbl[30])(this, glyphRun, transform, renderingMode, measuringMode, gridFitMode, antialiasMode, baselineOriginX, baselineOriginY, glyphRunAnalysis); }

static inline HRESULT                           IDWriteFactory3_QueryInterface                               (IDWriteFactory3* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFactory3*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFactory3_AddRef                                       (IDWriteFactory3* this) { return ((UINT32 (WINAPI*)(IDWriteFactory3*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFactory3_Release                                      (IDWriteFactory3* this) { return ((UINT32 (WINAPI*)(IDWriteFactory3*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteFactory3_GetSystemFontCollection                      (IDWriteFactory3* this, IDWriteFontCollection** fontCollection, BOOL checkForUpdates) { return ((HRESULT (WINAPI*)(IDWriteFactory3*, IDWriteFontCollection**, BOOL))this->v->tbl[3])(this, fontCollection, checkForUpdates); }
static inline HRESULT                           IDWriteFactory3_CreateCustomFontCollection                   (IDWriteFactory3* this, IDWriteFontCollectionLoader* collectionLoader, const void* collectionKey, UINT32 collectionKeySize, IDWriteFontCollection** fontCollection) { return ((HRESULT (WINAPI*)(IDWriteFactory3*, IDWriteFontCollectionLoader*, const void*, UINT32, IDWriteFontCollection**))this->v->tbl[4])(this, collectionLoader, collectionKey, collectionKeySize, fontCollection); }
static inline HRESULT                           IDWriteFactory3_RegisterFontCollectionLoader                 (IDWriteFactory3* this, IDWriteFontCollectionLoader* fontCollectionLoader) { return ((HRESULT (WINAPI*)(IDWriteFactory3*, IDWriteFontCollectionLoader*))this->v->tbl[5])(this, fontCollectionLoader); }
static inline HRESULT                           IDWriteFactory3_UnregisterFontCollectionLoader               (IDWriteFactory3* this, IDWriteFontCollectionLoader* fontCollectionLoader) { return ((HRESULT (WINAPI*)(IDWriteFactory3*, IDWriteFontCollectionLoader*))this->v->tbl[6])(this, fontCollectionLoader); }
static inline HRESULT                           IDWriteFactory3_CreateFontFileReference                      (IDWriteFactory3* this, const WCHAR* filePath, const FILETIME* lastWriteTime, IDWriteFontFile** fontFile) { return ((HRESULT (WINAPI*)(IDWriteFactory3*, const WCHAR*, const FILETIME*, IDWriteFontFile**))this->v->tbl[7])(this, filePath, lastWriteTime, fontFile); }
static inline HRESULT                           IDWriteFactory3_CreateCustomFontFileReference                (IDWriteFactory3* this, const void* fontFileReferenceKey, UINT32 fontFileReferenceKeySize, IDWriteFontFileLoader* fontFileLoader, IDWriteFontFile** fontFile) { return ((HRESULT (WINAPI*)(IDWriteFactory3*, const void*, UINT32, IDWriteFontFileLoader*, IDWriteFontFile**))this->v->tbl[8])(this, fontFileReferenceKey, fontFileReferenceKeySize, fontFileLoader, fontFile); }
static inline HRESULT                           IDWriteFactory3_CreateFontFace                               (IDWriteFactory3* this, DWRITE_FONT_FACE_TYPE fontFaceType, UINT32 numberOfFiles, IDWriteFontFile** fontFiles, UINT32 faceIndex, DWRITE_FONT_SIMULATIONS fontFaceSimulationFlags, IDWriteFontFace** fontFace) { return ((HRESULT (WINAPI*)(IDWriteFactory3*, DWRITE_FONT_FACE_TYPE, UINT32, IDWriteFontFile**, UINT32, DWRITE_FONT_SIMULATIONS, IDWriteFontFace**))this->v->tbl[9])(this, fontFaceType, numberOfFiles, fontFiles, faceIndex, fontFaceSimulationFlags, fontFace); }
static inline HRESULT                           IDWriteFactory3_CreateRenderingParams                        (IDWriteFactory3* this, IDWriteRenderingParams** renderingParams) { return ((HRESULT (WINAPI*)(IDWriteFactory3*, IDWriteRenderingParams**))this->v->tbl[10])(this, renderingParams); }
static inline HRESULT                           IDWriteFactory3_CreateMonitorRenderingParams                 (IDWriteFactory3* this, HMONITOR monitor, IDWriteRenderingParams** renderingParams) { return ((HRESULT (WINAPI*)(IDWriteFactory3*, HMONITOR, IDWriteRenderingParams**))this->v->tbl[11])(this, monitor, renderingParams); }
static inline HRESULT                           IDWriteFactory3_CreateCustomRenderingParams                  (IDWriteFactory3* this, FLOAT gamma, FLOAT enhancedContrast, FLOAT clearTypeLevel, DWRITE_PIXEL_GEOMETRY pixelGeometry, DWRITE_RENDERING_MODE renderingMode, IDWriteRenderingParams** renderingParams) { return ((HRESULT (WINAPI*)(IDWriteFactory3*, FLOAT, FLOAT, FLOAT, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams**))this->v->tbl[12])(this, gamma, enhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, renderingParams); }
static inline HRESULT                           IDWriteFactory3_RegisterFontFileLoader                       (IDWriteFactory3* this, IDWriteFontFileLoader* fontFileLoader) { return ((HRESULT (WINAPI*)(IDWriteFactory3*, IDWriteFontFileLoader*))this->v->tbl[13])(this, fontFileLoader); }
static inline HRESULT                           IDWriteFactory3_UnregisterFontFileLoader                     (IDWriteFactory3* this, IDWriteFontFileLoader* fontFileLoader) { return ((HRESULT (WINAPI*)(IDWriteFactory3*, IDWriteFontFileLoader*))this->v->tbl[14])(this, fontFileLoader); }
static inline HRESULT                           IDWriteFactory3_CreateTextFormat                             (IDWriteFactory3* this, const WCHAR* fontFamilyName, IDWriteFontCollection* fontCollection, DWRITE_FONT_WEIGHT fontWeight, DWRITE_FONT_STYLE fontStyle, DWRITE_FONT_STRETCH fontStretch, FLOAT fontSize, const WCHAR* localeName, IDWriteTextFormat** textFormat) { return ((HRESULT (WINAPI*)(IDWriteFactory3*, const WCHAR*, IDWriteFontCollection*, DWRITE_FONT_WEIGHT, DWRITE_FONT_STYLE, DWRITE_FONT_STRETCH, FLOAT, const WCHAR*, IDWriteTextFormat**))this->v->tbl[15])(this, fontFamilyName, fontCollection, fontWeight, fontStyle, fontStretch, fontSize, localeName, textFormat); }
static inline HRESULT                           IDWriteFactory3_CreateTypography                             (IDWriteFactory3* this, IDWriteTypography** typography) { return ((HRESULT (WINAPI*)(IDWriteFactory3*, IDWriteTypography**))this->v->tbl[16])(this, typography); }
static inline HRESULT                           IDWriteFactory3_GetGdiInterop                                (IDWriteFactory3* this, IDWriteGdiInterop** gdiInterop) { return ((HRESULT (WINAPI*)(IDWriteFactory3*, IDWriteGdiInterop**))this->v->tbl[17])(this, gdiInterop); }
static inline HRESULT                           IDWriteFactory3_CreateTextLayout                             (IDWriteFactory3* this, const WCHAR* string, UINT32 stringLength, IDWriteTextFormat* textFormat, FLOAT maxWidth, FLOAT maxHeight, IDWriteTextLayout** textLayout) { return ((HRESULT (WINAPI*)(IDWriteFactory3*, const WCHAR*, UINT32, IDWriteTextFormat*, FLOAT, FLOAT, IDWriteTextLayout**))this->v->tbl[18])(this, string, stringLength, textFormat, maxWidth, maxHeight, textLayout); }
static inline HRESULT                           IDWriteFactory3_CreateGdiCompatibleTextLayout                (IDWriteFactory3* this, const WCHAR* string, UINT32 stringLength, IDWriteTextFormat* textFormat, FLOAT layoutWidth, FLOAT layoutHeight, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, BOOL useGdiNatural, IDWriteTextLayout** textLayout) { return ((HRESULT (WINAPI*)(IDWriteFactory3*, const WCHAR*, UINT32, IDWriteTextFormat*, FLOAT, FLOAT, FLOAT, const DWRITE_MATRIX*, BOOL, IDWriteTextLayout**))this->v->tbl[19])(this, string, stringLength, textFormat, layoutWidth, layoutHeight, pixelsPerDip, transform, useGdiNatural, textLayout); }
static inline HRESULT                           IDWriteFactory3_CreateEllipsisTrimmingSign                   (IDWriteFactory3* this, IDWriteTextFormat* textFormat, IDWriteInlineObject** trimmingSign) { return ((HRESULT (WINAPI*)(IDWriteFactory3*, IDWriteTextFormat*, IDWriteInlineObject**))this->v->tbl[20])(this, textFormat, trimmingSign); }
static inline HRESULT                           IDWriteFactory3_CreateTextAnalyzer                           (IDWriteFactory3* this, IDWriteTextAnalyzer** textAnalyzer) { return ((HRESULT (WINAPI*)(IDWriteFactory3*, IDWriteTextAnalyzer**))this->v->tbl[21])(this, textAnalyzer); }
static inline HRESULT                           IDWriteFactory3_CreateNumberSubstitution                     (IDWriteFactory3* this, DWRITE_NUMBER_SUBSTITUTION_METHOD substitutionMethod, const WCHAR* localeName, BOOL ignoreUserOverride, IDWriteNumberSubstitution** numberSubstitution) { return ((HRESULT (WINAPI*)(IDWriteFactory3*, DWRITE_NUMBER_SUBSTITUTION_METHOD, const WCHAR*, BOOL, IDWriteNumberSubstitution**))this->v->tbl[22])(this, substitutionMethod, localeName, ignoreUserOverride, numberSubstitution); }
static inline HRESULT                           IDWriteFactory3_CreateGlyphRunAnalysis                       (IDWriteFactory3* this, const DWRITE_GLYPH_RUN* glyphRun, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, DWRITE_RENDERING_MODE renderingMode, DWRITE_MEASURING_MODE measuringMode, FLOAT baselineOriginX, FLOAT baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis) { return ((HRESULT (WINAPI*)(IDWriteFactory3*, const DWRITE_GLYPH_RUN*, FLOAT, const DWRITE_MATRIX*, DWRITE_RENDERING_MODE, DWRITE_MEASURING_MODE, FLOAT, FLOAT, IDWriteGlyphRunAnalysis**))this->v->tbl[23])(this, glyphRun, pixelsPerDip, transform, renderingMode, measuringMode, baselineOriginX, baselineOriginY, glyphRunAnalysis); }
static inline HRESULT                           IDWriteFactory3_GetEudcFontCollection                        (IDWriteFactory3* this, IDWriteFontCollection** fontCollection, BOOL checkForUpdates) { return ((HRESULT (WINAPI*)(IDWriteFactory3*, IDWriteFontCollection**, BOOL))this->v->tbl[24])(this, fontCollection, checkForUpdates); }
static inline HRESULT                           IDWriteFactory3_CreateCustomRenderingParams1                 (IDWriteFactory3* this, FLOAT gamma, FLOAT enhancedContrast, FLOAT enhancedContrastGrayscale, FLOAT clearTypeLevel, DWRITE_PIXEL_GEOMETRY pixelGeometry, DWRITE_RENDERING_MODE renderingMode, IDWriteRenderingParams1** renderingParams) { return ((HRESULT (WINAPI*)(IDWriteFactory3*, FLOAT, FLOAT, FLOAT, FLOAT, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams1**))this->v->tbl[25])(this, gamma, enhancedContrast, enhancedContrastGrayscale, clearTypeLevel, pixelGeometry, renderingMode, renderingParams); }
static inline HRESULT                           IDWriteFactory3_GetSystemFontFallback                        (IDWriteFactory3* this, IDWriteFontFallback** fontFallback) { return ((HRESULT (WINAPI*)(IDWriteFactory3*, IDWriteFontFallback**))this->v->tbl[26])(this, fontFallback); }
static inline HRESULT                           IDWriteFactory3_CreateFontFallbackBuilder                    (IDWriteFactory3* this, IDWriteFontFallbackBuilder** fontFallbackBuilder) { return ((HRESULT (WINAPI*)(IDWriteFactory3*, IDWriteFontFallbackBuilder**))this->v->tbl[27])(this, fontFallbackBuilder); }
static inline HRESULT                           IDWriteFactory3_TranslateColorGlyphRun                       (IDWriteFactory3* this, FLOAT baselineOriginX, FLOAT baselineOriginY, const DWRITE_GLYPH_RUN* glyphRun, const DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription, DWRITE_MEASURING_MODE measuringMode, const DWRITE_MATRIX* worldToDeviceTransform, UINT32 colorPaletteIndex, IDWriteColorGlyphRunEnumerator** colorLayers) { return ((HRESULT (WINAPI*)(IDWriteFactory3*, FLOAT, FLOAT, const DWRITE_GLYPH_RUN*, const DWRITE_GLYPH_RUN_DESCRIPTION*, DWRITE_MEASURING_MODE, const DWRITE_MATRIX*, UINT32, IDWriteColorGlyphRunEnumerator**))this->v->tbl[28])(this, baselineOriginX, baselineOriginY, glyphRun, glyphRunDescription, measuringMode, worldToDeviceTransform, colorPaletteIndex, colorLayers); }
static inline HRESULT                           IDWriteFactory3_CreateCustomRenderingParams2                 (IDWriteFactory3* this, FLOAT gamma, FLOAT enhancedContrast, FLOAT grayscaleEnhancedContrast, FLOAT clearTypeLevel, DWRITE_PIXEL_GEOMETRY pixelGeometry, DWRITE_RENDERING_MODE renderingMode, DWRITE_GRID_FIT_MODE gridFitMode, IDWriteRenderingParams2** renderingParams) { return ((HRESULT (WINAPI*)(IDWriteFactory3*, FLOAT, FLOAT, FLOAT, FLOAT, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, DWRITE_GRID_FIT_MODE, IDWriteRenderingParams2**))this->v->tbl[29])(this, gamma, enhancedContrast, grayscaleEnhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, gridFitMode, renderingParams); }
static inline HRESULT                           IDWriteFactory3_CreateGlyphRunAnalysis1                      (IDWriteFactory3* this, const DWRITE_GLYPH_RUN* glyphRun, const DWRITE_MATRIX* transform, DWRITE_RENDERING_MODE renderingMode, DWRITE_MEASURING_MODE measuringMode, DWRITE_GRID_FIT_MODE gridFitMode, DWRITE_TEXT_ANTIALIAS_MODE antialiasMode, FLOAT baselineOriginX, FLOAT baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis) { return ((HRESULT (WINAPI*)(IDWriteFactory3*, const DWRITE_GLYPH_RUN*, const DWRITE_MATRIX*, DWRITE_RENDERING_MODE, DWRITE_MEASURING_MODE, DWRITE_GRID_FIT_MODE, DWRITE_TEXT_ANTIALIAS_MODE, FLOAT, FLOAT, IDWriteGlyphRunAnalysis**))this->v->tbl[30])(this, glyphRun, transform, renderingMode, measuringMode, gridFitMode, antialiasMode, baselineOriginX, baselineOriginY, glyphRunAnalysis); }
static inline HRESULT                           IDWriteFactory3_CreateGlyphRunAnalysis2                      (IDWriteFactory3* this, const DWRITE_GLYPH_RUN* glyphRun, const DWRITE_MATRIX* transform, DWRITE_RENDERING_MODE1 renderingMode, DWRITE_MEASURING_MODE measuringMode, DWRITE_GRID_FIT_MODE gridFitMode, DWRITE_TEXT_ANTIALIAS_MODE antialiasMode, FLOAT baselineOriginX, FLOAT baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis) { return ((HRESULT (WINAPI*)(IDWriteFactory3*, const DWRITE_GLYPH_RUN*, const DWRITE_MATRIX*, DWRITE_RENDERING_MODE1, DWRITE_MEASURING_MODE, DWRITE_GRID_FIT_MODE, DWRITE_TEXT_ANTIALIAS_MODE, FLOAT, FLOAT, IDWriteGlyphRunAnalysis**))this->v->tbl[31])(this, glyphRun, transform, renderingMode, measuringMode, gridFitMode, antialiasMode, baselineOriginX, baselineOriginY, glyphRunAnalysis); }
static inline HRESULT                           IDWriteFactory3_CreateCustomRenderingParams3                 (IDWriteFactory3* this, FLOAT gamma, FLOAT enhancedContrast, FLOAT grayscaleEnhancedContrast, FLOAT clearTypeLevel, DWRITE_PIXEL_GEOMETRY pixelGeometry, DWRITE_RENDERING_MODE1 renderingMode, DWRITE_GRID_FIT_MODE gridFitMode, IDWriteRenderingParams3** renderingParams) { return ((HRESULT (WINAPI*)(IDWriteFactory3*, FLOAT, FLOAT, FLOAT, FLOAT, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE1, DWRITE_GRID_FIT_MODE, IDWriteRenderingParams3**))this->v->tbl[32])(this, gamma, enhancedContrast, grayscaleEnhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, gridFitMode, renderingParams); }
static inline HRESULT                           IDWriteFactory3_CreateFontFaceReference                      (IDWriteFactory3* this, IDWriteFontFile* fontFile, UINT32 faceIndex, DWRITE_FONT_SIMULATIONS fontSimulations, IDWriteFontFaceReference** fontFaceReference) { return ((HRESULT (WINAPI*)(IDWriteFactory3*, IDWriteFontFile*, UINT32, DWRITE_FONT_SIMULATIONS, IDWriteFontFaceReference**))this->v->tbl[33])(this, fontFile, faceIndex, fontSimulations, fontFaceReference); }
static inline HRESULT                           IDWriteFactory3_CreateFontFaceReference1                     (IDWriteFactory3* this, const WCHAR* filePath, const FILETIME* lastWriteTime, UINT32 faceIndex, DWRITE_FONT_SIMULATIONS fontSimulations, IDWriteFontFaceReference** fontFaceReference) { return ((HRESULT (WINAPI*)(IDWriteFactory3*, const WCHAR*, const FILETIME*, UINT32, DWRITE_FONT_SIMULATIONS, IDWriteFontFaceReference**))this->v->tbl[34])(this, filePath, lastWriteTime, faceIndex, fontSimulations, fontFaceReference); }
static inline HRESULT                           IDWriteFactory3_GetSystemFontSet                             (IDWriteFactory3* this, IDWriteFontSet** fontSet) { return ((HRESULT (WINAPI*)(IDWriteFactory3*, IDWriteFontSet**))this->v->tbl[35])(this, fontSet); }
static inline HRESULT                           IDWriteFactory3_CreateFontSetBuilder                         (IDWriteFactory3* this, IDWriteFontSetBuilder** fontSetBuilder) { return ((HRESULT (WINAPI*)(IDWriteFactory3*, IDWriteFontSetBuilder**))this->v->tbl[36])(this, fontSetBuilder); }
static inline HRESULT                           IDWriteFactory3_CreateFontCollectionFromFontSet              (IDWriteFactory3* this, IDWriteFontSet* fontSet, IDWriteFontCollection1** fontCollection) { return ((HRESULT (WINAPI*)(IDWriteFactory3*, IDWriteFontSet*, IDWriteFontCollection1**))this->v->tbl[37])(this, fontSet, fontCollection); }
static inline HRESULT                           IDWriteFactory3_GetSystemFontCollection1                     (IDWriteFactory3* this, BOOL includeDownloadableFonts, IDWriteFontCollection1** fontCollection, BOOL checkForUpdates) { return ((HRESULT (WINAPI*)(IDWriteFactory3*, BOOL, IDWriteFontCollection1**, BOOL))this->v->tbl[38])(this, includeDownloadableFonts, fontCollection, checkForUpdates); }
static inline HRESULT                           IDWriteFactory3_GetFontDownloadQueue                         (IDWriteFactory3* this, IDWriteFontDownloadQueue** fontDownloadQueue) { return ((HRESULT (WINAPI*)(IDWriteFactory3*, IDWriteFontDownloadQueue**))this->v->tbl[39])(this, fontDownloadQueue); }

static inline HRESULT                           IDWriteFactory4_QueryInterface                               (IDWriteFactory4* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFactory4*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFactory4_AddRef                                       (IDWriteFactory4* this) { return ((UINT32 (WINAPI*)(IDWriteFactory4*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFactory4_Release                                      (IDWriteFactory4* this) { return ((UINT32 (WINAPI*)(IDWriteFactory4*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteFactory4_GetSystemFontCollection                      (IDWriteFactory4* this, IDWriteFontCollection** fontCollection, BOOL checkForUpdates) { return ((HRESULT (WINAPI*)(IDWriteFactory4*, IDWriteFontCollection**, BOOL))this->v->tbl[3])(this, fontCollection, checkForUpdates); }
static inline HRESULT                           IDWriteFactory4_CreateCustomFontCollection                   (IDWriteFactory4* this, IDWriteFontCollectionLoader* collectionLoader, const void* collectionKey, UINT32 collectionKeySize, IDWriteFontCollection** fontCollection) { return ((HRESULT (WINAPI*)(IDWriteFactory4*, IDWriteFontCollectionLoader*, const void*, UINT32, IDWriteFontCollection**))this->v->tbl[4])(this, collectionLoader, collectionKey, collectionKeySize, fontCollection); }
static inline HRESULT                           IDWriteFactory4_RegisterFontCollectionLoader                 (IDWriteFactory4* this, IDWriteFontCollectionLoader* fontCollectionLoader) { return ((HRESULT (WINAPI*)(IDWriteFactory4*, IDWriteFontCollectionLoader*))this->v->tbl[5])(this, fontCollectionLoader); }
static inline HRESULT                           IDWriteFactory4_UnregisterFontCollectionLoader               (IDWriteFactory4* this, IDWriteFontCollectionLoader* fontCollectionLoader) { return ((HRESULT (WINAPI*)(IDWriteFactory4*, IDWriteFontCollectionLoader*))this->v->tbl[6])(this, fontCollectionLoader); }
static inline HRESULT                           IDWriteFactory4_CreateFontFileReference                      (IDWriteFactory4* this, const WCHAR* filePath, const FILETIME* lastWriteTime, IDWriteFontFile** fontFile) { return ((HRESULT (WINAPI*)(IDWriteFactory4*, const WCHAR*, const FILETIME*, IDWriteFontFile**))this->v->tbl[7])(this, filePath, lastWriteTime, fontFile); }
static inline HRESULT                           IDWriteFactory4_CreateCustomFontFileReference                (IDWriteFactory4* this, const void* fontFileReferenceKey, UINT32 fontFileReferenceKeySize, IDWriteFontFileLoader* fontFileLoader, IDWriteFontFile** fontFile) { return ((HRESULT (WINAPI*)(IDWriteFactory4*, const void*, UINT32, IDWriteFontFileLoader*, IDWriteFontFile**))this->v->tbl[8])(this, fontFileReferenceKey, fontFileReferenceKeySize, fontFileLoader, fontFile); }
static inline HRESULT                           IDWriteFactory4_CreateFontFace                               (IDWriteFactory4* this, DWRITE_FONT_FACE_TYPE fontFaceType, UINT32 numberOfFiles, IDWriteFontFile** fontFiles, UINT32 faceIndex, DWRITE_FONT_SIMULATIONS fontFaceSimulationFlags, IDWriteFontFace** fontFace) { return ((HRESULT (WINAPI*)(IDWriteFactory4*, DWRITE_FONT_FACE_TYPE, UINT32, IDWriteFontFile**, UINT32, DWRITE_FONT_SIMULATIONS, IDWriteFontFace**))this->v->tbl[9])(this, fontFaceType, numberOfFiles, fontFiles, faceIndex, fontFaceSimulationFlags, fontFace); }
static inline HRESULT                           IDWriteFactory4_CreateRenderingParams                        (IDWriteFactory4* this, IDWriteRenderingParams** renderingParams) { return ((HRESULT (WINAPI*)(IDWriteFactory4*, IDWriteRenderingParams**))this->v->tbl[10])(this, renderingParams); }
static inline HRESULT                           IDWriteFactory4_CreateMonitorRenderingParams                 (IDWriteFactory4* this, HMONITOR monitor, IDWriteRenderingParams** renderingParams) { return ((HRESULT (WINAPI*)(IDWriteFactory4*, HMONITOR, IDWriteRenderingParams**))this->v->tbl[11])(this, monitor, renderingParams); }
static inline HRESULT                           IDWriteFactory4_CreateCustomRenderingParams                  (IDWriteFactory4* this, FLOAT gamma, FLOAT enhancedContrast, FLOAT clearTypeLevel, DWRITE_PIXEL_GEOMETRY pixelGeometry, DWRITE_RENDERING_MODE renderingMode, IDWriteRenderingParams** renderingParams) { return ((HRESULT (WINAPI*)(IDWriteFactory4*, FLOAT, FLOAT, FLOAT, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams**))this->v->tbl[12])(this, gamma, enhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, renderingParams); }
static inline HRESULT                           IDWriteFactory4_RegisterFontFileLoader                       (IDWriteFactory4* this, IDWriteFontFileLoader* fontFileLoader) { return ((HRESULT (WINAPI*)(IDWriteFactory4*, IDWriteFontFileLoader*))this->v->tbl[13])(this, fontFileLoader); }
static inline HRESULT                           IDWriteFactory4_UnregisterFontFileLoader                     (IDWriteFactory4* this, IDWriteFontFileLoader* fontFileLoader) { return ((HRESULT (WINAPI*)(IDWriteFactory4*, IDWriteFontFileLoader*))this->v->tbl[14])(this, fontFileLoader); }
static inline HRESULT                           IDWriteFactory4_CreateTextFormat                             (IDWriteFactory4* this, const WCHAR* fontFamilyName, IDWriteFontCollection* fontCollection, DWRITE_FONT_WEIGHT fontWeight, DWRITE_FONT_STYLE fontStyle, DWRITE_FONT_STRETCH fontStretch, FLOAT fontSize, const WCHAR* localeName, IDWriteTextFormat** textFormat) { return ((HRESULT (WINAPI*)(IDWriteFactory4*, const WCHAR*, IDWriteFontCollection*, DWRITE_FONT_WEIGHT, DWRITE_FONT_STYLE, DWRITE_FONT_STRETCH, FLOAT, const WCHAR*, IDWriteTextFormat**))this->v->tbl[15])(this, fontFamilyName, fontCollection, fontWeight, fontStyle, fontStretch, fontSize, localeName, textFormat); }
static inline HRESULT                           IDWriteFactory4_CreateTypography                             (IDWriteFactory4* this, IDWriteTypography** typography) { return ((HRESULT (WINAPI*)(IDWriteFactory4*, IDWriteTypography**))this->v->tbl[16])(this, typography); }
static inline HRESULT                           IDWriteFactory4_GetGdiInterop                                (IDWriteFactory4* this, IDWriteGdiInterop** gdiInterop) { return ((HRESULT (WINAPI*)(IDWriteFactory4*, IDWriteGdiInterop**))this->v->tbl[17])(this, gdiInterop); }
static inline HRESULT                           IDWriteFactory4_CreateTextLayout                             (IDWriteFactory4* this, const WCHAR* string, UINT32 stringLength, IDWriteTextFormat* textFormat, FLOAT maxWidth, FLOAT maxHeight, IDWriteTextLayout** textLayout) { return ((HRESULT (WINAPI*)(IDWriteFactory4*, const WCHAR*, UINT32, IDWriteTextFormat*, FLOAT, FLOAT, IDWriteTextLayout**))this->v->tbl[18])(this, string, stringLength, textFormat, maxWidth, maxHeight, textLayout); }
static inline HRESULT                           IDWriteFactory4_CreateGdiCompatibleTextLayout                (IDWriteFactory4* this, const WCHAR* string, UINT32 stringLength, IDWriteTextFormat* textFormat, FLOAT layoutWidth, FLOAT layoutHeight, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, BOOL useGdiNatural, IDWriteTextLayout** textLayout) { return ((HRESULT (WINAPI*)(IDWriteFactory4*, const WCHAR*, UINT32, IDWriteTextFormat*, FLOAT, FLOAT, FLOAT, const DWRITE_MATRIX*, BOOL, IDWriteTextLayout**))this->v->tbl[19])(this, string, stringLength, textFormat, layoutWidth, layoutHeight, pixelsPerDip, transform, useGdiNatural, textLayout); }
static inline HRESULT                           IDWriteFactory4_CreateEllipsisTrimmingSign                   (IDWriteFactory4* this, IDWriteTextFormat* textFormat, IDWriteInlineObject** trimmingSign) { return ((HRESULT (WINAPI*)(IDWriteFactory4*, IDWriteTextFormat*, IDWriteInlineObject**))this->v->tbl[20])(this, textFormat, trimmingSign); }
static inline HRESULT                           IDWriteFactory4_CreateTextAnalyzer                           (IDWriteFactory4* this, IDWriteTextAnalyzer** textAnalyzer) { return ((HRESULT (WINAPI*)(IDWriteFactory4*, IDWriteTextAnalyzer**))this->v->tbl[21])(this, textAnalyzer); }
static inline HRESULT                           IDWriteFactory4_CreateNumberSubstitution                     (IDWriteFactory4* this, DWRITE_NUMBER_SUBSTITUTION_METHOD substitutionMethod, const WCHAR* localeName, BOOL ignoreUserOverride, IDWriteNumberSubstitution** numberSubstitution) { return ((HRESULT (WINAPI*)(IDWriteFactory4*, DWRITE_NUMBER_SUBSTITUTION_METHOD, const WCHAR*, BOOL, IDWriteNumberSubstitution**))this->v->tbl[22])(this, substitutionMethod, localeName, ignoreUserOverride, numberSubstitution); }
static inline HRESULT                           IDWriteFactory4_CreateGlyphRunAnalysis                       (IDWriteFactory4* this, const DWRITE_GLYPH_RUN* glyphRun, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, DWRITE_RENDERING_MODE renderingMode, DWRITE_MEASURING_MODE measuringMode, FLOAT baselineOriginX, FLOAT baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis) { return ((HRESULT (WINAPI*)(IDWriteFactory4*, const DWRITE_GLYPH_RUN*, FLOAT, const DWRITE_MATRIX*, DWRITE_RENDERING_MODE, DWRITE_MEASURING_MODE, FLOAT, FLOAT, IDWriteGlyphRunAnalysis**))this->v->tbl[23])(this, glyphRun, pixelsPerDip, transform, renderingMode, measuringMode, baselineOriginX, baselineOriginY, glyphRunAnalysis); }
static inline HRESULT                           IDWriteFactory4_GetEudcFontCollection                        (IDWriteFactory4* this, IDWriteFontCollection** fontCollection, BOOL checkForUpdates) { return ((HRESULT (WINAPI*)(IDWriteFactory4*, IDWriteFontCollection**, BOOL))this->v->tbl[24])(this, fontCollection, checkForUpdates); }
static inline HRESULT                           IDWriteFactory4_CreateCustomRenderingParams1                 (IDWriteFactory4* this, FLOAT gamma, FLOAT enhancedContrast, FLOAT enhancedContrastGrayscale, FLOAT clearTypeLevel, DWRITE_PIXEL_GEOMETRY pixelGeometry, DWRITE_RENDERING_MODE renderingMode, IDWriteRenderingParams1** renderingParams) { return ((HRESULT (WINAPI*)(IDWriteFactory4*, FLOAT, FLOAT, FLOAT, FLOAT, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams1**))this->v->tbl[25])(this, gamma, enhancedContrast, enhancedContrastGrayscale, clearTypeLevel, pixelGeometry, renderingMode, renderingParams); }
static inline HRESULT                           IDWriteFactory4_GetSystemFontFallback                        (IDWriteFactory4* this, IDWriteFontFallback** fontFallback) { return ((HRESULT (WINAPI*)(IDWriteFactory4*, IDWriteFontFallback**))this->v->tbl[26])(this, fontFallback); }
static inline HRESULT                           IDWriteFactory4_CreateFontFallbackBuilder                    (IDWriteFactory4* this, IDWriteFontFallbackBuilder** fontFallbackBuilder) { return ((HRESULT (WINAPI*)(IDWriteFactory4*, IDWriteFontFallbackBuilder**))this->v->tbl[27])(this, fontFallbackBuilder); }
static inline HRESULT                           IDWriteFactory4_TranslateColorGlyphRun                       (IDWriteFactory4* this, FLOAT baselineOriginX, FLOAT baselineOriginY, const DWRITE_GLYPH_RUN* glyphRun, const DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription, DWRITE_MEASURING_MODE measuringMode, const DWRITE_MATRIX* worldToDeviceTransform, UINT32 colorPaletteIndex, IDWriteColorGlyphRunEnumerator** colorLayers) { return ((HRESULT (WINAPI*)(IDWriteFactory4*, FLOAT, FLOAT, const DWRITE_GLYPH_RUN*, const DWRITE_GLYPH_RUN_DESCRIPTION*, DWRITE_MEASURING_MODE, const DWRITE_MATRIX*, UINT32, IDWriteColorGlyphRunEnumerator**))this->v->tbl[28])(this, baselineOriginX, baselineOriginY, glyphRun, glyphRunDescription, measuringMode, worldToDeviceTransform, colorPaletteIndex, colorLayers); }
static inline HRESULT                           IDWriteFactory4_CreateCustomRenderingParams2                 (IDWriteFactory4* this, FLOAT gamma, FLOAT enhancedContrast, FLOAT grayscaleEnhancedContrast, FLOAT clearTypeLevel, DWRITE_PIXEL_GEOMETRY pixelGeometry, DWRITE_RENDERING_MODE renderingMode, DWRITE_GRID_FIT_MODE gridFitMode, IDWriteRenderingParams2** renderingParams) { return ((HRESULT (WINAPI*)(IDWriteFactory4*, FLOAT, FLOAT, FLOAT, FLOAT, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, DWRITE_GRID_FIT_MODE, IDWriteRenderingParams2**))this->v->tbl[29])(this, gamma, enhancedContrast, grayscaleEnhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, gridFitMode, renderingParams); }
static inline HRESULT                           IDWriteFactory4_CreateGlyphRunAnalysis1                      (IDWriteFactory4* this, const DWRITE_GLYPH_RUN* glyphRun, const DWRITE_MATRIX* transform, DWRITE_RENDERING_MODE renderingMode, DWRITE_MEASURING_MODE measuringMode, DWRITE_GRID_FIT_MODE gridFitMode, DWRITE_TEXT_ANTIALIAS_MODE antialiasMode, FLOAT baselineOriginX, FLOAT baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis) { return ((HRESULT (WINAPI*)(IDWriteFactory4*, const DWRITE_GLYPH_RUN*, const DWRITE_MATRIX*, DWRITE_RENDERING_MODE, DWRITE_MEASURING_MODE, DWRITE_GRID_FIT_MODE, DWRITE_TEXT_ANTIALIAS_MODE, FLOAT, FLOAT, IDWriteGlyphRunAnalysis**))this->v->tbl[30])(this, glyphRun, transform, renderingMode, measuringMode, gridFitMode, antialiasMode, baselineOriginX, baselineOriginY, glyphRunAnalysis); }
static inline HRESULT                           IDWriteFactory4_CreateGlyphRunAnalysis2                      (IDWriteFactory4* this, const DWRITE_GLYPH_RUN* glyphRun, const DWRITE_MATRIX* transform, DWRITE_RENDERING_MODE1 renderingMode, DWRITE_MEASURING_MODE measuringMode, DWRITE_GRID_FIT_MODE gridFitMode, DWRITE_TEXT_ANTIALIAS_MODE antialiasMode, FLOAT baselineOriginX, FLOAT baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis) { return ((HRESULT (WINAPI*)(IDWriteFactory4*, const DWRITE_GLYPH_RUN*, const DWRITE_MATRIX*, DWRITE_RENDERING_MODE1, DWRITE_MEASURING_MODE, DWRITE_GRID_FIT_MODE, DWRITE_TEXT_ANTIALIAS_MODE, FLOAT, FLOAT, IDWriteGlyphRunAnalysis**))this->v->tbl[31])(this, glyphRun, transform, renderingMode, measuringMode, gridFitMode, antialiasMode, baselineOriginX, baselineOriginY, glyphRunAnalysis); }
static inline HRESULT                           IDWriteFactory4_CreateCustomRenderingParams3                 (IDWriteFactory4* this, FLOAT gamma, FLOAT enhancedContrast, FLOAT grayscaleEnhancedContrast, FLOAT clearTypeLevel, DWRITE_PIXEL_GEOMETRY pixelGeometry, DWRITE_RENDERING_MODE1 renderingMode, DWRITE_GRID_FIT_MODE gridFitMode, IDWriteRenderingParams3** renderingParams) { return ((HRESULT (WINAPI*)(IDWriteFactory4*, FLOAT, FLOAT, FLOAT, FLOAT, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE1, DWRITE_GRID_FIT_MODE, IDWriteRenderingParams3**))this->v->tbl[32])(this, gamma, enhancedContrast, grayscaleEnhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, gridFitMode, renderingParams); }
static inline HRESULT                           IDWriteFactory4_CreateFontFaceReference                      (IDWriteFactory4* this, IDWriteFontFile* fontFile, UINT32 faceIndex, DWRITE_FONT_SIMULATIONS fontSimulations, IDWriteFontFaceReference** fontFaceReference) { return ((HRESULT (WINAPI*)(IDWriteFactory4*, IDWriteFontFile*, UINT32, DWRITE_FONT_SIMULATIONS, IDWriteFontFaceReference**))this->v->tbl[33])(this, fontFile, faceIndex, fontSimulations, fontFaceReference); }
static inline HRESULT                           IDWriteFactory4_CreateFontFaceReference1                     (IDWriteFactory4* this, const WCHAR* filePath, const FILETIME* lastWriteTime, UINT32 faceIndex, DWRITE_FONT_SIMULATIONS fontSimulations, IDWriteFontFaceReference** fontFaceReference) { return ((HRESULT (WINAPI*)(IDWriteFactory4*, const WCHAR*, const FILETIME*, UINT32, DWRITE_FONT_SIMULATIONS, IDWriteFontFaceReference**))this->v->tbl[34])(this, filePath, lastWriteTime, faceIndex, fontSimulations, fontFaceReference); }
static inline HRESULT                           IDWriteFactory4_GetSystemFontSet                             (IDWriteFactory4* this, IDWriteFontSet** fontSet) { return ((HRESULT (WINAPI*)(IDWriteFactory4*, IDWriteFontSet**))this->v->tbl[35])(this, fontSet); }
static inline HRESULT                           IDWriteFactory4_CreateFontSetBuilder                         (IDWriteFactory4* this, IDWriteFontSetBuilder** fontSetBuilder) { return ((HRESULT (WINAPI*)(IDWriteFactory4*, IDWriteFontSetBuilder**))this->v->tbl[36])(this, fontSetBuilder); }
static inline HRESULT                           IDWriteFactory4_CreateFontCollectionFromFontSet              (IDWriteFactory4* this, IDWriteFontSet* fontSet, IDWriteFontCollection1** fontCollection) { return ((HRESULT (WINAPI*)(IDWriteFactory4*, IDWriteFontSet*, IDWriteFontCollection1**))this->v->tbl[37])(this, fontSet, fontCollection); }
static inline HRESULT                           IDWriteFactory4_GetSystemFontCollection1                     (IDWriteFactory4* this, BOOL includeDownloadableFonts, IDWriteFontCollection1** fontCollection, BOOL checkForUpdates) { return ((HRESULT (WINAPI*)(IDWriteFactory4*, BOOL, IDWriteFontCollection1**, BOOL))this->v->tbl[38])(this, includeDownloadableFonts, fontCollection, checkForUpdates); }
static inline HRESULT                           IDWriteFactory4_GetFontDownloadQueue                         (IDWriteFactory4* this, IDWriteFontDownloadQueue** fontDownloadQueue) { return ((HRESULT (WINAPI*)(IDWriteFactory4*, IDWriteFontDownloadQueue**))this->v->tbl[39])(this, fontDownloadQueue); }
static inline HRESULT                           IDWriteFactory4_TranslateColorGlyphRun1                      (IDWriteFactory4* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, const DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription, enum DWRITE_GLYPH_IMAGE_FORMATS desiredGlyphImageFormats, DWRITE_MEASURING_MODE measuringMode, const DWRITE_MATRIX* worldAndDpiTransform, UINT32 colorPaletteIndex, IDWriteColorGlyphRunEnumerator1** colorLayers) { return ((HRESULT (WINAPI*)(IDWriteFactory4*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, const DWRITE_GLYPH_RUN_DESCRIPTION*, enum DWRITE_GLYPH_IMAGE_FORMATS, DWRITE_MEASURING_MODE, const DWRITE_MATRIX*, UINT32, IDWriteColorGlyphRunEnumerator1**))this->v->tbl[40])(this, baselineOrigin, glyphRun, glyphRunDescription, desiredGlyphImageFormats, measuringMode, worldAndDpiTransform, colorPaletteIndex, colorLayers); }
static inline HRESULT                           IDWriteFactory4_ComputeGlyphOrigins                          (IDWriteFactory4* this, const DWRITE_GLYPH_RUN* glyphRun, D2D_POINT_2F baselineOrigin, D2D_POINT_2F* glyphOrigins) { return ((HRESULT (WINAPI*)(IDWriteFactory4*, const DWRITE_GLYPH_RUN*, D2D_POINT_2F, D2D_POINT_2F*))this->v->tbl[41])(this, glyphRun, baselineOrigin, glyphOrigins); }
static inline HRESULT                           IDWriteFactory4_ComputeGlyphOrigins1                         (IDWriteFactory4* this, const DWRITE_GLYPH_RUN* glyphRun, DWRITE_MEASURING_MODE measuringMode, D2D_POINT_2F baselineOrigin, const DWRITE_MATRIX* worldAndDpiTransform, D2D_POINT_2F* glyphOrigins) { return ((HRESULT (WINAPI*)(IDWriteFactory4*, const DWRITE_GLYPH_RUN*, DWRITE_MEASURING_MODE, D2D_POINT_2F, const DWRITE_MATRIX*, D2D_POINT_2F*))this->v->tbl[42])(this, glyphRun, measuringMode, baselineOrigin, worldAndDpiTransform, glyphOrigins); }

static inline HRESULT                           IDWriteFactory5_QueryInterface                               (IDWriteFactory5* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFactory5_AddRef                                       (IDWriteFactory5* this) { return ((UINT32 (WINAPI*)(IDWriteFactory5*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFactory5_Release                                      (IDWriteFactory5* this) { return ((UINT32 (WINAPI*)(IDWriteFactory5*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteFactory5_GetSystemFontCollection                      (IDWriteFactory5* this, IDWriteFontCollection** fontCollection, BOOL checkForUpdates) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, IDWriteFontCollection**, BOOL))this->v->tbl[3])(this, fontCollection, checkForUpdates); }
static inline HRESULT                           IDWriteFactory5_CreateCustomFontCollection                   (IDWriteFactory5* this, IDWriteFontCollectionLoader* collectionLoader, const void* collectionKey, UINT32 collectionKeySize, IDWriteFontCollection** fontCollection) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, IDWriteFontCollectionLoader*, const void*, UINT32, IDWriteFontCollection**))this->v->tbl[4])(this, collectionLoader, collectionKey, collectionKeySize, fontCollection); }
static inline HRESULT                           IDWriteFactory5_RegisterFontCollectionLoader                 (IDWriteFactory5* this, IDWriteFontCollectionLoader* fontCollectionLoader) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, IDWriteFontCollectionLoader*))this->v->tbl[5])(this, fontCollectionLoader); }
static inline HRESULT                           IDWriteFactory5_UnregisterFontCollectionLoader               (IDWriteFactory5* this, IDWriteFontCollectionLoader* fontCollectionLoader) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, IDWriteFontCollectionLoader*))this->v->tbl[6])(this, fontCollectionLoader); }
static inline HRESULT                           IDWriteFactory5_CreateFontFileReference                      (IDWriteFactory5* this, const WCHAR* filePath, const FILETIME* lastWriteTime, IDWriteFontFile** fontFile) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, const WCHAR*, const FILETIME*, IDWriteFontFile**))this->v->tbl[7])(this, filePath, lastWriteTime, fontFile); }
static inline HRESULT                           IDWriteFactory5_CreateCustomFontFileReference                (IDWriteFactory5* this, const void* fontFileReferenceKey, UINT32 fontFileReferenceKeySize, IDWriteFontFileLoader* fontFileLoader, IDWriteFontFile** fontFile) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, const void*, UINT32, IDWriteFontFileLoader*, IDWriteFontFile**))this->v->tbl[8])(this, fontFileReferenceKey, fontFileReferenceKeySize, fontFileLoader, fontFile); }
static inline HRESULT                           IDWriteFactory5_CreateFontFace                               (IDWriteFactory5* this, DWRITE_FONT_FACE_TYPE fontFaceType, UINT32 numberOfFiles, IDWriteFontFile** fontFiles, UINT32 faceIndex, DWRITE_FONT_SIMULATIONS fontFaceSimulationFlags, IDWriteFontFace** fontFace) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, DWRITE_FONT_FACE_TYPE, UINT32, IDWriteFontFile**, UINT32, DWRITE_FONT_SIMULATIONS, IDWriteFontFace**))this->v->tbl[9])(this, fontFaceType, numberOfFiles, fontFiles, faceIndex, fontFaceSimulationFlags, fontFace); }
static inline HRESULT                           IDWriteFactory5_CreateRenderingParams                        (IDWriteFactory5* this, IDWriteRenderingParams** renderingParams) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, IDWriteRenderingParams**))this->v->tbl[10])(this, renderingParams); }
static inline HRESULT                           IDWriteFactory5_CreateMonitorRenderingParams                 (IDWriteFactory5* this, HMONITOR monitor, IDWriteRenderingParams** renderingParams) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, HMONITOR, IDWriteRenderingParams**))this->v->tbl[11])(this, monitor, renderingParams); }
static inline HRESULT                           IDWriteFactory5_CreateCustomRenderingParams                  (IDWriteFactory5* this, FLOAT gamma, FLOAT enhancedContrast, FLOAT clearTypeLevel, DWRITE_PIXEL_GEOMETRY pixelGeometry, DWRITE_RENDERING_MODE renderingMode, IDWriteRenderingParams** renderingParams) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, FLOAT, FLOAT, FLOAT, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams**))this->v->tbl[12])(this, gamma, enhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, renderingParams); }
static inline HRESULT                           IDWriteFactory5_RegisterFontFileLoader                       (IDWriteFactory5* this, IDWriteFontFileLoader* fontFileLoader) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, IDWriteFontFileLoader*))this->v->tbl[13])(this, fontFileLoader); }
static inline HRESULT                           IDWriteFactory5_UnregisterFontFileLoader                     (IDWriteFactory5* this, IDWriteFontFileLoader* fontFileLoader) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, IDWriteFontFileLoader*))this->v->tbl[14])(this, fontFileLoader); }
static inline HRESULT                           IDWriteFactory5_CreateTextFormat                             (IDWriteFactory5* this, const WCHAR* fontFamilyName, IDWriteFontCollection* fontCollection, DWRITE_FONT_WEIGHT fontWeight, DWRITE_FONT_STYLE fontStyle, DWRITE_FONT_STRETCH fontStretch, FLOAT fontSize, const WCHAR* localeName, IDWriteTextFormat** textFormat) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, const WCHAR*, IDWriteFontCollection*, DWRITE_FONT_WEIGHT, DWRITE_FONT_STYLE, DWRITE_FONT_STRETCH, FLOAT, const WCHAR*, IDWriteTextFormat**))this->v->tbl[15])(this, fontFamilyName, fontCollection, fontWeight, fontStyle, fontStretch, fontSize, localeName, textFormat); }
static inline HRESULT                           IDWriteFactory5_CreateTypography                             (IDWriteFactory5* this, IDWriteTypography** typography) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, IDWriteTypography**))this->v->tbl[16])(this, typography); }
static inline HRESULT                           IDWriteFactory5_GetGdiInterop                                (IDWriteFactory5* this, IDWriteGdiInterop** gdiInterop) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, IDWriteGdiInterop**))this->v->tbl[17])(this, gdiInterop); }
static inline HRESULT                           IDWriteFactory5_CreateTextLayout                             (IDWriteFactory5* this, const WCHAR* string, UINT32 stringLength, IDWriteTextFormat* textFormat, FLOAT maxWidth, FLOAT maxHeight, IDWriteTextLayout** textLayout) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, const WCHAR*, UINT32, IDWriteTextFormat*, FLOAT, FLOAT, IDWriteTextLayout**))this->v->tbl[18])(this, string, stringLength, textFormat, maxWidth, maxHeight, textLayout); }
static inline HRESULT                           IDWriteFactory5_CreateGdiCompatibleTextLayout                (IDWriteFactory5* this, const WCHAR* string, UINT32 stringLength, IDWriteTextFormat* textFormat, FLOAT layoutWidth, FLOAT layoutHeight, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, BOOL useGdiNatural, IDWriteTextLayout** textLayout) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, const WCHAR*, UINT32, IDWriteTextFormat*, FLOAT, FLOAT, FLOAT, const DWRITE_MATRIX*, BOOL, IDWriteTextLayout**))this->v->tbl[19])(this, string, stringLength, textFormat, layoutWidth, layoutHeight, pixelsPerDip, transform, useGdiNatural, textLayout); }
static inline HRESULT                           IDWriteFactory5_CreateEllipsisTrimmingSign                   (IDWriteFactory5* this, IDWriteTextFormat* textFormat, IDWriteInlineObject** trimmingSign) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, IDWriteTextFormat*, IDWriteInlineObject**))this->v->tbl[20])(this, textFormat, trimmingSign); }
static inline HRESULT                           IDWriteFactory5_CreateTextAnalyzer                           (IDWriteFactory5* this, IDWriteTextAnalyzer** textAnalyzer) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, IDWriteTextAnalyzer**))this->v->tbl[21])(this, textAnalyzer); }
static inline HRESULT                           IDWriteFactory5_CreateNumberSubstitution                     (IDWriteFactory5* this, DWRITE_NUMBER_SUBSTITUTION_METHOD substitutionMethod, const WCHAR* localeName, BOOL ignoreUserOverride, IDWriteNumberSubstitution** numberSubstitution) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, DWRITE_NUMBER_SUBSTITUTION_METHOD, const WCHAR*, BOOL, IDWriteNumberSubstitution**))this->v->tbl[22])(this, substitutionMethod, localeName, ignoreUserOverride, numberSubstitution); }
static inline HRESULT                           IDWriteFactory5_CreateGlyphRunAnalysis                       (IDWriteFactory5* this, const DWRITE_GLYPH_RUN* glyphRun, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, DWRITE_RENDERING_MODE renderingMode, DWRITE_MEASURING_MODE measuringMode, FLOAT baselineOriginX, FLOAT baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, const DWRITE_GLYPH_RUN*, FLOAT, const DWRITE_MATRIX*, DWRITE_RENDERING_MODE, DWRITE_MEASURING_MODE, FLOAT, FLOAT, IDWriteGlyphRunAnalysis**))this->v->tbl[23])(this, glyphRun, pixelsPerDip, transform, renderingMode, measuringMode, baselineOriginX, baselineOriginY, glyphRunAnalysis); }
static inline HRESULT                           IDWriteFactory5_GetEudcFontCollection                        (IDWriteFactory5* this, IDWriteFontCollection** fontCollection, BOOL checkForUpdates) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, IDWriteFontCollection**, BOOL))this->v->tbl[24])(this, fontCollection, checkForUpdates); }
static inline HRESULT                           IDWriteFactory5_CreateCustomRenderingParams1                 (IDWriteFactory5* this, FLOAT gamma, FLOAT enhancedContrast, FLOAT enhancedContrastGrayscale, FLOAT clearTypeLevel, DWRITE_PIXEL_GEOMETRY pixelGeometry, DWRITE_RENDERING_MODE renderingMode, IDWriteRenderingParams1** renderingParams) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, FLOAT, FLOAT, FLOAT, FLOAT, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams1**))this->v->tbl[25])(this, gamma, enhancedContrast, enhancedContrastGrayscale, clearTypeLevel, pixelGeometry, renderingMode, renderingParams); }
static inline HRESULT                           IDWriteFactory5_GetSystemFontFallback                        (IDWriteFactory5* this, IDWriteFontFallback** fontFallback) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, IDWriteFontFallback**))this->v->tbl[26])(this, fontFallback); }
static inline HRESULT                           IDWriteFactory5_CreateFontFallbackBuilder                    (IDWriteFactory5* this, IDWriteFontFallbackBuilder** fontFallbackBuilder) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, IDWriteFontFallbackBuilder**))this->v->tbl[27])(this, fontFallbackBuilder); }
static inline HRESULT                           IDWriteFactory5_TranslateColorGlyphRun                       (IDWriteFactory5* this, FLOAT baselineOriginX, FLOAT baselineOriginY, const DWRITE_GLYPH_RUN* glyphRun, const DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription, DWRITE_MEASURING_MODE measuringMode, const DWRITE_MATRIX* worldToDeviceTransform, UINT32 colorPaletteIndex, IDWriteColorGlyphRunEnumerator** colorLayers) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, FLOAT, FLOAT, const DWRITE_GLYPH_RUN*, const DWRITE_GLYPH_RUN_DESCRIPTION*, DWRITE_MEASURING_MODE, const DWRITE_MATRIX*, UINT32, IDWriteColorGlyphRunEnumerator**))this->v->tbl[28])(this, baselineOriginX, baselineOriginY, glyphRun, glyphRunDescription, measuringMode, worldToDeviceTransform, colorPaletteIndex, colorLayers); }
static inline HRESULT                           IDWriteFactory5_CreateCustomRenderingParams2                 (IDWriteFactory5* this, FLOAT gamma, FLOAT enhancedContrast, FLOAT grayscaleEnhancedContrast, FLOAT clearTypeLevel, DWRITE_PIXEL_GEOMETRY pixelGeometry, DWRITE_RENDERING_MODE renderingMode, DWRITE_GRID_FIT_MODE gridFitMode, IDWriteRenderingParams2** renderingParams) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, FLOAT, FLOAT, FLOAT, FLOAT, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, DWRITE_GRID_FIT_MODE, IDWriteRenderingParams2**))this->v->tbl[29])(this, gamma, enhancedContrast, grayscaleEnhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, gridFitMode, renderingParams); }
static inline HRESULT                           IDWriteFactory5_CreateGlyphRunAnalysis1                      (IDWriteFactory5* this, const DWRITE_GLYPH_RUN* glyphRun, const DWRITE_MATRIX* transform, DWRITE_RENDERING_MODE renderingMode, DWRITE_MEASURING_MODE measuringMode, DWRITE_GRID_FIT_MODE gridFitMode, DWRITE_TEXT_ANTIALIAS_MODE antialiasMode, FLOAT baselineOriginX, FLOAT baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, const DWRITE_GLYPH_RUN*, const DWRITE_MATRIX*, DWRITE_RENDERING_MODE, DWRITE_MEASURING_MODE, DWRITE_GRID_FIT_MODE, DWRITE_TEXT_ANTIALIAS_MODE, FLOAT, FLOAT, IDWriteGlyphRunAnalysis**))this->v->tbl[30])(this, glyphRun, transform, renderingMode, measuringMode, gridFitMode, antialiasMode, baselineOriginX, baselineOriginY, glyphRunAnalysis); }
static inline HRESULT                           IDWriteFactory5_CreateGlyphRunAnalysis2                      (IDWriteFactory5* this, const DWRITE_GLYPH_RUN* glyphRun, const DWRITE_MATRIX* transform, DWRITE_RENDERING_MODE1 renderingMode, DWRITE_MEASURING_MODE measuringMode, DWRITE_GRID_FIT_MODE gridFitMode, DWRITE_TEXT_ANTIALIAS_MODE antialiasMode, FLOAT baselineOriginX, FLOAT baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, const DWRITE_GLYPH_RUN*, const DWRITE_MATRIX*, DWRITE_RENDERING_MODE1, DWRITE_MEASURING_MODE, DWRITE_GRID_FIT_MODE, DWRITE_TEXT_ANTIALIAS_MODE, FLOAT, FLOAT, IDWriteGlyphRunAnalysis**))this->v->tbl[31])(this, glyphRun, transform, renderingMode, measuringMode, gridFitMode, antialiasMode, baselineOriginX, baselineOriginY, glyphRunAnalysis); }
static inline HRESULT                           IDWriteFactory5_CreateCustomRenderingParams3                 (IDWriteFactory5* this, FLOAT gamma, FLOAT enhancedContrast, FLOAT grayscaleEnhancedContrast, FLOAT clearTypeLevel, DWRITE_PIXEL_GEOMETRY pixelGeometry, DWRITE_RENDERING_MODE1 renderingMode, DWRITE_GRID_FIT_MODE gridFitMode, IDWriteRenderingParams3** renderingParams) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, FLOAT, FLOAT, FLOAT, FLOAT, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE1, DWRITE_GRID_FIT_MODE, IDWriteRenderingParams3**))this->v->tbl[32])(this, gamma, enhancedContrast, grayscaleEnhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, gridFitMode, renderingParams); }
static inline HRESULT                           IDWriteFactory5_CreateFontFaceReference                      (IDWriteFactory5* this, IDWriteFontFile* fontFile, UINT32 faceIndex, DWRITE_FONT_SIMULATIONS fontSimulations, IDWriteFontFaceReference** fontFaceReference) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, IDWriteFontFile*, UINT32, DWRITE_FONT_SIMULATIONS, IDWriteFontFaceReference**))this->v->tbl[33])(this, fontFile, faceIndex, fontSimulations, fontFaceReference); }
static inline HRESULT                           IDWriteFactory5_CreateFontFaceReference1                     (IDWriteFactory5* this, const WCHAR* filePath, const FILETIME* lastWriteTime, UINT32 faceIndex, DWRITE_FONT_SIMULATIONS fontSimulations, IDWriteFontFaceReference** fontFaceReference) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, const WCHAR*, const FILETIME*, UINT32, DWRITE_FONT_SIMULATIONS, IDWriteFontFaceReference**))this->v->tbl[34])(this, filePath, lastWriteTime, faceIndex, fontSimulations, fontFaceReference); }
static inline HRESULT                           IDWriteFactory5_GetSystemFontSet                             (IDWriteFactory5* this, IDWriteFontSet** fontSet) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, IDWriteFontSet**))this->v->tbl[35])(this, fontSet); }
static inline HRESULT                           IDWriteFactory5_CreateFontSetBuilder                         (IDWriteFactory5* this, IDWriteFontSetBuilder** fontSetBuilder) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, IDWriteFontSetBuilder**))this->v->tbl[36])(this, fontSetBuilder); }
static inline HRESULT                           IDWriteFactory5_CreateFontCollectionFromFontSet              (IDWriteFactory5* this, IDWriteFontSet* fontSet, IDWriteFontCollection1** fontCollection) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, IDWriteFontSet*, IDWriteFontCollection1**))this->v->tbl[37])(this, fontSet, fontCollection); }
static inline HRESULT                           IDWriteFactory5_GetSystemFontCollection1                     (IDWriteFactory5* this, BOOL includeDownloadableFonts, IDWriteFontCollection1** fontCollection, BOOL checkForUpdates) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, BOOL, IDWriteFontCollection1**, BOOL))this->v->tbl[38])(this, includeDownloadableFonts, fontCollection, checkForUpdates); }
static inline HRESULT                           IDWriteFactory5_GetFontDownloadQueue                         (IDWriteFactory5* this, IDWriteFontDownloadQueue** fontDownloadQueue) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, IDWriteFontDownloadQueue**))this->v->tbl[39])(this, fontDownloadQueue); }
static inline HRESULT                           IDWriteFactory5_TranslateColorGlyphRun1                      (IDWriteFactory5* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, const DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription, enum DWRITE_GLYPH_IMAGE_FORMATS desiredGlyphImageFormats, DWRITE_MEASURING_MODE measuringMode, const DWRITE_MATRIX* worldAndDpiTransform, UINT32 colorPaletteIndex, IDWriteColorGlyphRunEnumerator1** colorLayers) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, const DWRITE_GLYPH_RUN_DESCRIPTION*, enum DWRITE_GLYPH_IMAGE_FORMATS, DWRITE_MEASURING_MODE, const DWRITE_MATRIX*, UINT32, IDWriteColorGlyphRunEnumerator1**))this->v->tbl[40])(this, baselineOrigin, glyphRun, glyphRunDescription, desiredGlyphImageFormats, measuringMode, worldAndDpiTransform, colorPaletteIndex, colorLayers); }
static inline HRESULT                           IDWriteFactory5_ComputeGlyphOrigins                          (IDWriteFactory5* this, const DWRITE_GLYPH_RUN* glyphRun, D2D_POINT_2F baselineOrigin, D2D_POINT_2F* glyphOrigins) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, const DWRITE_GLYPH_RUN*, D2D_POINT_2F, D2D_POINT_2F*))this->v->tbl[41])(this, glyphRun, baselineOrigin, glyphOrigins); }
static inline HRESULT                           IDWriteFactory5_ComputeGlyphOrigins1                         (IDWriteFactory5* this, const DWRITE_GLYPH_RUN* glyphRun, DWRITE_MEASURING_MODE measuringMode, D2D_POINT_2F baselineOrigin, const DWRITE_MATRIX* worldAndDpiTransform, D2D_POINT_2F* glyphOrigins) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, const DWRITE_GLYPH_RUN*, DWRITE_MEASURING_MODE, D2D_POINT_2F, const DWRITE_MATRIX*, D2D_POINT_2F*))this->v->tbl[42])(this, glyphRun, measuringMode, baselineOrigin, worldAndDpiTransform, glyphOrigins); }
static inline HRESULT                           IDWriteFactory5_CreateFontSetBuilder1                        (IDWriteFactory5* this, IDWriteFontSetBuilder1** fontSetBuilder) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, IDWriteFontSetBuilder1**))this->v->tbl[43])(this, fontSetBuilder); }
static inline HRESULT                           IDWriteFactory5_CreateInMemoryFontFileLoader                 (IDWriteFactory5* this, IDWriteInMemoryFontFileLoader** newLoader) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, IDWriteInMemoryFontFileLoader**))this->v->tbl[44])(this, newLoader); }
static inline HRESULT                           IDWriteFactory5_CreateHttpFontFileLoader                     (IDWriteFactory5* this, const WCHAR* referrerUrl, const WCHAR* extraHeaders, IDWriteRemoteFontFileLoader** newLoader) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, const WCHAR*, const WCHAR*, IDWriteRemoteFontFileLoader**))this->v->tbl[45])(this, referrerUrl, extraHeaders, newLoader); }
static inline DWRITE_CONTAINER_TYPE             IDWriteFactory5_AnalyzeContainerType                         (IDWriteFactory5* this, const void* fileData, UINT32 fileDataSize) { return ((DWRITE_CONTAINER_TYPE (WINAPI*)(IDWriteFactory5*, const void*, UINT32))this->v->tbl[46])(this, fileData, fileDataSize); }
static inline HRESULT                           IDWriteFactory5_UnpackFontFile                               (IDWriteFactory5* this, DWRITE_CONTAINER_TYPE containerType, const void* fileData, UINT32 fileDataSize, IDWriteFontFileStream** unpackedFontStream) { return ((HRESULT (WINAPI*)(IDWriteFactory5*, DWRITE_CONTAINER_TYPE, const void*, UINT32, IDWriteFontFileStream**))this->v->tbl[47])(this, containerType, fileData, fileDataSize, unpackedFontStream); }

static inline HRESULT                           IDWriteFactory6_QueryInterface                               (IDWriteFactory6* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFactory6_AddRef                                       (IDWriteFactory6* this) { return ((UINT32 (WINAPI*)(IDWriteFactory6*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFactory6_Release                                      (IDWriteFactory6* this) { return ((UINT32 (WINAPI*)(IDWriteFactory6*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteFactory6_GetSystemFontCollection                      (IDWriteFactory6* this, IDWriteFontCollection** fontCollection, BOOL checkForUpdates) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, IDWriteFontCollection**, BOOL))this->v->tbl[3])(this, fontCollection, checkForUpdates); }
static inline HRESULT                           IDWriteFactory6_CreateCustomFontCollection                   (IDWriteFactory6* this, IDWriteFontCollectionLoader* collectionLoader, const void* collectionKey, UINT32 collectionKeySize, IDWriteFontCollection** fontCollection) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, IDWriteFontCollectionLoader*, const void*, UINT32, IDWriteFontCollection**))this->v->tbl[4])(this, collectionLoader, collectionKey, collectionKeySize, fontCollection); }
static inline HRESULT                           IDWriteFactory6_RegisterFontCollectionLoader                 (IDWriteFactory6* this, IDWriteFontCollectionLoader* fontCollectionLoader) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, IDWriteFontCollectionLoader*))this->v->tbl[5])(this, fontCollectionLoader); }
static inline HRESULT                           IDWriteFactory6_UnregisterFontCollectionLoader               (IDWriteFactory6* this, IDWriteFontCollectionLoader* fontCollectionLoader) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, IDWriteFontCollectionLoader*))this->v->tbl[6])(this, fontCollectionLoader); }
static inline HRESULT                           IDWriteFactory6_CreateFontFileReference                      (IDWriteFactory6* this, const WCHAR* filePath, const FILETIME* lastWriteTime, IDWriteFontFile** fontFile) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, const WCHAR*, const FILETIME*, IDWriteFontFile**))this->v->tbl[7])(this, filePath, lastWriteTime, fontFile); }
static inline HRESULT                           IDWriteFactory6_CreateCustomFontFileReference                (IDWriteFactory6* this, const void* fontFileReferenceKey, UINT32 fontFileReferenceKeySize, IDWriteFontFileLoader* fontFileLoader, IDWriteFontFile** fontFile) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, const void*, UINT32, IDWriteFontFileLoader*, IDWriteFontFile**))this->v->tbl[8])(this, fontFileReferenceKey, fontFileReferenceKeySize, fontFileLoader, fontFile); }
static inline HRESULT                           IDWriteFactory6_CreateFontFace                               (IDWriteFactory6* this, DWRITE_FONT_FACE_TYPE fontFaceType, UINT32 numberOfFiles, IDWriteFontFile** fontFiles, UINT32 faceIndex, DWRITE_FONT_SIMULATIONS fontFaceSimulationFlags, IDWriteFontFace** fontFace) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, DWRITE_FONT_FACE_TYPE, UINT32, IDWriteFontFile**, UINT32, DWRITE_FONT_SIMULATIONS, IDWriteFontFace**))this->v->tbl[9])(this, fontFaceType, numberOfFiles, fontFiles, faceIndex, fontFaceSimulationFlags, fontFace); }
static inline HRESULT                           IDWriteFactory6_CreateRenderingParams                        (IDWriteFactory6* this, IDWriteRenderingParams** renderingParams) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, IDWriteRenderingParams**))this->v->tbl[10])(this, renderingParams); }
static inline HRESULT                           IDWriteFactory6_CreateMonitorRenderingParams                 (IDWriteFactory6* this, HMONITOR monitor, IDWriteRenderingParams** renderingParams) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, HMONITOR, IDWriteRenderingParams**))this->v->tbl[11])(this, monitor, renderingParams); }
static inline HRESULT                           IDWriteFactory6_CreateCustomRenderingParams                  (IDWriteFactory6* this, FLOAT gamma, FLOAT enhancedContrast, FLOAT clearTypeLevel, DWRITE_PIXEL_GEOMETRY pixelGeometry, DWRITE_RENDERING_MODE renderingMode, IDWriteRenderingParams** renderingParams) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, FLOAT, FLOAT, FLOAT, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams**))this->v->tbl[12])(this, gamma, enhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, renderingParams); }
static inline HRESULT                           IDWriteFactory6_RegisterFontFileLoader                       (IDWriteFactory6* this, IDWriteFontFileLoader* fontFileLoader) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, IDWriteFontFileLoader*))this->v->tbl[13])(this, fontFileLoader); }
static inline HRESULT                           IDWriteFactory6_UnregisterFontFileLoader                     (IDWriteFactory6* this, IDWriteFontFileLoader* fontFileLoader) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, IDWriteFontFileLoader*))this->v->tbl[14])(this, fontFileLoader); }
static inline HRESULT                           IDWriteFactory6_CreateTextFormat                             (IDWriteFactory6* this, const WCHAR* fontFamilyName, IDWriteFontCollection* fontCollection, DWRITE_FONT_WEIGHT fontWeight, DWRITE_FONT_STYLE fontStyle, DWRITE_FONT_STRETCH fontStretch, FLOAT fontSize, const WCHAR* localeName, IDWriteTextFormat** textFormat) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, const WCHAR*, IDWriteFontCollection*, DWRITE_FONT_WEIGHT, DWRITE_FONT_STYLE, DWRITE_FONT_STRETCH, FLOAT, const WCHAR*, IDWriteTextFormat**))this->v->tbl[15])(this, fontFamilyName, fontCollection, fontWeight, fontStyle, fontStretch, fontSize, localeName, textFormat); }
static inline HRESULT                           IDWriteFactory6_CreateTypography                             (IDWriteFactory6* this, IDWriteTypography** typography) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, IDWriteTypography**))this->v->tbl[16])(this, typography); }
static inline HRESULT                           IDWriteFactory6_GetGdiInterop                                (IDWriteFactory6* this, IDWriteGdiInterop** gdiInterop) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, IDWriteGdiInterop**))this->v->tbl[17])(this, gdiInterop); }
static inline HRESULT                           IDWriteFactory6_CreateTextLayout                             (IDWriteFactory6* this, const WCHAR* string, UINT32 stringLength, IDWriteTextFormat* textFormat, FLOAT maxWidth, FLOAT maxHeight, IDWriteTextLayout** textLayout) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, const WCHAR*, UINT32, IDWriteTextFormat*, FLOAT, FLOAT, IDWriteTextLayout**))this->v->tbl[18])(this, string, stringLength, textFormat, maxWidth, maxHeight, textLayout); }
static inline HRESULT                           IDWriteFactory6_CreateGdiCompatibleTextLayout                (IDWriteFactory6* this, const WCHAR* string, UINT32 stringLength, IDWriteTextFormat* textFormat, FLOAT layoutWidth, FLOAT layoutHeight, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, BOOL useGdiNatural, IDWriteTextLayout** textLayout) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, const WCHAR*, UINT32, IDWriteTextFormat*, FLOAT, FLOAT, FLOAT, const DWRITE_MATRIX*, BOOL, IDWriteTextLayout**))this->v->tbl[19])(this, string, stringLength, textFormat, layoutWidth, layoutHeight, pixelsPerDip, transform, useGdiNatural, textLayout); }
static inline HRESULT                           IDWriteFactory6_CreateEllipsisTrimmingSign                   (IDWriteFactory6* this, IDWriteTextFormat* textFormat, IDWriteInlineObject** trimmingSign) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, IDWriteTextFormat*, IDWriteInlineObject**))this->v->tbl[20])(this, textFormat, trimmingSign); }
static inline HRESULT                           IDWriteFactory6_CreateTextAnalyzer                           (IDWriteFactory6* this, IDWriteTextAnalyzer** textAnalyzer) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, IDWriteTextAnalyzer**))this->v->tbl[21])(this, textAnalyzer); }
static inline HRESULT                           IDWriteFactory6_CreateNumberSubstitution                     (IDWriteFactory6* this, DWRITE_NUMBER_SUBSTITUTION_METHOD substitutionMethod, const WCHAR* localeName, BOOL ignoreUserOverride, IDWriteNumberSubstitution** numberSubstitution) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, DWRITE_NUMBER_SUBSTITUTION_METHOD, const WCHAR*, BOOL, IDWriteNumberSubstitution**))this->v->tbl[22])(this, substitutionMethod, localeName, ignoreUserOverride, numberSubstitution); }
static inline HRESULT                           IDWriteFactory6_CreateGlyphRunAnalysis                       (IDWriteFactory6* this, const DWRITE_GLYPH_RUN* glyphRun, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, DWRITE_RENDERING_MODE renderingMode, DWRITE_MEASURING_MODE measuringMode, FLOAT baselineOriginX, FLOAT baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, const DWRITE_GLYPH_RUN*, FLOAT, const DWRITE_MATRIX*, DWRITE_RENDERING_MODE, DWRITE_MEASURING_MODE, FLOAT, FLOAT, IDWriteGlyphRunAnalysis**))this->v->tbl[23])(this, glyphRun, pixelsPerDip, transform, renderingMode, measuringMode, baselineOriginX, baselineOriginY, glyphRunAnalysis); }
static inline HRESULT                           IDWriteFactory6_GetEudcFontCollection                        (IDWriteFactory6* this, IDWriteFontCollection** fontCollection, BOOL checkForUpdates) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, IDWriteFontCollection**, BOOL))this->v->tbl[24])(this, fontCollection, checkForUpdates); }
static inline HRESULT                           IDWriteFactory6_CreateCustomRenderingParams1                 (IDWriteFactory6* this, FLOAT gamma, FLOAT enhancedContrast, FLOAT enhancedContrastGrayscale, FLOAT clearTypeLevel, DWRITE_PIXEL_GEOMETRY pixelGeometry, DWRITE_RENDERING_MODE renderingMode, IDWriteRenderingParams1** renderingParams) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, FLOAT, FLOAT, FLOAT, FLOAT, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams1**))this->v->tbl[25])(this, gamma, enhancedContrast, enhancedContrastGrayscale, clearTypeLevel, pixelGeometry, renderingMode, renderingParams); }
static inline HRESULT                           IDWriteFactory6_GetSystemFontFallback                        (IDWriteFactory6* this, IDWriteFontFallback** fontFallback) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, IDWriteFontFallback**))this->v->tbl[26])(this, fontFallback); }
static inline HRESULT                           IDWriteFactory6_CreateFontFallbackBuilder                    (IDWriteFactory6* this, IDWriteFontFallbackBuilder** fontFallbackBuilder) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, IDWriteFontFallbackBuilder**))this->v->tbl[27])(this, fontFallbackBuilder); }
static inline HRESULT                           IDWriteFactory6_TranslateColorGlyphRun                       (IDWriteFactory6* this, FLOAT baselineOriginX, FLOAT baselineOriginY, const DWRITE_GLYPH_RUN* glyphRun, const DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription, DWRITE_MEASURING_MODE measuringMode, const DWRITE_MATRIX* worldToDeviceTransform, UINT32 colorPaletteIndex, IDWriteColorGlyphRunEnumerator** colorLayers) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, FLOAT, FLOAT, const DWRITE_GLYPH_RUN*, const DWRITE_GLYPH_RUN_DESCRIPTION*, DWRITE_MEASURING_MODE, const DWRITE_MATRIX*, UINT32, IDWriteColorGlyphRunEnumerator**))this->v->tbl[28])(this, baselineOriginX, baselineOriginY, glyphRun, glyphRunDescription, measuringMode, worldToDeviceTransform, colorPaletteIndex, colorLayers); }
static inline HRESULT                           IDWriteFactory6_CreateCustomRenderingParams2                 (IDWriteFactory6* this, FLOAT gamma, FLOAT enhancedContrast, FLOAT grayscaleEnhancedContrast, FLOAT clearTypeLevel, DWRITE_PIXEL_GEOMETRY pixelGeometry, DWRITE_RENDERING_MODE renderingMode, DWRITE_GRID_FIT_MODE gridFitMode, IDWriteRenderingParams2** renderingParams) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, FLOAT, FLOAT, FLOAT, FLOAT, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, DWRITE_GRID_FIT_MODE, IDWriteRenderingParams2**))this->v->tbl[29])(this, gamma, enhancedContrast, grayscaleEnhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, gridFitMode, renderingParams); }
static inline HRESULT                           IDWriteFactory6_CreateGlyphRunAnalysis1                      (IDWriteFactory6* this, const DWRITE_GLYPH_RUN* glyphRun, const DWRITE_MATRIX* transform, DWRITE_RENDERING_MODE renderingMode, DWRITE_MEASURING_MODE measuringMode, DWRITE_GRID_FIT_MODE gridFitMode, DWRITE_TEXT_ANTIALIAS_MODE antialiasMode, FLOAT baselineOriginX, FLOAT baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, const DWRITE_GLYPH_RUN*, const DWRITE_MATRIX*, DWRITE_RENDERING_MODE, DWRITE_MEASURING_MODE, DWRITE_GRID_FIT_MODE, DWRITE_TEXT_ANTIALIAS_MODE, FLOAT, FLOAT, IDWriteGlyphRunAnalysis**))this->v->tbl[30])(this, glyphRun, transform, renderingMode, measuringMode, gridFitMode, antialiasMode, baselineOriginX, baselineOriginY, glyphRunAnalysis); }
static inline HRESULT                           IDWriteFactory6_CreateGlyphRunAnalysis2                      (IDWriteFactory6* this, const DWRITE_GLYPH_RUN* glyphRun, const DWRITE_MATRIX* transform, DWRITE_RENDERING_MODE1 renderingMode, DWRITE_MEASURING_MODE measuringMode, DWRITE_GRID_FIT_MODE gridFitMode, DWRITE_TEXT_ANTIALIAS_MODE antialiasMode, FLOAT baselineOriginX, FLOAT baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, const DWRITE_GLYPH_RUN*, const DWRITE_MATRIX*, DWRITE_RENDERING_MODE1, DWRITE_MEASURING_MODE, DWRITE_GRID_FIT_MODE, DWRITE_TEXT_ANTIALIAS_MODE, FLOAT, FLOAT, IDWriteGlyphRunAnalysis**))this->v->tbl[31])(this, glyphRun, transform, renderingMode, measuringMode, gridFitMode, antialiasMode, baselineOriginX, baselineOriginY, glyphRunAnalysis); }
static inline HRESULT                           IDWriteFactory6_CreateCustomRenderingParams3                 (IDWriteFactory6* this, FLOAT gamma, FLOAT enhancedContrast, FLOAT grayscaleEnhancedContrast, FLOAT clearTypeLevel, DWRITE_PIXEL_GEOMETRY pixelGeometry, DWRITE_RENDERING_MODE1 renderingMode, DWRITE_GRID_FIT_MODE gridFitMode, IDWriteRenderingParams3** renderingParams) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, FLOAT, FLOAT, FLOAT, FLOAT, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE1, DWRITE_GRID_FIT_MODE, IDWriteRenderingParams3**))this->v->tbl[32])(this, gamma, enhancedContrast, grayscaleEnhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, gridFitMode, renderingParams); }
static inline HRESULT                           IDWriteFactory6_CreateFontFaceReference                      (IDWriteFactory6* this, IDWriteFontFile* fontFile, UINT32 faceIndex, DWRITE_FONT_SIMULATIONS fontSimulations, IDWriteFontFaceReference** fontFaceReference) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, IDWriteFontFile*, UINT32, DWRITE_FONT_SIMULATIONS, IDWriteFontFaceReference**))this->v->tbl[33])(this, fontFile, faceIndex, fontSimulations, fontFaceReference); }
static inline HRESULT                           IDWriteFactory6_CreateFontFaceReference1                     (IDWriteFactory6* this, const WCHAR* filePath, const FILETIME* lastWriteTime, UINT32 faceIndex, DWRITE_FONT_SIMULATIONS fontSimulations, IDWriteFontFaceReference** fontFaceReference) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, const WCHAR*, const FILETIME*, UINT32, DWRITE_FONT_SIMULATIONS, IDWriteFontFaceReference**))this->v->tbl[34])(this, filePath, lastWriteTime, faceIndex, fontSimulations, fontFaceReference); }
static inline HRESULT                           IDWriteFactory6_GetSystemFontSet                             (IDWriteFactory6* this, IDWriteFontSet** fontSet) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, IDWriteFontSet**))this->v->tbl[35])(this, fontSet); }
static inline HRESULT                           IDWriteFactory6_CreateFontSetBuilder                         (IDWriteFactory6* this, IDWriteFontSetBuilder** fontSetBuilder) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, IDWriteFontSetBuilder**))this->v->tbl[36])(this, fontSetBuilder); }
static inline HRESULT                           IDWriteFactory6_CreateFontCollectionFromFontSet              (IDWriteFactory6* this, IDWriteFontSet* fontSet, IDWriteFontCollection1** fontCollection) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, IDWriteFontSet*, IDWriteFontCollection1**))this->v->tbl[37])(this, fontSet, fontCollection); }
static inline HRESULT                           IDWriteFactory6_GetSystemFontCollection1                     (IDWriteFactory6* this, BOOL includeDownloadableFonts, IDWriteFontCollection1** fontCollection, BOOL checkForUpdates) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, BOOL, IDWriteFontCollection1**, BOOL))this->v->tbl[38])(this, includeDownloadableFonts, fontCollection, checkForUpdates); }
static inline HRESULT                           IDWriteFactory6_GetFontDownloadQueue                         (IDWriteFactory6* this, IDWriteFontDownloadQueue** fontDownloadQueue) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, IDWriteFontDownloadQueue**))this->v->tbl[39])(this, fontDownloadQueue); }
static inline HRESULT                           IDWriteFactory6_TranslateColorGlyphRun1                      (IDWriteFactory6* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, const DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription, enum DWRITE_GLYPH_IMAGE_FORMATS desiredGlyphImageFormats, DWRITE_MEASURING_MODE measuringMode, const DWRITE_MATRIX* worldAndDpiTransform, UINT32 colorPaletteIndex, IDWriteColorGlyphRunEnumerator1** colorLayers) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, const DWRITE_GLYPH_RUN_DESCRIPTION*, enum DWRITE_GLYPH_IMAGE_FORMATS, DWRITE_MEASURING_MODE, const DWRITE_MATRIX*, UINT32, IDWriteColorGlyphRunEnumerator1**))this->v->tbl[40])(this, baselineOrigin, glyphRun, glyphRunDescription, desiredGlyphImageFormats, measuringMode, worldAndDpiTransform, colorPaletteIndex, colorLayers); }
static inline HRESULT                           IDWriteFactory6_ComputeGlyphOrigins                          (IDWriteFactory6* this, const DWRITE_GLYPH_RUN* glyphRun, D2D_POINT_2F baselineOrigin, D2D_POINT_2F* glyphOrigins) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, const DWRITE_GLYPH_RUN*, D2D_POINT_2F, D2D_POINT_2F*))this->v->tbl[41])(this, glyphRun, baselineOrigin, glyphOrigins); }
static inline HRESULT                           IDWriteFactory6_ComputeGlyphOrigins1                         (IDWriteFactory6* this, const DWRITE_GLYPH_RUN* glyphRun, DWRITE_MEASURING_MODE measuringMode, D2D_POINT_2F baselineOrigin, const DWRITE_MATRIX* worldAndDpiTransform, D2D_POINT_2F* glyphOrigins) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, const DWRITE_GLYPH_RUN*, DWRITE_MEASURING_MODE, D2D_POINT_2F, const DWRITE_MATRIX*, D2D_POINT_2F*))this->v->tbl[42])(this, glyphRun, measuringMode, baselineOrigin, worldAndDpiTransform, glyphOrigins); }
static inline HRESULT                           IDWriteFactory6_CreateFontSetBuilder1                        (IDWriteFactory6* this, IDWriteFontSetBuilder1** fontSetBuilder) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, IDWriteFontSetBuilder1**))this->v->tbl[43])(this, fontSetBuilder); }
static inline HRESULT                           IDWriteFactory6_CreateInMemoryFontFileLoader                 (IDWriteFactory6* this, IDWriteInMemoryFontFileLoader** newLoader) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, IDWriteInMemoryFontFileLoader**))this->v->tbl[44])(this, newLoader); }
static inline HRESULT                           IDWriteFactory6_CreateHttpFontFileLoader                     (IDWriteFactory6* this, const WCHAR* referrerUrl, const WCHAR* extraHeaders, IDWriteRemoteFontFileLoader** newLoader) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, const WCHAR*, const WCHAR*, IDWriteRemoteFontFileLoader**))this->v->tbl[45])(this, referrerUrl, extraHeaders, newLoader); }
static inline DWRITE_CONTAINER_TYPE             IDWriteFactory6_AnalyzeContainerType                         (IDWriteFactory6* this, const void* fileData, UINT32 fileDataSize) { return ((DWRITE_CONTAINER_TYPE (WINAPI*)(IDWriteFactory6*, const void*, UINT32))this->v->tbl[46])(this, fileData, fileDataSize); }
static inline HRESULT                           IDWriteFactory6_UnpackFontFile                               (IDWriteFactory6* this, DWRITE_CONTAINER_TYPE containerType, const void* fileData, UINT32 fileDataSize, IDWriteFontFileStream** unpackedFontStream) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, DWRITE_CONTAINER_TYPE, const void*, UINT32, IDWriteFontFileStream**))this->v->tbl[47])(this, containerType, fileData, fileDataSize, unpackedFontStream); }
static inline HRESULT                           IDWriteFactory6_CreateFontFaceReference2                     (IDWriteFactory6* this, IDWriteFontFile* fontFile, UINT32 faceIndex, DWRITE_FONT_SIMULATIONS fontSimulations, const DWRITE_FONT_AXIS_VALUE* fontAxisValues, UINT32 fontAxisValueCount, IDWriteFontFaceReference1** fontFaceReference) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, IDWriteFontFile*, UINT32, DWRITE_FONT_SIMULATIONS, const DWRITE_FONT_AXIS_VALUE*, UINT32, IDWriteFontFaceReference1**))this->v->tbl[48])(this, fontFile, faceIndex, fontSimulations, fontAxisValues, fontAxisValueCount, fontFaceReference); }
static inline HRESULT                           IDWriteFactory6_CreateFontResource                           (IDWriteFactory6* this, IDWriteFontFile* fontFile, UINT32 faceIndex, IDWriteFontResource** fontResource) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, IDWriteFontFile*, UINT32, IDWriteFontResource**))this->v->tbl[49])(this, fontFile, faceIndex, fontResource); }
static inline HRESULT                           IDWriteFactory6_GetSystemFontSet1                            (IDWriteFactory6* this, BOOL includeDownloadableFonts, IDWriteFontSet1** fontSet) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, BOOL, IDWriteFontSet1**))this->v->tbl[50])(this, includeDownloadableFonts, fontSet); }
static inline HRESULT                           IDWriteFactory6_GetSystemFontCollection2                     (IDWriteFactory6* this, BOOL includeDownloadableFonts, DWRITE_FONT_FAMILY_MODEL fontFamilyModel, IDWriteFontCollection2** fontCollection) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, BOOL, DWRITE_FONT_FAMILY_MODEL, IDWriteFontCollection2**))this->v->tbl[51])(this, includeDownloadableFonts, fontFamilyModel, fontCollection); }
static inline HRESULT                           IDWriteFactory6_CreateFontCollectionFromFontSet1             (IDWriteFactory6* this, IDWriteFontSet* fontSet, DWRITE_FONT_FAMILY_MODEL fontFamilyModel, IDWriteFontCollection2** fontCollection) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, IDWriteFontSet*, DWRITE_FONT_FAMILY_MODEL, IDWriteFontCollection2**))this->v->tbl[52])(this, fontSet, fontFamilyModel, fontCollection); }
static inline HRESULT                           IDWriteFactory6_CreateFontSetBuilder2                        (IDWriteFactory6* this, IDWriteFontSetBuilder2** fontSetBuilder) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, IDWriteFontSetBuilder2**))this->v->tbl[53])(this, fontSetBuilder); }
static inline HRESULT                           IDWriteFactory6_CreateTextFormat1                            (IDWriteFactory6* this, const WCHAR* fontFamilyName, IDWriteFontCollection* fontCollection, const DWRITE_FONT_AXIS_VALUE* fontAxisValues, UINT32 fontAxisValueCount, FLOAT fontSize, const WCHAR* localeName, IDWriteTextFormat3** textFormat) { return ((HRESULT (WINAPI*)(IDWriteFactory6*, const WCHAR*, IDWriteFontCollection*, const DWRITE_FONT_AXIS_VALUE*, UINT32, FLOAT, const WCHAR*, IDWriteTextFormat3**))this->v->tbl[54])(this, fontFamilyName, fontCollection, fontAxisValues, fontAxisValueCount, fontSize, localeName, textFormat); }

static inline HRESULT                           IDWriteFactory7_QueryInterface                               (IDWriteFactory7* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFactory7_AddRef                                       (IDWriteFactory7* this) { return ((UINT32 (WINAPI*)(IDWriteFactory7*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFactory7_Release                                      (IDWriteFactory7* this) { return ((UINT32 (WINAPI*)(IDWriteFactory7*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteFactory7_GetSystemFontCollection                      (IDWriteFactory7* this, IDWriteFontCollection** fontCollection, BOOL checkForUpdates) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, IDWriteFontCollection**, BOOL))this->v->tbl[3])(this, fontCollection, checkForUpdates); }
static inline HRESULT                           IDWriteFactory7_CreateCustomFontCollection                   (IDWriteFactory7* this, IDWriteFontCollectionLoader* collectionLoader, const void* collectionKey, UINT32 collectionKeySize, IDWriteFontCollection** fontCollection) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, IDWriteFontCollectionLoader*, const void*, UINT32, IDWriteFontCollection**))this->v->tbl[4])(this, collectionLoader, collectionKey, collectionKeySize, fontCollection); }
static inline HRESULT                           IDWriteFactory7_RegisterFontCollectionLoader                 (IDWriteFactory7* this, IDWriteFontCollectionLoader* fontCollectionLoader) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, IDWriteFontCollectionLoader*))this->v->tbl[5])(this, fontCollectionLoader); }
static inline HRESULT                           IDWriteFactory7_UnregisterFontCollectionLoader               (IDWriteFactory7* this, IDWriteFontCollectionLoader* fontCollectionLoader) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, IDWriteFontCollectionLoader*))this->v->tbl[6])(this, fontCollectionLoader); }
static inline HRESULT                           IDWriteFactory7_CreateFontFileReference                      (IDWriteFactory7* this, const WCHAR* filePath, const FILETIME* lastWriteTime, IDWriteFontFile** fontFile) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, const WCHAR*, const FILETIME*, IDWriteFontFile**))this->v->tbl[7])(this, filePath, lastWriteTime, fontFile); }
static inline HRESULT                           IDWriteFactory7_CreateCustomFontFileReference                (IDWriteFactory7* this, const void* fontFileReferenceKey, UINT32 fontFileReferenceKeySize, IDWriteFontFileLoader* fontFileLoader, IDWriteFontFile** fontFile) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, const void*, UINT32, IDWriteFontFileLoader*, IDWriteFontFile**))this->v->tbl[8])(this, fontFileReferenceKey, fontFileReferenceKeySize, fontFileLoader, fontFile); }
static inline HRESULT                           IDWriteFactory7_CreateFontFace                               (IDWriteFactory7* this, DWRITE_FONT_FACE_TYPE fontFaceType, UINT32 numberOfFiles, IDWriteFontFile** fontFiles, UINT32 faceIndex, DWRITE_FONT_SIMULATIONS fontFaceSimulationFlags, IDWriteFontFace** fontFace) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, DWRITE_FONT_FACE_TYPE, UINT32, IDWriteFontFile**, UINT32, DWRITE_FONT_SIMULATIONS, IDWriteFontFace**))this->v->tbl[9])(this, fontFaceType, numberOfFiles, fontFiles, faceIndex, fontFaceSimulationFlags, fontFace); }
static inline HRESULT                           IDWriteFactory7_CreateRenderingParams                        (IDWriteFactory7* this, IDWriteRenderingParams** renderingParams) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, IDWriteRenderingParams**))this->v->tbl[10])(this, renderingParams); }
static inline HRESULT                           IDWriteFactory7_CreateMonitorRenderingParams                 (IDWriteFactory7* this, HMONITOR monitor, IDWriteRenderingParams** renderingParams) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, HMONITOR, IDWriteRenderingParams**))this->v->tbl[11])(this, monitor, renderingParams); }
static inline HRESULT                           IDWriteFactory7_CreateCustomRenderingParams                  (IDWriteFactory7* this, FLOAT gamma, FLOAT enhancedContrast, FLOAT clearTypeLevel, DWRITE_PIXEL_GEOMETRY pixelGeometry, DWRITE_RENDERING_MODE renderingMode, IDWriteRenderingParams** renderingParams) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, FLOAT, FLOAT, FLOAT, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams**))this->v->tbl[12])(this, gamma, enhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, renderingParams); }
static inline HRESULT                           IDWriteFactory7_RegisterFontFileLoader                       (IDWriteFactory7* this, IDWriteFontFileLoader* fontFileLoader) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, IDWriteFontFileLoader*))this->v->tbl[13])(this, fontFileLoader); }
static inline HRESULT                           IDWriteFactory7_UnregisterFontFileLoader                     (IDWriteFactory7* this, IDWriteFontFileLoader* fontFileLoader) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, IDWriteFontFileLoader*))this->v->tbl[14])(this, fontFileLoader); }
static inline HRESULT                           IDWriteFactory7_CreateTextFormat                             (IDWriteFactory7* this, const WCHAR* fontFamilyName, IDWriteFontCollection* fontCollection, DWRITE_FONT_WEIGHT fontWeight, DWRITE_FONT_STYLE fontStyle, DWRITE_FONT_STRETCH fontStretch, FLOAT fontSize, const WCHAR* localeName, IDWriteTextFormat** textFormat) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, const WCHAR*, IDWriteFontCollection*, DWRITE_FONT_WEIGHT, DWRITE_FONT_STYLE, DWRITE_FONT_STRETCH, FLOAT, const WCHAR*, IDWriteTextFormat**))this->v->tbl[15])(this, fontFamilyName, fontCollection, fontWeight, fontStyle, fontStretch, fontSize, localeName, textFormat); }
static inline HRESULT                           IDWriteFactory7_CreateTypography                             (IDWriteFactory7* this, IDWriteTypography** typography) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, IDWriteTypography**))this->v->tbl[16])(this, typography); }
static inline HRESULT                           IDWriteFactory7_GetGdiInterop                                (IDWriteFactory7* this, IDWriteGdiInterop** gdiInterop) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, IDWriteGdiInterop**))this->v->tbl[17])(this, gdiInterop); }
static inline HRESULT                           IDWriteFactory7_CreateTextLayout                             (IDWriteFactory7* this, const WCHAR* string, UINT32 stringLength, IDWriteTextFormat* textFormat, FLOAT maxWidth, FLOAT maxHeight, IDWriteTextLayout** textLayout) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, const WCHAR*, UINT32, IDWriteTextFormat*, FLOAT, FLOAT, IDWriteTextLayout**))this->v->tbl[18])(this, string, stringLength, textFormat, maxWidth, maxHeight, textLayout); }
static inline HRESULT                           IDWriteFactory7_CreateGdiCompatibleTextLayout                (IDWriteFactory7* this, const WCHAR* string, UINT32 stringLength, IDWriteTextFormat* textFormat, FLOAT layoutWidth, FLOAT layoutHeight, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, BOOL useGdiNatural, IDWriteTextLayout** textLayout) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, const WCHAR*, UINT32, IDWriteTextFormat*, FLOAT, FLOAT, FLOAT, const DWRITE_MATRIX*, BOOL, IDWriteTextLayout**))this->v->tbl[19])(this, string, stringLength, textFormat, layoutWidth, layoutHeight, pixelsPerDip, transform, useGdiNatural, textLayout); }
static inline HRESULT                           IDWriteFactory7_CreateEllipsisTrimmingSign                   (IDWriteFactory7* this, IDWriteTextFormat* textFormat, IDWriteInlineObject** trimmingSign) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, IDWriteTextFormat*, IDWriteInlineObject**))this->v->tbl[20])(this, textFormat, trimmingSign); }
static inline HRESULT                           IDWriteFactory7_CreateTextAnalyzer                           (IDWriteFactory7* this, IDWriteTextAnalyzer** textAnalyzer) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, IDWriteTextAnalyzer**))this->v->tbl[21])(this, textAnalyzer); }
static inline HRESULT                           IDWriteFactory7_CreateNumberSubstitution                     (IDWriteFactory7* this, DWRITE_NUMBER_SUBSTITUTION_METHOD substitutionMethod, const WCHAR* localeName, BOOL ignoreUserOverride, IDWriteNumberSubstitution** numberSubstitution) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, DWRITE_NUMBER_SUBSTITUTION_METHOD, const WCHAR*, BOOL, IDWriteNumberSubstitution**))this->v->tbl[22])(this, substitutionMethod, localeName, ignoreUserOverride, numberSubstitution); }
static inline HRESULT                           IDWriteFactory7_CreateGlyphRunAnalysis                       (IDWriteFactory7* this, const DWRITE_GLYPH_RUN* glyphRun, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, DWRITE_RENDERING_MODE renderingMode, DWRITE_MEASURING_MODE measuringMode, FLOAT baselineOriginX, FLOAT baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, const DWRITE_GLYPH_RUN*, FLOAT, const DWRITE_MATRIX*, DWRITE_RENDERING_MODE, DWRITE_MEASURING_MODE, FLOAT, FLOAT, IDWriteGlyphRunAnalysis**))this->v->tbl[23])(this, glyphRun, pixelsPerDip, transform, renderingMode, measuringMode, baselineOriginX, baselineOriginY, glyphRunAnalysis); }
static inline HRESULT                           IDWriteFactory7_GetEudcFontCollection                        (IDWriteFactory7* this, IDWriteFontCollection** fontCollection, BOOL checkForUpdates) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, IDWriteFontCollection**, BOOL))this->v->tbl[24])(this, fontCollection, checkForUpdates); }
static inline HRESULT                           IDWriteFactory7_CreateCustomRenderingParams1                 (IDWriteFactory7* this, FLOAT gamma, FLOAT enhancedContrast, FLOAT enhancedContrastGrayscale, FLOAT clearTypeLevel, DWRITE_PIXEL_GEOMETRY pixelGeometry, DWRITE_RENDERING_MODE renderingMode, IDWriteRenderingParams1** renderingParams) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, FLOAT, FLOAT, FLOAT, FLOAT, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams1**))this->v->tbl[25])(this, gamma, enhancedContrast, enhancedContrastGrayscale, clearTypeLevel, pixelGeometry, renderingMode, renderingParams); }
static inline HRESULT                           IDWriteFactory7_GetSystemFontFallback                        (IDWriteFactory7* this, IDWriteFontFallback** fontFallback) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, IDWriteFontFallback**))this->v->tbl[26])(this, fontFallback); }
static inline HRESULT                           IDWriteFactory7_CreateFontFallbackBuilder                    (IDWriteFactory7* this, IDWriteFontFallbackBuilder** fontFallbackBuilder) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, IDWriteFontFallbackBuilder**))this->v->tbl[27])(this, fontFallbackBuilder); }
static inline HRESULT                           IDWriteFactory7_TranslateColorGlyphRun                       (IDWriteFactory7* this, FLOAT baselineOriginX, FLOAT baselineOriginY, const DWRITE_GLYPH_RUN* glyphRun, const DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription, DWRITE_MEASURING_MODE measuringMode, const DWRITE_MATRIX* worldToDeviceTransform, UINT32 colorPaletteIndex, IDWriteColorGlyphRunEnumerator** colorLayers) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, FLOAT, FLOAT, const DWRITE_GLYPH_RUN*, const DWRITE_GLYPH_RUN_DESCRIPTION*, DWRITE_MEASURING_MODE, const DWRITE_MATRIX*, UINT32, IDWriteColorGlyphRunEnumerator**))this->v->tbl[28])(this, baselineOriginX, baselineOriginY, glyphRun, glyphRunDescription, measuringMode, worldToDeviceTransform, colorPaletteIndex, colorLayers); }
static inline HRESULT                           IDWriteFactory7_CreateCustomRenderingParams2                 (IDWriteFactory7* this, FLOAT gamma, FLOAT enhancedContrast, FLOAT grayscaleEnhancedContrast, FLOAT clearTypeLevel, DWRITE_PIXEL_GEOMETRY pixelGeometry, DWRITE_RENDERING_MODE renderingMode, DWRITE_GRID_FIT_MODE gridFitMode, IDWriteRenderingParams2** renderingParams) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, FLOAT, FLOAT, FLOAT, FLOAT, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, DWRITE_GRID_FIT_MODE, IDWriteRenderingParams2**))this->v->tbl[29])(this, gamma, enhancedContrast, grayscaleEnhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, gridFitMode, renderingParams); }
static inline HRESULT                           IDWriteFactory7_CreateGlyphRunAnalysis1                      (IDWriteFactory7* this, const DWRITE_GLYPH_RUN* glyphRun, const DWRITE_MATRIX* transform, DWRITE_RENDERING_MODE renderingMode, DWRITE_MEASURING_MODE measuringMode, DWRITE_GRID_FIT_MODE gridFitMode, DWRITE_TEXT_ANTIALIAS_MODE antialiasMode, FLOAT baselineOriginX, FLOAT baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, const DWRITE_GLYPH_RUN*, const DWRITE_MATRIX*, DWRITE_RENDERING_MODE, DWRITE_MEASURING_MODE, DWRITE_GRID_FIT_MODE, DWRITE_TEXT_ANTIALIAS_MODE, FLOAT, FLOAT, IDWriteGlyphRunAnalysis**))this->v->tbl[30])(this, glyphRun, transform, renderingMode, measuringMode, gridFitMode, antialiasMode, baselineOriginX, baselineOriginY, glyphRunAnalysis); }
static inline HRESULT                           IDWriteFactory7_CreateGlyphRunAnalysis2                      (IDWriteFactory7* this, const DWRITE_GLYPH_RUN* glyphRun, const DWRITE_MATRIX* transform, DWRITE_RENDERING_MODE1 renderingMode, DWRITE_MEASURING_MODE measuringMode, DWRITE_GRID_FIT_MODE gridFitMode, DWRITE_TEXT_ANTIALIAS_MODE antialiasMode, FLOAT baselineOriginX, FLOAT baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, const DWRITE_GLYPH_RUN*, const DWRITE_MATRIX*, DWRITE_RENDERING_MODE1, DWRITE_MEASURING_MODE, DWRITE_GRID_FIT_MODE, DWRITE_TEXT_ANTIALIAS_MODE, FLOAT, FLOAT, IDWriteGlyphRunAnalysis**))this->v->tbl[31])(this, glyphRun, transform, renderingMode, measuringMode, gridFitMode, antialiasMode, baselineOriginX, baselineOriginY, glyphRunAnalysis); }
static inline HRESULT                           IDWriteFactory7_CreateCustomRenderingParams3                 (IDWriteFactory7* this, FLOAT gamma, FLOAT enhancedContrast, FLOAT grayscaleEnhancedContrast, FLOAT clearTypeLevel, DWRITE_PIXEL_GEOMETRY pixelGeometry, DWRITE_RENDERING_MODE1 renderingMode, DWRITE_GRID_FIT_MODE gridFitMode, IDWriteRenderingParams3** renderingParams) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, FLOAT, FLOAT, FLOAT, FLOAT, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE1, DWRITE_GRID_FIT_MODE, IDWriteRenderingParams3**))this->v->tbl[32])(this, gamma, enhancedContrast, grayscaleEnhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, gridFitMode, renderingParams); }
static inline HRESULT                           IDWriteFactory7_CreateFontFaceReference                      (IDWriteFactory7* this, IDWriteFontFile* fontFile, UINT32 faceIndex, DWRITE_FONT_SIMULATIONS fontSimulations, IDWriteFontFaceReference** fontFaceReference) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, IDWriteFontFile*, UINT32, DWRITE_FONT_SIMULATIONS, IDWriteFontFaceReference**))this->v->tbl[33])(this, fontFile, faceIndex, fontSimulations, fontFaceReference); }
static inline HRESULT                           IDWriteFactory7_CreateFontFaceReference1                     (IDWriteFactory7* this, const WCHAR* filePath, const FILETIME* lastWriteTime, UINT32 faceIndex, DWRITE_FONT_SIMULATIONS fontSimulations, IDWriteFontFaceReference** fontFaceReference) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, const WCHAR*, const FILETIME*, UINT32, DWRITE_FONT_SIMULATIONS, IDWriteFontFaceReference**))this->v->tbl[34])(this, filePath, lastWriteTime, faceIndex, fontSimulations, fontFaceReference); }
static inline HRESULT                           IDWriteFactory7_GetSystemFontSet                             (IDWriteFactory7* this, IDWriteFontSet** fontSet) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, IDWriteFontSet**))this->v->tbl[35])(this, fontSet); }
static inline HRESULT                           IDWriteFactory7_CreateFontSetBuilder                         (IDWriteFactory7* this, IDWriteFontSetBuilder** fontSetBuilder) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, IDWriteFontSetBuilder**))this->v->tbl[36])(this, fontSetBuilder); }
static inline HRESULT                           IDWriteFactory7_CreateFontCollectionFromFontSet              (IDWriteFactory7* this, IDWriteFontSet* fontSet, IDWriteFontCollection1** fontCollection) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, IDWriteFontSet*, IDWriteFontCollection1**))this->v->tbl[37])(this, fontSet, fontCollection); }
static inline HRESULT                           IDWriteFactory7_GetSystemFontCollection1                     (IDWriteFactory7* this, BOOL includeDownloadableFonts, IDWriteFontCollection1** fontCollection, BOOL checkForUpdates) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, BOOL, IDWriteFontCollection1**, BOOL))this->v->tbl[38])(this, includeDownloadableFonts, fontCollection, checkForUpdates); }
static inline HRESULT                           IDWriteFactory7_GetFontDownloadQueue                         (IDWriteFactory7* this, IDWriteFontDownloadQueue** fontDownloadQueue) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, IDWriteFontDownloadQueue**))this->v->tbl[39])(this, fontDownloadQueue); }
static inline HRESULT                           IDWriteFactory7_TranslateColorGlyphRun1                      (IDWriteFactory7* this, D2D_POINT_2F baselineOrigin, const DWRITE_GLYPH_RUN* glyphRun, const DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription, enum DWRITE_GLYPH_IMAGE_FORMATS desiredGlyphImageFormats, DWRITE_MEASURING_MODE measuringMode, const DWRITE_MATRIX* worldAndDpiTransform, UINT32 colorPaletteIndex, IDWriteColorGlyphRunEnumerator1** colorLayers) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, D2D_POINT_2F, const DWRITE_GLYPH_RUN*, const DWRITE_GLYPH_RUN_DESCRIPTION*, enum DWRITE_GLYPH_IMAGE_FORMATS, DWRITE_MEASURING_MODE, const DWRITE_MATRIX*, UINT32, IDWriteColorGlyphRunEnumerator1**))this->v->tbl[40])(this, baselineOrigin, glyphRun, glyphRunDescription, desiredGlyphImageFormats, measuringMode, worldAndDpiTransform, colorPaletteIndex, colorLayers); }
static inline HRESULT                           IDWriteFactory7_ComputeGlyphOrigins                          (IDWriteFactory7* this, const DWRITE_GLYPH_RUN* glyphRun, D2D_POINT_2F baselineOrigin, D2D_POINT_2F* glyphOrigins) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, const DWRITE_GLYPH_RUN*, D2D_POINT_2F, D2D_POINT_2F*))this->v->tbl[41])(this, glyphRun, baselineOrigin, glyphOrigins); }
static inline HRESULT                           IDWriteFactory7_ComputeGlyphOrigins1                         (IDWriteFactory7* this, const DWRITE_GLYPH_RUN* glyphRun, DWRITE_MEASURING_MODE measuringMode, D2D_POINT_2F baselineOrigin, const DWRITE_MATRIX* worldAndDpiTransform, D2D_POINT_2F* glyphOrigins) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, const DWRITE_GLYPH_RUN*, DWRITE_MEASURING_MODE, D2D_POINT_2F, const DWRITE_MATRIX*, D2D_POINT_2F*))this->v->tbl[42])(this, glyphRun, measuringMode, baselineOrigin, worldAndDpiTransform, glyphOrigins); }
static inline HRESULT                           IDWriteFactory7_CreateFontSetBuilder1                        (IDWriteFactory7* this, IDWriteFontSetBuilder1** fontSetBuilder) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, IDWriteFontSetBuilder1**))this->v->tbl[43])(this, fontSetBuilder); }
static inline HRESULT                           IDWriteFactory7_CreateInMemoryFontFileLoader                 (IDWriteFactory7* this, IDWriteInMemoryFontFileLoader** newLoader) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, IDWriteInMemoryFontFileLoader**))this->v->tbl[44])(this, newLoader); }
static inline HRESULT                           IDWriteFactory7_CreateHttpFontFileLoader                     (IDWriteFactory7* this, const WCHAR* referrerUrl, const WCHAR* extraHeaders, IDWriteRemoteFontFileLoader** newLoader) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, const WCHAR*, const WCHAR*, IDWriteRemoteFontFileLoader**))this->v->tbl[45])(this, referrerUrl, extraHeaders, newLoader); }
static inline DWRITE_CONTAINER_TYPE             IDWriteFactory7_AnalyzeContainerType                         (IDWriteFactory7* this, const void* fileData, UINT32 fileDataSize) { return ((DWRITE_CONTAINER_TYPE (WINAPI*)(IDWriteFactory7*, const void*, UINT32))this->v->tbl[46])(this, fileData, fileDataSize); }
static inline HRESULT                           IDWriteFactory7_UnpackFontFile                               (IDWriteFactory7* this, DWRITE_CONTAINER_TYPE containerType, const void* fileData, UINT32 fileDataSize, IDWriteFontFileStream** unpackedFontStream) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, DWRITE_CONTAINER_TYPE, const void*, UINT32, IDWriteFontFileStream**))this->v->tbl[47])(this, containerType, fileData, fileDataSize, unpackedFontStream); }
static inline HRESULT                           IDWriteFactory7_CreateFontFaceReference2                     (IDWriteFactory7* this, IDWriteFontFile* fontFile, UINT32 faceIndex, DWRITE_FONT_SIMULATIONS fontSimulations, const DWRITE_FONT_AXIS_VALUE* fontAxisValues, UINT32 fontAxisValueCount, IDWriteFontFaceReference1** fontFaceReference) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, IDWriteFontFile*, UINT32, DWRITE_FONT_SIMULATIONS, const DWRITE_FONT_AXIS_VALUE*, UINT32, IDWriteFontFaceReference1**))this->v->tbl[48])(this, fontFile, faceIndex, fontSimulations, fontAxisValues, fontAxisValueCount, fontFaceReference); }
static inline HRESULT                           IDWriteFactory7_CreateFontResource                           (IDWriteFactory7* this, IDWriteFontFile* fontFile, UINT32 faceIndex, IDWriteFontResource** fontResource) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, IDWriteFontFile*, UINT32, IDWriteFontResource**))this->v->tbl[49])(this, fontFile, faceIndex, fontResource); }
static inline HRESULT                           IDWriteFactory7_GetSystemFontSet1                            (IDWriteFactory7* this, BOOL includeDownloadableFonts, IDWriteFontSet1** fontSet) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, BOOL, IDWriteFontSet1**))this->v->tbl[50])(this, includeDownloadableFonts, fontSet); }
static inline HRESULT                           IDWriteFactory7_GetSystemFontCollection2                     (IDWriteFactory7* this, BOOL includeDownloadableFonts, DWRITE_FONT_FAMILY_MODEL fontFamilyModel, IDWriteFontCollection2** fontCollection) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, BOOL, DWRITE_FONT_FAMILY_MODEL, IDWriteFontCollection2**))this->v->tbl[51])(this, includeDownloadableFonts, fontFamilyModel, fontCollection); }
static inline HRESULT                           IDWriteFactory7_CreateFontCollectionFromFontSet1             (IDWriteFactory7* this, IDWriteFontSet* fontSet, DWRITE_FONT_FAMILY_MODEL fontFamilyModel, IDWriteFontCollection2** fontCollection) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, IDWriteFontSet*, DWRITE_FONT_FAMILY_MODEL, IDWriteFontCollection2**))this->v->tbl[52])(this, fontSet, fontFamilyModel, fontCollection); }
static inline HRESULT                           IDWriteFactory7_CreateFontSetBuilder2                        (IDWriteFactory7* this, IDWriteFontSetBuilder2** fontSetBuilder) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, IDWriteFontSetBuilder2**))this->v->tbl[53])(this, fontSetBuilder); }
static inline HRESULT                           IDWriteFactory7_CreateTextFormat1                            (IDWriteFactory7* this, const WCHAR* fontFamilyName, IDWriteFontCollection* fontCollection, const DWRITE_FONT_AXIS_VALUE* fontAxisValues, UINT32 fontAxisValueCount, FLOAT fontSize, const WCHAR* localeName, IDWriteTextFormat3** textFormat) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, const WCHAR*, IDWriteFontCollection*, const DWRITE_FONT_AXIS_VALUE*, UINT32, FLOAT, const WCHAR*, IDWriteTextFormat3**))this->v->tbl[54])(this, fontFamilyName, fontCollection, fontAxisValues, fontAxisValueCount, fontSize, localeName, textFormat); }
static inline HRESULT                           IDWriteFactory7_GetSystemFontSet2                            (IDWriteFactory7* this, BOOL includeDownloadableFonts, IDWriteFontSet2** fontSet) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, BOOL, IDWriteFontSet2**))this->v->tbl[55])(this, includeDownloadableFonts, fontSet); }
static inline HRESULT                           IDWriteFactory7_GetSystemFontCollection3                     (IDWriteFactory7* this, BOOL includeDownloadableFonts, DWRITE_FONT_FAMILY_MODEL fontFamilyModel, IDWriteFontCollection3** fontCollection) { return ((HRESULT (WINAPI*)(IDWriteFactory7*, BOOL, DWRITE_FONT_FAMILY_MODEL, IDWriteFontCollection3**))this->v->tbl[56])(this, includeDownloadableFonts, fontFamilyModel, fontCollection); }

static inline HRESULT                           IDWriteFont_QueryInterface                                   (IDWriteFont* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFont*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFont_AddRef                                           (IDWriteFont* this) { return ((UINT32 (WINAPI*)(IDWriteFont*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFont_Release                                          (IDWriteFont* this) { return ((UINT32 (WINAPI*)(IDWriteFont*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteFont_GetFontFamily                                    (IDWriteFont* this, IDWriteFontFamily** fontFamily) { return ((HRESULT (WINAPI*)(IDWriteFont*, IDWriteFontFamily**))this->v->tbl[3])(this, fontFamily); }
static inline DWRITE_FONT_WEIGHT                IDWriteFont_GetWeight                                        (IDWriteFont* this) { return ((DWRITE_FONT_WEIGHT (WINAPI*)(IDWriteFont*))this->v->tbl[4])(this); }
static inline DWRITE_FONT_STRETCH               IDWriteFont_GetStretch                                       (IDWriteFont* this) { return ((DWRITE_FONT_STRETCH (WINAPI*)(IDWriteFont*))this->v->tbl[5])(this); }
static inline DWRITE_FONT_STYLE                 IDWriteFont_GetStyle                                         (IDWriteFont* this) { return ((DWRITE_FONT_STYLE (WINAPI*)(IDWriteFont*))this->v->tbl[6])(this); }
static inline BOOL                              IDWriteFont_IsSymbolFont                                     (IDWriteFont* this) { return ((BOOL (WINAPI*)(IDWriteFont*))this->v->tbl[7])(this); }
static inline HRESULT                           IDWriteFont_GetFaceNames                                     (IDWriteFont* this, IDWriteLocalizedStrings** names) { return ((HRESULT (WINAPI*)(IDWriteFont*, IDWriteLocalizedStrings**))this->v->tbl[8])(this, names); }
static inline HRESULT                           IDWriteFont_GetInformationalStrings                          (IDWriteFont* this, DWRITE_INFORMATIONAL_STRING_ID informationalStringID, IDWriteLocalizedStrings** informationalStrings, BOOL* exists) { return ((HRESULT (WINAPI*)(IDWriteFont*, DWRITE_INFORMATIONAL_STRING_ID, IDWriteLocalizedStrings**, BOOL*))this->v->tbl[9])(this, informationalStringID, informationalStrings, exists); }
static inline DWRITE_FONT_SIMULATIONS           IDWriteFont_GetSimulations                                   (IDWriteFont* this) { return ((DWRITE_FONT_SIMULATIONS (WINAPI*)(IDWriteFont*))this->v->tbl[10])(this); }
static inline void                              IDWriteFont_GetMetrics                                       (IDWriteFont* this, DWRITE_FONT_METRICS* fontMetrics) { ((void (WINAPI*)(IDWriteFont*, DWRITE_FONT_METRICS*))this->v->tbl[11])(this, fontMetrics); }
static inline HRESULT                           IDWriteFont_HasCharacter                                     (IDWriteFont* this, UINT32 unicodeValue, BOOL* exists) { return ((HRESULT (WINAPI*)(IDWriteFont*, UINT32, BOOL*))this->v->tbl[12])(this, unicodeValue, exists); }
static inline HRESULT                           IDWriteFont_CreateFontFace                                   (IDWriteFont* this, IDWriteFontFace** fontFace) { return ((HRESULT (WINAPI*)(IDWriteFont*, IDWriteFontFace**))this->v->tbl[13])(this, fontFace); }

static inline HRESULT                           IDWriteFont1_QueryInterface                                  (IDWriteFont1* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFont1*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFont1_AddRef                                          (IDWriteFont1* this) { return ((UINT32 (WINAPI*)(IDWriteFont1*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFont1_Release                                         (IDWriteFont1* this) { return ((UINT32 (WINAPI*)(IDWriteFont1*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteFont1_GetFontFamily                                   (IDWriteFont1* this, IDWriteFontFamily** fontFamily) { return ((HRESULT (WINAPI*)(IDWriteFont1*, IDWriteFontFamily**))this->v->tbl[3])(this, fontFamily); }
static inline DWRITE_FONT_WEIGHT                IDWriteFont1_GetWeight                                       (IDWriteFont1* this) { return ((DWRITE_FONT_WEIGHT (WINAPI*)(IDWriteFont1*))this->v->tbl[4])(this); }
static inline DWRITE_FONT_STRETCH               IDWriteFont1_GetStretch                                      (IDWriteFont1* this) { return ((DWRITE_FONT_STRETCH (WINAPI*)(IDWriteFont1*))this->v->tbl[5])(this); }
static inline DWRITE_FONT_STYLE                 IDWriteFont1_GetStyle                                        (IDWriteFont1* this) { return ((DWRITE_FONT_STYLE (WINAPI*)(IDWriteFont1*))this->v->tbl[6])(this); }
static inline BOOL                              IDWriteFont1_IsSymbolFont                                    (IDWriteFont1* this) { return ((BOOL (WINAPI*)(IDWriteFont1*))this->v->tbl[7])(this); }
static inline HRESULT                           IDWriteFont1_GetFaceNames                                    (IDWriteFont1* this, IDWriteLocalizedStrings** names) { return ((HRESULT (WINAPI*)(IDWriteFont1*, IDWriteLocalizedStrings**))this->v->tbl[8])(this, names); }
static inline HRESULT                           IDWriteFont1_GetInformationalStrings                         (IDWriteFont1* this, DWRITE_INFORMATIONAL_STRING_ID informationalStringID, IDWriteLocalizedStrings** informationalStrings, BOOL* exists) { return ((HRESULT (WINAPI*)(IDWriteFont1*, DWRITE_INFORMATIONAL_STRING_ID, IDWriteLocalizedStrings**, BOOL*))this->v->tbl[9])(this, informationalStringID, informationalStrings, exists); }
static inline DWRITE_FONT_SIMULATIONS           IDWriteFont1_GetSimulations                                  (IDWriteFont1* this) { return ((DWRITE_FONT_SIMULATIONS (WINAPI*)(IDWriteFont1*))this->v->tbl[10])(this); }
static inline void                              IDWriteFont1_GetMetrics                                      (IDWriteFont1* this, DWRITE_FONT_METRICS* fontMetrics) { ((void (WINAPI*)(IDWriteFont1*, DWRITE_FONT_METRICS*))this->v->tbl[11])(this, fontMetrics); }
static inline HRESULT                           IDWriteFont1_HasCharacter                                    (IDWriteFont1* this, UINT32 unicodeValue, BOOL* exists) { return ((HRESULT (WINAPI*)(IDWriteFont1*, UINT32, BOOL*))this->v->tbl[12])(this, unicodeValue, exists); }
static inline HRESULT                           IDWriteFont1_CreateFontFace                                  (IDWriteFont1* this, IDWriteFontFace** fontFace) { return ((HRESULT (WINAPI*)(IDWriteFont1*, IDWriteFontFace**))this->v->tbl[13])(this, fontFace); }
static inline void                              IDWriteFont1_GetMetrics1                                     (IDWriteFont1* this, DWRITE_FONT_METRICS1* fontMetrics) { ((void (WINAPI*)(IDWriteFont1*, DWRITE_FONT_METRICS1*))this->v->tbl[14])(this, fontMetrics); }
static inline void                              IDWriteFont1_GetPanose                                       (IDWriteFont1* this, DWRITE_PANOSE* panose) { ((void (WINAPI*)(IDWriteFont1*, DWRITE_PANOSE*))this->v->tbl[15])(this, panose); }
static inline HRESULT                           IDWriteFont1_GetUnicodeRanges                                (IDWriteFont1* this, UINT32 maxRangeCount, DWRITE_UNICODE_RANGE* unicodeRanges, UINT32* actualRangeCount) { return ((HRESULT (WINAPI*)(IDWriteFont1*, UINT32, DWRITE_UNICODE_RANGE*, UINT32*))this->v->tbl[16])(this, maxRangeCount, unicodeRanges, actualRangeCount); }
static inline BOOL                              IDWriteFont1_IsMonospacedFont                                (IDWriteFont1* this) { return ((BOOL (WINAPI*)(IDWriteFont1*))this->v->tbl[17])(this); }

static inline HRESULT                           IDWriteFont2_QueryInterface                                  (IDWriteFont2* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFont2*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFont2_AddRef                                          (IDWriteFont2* this) { return ((UINT32 (WINAPI*)(IDWriteFont2*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFont2_Release                                         (IDWriteFont2* this) { return ((UINT32 (WINAPI*)(IDWriteFont2*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteFont2_GetFontFamily                                   (IDWriteFont2* this, IDWriteFontFamily** fontFamily) { return ((HRESULT (WINAPI*)(IDWriteFont2*, IDWriteFontFamily**))this->v->tbl[3])(this, fontFamily); }
static inline DWRITE_FONT_WEIGHT                IDWriteFont2_GetWeight                                       (IDWriteFont2* this) { return ((DWRITE_FONT_WEIGHT (WINAPI*)(IDWriteFont2*))this->v->tbl[4])(this); }
static inline DWRITE_FONT_STRETCH               IDWriteFont2_GetStretch                                      (IDWriteFont2* this) { return ((DWRITE_FONT_STRETCH (WINAPI*)(IDWriteFont2*))this->v->tbl[5])(this); }
static inline DWRITE_FONT_STYLE                 IDWriteFont2_GetStyle                                        (IDWriteFont2* this) { return ((DWRITE_FONT_STYLE (WINAPI*)(IDWriteFont2*))this->v->tbl[6])(this); }
static inline BOOL                              IDWriteFont2_IsSymbolFont                                    (IDWriteFont2* this) { return ((BOOL (WINAPI*)(IDWriteFont2*))this->v->tbl[7])(this); }
static inline HRESULT                           IDWriteFont2_GetFaceNames                                    (IDWriteFont2* this, IDWriteLocalizedStrings** names) { return ((HRESULT (WINAPI*)(IDWriteFont2*, IDWriteLocalizedStrings**))this->v->tbl[8])(this, names); }
static inline HRESULT                           IDWriteFont2_GetInformationalStrings                         (IDWriteFont2* this, DWRITE_INFORMATIONAL_STRING_ID informationalStringID, IDWriteLocalizedStrings** informationalStrings, BOOL* exists) { return ((HRESULT (WINAPI*)(IDWriteFont2*, DWRITE_INFORMATIONAL_STRING_ID, IDWriteLocalizedStrings**, BOOL*))this->v->tbl[9])(this, informationalStringID, informationalStrings, exists); }
static inline DWRITE_FONT_SIMULATIONS           IDWriteFont2_GetSimulations                                  (IDWriteFont2* this) { return ((DWRITE_FONT_SIMULATIONS (WINAPI*)(IDWriteFont2*))this->v->tbl[10])(this); }
static inline void                              IDWriteFont2_GetMetrics                                      (IDWriteFont2* this, DWRITE_FONT_METRICS* fontMetrics) { ((void (WINAPI*)(IDWriteFont2*, DWRITE_FONT_METRICS*))this->v->tbl[11])(this, fontMetrics); }
static inline HRESULT                           IDWriteFont2_HasCharacter                                    (IDWriteFont2* this, UINT32 unicodeValue, BOOL* exists) { return ((HRESULT (WINAPI*)(IDWriteFont2*, UINT32, BOOL*))this->v->tbl[12])(this, unicodeValue, exists); }
static inline HRESULT                           IDWriteFont2_CreateFontFace                                  (IDWriteFont2* this, IDWriteFontFace** fontFace) { return ((HRESULT (WINAPI*)(IDWriteFont2*, IDWriteFontFace**))this->v->tbl[13])(this, fontFace); }
static inline void                              IDWriteFont2_GetMetrics1                                     (IDWriteFont2* this, DWRITE_FONT_METRICS1* fontMetrics) { ((void (WINAPI*)(IDWriteFont2*, DWRITE_FONT_METRICS1*))this->v->tbl[14])(this, fontMetrics); }
static inline void                              IDWriteFont2_GetPanose                                       (IDWriteFont2* this, DWRITE_PANOSE* panose) { ((void (WINAPI*)(IDWriteFont2*, DWRITE_PANOSE*))this->v->tbl[15])(this, panose); }
static inline HRESULT                           IDWriteFont2_GetUnicodeRanges                                (IDWriteFont2* this, UINT32 maxRangeCount, DWRITE_UNICODE_RANGE* unicodeRanges, UINT32* actualRangeCount) { return ((HRESULT (WINAPI*)(IDWriteFont2*, UINT32, DWRITE_UNICODE_RANGE*, UINT32*))this->v->tbl[16])(this, maxRangeCount, unicodeRanges, actualRangeCount); }
static inline BOOL                              IDWriteFont2_IsMonospacedFont                                (IDWriteFont2* this) { return ((BOOL (WINAPI*)(IDWriteFont2*))this->v->tbl[17])(this); }
static inline BOOL                              IDWriteFont2_IsColorFont                                     (IDWriteFont2* this) { return ((BOOL (WINAPI*)(IDWriteFont2*))this->v->tbl[18])(this); }

static inline HRESULT                           IDWriteFont3_QueryInterface                                  (IDWriteFont3* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFont3*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFont3_AddRef                                          (IDWriteFont3* this) { return ((UINT32 (WINAPI*)(IDWriteFont3*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFont3_Release                                         (IDWriteFont3* this) { return ((UINT32 (WINAPI*)(IDWriteFont3*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteFont3_GetFontFamily                                   (IDWriteFont3* this, IDWriteFontFamily** fontFamily) { return ((HRESULT (WINAPI*)(IDWriteFont3*, IDWriteFontFamily**))this->v->tbl[3])(this, fontFamily); }
static inline DWRITE_FONT_WEIGHT                IDWriteFont3_GetWeight                                       (IDWriteFont3* this) { return ((DWRITE_FONT_WEIGHT (WINAPI*)(IDWriteFont3*))this->v->tbl[4])(this); }
static inline DWRITE_FONT_STRETCH               IDWriteFont3_GetStretch                                      (IDWriteFont3* this) { return ((DWRITE_FONT_STRETCH (WINAPI*)(IDWriteFont3*))this->v->tbl[5])(this); }
static inline DWRITE_FONT_STYLE                 IDWriteFont3_GetStyle                                        (IDWriteFont3* this) { return ((DWRITE_FONT_STYLE (WINAPI*)(IDWriteFont3*))this->v->tbl[6])(this); }
static inline BOOL                              IDWriteFont3_IsSymbolFont                                    (IDWriteFont3* this) { return ((BOOL (WINAPI*)(IDWriteFont3*))this->v->tbl[7])(this); }
static inline HRESULT                           IDWriteFont3_GetFaceNames                                    (IDWriteFont3* this, IDWriteLocalizedStrings** names) { return ((HRESULT (WINAPI*)(IDWriteFont3*, IDWriteLocalizedStrings**))this->v->tbl[8])(this, names); }
static inline HRESULT                           IDWriteFont3_GetInformationalStrings                         (IDWriteFont3* this, DWRITE_INFORMATIONAL_STRING_ID informationalStringID, IDWriteLocalizedStrings** informationalStrings, BOOL* exists) { return ((HRESULT (WINAPI*)(IDWriteFont3*, DWRITE_INFORMATIONAL_STRING_ID, IDWriteLocalizedStrings**, BOOL*))this->v->tbl[9])(this, informationalStringID, informationalStrings, exists); }
static inline DWRITE_FONT_SIMULATIONS           IDWriteFont3_GetSimulations                                  (IDWriteFont3* this) { return ((DWRITE_FONT_SIMULATIONS (WINAPI*)(IDWriteFont3*))this->v->tbl[10])(this); }
static inline void                              IDWriteFont3_GetMetrics                                      (IDWriteFont3* this, DWRITE_FONT_METRICS* fontMetrics) { ((void (WINAPI*)(IDWriteFont3*, DWRITE_FONT_METRICS*))this->v->tbl[11])(this, fontMetrics); }
static inline HRESULT                           IDWriteFont3_HasCharacter                                    (IDWriteFont3* this, UINT32 unicodeValue, BOOL* exists) { return ((HRESULT (WINAPI*)(IDWriteFont3*, UINT32, BOOL*))this->v->tbl[12])(this, unicodeValue, exists); }
static inline HRESULT                           IDWriteFont3_CreateFontFace                                  (IDWriteFont3* this, IDWriteFontFace** fontFace) { return ((HRESULT (WINAPI*)(IDWriteFont3*, IDWriteFontFace**))this->v->tbl[13])(this, fontFace); }
static inline void                              IDWriteFont3_GetMetrics1                                     (IDWriteFont3* this, DWRITE_FONT_METRICS1* fontMetrics) { ((void (WINAPI*)(IDWriteFont3*, DWRITE_FONT_METRICS1*))this->v->tbl[14])(this, fontMetrics); }
static inline void                              IDWriteFont3_GetPanose                                       (IDWriteFont3* this, DWRITE_PANOSE* panose) { ((void (WINAPI*)(IDWriteFont3*, DWRITE_PANOSE*))this->v->tbl[15])(this, panose); }
static inline HRESULT                           IDWriteFont3_GetUnicodeRanges                                (IDWriteFont3* this, UINT32 maxRangeCount, DWRITE_UNICODE_RANGE* unicodeRanges, UINT32* actualRangeCount) { return ((HRESULT (WINAPI*)(IDWriteFont3*, UINT32, DWRITE_UNICODE_RANGE*, UINT32*))this->v->tbl[16])(this, maxRangeCount, unicodeRanges, actualRangeCount); }
static inline BOOL                              IDWriteFont3_IsMonospacedFont                                (IDWriteFont3* this) { return ((BOOL (WINAPI*)(IDWriteFont3*))this->v->tbl[17])(this); }
static inline BOOL                              IDWriteFont3_IsColorFont                                     (IDWriteFont3* this) { return ((BOOL (WINAPI*)(IDWriteFont3*))this->v->tbl[18])(this); }
static inline HRESULT                           IDWriteFont3_CreateFontFace1                                 (IDWriteFont3* this, IDWriteFontFace3** fontFace) { return ((HRESULT (WINAPI*)(IDWriteFont3*, IDWriteFontFace3**))this->v->tbl[19])(this, fontFace); }
static inline BOOL                              IDWriteFont3_Equals                                          (IDWriteFont3* this, IDWriteFont* font) { return ((BOOL (WINAPI*)(IDWriteFont3*, IDWriteFont*))this->v->tbl[20])(this, font); }
static inline HRESULT                           IDWriteFont3_GetFontFaceReference                            (IDWriteFont3* this, IDWriteFontFaceReference** fontFaceReference) { return ((HRESULT (WINAPI*)(IDWriteFont3*, IDWriteFontFaceReference**))this->v->tbl[21])(this, fontFaceReference); }
static inline BOOL                              IDWriteFont3_HasCharacter1                                   (IDWriteFont3* this, UINT32 unicodeValue) { return ((BOOL (WINAPI*)(IDWriteFont3*, UINT32))this->v->tbl[22])(this, unicodeValue); }
static inline DWRITE_LOCALITY                   IDWriteFont3_GetLocality                                     (IDWriteFont3* this) { return ((DWRITE_LOCALITY (WINAPI*)(IDWriteFont3*))this->v->tbl[23])(this); }

static inline HRESULT                           IDWriteFontCollection_QueryInterface                         (IDWriteFontCollection* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFontCollection*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFontCollection_AddRef                                 (IDWriteFontCollection* this) { return ((UINT32 (WINAPI*)(IDWriteFontCollection*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFontCollection_Release                                (IDWriteFontCollection* this) { return ((UINT32 (WINAPI*)(IDWriteFontCollection*))this->v->tbl[2])(this); }
static inline UINT32                            IDWriteFontCollection_GetFontFamilyCount                     (IDWriteFontCollection* this) { return ((UINT32 (WINAPI*)(IDWriteFontCollection*))this->v->tbl[3])(this); }
static inline HRESULT                           IDWriteFontCollection_GetFontFamily                          (IDWriteFontCollection* this, UINT32 index, IDWriteFontFamily** fontFamily) { return ((HRESULT (WINAPI*)(IDWriteFontCollection*, UINT32, IDWriteFontFamily**))this->v->tbl[4])(this, index, fontFamily); }
static inline HRESULT                           IDWriteFontCollection_FindFamilyName                         (IDWriteFontCollection* this, const WCHAR* familyName, UINT32* index, BOOL* exists) { return ((HRESULT (WINAPI*)(IDWriteFontCollection*, const WCHAR*, UINT32*, BOOL*))this->v->tbl[5])(this, familyName, index, exists); }
static inline HRESULT                           IDWriteFontCollection_GetFontFromFontFace                    (IDWriteFontCollection* this, IDWriteFontFace* fontFace, IDWriteFont** font) { return ((HRESULT (WINAPI*)(IDWriteFontCollection*, IDWriteFontFace*, IDWriteFont**))this->v->tbl[6])(this, fontFace, font); }

static inline HRESULT                           IDWriteFontCollection1_QueryInterface                        (IDWriteFontCollection1* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFontCollection1*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFontCollection1_AddRef                                (IDWriteFontCollection1* this) { return ((UINT32 (WINAPI*)(IDWriteFontCollection1*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFontCollection1_Release                               (IDWriteFontCollection1* this) { return ((UINT32 (WINAPI*)(IDWriteFontCollection1*))this->v->tbl[2])(this); }
static inline UINT32                            IDWriteFontCollection1_GetFontFamilyCount                    (IDWriteFontCollection1* this) { return ((UINT32 (WINAPI*)(IDWriteFontCollection1*))this->v->tbl[3])(this); }
static inline HRESULT                           IDWriteFontCollection1_GetFontFamily                         (IDWriteFontCollection1* this, UINT32 index, IDWriteFontFamily** fontFamily) { return ((HRESULT (WINAPI*)(IDWriteFontCollection1*, UINT32, IDWriteFontFamily**))this->v->tbl[4])(this, index, fontFamily); }
static inline HRESULT                           IDWriteFontCollection1_FindFamilyName                        (IDWriteFontCollection1* this, const WCHAR* familyName, UINT32* index, BOOL* exists) { return ((HRESULT (WINAPI*)(IDWriteFontCollection1*, const WCHAR*, UINT32*, BOOL*))this->v->tbl[5])(this, familyName, index, exists); }
static inline HRESULT                           IDWriteFontCollection1_GetFontFromFontFace                   (IDWriteFontCollection1* this, IDWriteFontFace* fontFace, IDWriteFont** font) { return ((HRESULT (WINAPI*)(IDWriteFontCollection1*, IDWriteFontFace*, IDWriteFont**))this->v->tbl[6])(this, fontFace, font); }
static inline HRESULT                           IDWriteFontCollection1_GetFontSet                            (IDWriteFontCollection1* this, IDWriteFontSet** fontSet) { return ((HRESULT (WINAPI*)(IDWriteFontCollection1*, IDWriteFontSet**))this->v->tbl[7])(this, fontSet); }
static inline HRESULT                           IDWriteFontCollection1_GetFontFamily1                        (IDWriteFontCollection1* this, UINT32 index, IDWriteFontFamily1** fontFamily) { return ((HRESULT (WINAPI*)(IDWriteFontCollection1*, UINT32, IDWriteFontFamily1**))this->v->tbl[8])(this, index, fontFamily); }

static inline HRESULT                           IDWriteFontCollection2_QueryInterface                        (IDWriteFontCollection2* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFontCollection2*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFontCollection2_AddRef                                (IDWriteFontCollection2* this) { return ((UINT32 (WINAPI*)(IDWriteFontCollection2*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFontCollection2_Release                               (IDWriteFontCollection2* this) { return ((UINT32 (WINAPI*)(IDWriteFontCollection2*))this->v->tbl[2])(this); }
static inline UINT32                            IDWriteFontCollection2_GetFontFamilyCount                    (IDWriteFontCollection2* this) { return ((UINT32 (WINAPI*)(IDWriteFontCollection2*))this->v->tbl[3])(this); }
static inline HRESULT                           IDWriteFontCollection2_GetFontFamily                         (IDWriteFontCollection2* this, UINT32 index, IDWriteFontFamily** fontFamily) { return ((HRESULT (WINAPI*)(IDWriteFontCollection2*, UINT32, IDWriteFontFamily**))this->v->tbl[4])(this, index, fontFamily); }
static inline HRESULT                           IDWriteFontCollection2_FindFamilyName                        (IDWriteFontCollection2* this, const WCHAR* familyName, UINT32* index, BOOL* exists) { return ((HRESULT (WINAPI*)(IDWriteFontCollection2*, const WCHAR*, UINT32*, BOOL*))this->v->tbl[5])(this, familyName, index, exists); }
static inline HRESULT                           IDWriteFontCollection2_GetFontFromFontFace                   (IDWriteFontCollection2* this, IDWriteFontFace* fontFace, IDWriteFont** font) { return ((HRESULT (WINAPI*)(IDWriteFontCollection2*, IDWriteFontFace*, IDWriteFont**))this->v->tbl[6])(this, fontFace, font); }
static inline HRESULT                           IDWriteFontCollection2_GetFontSet                            (IDWriteFontCollection2* this, IDWriteFontSet** fontSet) { return ((HRESULT (WINAPI*)(IDWriteFontCollection2*, IDWriteFontSet**))this->v->tbl[7])(this, fontSet); }
static inline HRESULT                           IDWriteFontCollection2_GetFontFamily1                        (IDWriteFontCollection2* this, UINT32 index, IDWriteFontFamily1** fontFamily) { return ((HRESULT (WINAPI*)(IDWriteFontCollection2*, UINT32, IDWriteFontFamily1**))this->v->tbl[8])(this, index, fontFamily); }
static inline HRESULT                           IDWriteFontCollection2_GetFontFamily2                        (IDWriteFontCollection2* this, UINT32 index, IDWriteFontFamily2** fontFamily) { return ((HRESULT (WINAPI*)(IDWriteFontCollection2*, UINT32, IDWriteFontFamily2**))this->v->tbl[9])(this, index, fontFamily); }
static inline HRESULT                           IDWriteFontCollection2_GetMatchingFonts                      (IDWriteFontCollection2* this, const WCHAR* familyName, const DWRITE_FONT_AXIS_VALUE* fontAxisValues, UINT32 fontAxisValueCount, IDWriteFontList2** fontList) { return ((HRESULT (WINAPI*)(IDWriteFontCollection2*, const WCHAR*, const DWRITE_FONT_AXIS_VALUE*, UINT32, IDWriteFontList2**))this->v->tbl[10])(this, familyName, fontAxisValues, fontAxisValueCount, fontList); }
static inline DWRITE_FONT_FAMILY_MODEL          IDWriteFontCollection2_GetFontFamilyModel                    (IDWriteFontCollection2* this) { return ((DWRITE_FONT_FAMILY_MODEL (WINAPI*)(IDWriteFontCollection2*))this->v->tbl[11])(this); }
static inline HRESULT                           IDWriteFontCollection2_GetFontSet1                           (IDWriteFontCollection2* this, IDWriteFontSet1** fontSet) { return ((HRESULT (WINAPI*)(IDWriteFontCollection2*, IDWriteFontSet1**))this->v->tbl[12])(this, fontSet); }

static inline HRESULT                           IDWriteFontCollection3_QueryInterface                        (IDWriteFontCollection3* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFontCollection3*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFontCollection3_AddRef                                (IDWriteFontCollection3* this) { return ((UINT32 (WINAPI*)(IDWriteFontCollection3*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFontCollection3_Release                               (IDWriteFontCollection3* this) { return ((UINT32 (WINAPI*)(IDWriteFontCollection3*))this->v->tbl[2])(this); }
static inline UINT32                            IDWriteFontCollection3_GetFontFamilyCount                    (IDWriteFontCollection3* this) { return ((UINT32 (WINAPI*)(IDWriteFontCollection3*))this->v->tbl[3])(this); }
static inline HRESULT                           IDWriteFontCollection3_GetFontFamily                         (IDWriteFontCollection3* this, UINT32 index, IDWriteFontFamily** fontFamily) { return ((HRESULT (WINAPI*)(IDWriteFontCollection3*, UINT32, IDWriteFontFamily**))this->v->tbl[4])(this, index, fontFamily); }
static inline HRESULT                           IDWriteFontCollection3_FindFamilyName                        (IDWriteFontCollection3* this, const WCHAR* familyName, UINT32* index, BOOL* exists) { return ((HRESULT (WINAPI*)(IDWriteFontCollection3*, const WCHAR*, UINT32*, BOOL*))this->v->tbl[5])(this, familyName, index, exists); }
static inline HRESULT                           IDWriteFontCollection3_GetFontFromFontFace                   (IDWriteFontCollection3* this, IDWriteFontFace* fontFace, IDWriteFont** font) { return ((HRESULT (WINAPI*)(IDWriteFontCollection3*, IDWriteFontFace*, IDWriteFont**))this->v->tbl[6])(this, fontFace, font); }
static inline HRESULT                           IDWriteFontCollection3_GetFontSet                            (IDWriteFontCollection3* this, IDWriteFontSet** fontSet) { return ((HRESULT (WINAPI*)(IDWriteFontCollection3*, IDWriteFontSet**))this->v->tbl[7])(this, fontSet); }
static inline HRESULT                           IDWriteFontCollection3_GetFontFamily1                        (IDWriteFontCollection3* this, UINT32 index, IDWriteFontFamily1** fontFamily) { return ((HRESULT (WINAPI*)(IDWriteFontCollection3*, UINT32, IDWriteFontFamily1**))this->v->tbl[8])(this, index, fontFamily); }
static inline HRESULT                           IDWriteFontCollection3_GetFontFamily2                        (IDWriteFontCollection3* this, UINT32 index, IDWriteFontFamily2** fontFamily) { return ((HRESULT (WINAPI*)(IDWriteFontCollection3*, UINT32, IDWriteFontFamily2**))this->v->tbl[9])(this, index, fontFamily); }
static inline HRESULT                           IDWriteFontCollection3_GetMatchingFonts                      (IDWriteFontCollection3* this, const WCHAR* familyName, const DWRITE_FONT_AXIS_VALUE* fontAxisValues, UINT32 fontAxisValueCount, IDWriteFontList2** fontList) { return ((HRESULT (WINAPI*)(IDWriteFontCollection3*, const WCHAR*, const DWRITE_FONT_AXIS_VALUE*, UINT32, IDWriteFontList2**))this->v->tbl[10])(this, familyName, fontAxisValues, fontAxisValueCount, fontList); }
static inline DWRITE_FONT_FAMILY_MODEL          IDWriteFontCollection3_GetFontFamilyModel                    (IDWriteFontCollection3* this) { return ((DWRITE_FONT_FAMILY_MODEL (WINAPI*)(IDWriteFontCollection3*))this->v->tbl[11])(this); }
static inline HRESULT                           IDWriteFontCollection3_GetFontSet1                           (IDWriteFontCollection3* this, IDWriteFontSet1** fontSet) { return ((HRESULT (WINAPI*)(IDWriteFontCollection3*, IDWriteFontSet1**))this->v->tbl[12])(this, fontSet); }
static inline HANDLE                            IDWriteFontCollection3_GetExpirationEvent                    (IDWriteFontCollection3* this) { return ((HANDLE (WINAPI*)(IDWriteFontCollection3*))this->v->tbl[13])(this); }

static inline HRESULT                           IDWriteFontCollectionLoader_QueryInterface                   (IDWriteFontCollectionLoader* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFontCollectionLoader*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFontCollectionLoader_AddRef                           (IDWriteFontCollectionLoader* this) { return ((UINT32 (WINAPI*)(IDWriteFontCollectionLoader*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFontCollectionLoader_Release                          (IDWriteFontCollectionLoader* this) { return ((UINT32 (WINAPI*)(IDWriteFontCollectionLoader*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteFontCollectionLoader_CreateEnumeratorFromKey          (IDWriteFontCollectionLoader* this, IDWriteFactory* factory, const void* collectionKey, UINT32 collectionKeySize, IDWriteFontFileEnumerator** fontFileEnumerator) { return ((HRESULT (WINAPI*)(IDWriteFontCollectionLoader*, IDWriteFactory*, const void*, UINT32, IDWriteFontFileEnumerator**))this->v->tbl[3])(this, factory, collectionKey, collectionKeySize, fontFileEnumerator); }

static inline HRESULT                           IDWriteFontDownloadListener_QueryInterface                   (IDWriteFontDownloadListener* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFontDownloadListener*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFontDownloadListener_AddRef                           (IDWriteFontDownloadListener* this) { return ((UINT32 (WINAPI*)(IDWriteFontDownloadListener*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFontDownloadListener_Release                          (IDWriteFontDownloadListener* this) { return ((UINT32 (WINAPI*)(IDWriteFontDownloadListener*))this->v->tbl[2])(this); }
static inline void                              IDWriteFontDownloadListener_DownloadCompleted                (IDWriteFontDownloadListener* this, IDWriteFontDownloadQueue* downloadQueue, IUnknown* context, HRESULT downloadResult) { ((void (WINAPI*)(IDWriteFontDownloadListener*, IDWriteFontDownloadQueue*, IUnknown*, HRESULT))this->v->tbl[3])(this, downloadQueue, context, downloadResult); }

static inline HRESULT                           IDWriteFontDownloadQueue_QueryInterface                      (IDWriteFontDownloadQueue* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFontDownloadQueue*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFontDownloadQueue_AddRef                              (IDWriteFontDownloadQueue* this) { return ((UINT32 (WINAPI*)(IDWriteFontDownloadQueue*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFontDownloadQueue_Release                             (IDWriteFontDownloadQueue* this) { return ((UINT32 (WINAPI*)(IDWriteFontDownloadQueue*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteFontDownloadQueue_AddListener                         (IDWriteFontDownloadQueue* this, IDWriteFontDownloadListener* listener, UINT32* token) { return ((HRESULT (WINAPI*)(IDWriteFontDownloadQueue*, IDWriteFontDownloadListener*, UINT32*))this->v->tbl[3])(this, listener, token); }
static inline HRESULT                           IDWriteFontDownloadQueue_RemoveListener                      (IDWriteFontDownloadQueue* this, UINT32 token) { return ((HRESULT (WINAPI*)(IDWriteFontDownloadQueue*, UINT32))this->v->tbl[4])(this, token); }
static inline BOOL                              IDWriteFontDownloadQueue_IsEmpty                             (IDWriteFontDownloadQueue* this) { return ((BOOL (WINAPI*)(IDWriteFontDownloadQueue*))this->v->tbl[5])(this); }
static inline HRESULT                           IDWriteFontDownloadQueue_BeginDownload                       (IDWriteFontDownloadQueue* this, IUnknown* context) { return ((HRESULT (WINAPI*)(IDWriteFontDownloadQueue*, IUnknown*))this->v->tbl[6])(this, context); }
static inline HRESULT                           IDWriteFontDownloadQueue_CancelDownload                      (IDWriteFontDownloadQueue* this) { return ((HRESULT (WINAPI*)(IDWriteFontDownloadQueue*))this->v->tbl[7])(this); }
static inline UINT64                            IDWriteFontDownloadQueue_GetGenerationCount                  (IDWriteFontDownloadQueue* this) { return ((UINT64 (WINAPI*)(IDWriteFontDownloadQueue*))this->v->tbl[8])(this); }

static inline HRESULT                           IDWriteFontFace_QueryInterface                               (IDWriteFontFace* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFontFace*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFontFace_AddRef                                       (IDWriteFontFace* this) { return ((UINT32 (WINAPI*)(IDWriteFontFace*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFontFace_Release                                      (IDWriteFontFace* this) { return ((UINT32 (WINAPI*)(IDWriteFontFace*))this->v->tbl[2])(this); }
static inline DWRITE_FONT_FACE_TYPE             IDWriteFontFace_GetType                                      (IDWriteFontFace* this) { return ((DWRITE_FONT_FACE_TYPE (WINAPI*)(IDWriteFontFace*))this->v->tbl[3])(this); }
static inline HRESULT                           IDWriteFontFace_GetFiles                                     (IDWriteFontFace* this, UINT32* numberOfFiles, IDWriteFontFile** fontFiles) { return ((HRESULT (WINAPI*)(IDWriteFontFace*, UINT32*, IDWriteFontFile**))this->v->tbl[4])(this, numberOfFiles, fontFiles); }
static inline UINT32                            IDWriteFontFace_GetIndex                                     (IDWriteFontFace* this) { return ((UINT32 (WINAPI*)(IDWriteFontFace*))this->v->tbl[5])(this); }
static inline DWRITE_FONT_SIMULATIONS           IDWriteFontFace_GetSimulations                               (IDWriteFontFace* this) { return ((DWRITE_FONT_SIMULATIONS (WINAPI*)(IDWriteFontFace*))this->v->tbl[6])(this); }
static inline BOOL                              IDWriteFontFace_IsSymbolFont                                 (IDWriteFontFace* this) { return ((BOOL (WINAPI*)(IDWriteFontFace*))this->v->tbl[7])(this); }
static inline void                              IDWriteFontFace_GetMetrics                                   (IDWriteFontFace* this, DWRITE_FONT_METRICS* fontFaceMetrics) { ((void (WINAPI*)(IDWriteFontFace*, DWRITE_FONT_METRICS*))this->v->tbl[8])(this, fontFaceMetrics); }
static inline UINT16                            IDWriteFontFace_GetGlyphCount                                (IDWriteFontFace* this) { return ((UINT16 (WINAPI*)(IDWriteFontFace*))this->v->tbl[9])(this); }
static inline HRESULT                           IDWriteFontFace_GetDesignGlyphMetrics                        (IDWriteFontFace* this, const UINT16* glyphIndices, UINT32 glyphCount, DWRITE_GLYPH_METRICS* glyphMetrics, BOOL isSideways) { return ((HRESULT (WINAPI*)(IDWriteFontFace*, const UINT16*, UINT32, DWRITE_GLYPH_METRICS*, BOOL))this->v->tbl[10])(this, glyphIndices, glyphCount, glyphMetrics, isSideways); }
static inline HRESULT                           IDWriteFontFace_GetGlyphIndices                              (IDWriteFontFace* this, const UINT32* codePoints, UINT32 codePointCount, UINT16* glyphIndices) { return ((HRESULT (WINAPI*)(IDWriteFontFace*, const UINT32*, UINT32, UINT16*))this->v->tbl[11])(this, codePoints, codePointCount, glyphIndices); }
static inline HRESULT                           IDWriteFontFace_TryGetFontTable                              (IDWriteFontFace* this, UINT32 openTypeTableTag, const void** tableData, UINT32* tableSize, void** tableContext, BOOL* exists) { return ((HRESULT (WINAPI*)(IDWriteFontFace*, UINT32, const void**, UINT32*, void**, BOOL*))this->v->tbl[12])(this, openTypeTableTag, tableData, tableSize, tableContext, exists); }
static inline void                              IDWriteFontFace_ReleaseFontTable                             (IDWriteFontFace* this, void* tableContext) { ((void (WINAPI*)(IDWriteFontFace*, void*))this->v->tbl[13])(this, tableContext); }
static inline HRESULT                           IDWriteFontFace_GetGlyphRunOutline                           (IDWriteFontFace* this, FLOAT emSize, const UINT16* glyphIndices, const FLOAT* glyphAdvances, const DWRITE_GLYPH_OFFSET* glyphOffsets, UINT32 glyphCount, BOOL isSideways, BOOL isRightToLeft, ID2D1SimplifiedGeometrySink* geometrySink) { return ((HRESULT (WINAPI*)(IDWriteFontFace*, FLOAT, const UINT16*, const FLOAT*, const DWRITE_GLYPH_OFFSET*, UINT32, BOOL, BOOL, ID2D1SimplifiedGeometrySink*))this->v->tbl[14])(this, emSize, glyphIndices, glyphAdvances, glyphOffsets, glyphCount, isSideways, isRightToLeft, geometrySink); }
static inline HRESULT                           IDWriteFontFace_GetRecommendedRenderingMode                  (IDWriteFontFace* this, FLOAT emSize, FLOAT pixelsPerDip, DWRITE_MEASURING_MODE measuringMode, IDWriteRenderingParams* renderingParams, DWRITE_RENDERING_MODE* renderingMode) { return ((HRESULT (WINAPI*)(IDWriteFontFace*, FLOAT, FLOAT, DWRITE_MEASURING_MODE, IDWriteRenderingParams*, DWRITE_RENDERING_MODE*))this->v->tbl[15])(this, emSize, pixelsPerDip, measuringMode, renderingParams, renderingMode); }
static inline HRESULT                           IDWriteFontFace_GetGdiCompatibleMetrics                      (IDWriteFontFace* this, FLOAT emSize, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, DWRITE_FONT_METRICS* fontFaceMetrics) { return ((HRESULT (WINAPI*)(IDWriteFontFace*, FLOAT, FLOAT, const DWRITE_MATRIX*, DWRITE_FONT_METRICS*))this->v->tbl[16])(this, emSize, pixelsPerDip, transform, fontFaceMetrics); }
static inline HRESULT                           IDWriteFontFace_GetGdiCompatibleGlyphMetrics                 (IDWriteFontFace* this, FLOAT emSize, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, BOOL useGdiNatural, const UINT16* glyphIndices, UINT32 glyphCount, DWRITE_GLYPH_METRICS* glyphMetrics, BOOL isSideways) { return ((HRESULT (WINAPI*)(IDWriteFontFace*, FLOAT, FLOAT, const DWRITE_MATRIX*, BOOL, const UINT16*, UINT32, DWRITE_GLYPH_METRICS*, BOOL))this->v->tbl[17])(this, emSize, pixelsPerDip, transform, useGdiNatural, glyphIndices, glyphCount, glyphMetrics, isSideways); }

static inline HRESULT                           IDWriteFontFace1_QueryInterface                              (IDWriteFontFace1* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFontFace1*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFontFace1_AddRef                                      (IDWriteFontFace1* this) { return ((UINT32 (WINAPI*)(IDWriteFontFace1*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFontFace1_Release                                     (IDWriteFontFace1* this) { return ((UINT32 (WINAPI*)(IDWriteFontFace1*))this->v->tbl[2])(this); }
static inline DWRITE_FONT_FACE_TYPE             IDWriteFontFace1_GetType                                     (IDWriteFontFace1* this) { return ((DWRITE_FONT_FACE_TYPE (WINAPI*)(IDWriteFontFace1*))this->v->tbl[3])(this); }
static inline HRESULT                           IDWriteFontFace1_GetFiles                                    (IDWriteFontFace1* this, UINT32* numberOfFiles, IDWriteFontFile** fontFiles) { return ((HRESULT (WINAPI*)(IDWriteFontFace1*, UINT32*, IDWriteFontFile**))this->v->tbl[4])(this, numberOfFiles, fontFiles); }
static inline UINT32                            IDWriteFontFace1_GetIndex                                    (IDWriteFontFace1* this) { return ((UINT32 (WINAPI*)(IDWriteFontFace1*))this->v->tbl[5])(this); }
static inline DWRITE_FONT_SIMULATIONS           IDWriteFontFace1_GetSimulations                              (IDWriteFontFace1* this) { return ((DWRITE_FONT_SIMULATIONS (WINAPI*)(IDWriteFontFace1*))this->v->tbl[6])(this); }
static inline BOOL                              IDWriteFontFace1_IsSymbolFont                                (IDWriteFontFace1* this) { return ((BOOL (WINAPI*)(IDWriteFontFace1*))this->v->tbl[7])(this); }
static inline void                              IDWriteFontFace1_GetMetrics                                  (IDWriteFontFace1* this, DWRITE_FONT_METRICS* fontFaceMetrics) { ((void (WINAPI*)(IDWriteFontFace1*, DWRITE_FONT_METRICS*))this->v->tbl[8])(this, fontFaceMetrics); }
static inline UINT16                            IDWriteFontFace1_GetGlyphCount                               (IDWriteFontFace1* this) { return ((UINT16 (WINAPI*)(IDWriteFontFace1*))this->v->tbl[9])(this); }
static inline HRESULT                           IDWriteFontFace1_GetDesignGlyphMetrics                       (IDWriteFontFace1* this, const UINT16* glyphIndices, UINT32 glyphCount, DWRITE_GLYPH_METRICS* glyphMetrics, BOOL isSideways) { return ((HRESULT (WINAPI*)(IDWriteFontFace1*, const UINT16*, UINT32, DWRITE_GLYPH_METRICS*, BOOL))this->v->tbl[10])(this, glyphIndices, glyphCount, glyphMetrics, isSideways); }
static inline HRESULT                           IDWriteFontFace1_GetGlyphIndices                             (IDWriteFontFace1* this, const UINT32* codePoints, UINT32 codePointCount, UINT16* glyphIndices) { return ((HRESULT (WINAPI*)(IDWriteFontFace1*, const UINT32*, UINT32, UINT16*))this->v->tbl[11])(this, codePoints, codePointCount, glyphIndices); }
static inline HRESULT                           IDWriteFontFace1_TryGetFontTable                             (IDWriteFontFace1* this, UINT32 openTypeTableTag, const void** tableData, UINT32* tableSize, void** tableContext, BOOL* exists) { return ((HRESULT (WINAPI*)(IDWriteFontFace1*, UINT32, const void**, UINT32*, void**, BOOL*))this->v->tbl[12])(this, openTypeTableTag, tableData, tableSize, tableContext, exists); }
static inline void                              IDWriteFontFace1_ReleaseFontTable                            (IDWriteFontFace1* this, void* tableContext) { ((void (WINAPI*)(IDWriteFontFace1*, void*))this->v->tbl[13])(this, tableContext); }
static inline HRESULT                           IDWriteFontFace1_GetGlyphRunOutline                          (IDWriteFontFace1* this, FLOAT emSize, const UINT16* glyphIndices, const FLOAT* glyphAdvances, const DWRITE_GLYPH_OFFSET* glyphOffsets, UINT32 glyphCount, BOOL isSideways, BOOL isRightToLeft, ID2D1SimplifiedGeometrySink* geometrySink) { return ((HRESULT (WINAPI*)(IDWriteFontFace1*, FLOAT, const UINT16*, const FLOAT*, const DWRITE_GLYPH_OFFSET*, UINT32, BOOL, BOOL, ID2D1SimplifiedGeometrySink*))this->v->tbl[14])(this, emSize, glyphIndices, glyphAdvances, glyphOffsets, glyphCount, isSideways, isRightToLeft, geometrySink); }
static inline HRESULT                           IDWriteFontFace1_GetRecommendedRenderingMode                 (IDWriteFontFace1* this, FLOAT emSize, FLOAT pixelsPerDip, DWRITE_MEASURING_MODE measuringMode, IDWriteRenderingParams* renderingParams, DWRITE_RENDERING_MODE* renderingMode) { return ((HRESULT (WINAPI*)(IDWriteFontFace1*, FLOAT, FLOAT, DWRITE_MEASURING_MODE, IDWriteRenderingParams*, DWRITE_RENDERING_MODE*))this->v->tbl[15])(this, emSize, pixelsPerDip, measuringMode, renderingParams, renderingMode); }
static inline HRESULT                           IDWriteFontFace1_GetGdiCompatibleMetrics                     (IDWriteFontFace1* this, FLOAT emSize, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, DWRITE_FONT_METRICS* fontFaceMetrics) { return ((HRESULT (WINAPI*)(IDWriteFontFace1*, FLOAT, FLOAT, const DWRITE_MATRIX*, DWRITE_FONT_METRICS*))this->v->tbl[16])(this, emSize, pixelsPerDip, transform, fontFaceMetrics); }
static inline HRESULT                           IDWriteFontFace1_GetGdiCompatibleGlyphMetrics                (IDWriteFontFace1* this, FLOAT emSize, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, BOOL useGdiNatural, const UINT16* glyphIndices, UINT32 glyphCount, DWRITE_GLYPH_METRICS* glyphMetrics, BOOL isSideways) { return ((HRESULT (WINAPI*)(IDWriteFontFace1*, FLOAT, FLOAT, const DWRITE_MATRIX*, BOOL, const UINT16*, UINT32, DWRITE_GLYPH_METRICS*, BOOL))this->v->tbl[17])(this, emSize, pixelsPerDip, transform, useGdiNatural, glyphIndices, glyphCount, glyphMetrics, isSideways); }
static inline void                              IDWriteFontFace1_GetMetrics1                                 (IDWriteFontFace1* this, DWRITE_FONT_METRICS1* fontMetrics) { ((void (WINAPI*)(IDWriteFontFace1*, DWRITE_FONT_METRICS1*))this->v->tbl[18])(this, fontMetrics); }
static inline HRESULT                           IDWriteFontFace1_GetGdiCompatibleMetrics1                    (IDWriteFontFace1* this, FLOAT emSize, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, DWRITE_FONT_METRICS1* fontMetrics) { return ((HRESULT (WINAPI*)(IDWriteFontFace1*, FLOAT, FLOAT, const DWRITE_MATRIX*, DWRITE_FONT_METRICS1*))this->v->tbl[19])(this, emSize, pixelsPerDip, transform, fontMetrics); }
static inline void                              IDWriteFontFace1_GetCaretMetrics                             (IDWriteFontFace1* this, DWRITE_CARET_METRICS* caretMetrics) { ((void (WINAPI*)(IDWriteFontFace1*, DWRITE_CARET_METRICS*))this->v->tbl[20])(this, caretMetrics); }
static inline HRESULT                           IDWriteFontFace1_GetUnicodeRanges                            (IDWriteFontFace1* this, UINT32 maxRangeCount, DWRITE_UNICODE_RANGE* unicodeRanges, UINT32* actualRangeCount) { return ((HRESULT (WINAPI*)(IDWriteFontFace1*, UINT32, DWRITE_UNICODE_RANGE*, UINT32*))this->v->tbl[21])(this, maxRangeCount, unicodeRanges, actualRangeCount); }
static inline BOOL                              IDWriteFontFace1_IsMonospacedFont                            (IDWriteFontFace1* this) { return ((BOOL (WINAPI*)(IDWriteFontFace1*))this->v->tbl[22])(this); }
static inline HRESULT                           IDWriteFontFace1_GetDesignGlyphAdvances                      (IDWriteFontFace1* this, UINT32 glyphCount, const UINT16* glyphIndices, INT32* glyphAdvances, BOOL isSideways) { return ((HRESULT (WINAPI*)(IDWriteFontFace1*, UINT32, const UINT16*, INT32*, BOOL))this->v->tbl[23])(this, glyphCount, glyphIndices, glyphAdvances, isSideways); }
static inline HRESULT                           IDWriteFontFace1_GetGdiCompatibleGlyphAdvances               (IDWriteFontFace1* this, FLOAT emSize, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, BOOL useGdiNatural, BOOL isSideways, UINT32 glyphCount, const UINT16* glyphIndices, INT32* glyphAdvances) { return ((HRESULT (WINAPI*)(IDWriteFontFace1*, FLOAT, FLOAT, const DWRITE_MATRIX*, BOOL, BOOL, UINT32, const UINT16*, INT32*))this->v->tbl[24])(this, emSize, pixelsPerDip, transform, useGdiNatural, isSideways, glyphCount, glyphIndices, glyphAdvances); }
static inline HRESULT                           IDWriteFontFace1_GetKerningPairAdjustments                   (IDWriteFontFace1* this, UINT32 glyphCount, const UINT16* glyphIndices, INT32* glyphAdvanceAdjustments) { return ((HRESULT (WINAPI*)(IDWriteFontFace1*, UINT32, const UINT16*, INT32*))this->v->tbl[25])(this, glyphCount, glyphIndices, glyphAdvanceAdjustments); }
static inline BOOL                              IDWriteFontFace1_HasKerningPairs                             (IDWriteFontFace1* this) { return ((BOOL (WINAPI*)(IDWriteFontFace1*))this->v->tbl[26])(this); }
static inline HRESULT                           IDWriteFontFace1_GetRecommendedRenderingMode1                (IDWriteFontFace1* this, FLOAT fontEmSize, FLOAT dpiX, FLOAT dpiY, const DWRITE_MATRIX* transform, BOOL isSideways, DWRITE_OUTLINE_THRESHOLD outlineThreshold, DWRITE_MEASURING_MODE measuringMode, DWRITE_RENDERING_MODE* renderingMode) { return ((HRESULT (WINAPI*)(IDWriteFontFace1*, FLOAT, FLOAT, FLOAT, const DWRITE_MATRIX*, BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, DWRITE_RENDERING_MODE*))this->v->tbl[27])(this, fontEmSize, dpiX, dpiY, transform, isSideways, outlineThreshold, measuringMode, renderingMode); }
static inline HRESULT                           IDWriteFontFace1_GetVerticalGlyphVariants                    (IDWriteFontFace1* this, UINT32 glyphCount, const UINT16* nominalGlyphIndices, UINT16* verticalGlyphIndices) { return ((HRESULT (WINAPI*)(IDWriteFontFace1*, UINT32, const UINT16*, UINT16*))this->v->tbl[28])(this, glyphCount, nominalGlyphIndices, verticalGlyphIndices); }
static inline BOOL                              IDWriteFontFace1_HasVerticalGlyphVariants                    (IDWriteFontFace1* this) { return ((BOOL (WINAPI*)(IDWriteFontFace1*))this->v->tbl[29])(this); }

static inline HRESULT                           IDWriteFontFace2_QueryInterface                              (IDWriteFontFace2* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFontFace2*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFontFace2_AddRef                                      (IDWriteFontFace2* this) { return ((UINT32 (WINAPI*)(IDWriteFontFace2*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFontFace2_Release                                     (IDWriteFontFace2* this) { return ((UINT32 (WINAPI*)(IDWriteFontFace2*))this->v->tbl[2])(this); }
static inline DWRITE_FONT_FACE_TYPE             IDWriteFontFace2_GetType                                     (IDWriteFontFace2* this) { return ((DWRITE_FONT_FACE_TYPE (WINAPI*)(IDWriteFontFace2*))this->v->tbl[3])(this); }
static inline HRESULT                           IDWriteFontFace2_GetFiles                                    (IDWriteFontFace2* this, UINT32* numberOfFiles, IDWriteFontFile** fontFiles) { return ((HRESULT (WINAPI*)(IDWriteFontFace2*, UINT32*, IDWriteFontFile**))this->v->tbl[4])(this, numberOfFiles, fontFiles); }
static inline UINT32                            IDWriteFontFace2_GetIndex                                    (IDWriteFontFace2* this) { return ((UINT32 (WINAPI*)(IDWriteFontFace2*))this->v->tbl[5])(this); }
static inline DWRITE_FONT_SIMULATIONS           IDWriteFontFace2_GetSimulations                              (IDWriteFontFace2* this) { return ((DWRITE_FONT_SIMULATIONS (WINAPI*)(IDWriteFontFace2*))this->v->tbl[6])(this); }
static inline BOOL                              IDWriteFontFace2_IsSymbolFont                                (IDWriteFontFace2* this) { return ((BOOL (WINAPI*)(IDWriteFontFace2*))this->v->tbl[7])(this); }
static inline void                              IDWriteFontFace2_GetMetrics                                  (IDWriteFontFace2* this, DWRITE_FONT_METRICS* fontFaceMetrics) { ((void (WINAPI*)(IDWriteFontFace2*, DWRITE_FONT_METRICS*))this->v->tbl[8])(this, fontFaceMetrics); }
static inline UINT16                            IDWriteFontFace2_GetGlyphCount                               (IDWriteFontFace2* this) { return ((UINT16 (WINAPI*)(IDWriteFontFace2*))this->v->tbl[9])(this); }
static inline HRESULT                           IDWriteFontFace2_GetDesignGlyphMetrics                       (IDWriteFontFace2* this, const UINT16* glyphIndices, UINT32 glyphCount, DWRITE_GLYPH_METRICS* glyphMetrics, BOOL isSideways) { return ((HRESULT (WINAPI*)(IDWriteFontFace2*, const UINT16*, UINT32, DWRITE_GLYPH_METRICS*, BOOL))this->v->tbl[10])(this, glyphIndices, glyphCount, glyphMetrics, isSideways); }
static inline HRESULT                           IDWriteFontFace2_GetGlyphIndices                             (IDWriteFontFace2* this, const UINT32* codePoints, UINT32 codePointCount, UINT16* glyphIndices) { return ((HRESULT (WINAPI*)(IDWriteFontFace2*, const UINT32*, UINT32, UINT16*))this->v->tbl[11])(this, codePoints, codePointCount, glyphIndices); }
static inline HRESULT                           IDWriteFontFace2_TryGetFontTable                             (IDWriteFontFace2* this, UINT32 openTypeTableTag, const void** tableData, UINT32* tableSize, void** tableContext, BOOL* exists) { return ((HRESULT (WINAPI*)(IDWriteFontFace2*, UINT32, const void**, UINT32*, void**, BOOL*))this->v->tbl[12])(this, openTypeTableTag, tableData, tableSize, tableContext, exists); }
static inline void                              IDWriteFontFace2_ReleaseFontTable                            (IDWriteFontFace2* this, void* tableContext) { ((void (WINAPI*)(IDWriteFontFace2*, void*))this->v->tbl[13])(this, tableContext); }
static inline HRESULT                           IDWriteFontFace2_GetGlyphRunOutline                          (IDWriteFontFace2* this, FLOAT emSize, const UINT16* glyphIndices, const FLOAT* glyphAdvances, const DWRITE_GLYPH_OFFSET* glyphOffsets, UINT32 glyphCount, BOOL isSideways, BOOL isRightToLeft, ID2D1SimplifiedGeometrySink* geometrySink) { return ((HRESULT (WINAPI*)(IDWriteFontFace2*, FLOAT, const UINT16*, const FLOAT*, const DWRITE_GLYPH_OFFSET*, UINT32, BOOL, BOOL, ID2D1SimplifiedGeometrySink*))this->v->tbl[14])(this, emSize, glyphIndices, glyphAdvances, glyphOffsets, glyphCount, isSideways, isRightToLeft, geometrySink); }
static inline HRESULT                           IDWriteFontFace2_GetRecommendedRenderingMode                 (IDWriteFontFace2* this, FLOAT emSize, FLOAT pixelsPerDip, DWRITE_MEASURING_MODE measuringMode, IDWriteRenderingParams* renderingParams, DWRITE_RENDERING_MODE* renderingMode) { return ((HRESULT (WINAPI*)(IDWriteFontFace2*, FLOAT, FLOAT, DWRITE_MEASURING_MODE, IDWriteRenderingParams*, DWRITE_RENDERING_MODE*))this->v->tbl[15])(this, emSize, pixelsPerDip, measuringMode, renderingParams, renderingMode); }
static inline HRESULT                           IDWriteFontFace2_GetGdiCompatibleMetrics                     (IDWriteFontFace2* this, FLOAT emSize, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, DWRITE_FONT_METRICS* fontFaceMetrics) { return ((HRESULT (WINAPI*)(IDWriteFontFace2*, FLOAT, FLOAT, const DWRITE_MATRIX*, DWRITE_FONT_METRICS*))this->v->tbl[16])(this, emSize, pixelsPerDip, transform, fontFaceMetrics); }
static inline HRESULT                           IDWriteFontFace2_GetGdiCompatibleGlyphMetrics                (IDWriteFontFace2* this, FLOAT emSize, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, BOOL useGdiNatural, const UINT16* glyphIndices, UINT32 glyphCount, DWRITE_GLYPH_METRICS* glyphMetrics, BOOL isSideways) { return ((HRESULT (WINAPI*)(IDWriteFontFace2*, FLOAT, FLOAT, const DWRITE_MATRIX*, BOOL, const UINT16*, UINT32, DWRITE_GLYPH_METRICS*, BOOL))this->v->tbl[17])(this, emSize, pixelsPerDip, transform, useGdiNatural, glyphIndices, glyphCount, glyphMetrics, isSideways); }
static inline void                              IDWriteFontFace2_GetMetrics1                                 (IDWriteFontFace2* this, DWRITE_FONT_METRICS1* fontMetrics) { ((void (WINAPI*)(IDWriteFontFace2*, DWRITE_FONT_METRICS1*))this->v->tbl[18])(this, fontMetrics); }
static inline HRESULT                           IDWriteFontFace2_GetGdiCompatibleMetrics1                    (IDWriteFontFace2* this, FLOAT emSize, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, DWRITE_FONT_METRICS1* fontMetrics) { return ((HRESULT (WINAPI*)(IDWriteFontFace2*, FLOAT, FLOAT, const DWRITE_MATRIX*, DWRITE_FONT_METRICS1*))this->v->tbl[19])(this, emSize, pixelsPerDip, transform, fontMetrics); }
static inline void                              IDWriteFontFace2_GetCaretMetrics                             (IDWriteFontFace2* this, DWRITE_CARET_METRICS* caretMetrics) { ((void (WINAPI*)(IDWriteFontFace2*, DWRITE_CARET_METRICS*))this->v->tbl[20])(this, caretMetrics); }
static inline HRESULT                           IDWriteFontFace2_GetUnicodeRanges                            (IDWriteFontFace2* this, UINT32 maxRangeCount, DWRITE_UNICODE_RANGE* unicodeRanges, UINT32* actualRangeCount) { return ((HRESULT (WINAPI*)(IDWriteFontFace2*, UINT32, DWRITE_UNICODE_RANGE*, UINT32*))this->v->tbl[21])(this, maxRangeCount, unicodeRanges, actualRangeCount); }
static inline BOOL                              IDWriteFontFace2_IsMonospacedFont                            (IDWriteFontFace2* this) { return ((BOOL (WINAPI*)(IDWriteFontFace2*))this->v->tbl[22])(this); }
static inline HRESULT                           IDWriteFontFace2_GetDesignGlyphAdvances                      (IDWriteFontFace2* this, UINT32 glyphCount, const UINT16* glyphIndices, INT32* glyphAdvances, BOOL isSideways) { return ((HRESULT (WINAPI*)(IDWriteFontFace2*, UINT32, const UINT16*, INT32*, BOOL))this->v->tbl[23])(this, glyphCount, glyphIndices, glyphAdvances, isSideways); }
static inline HRESULT                           IDWriteFontFace2_GetGdiCompatibleGlyphAdvances               (IDWriteFontFace2* this, FLOAT emSize, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, BOOL useGdiNatural, BOOL isSideways, UINT32 glyphCount, const UINT16* glyphIndices, INT32* glyphAdvances) { return ((HRESULT (WINAPI*)(IDWriteFontFace2*, FLOAT, FLOAT, const DWRITE_MATRIX*, BOOL, BOOL, UINT32, const UINT16*, INT32*))this->v->tbl[24])(this, emSize, pixelsPerDip, transform, useGdiNatural, isSideways, glyphCount, glyphIndices, glyphAdvances); }
static inline HRESULT                           IDWriteFontFace2_GetKerningPairAdjustments                   (IDWriteFontFace2* this, UINT32 glyphCount, const UINT16* glyphIndices, INT32* glyphAdvanceAdjustments) { return ((HRESULT (WINAPI*)(IDWriteFontFace2*, UINT32, const UINT16*, INT32*))this->v->tbl[25])(this, glyphCount, glyphIndices, glyphAdvanceAdjustments); }
static inline BOOL                              IDWriteFontFace2_HasKerningPairs                             (IDWriteFontFace2* this) { return ((BOOL (WINAPI*)(IDWriteFontFace2*))this->v->tbl[26])(this); }
static inline HRESULT                           IDWriteFontFace2_GetRecommendedRenderingMode1                (IDWriteFontFace2* this, FLOAT fontEmSize, FLOAT dpiX, FLOAT dpiY, const DWRITE_MATRIX* transform, BOOL isSideways, DWRITE_OUTLINE_THRESHOLD outlineThreshold, DWRITE_MEASURING_MODE measuringMode, DWRITE_RENDERING_MODE* renderingMode) { return ((HRESULT (WINAPI*)(IDWriteFontFace2*, FLOAT, FLOAT, FLOAT, const DWRITE_MATRIX*, BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, DWRITE_RENDERING_MODE*))this->v->tbl[27])(this, fontEmSize, dpiX, dpiY, transform, isSideways, outlineThreshold, measuringMode, renderingMode); }
static inline HRESULT                           IDWriteFontFace2_GetVerticalGlyphVariants                    (IDWriteFontFace2* this, UINT32 glyphCount, const UINT16* nominalGlyphIndices, UINT16* verticalGlyphIndices) { return ((HRESULT (WINAPI*)(IDWriteFontFace2*, UINT32, const UINT16*, UINT16*))this->v->tbl[28])(this, glyphCount, nominalGlyphIndices, verticalGlyphIndices); }
static inline BOOL                              IDWriteFontFace2_HasVerticalGlyphVariants                    (IDWriteFontFace2* this) { return ((BOOL (WINAPI*)(IDWriteFontFace2*))this->v->tbl[29])(this); }
static inline BOOL                              IDWriteFontFace2_IsColorFont                                 (IDWriteFontFace2* this) { return ((BOOL (WINAPI*)(IDWriteFontFace2*))this->v->tbl[30])(this); }
static inline UINT32                            IDWriteFontFace2_GetColorPaletteCount                        (IDWriteFontFace2* this) { return ((UINT32 (WINAPI*)(IDWriteFontFace2*))this->v->tbl[31])(this); }
static inline UINT32                            IDWriteFontFace2_GetPaletteEntryCount                        (IDWriteFontFace2* this) { return ((UINT32 (WINAPI*)(IDWriteFontFace2*))this->v->tbl[32])(this); }
static inline HRESULT                           IDWriteFontFace2_GetPaletteEntries                           (IDWriteFontFace2* this, UINT32 colorPaletteIndex, UINT32 firstEntryIndex, UINT32 entryCount, DWRITE_COLOR_F* paletteEntries) { return ((HRESULT (WINAPI*)(IDWriteFontFace2*, UINT32, UINT32, UINT32, DWRITE_COLOR_F*))this->v->tbl[33])(this, colorPaletteIndex, firstEntryIndex, entryCount, paletteEntries); }
static inline HRESULT                           IDWriteFontFace2_GetRecommendedRenderingMode2                (IDWriteFontFace2* this, FLOAT fontEmSize, FLOAT dpiX, FLOAT dpiY, const DWRITE_MATRIX* transform, BOOL isSideways, DWRITE_OUTLINE_THRESHOLD outlineThreshold, DWRITE_MEASURING_MODE measuringMode, IDWriteRenderingParams* renderingParams, DWRITE_RENDERING_MODE* renderingMode, DWRITE_GRID_FIT_MODE* gridFitMode) { return ((HRESULT (WINAPI*)(IDWriteFontFace2*, FLOAT, FLOAT, FLOAT, const DWRITE_MATRIX*, BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, IDWriteRenderingParams*, DWRITE_RENDERING_MODE*, DWRITE_GRID_FIT_MODE*))this->v->tbl[34])(this, fontEmSize, dpiX, dpiY, transform, isSideways, outlineThreshold, measuringMode, renderingParams, renderingMode, gridFitMode); }

static inline HRESULT                           IDWriteFontFace3_QueryInterface                              (IDWriteFontFace3* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFontFace3*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFontFace3_AddRef                                      (IDWriteFontFace3* this) { return ((UINT32 (WINAPI*)(IDWriteFontFace3*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFontFace3_Release                                     (IDWriteFontFace3* this) { return ((UINT32 (WINAPI*)(IDWriteFontFace3*))this->v->tbl[2])(this); }
static inline DWRITE_FONT_FACE_TYPE             IDWriteFontFace3_GetType                                     (IDWriteFontFace3* this) { return ((DWRITE_FONT_FACE_TYPE (WINAPI*)(IDWriteFontFace3*))this->v->tbl[3])(this); }
static inline HRESULT                           IDWriteFontFace3_GetFiles                                    (IDWriteFontFace3* this, UINT32* numberOfFiles, IDWriteFontFile** fontFiles) { return ((HRESULT (WINAPI*)(IDWriteFontFace3*, UINT32*, IDWriteFontFile**))this->v->tbl[4])(this, numberOfFiles, fontFiles); }
static inline UINT32                            IDWriteFontFace3_GetIndex                                    (IDWriteFontFace3* this) { return ((UINT32 (WINAPI*)(IDWriteFontFace3*))this->v->tbl[5])(this); }
static inline DWRITE_FONT_SIMULATIONS           IDWriteFontFace3_GetSimulations                              (IDWriteFontFace3* this) { return ((DWRITE_FONT_SIMULATIONS (WINAPI*)(IDWriteFontFace3*))this->v->tbl[6])(this); }
static inline BOOL                              IDWriteFontFace3_IsSymbolFont                                (IDWriteFontFace3* this) { return ((BOOL (WINAPI*)(IDWriteFontFace3*))this->v->tbl[7])(this); }
static inline void                              IDWriteFontFace3_GetMetrics                                  (IDWriteFontFace3* this, DWRITE_FONT_METRICS* fontFaceMetrics) { ((void (WINAPI*)(IDWriteFontFace3*, DWRITE_FONT_METRICS*))this->v->tbl[8])(this, fontFaceMetrics); }
static inline UINT16                            IDWriteFontFace3_GetGlyphCount                               (IDWriteFontFace3* this) { return ((UINT16 (WINAPI*)(IDWriteFontFace3*))this->v->tbl[9])(this); }
static inline HRESULT                           IDWriteFontFace3_GetDesignGlyphMetrics                       (IDWriteFontFace3* this, const UINT16* glyphIndices, UINT32 glyphCount, DWRITE_GLYPH_METRICS* glyphMetrics, BOOL isSideways) { return ((HRESULT (WINAPI*)(IDWriteFontFace3*, const UINT16*, UINT32, DWRITE_GLYPH_METRICS*, BOOL))this->v->tbl[10])(this, glyphIndices, glyphCount, glyphMetrics, isSideways); }
static inline HRESULT                           IDWriteFontFace3_GetGlyphIndices                             (IDWriteFontFace3* this, const UINT32* codePoints, UINT32 codePointCount, UINT16* glyphIndices) { return ((HRESULT (WINAPI*)(IDWriteFontFace3*, const UINT32*, UINT32, UINT16*))this->v->tbl[11])(this, codePoints, codePointCount, glyphIndices); }
static inline HRESULT                           IDWriteFontFace3_TryGetFontTable                             (IDWriteFontFace3* this, UINT32 openTypeTableTag, const void** tableData, UINT32* tableSize, void** tableContext, BOOL* exists) { return ((HRESULT (WINAPI*)(IDWriteFontFace3*, UINT32, const void**, UINT32*, void**, BOOL*))this->v->tbl[12])(this, openTypeTableTag, tableData, tableSize, tableContext, exists); }
static inline void                              IDWriteFontFace3_ReleaseFontTable                            (IDWriteFontFace3* this, void* tableContext) { ((void (WINAPI*)(IDWriteFontFace3*, void*))this->v->tbl[13])(this, tableContext); }
static inline HRESULT                           IDWriteFontFace3_GetGlyphRunOutline                          (IDWriteFontFace3* this, FLOAT emSize, const UINT16* glyphIndices, const FLOAT* glyphAdvances, const DWRITE_GLYPH_OFFSET* glyphOffsets, UINT32 glyphCount, BOOL isSideways, BOOL isRightToLeft, ID2D1SimplifiedGeometrySink* geometrySink) { return ((HRESULT (WINAPI*)(IDWriteFontFace3*, FLOAT, const UINT16*, const FLOAT*, const DWRITE_GLYPH_OFFSET*, UINT32, BOOL, BOOL, ID2D1SimplifiedGeometrySink*))this->v->tbl[14])(this, emSize, glyphIndices, glyphAdvances, glyphOffsets, glyphCount, isSideways, isRightToLeft, geometrySink); }
static inline HRESULT                           IDWriteFontFace3_GetRecommendedRenderingMode                 (IDWriteFontFace3* this, FLOAT emSize, FLOAT pixelsPerDip, DWRITE_MEASURING_MODE measuringMode, IDWriteRenderingParams* renderingParams, DWRITE_RENDERING_MODE* renderingMode) { return ((HRESULT (WINAPI*)(IDWriteFontFace3*, FLOAT, FLOAT, DWRITE_MEASURING_MODE, IDWriteRenderingParams*, DWRITE_RENDERING_MODE*))this->v->tbl[15])(this, emSize, pixelsPerDip, measuringMode, renderingParams, renderingMode); }
static inline HRESULT                           IDWriteFontFace3_GetGdiCompatibleMetrics                     (IDWriteFontFace3* this, FLOAT emSize, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, DWRITE_FONT_METRICS* fontFaceMetrics) { return ((HRESULT (WINAPI*)(IDWriteFontFace3*, FLOAT, FLOAT, const DWRITE_MATRIX*, DWRITE_FONT_METRICS*))this->v->tbl[16])(this, emSize, pixelsPerDip, transform, fontFaceMetrics); }
static inline HRESULT                           IDWriteFontFace3_GetGdiCompatibleGlyphMetrics                (IDWriteFontFace3* this, FLOAT emSize, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, BOOL useGdiNatural, const UINT16* glyphIndices, UINT32 glyphCount, DWRITE_GLYPH_METRICS* glyphMetrics, BOOL isSideways) { return ((HRESULT (WINAPI*)(IDWriteFontFace3*, FLOAT, FLOAT, const DWRITE_MATRIX*, BOOL, const UINT16*, UINT32, DWRITE_GLYPH_METRICS*, BOOL))this->v->tbl[17])(this, emSize, pixelsPerDip, transform, useGdiNatural, glyphIndices, glyphCount, glyphMetrics, isSideways); }
static inline void                              IDWriteFontFace3_GetMetrics1                                 (IDWriteFontFace3* this, DWRITE_FONT_METRICS1* fontMetrics) { ((void (WINAPI*)(IDWriteFontFace3*, DWRITE_FONT_METRICS1*))this->v->tbl[18])(this, fontMetrics); }
static inline HRESULT                           IDWriteFontFace3_GetGdiCompatibleMetrics1                    (IDWriteFontFace3* this, FLOAT emSize, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, DWRITE_FONT_METRICS1* fontMetrics) { return ((HRESULT (WINAPI*)(IDWriteFontFace3*, FLOAT, FLOAT, const DWRITE_MATRIX*, DWRITE_FONT_METRICS1*))this->v->tbl[19])(this, emSize, pixelsPerDip, transform, fontMetrics); }
static inline void                              IDWriteFontFace3_GetCaretMetrics                             (IDWriteFontFace3* this, DWRITE_CARET_METRICS* caretMetrics) { ((void (WINAPI*)(IDWriteFontFace3*, DWRITE_CARET_METRICS*))this->v->tbl[20])(this, caretMetrics); }
static inline HRESULT                           IDWriteFontFace3_GetUnicodeRanges                            (IDWriteFontFace3* this, UINT32 maxRangeCount, DWRITE_UNICODE_RANGE* unicodeRanges, UINT32* actualRangeCount) { return ((HRESULT (WINAPI*)(IDWriteFontFace3*, UINT32, DWRITE_UNICODE_RANGE*, UINT32*))this->v->tbl[21])(this, maxRangeCount, unicodeRanges, actualRangeCount); }
static inline BOOL                              IDWriteFontFace3_IsMonospacedFont                            (IDWriteFontFace3* this) { return ((BOOL (WINAPI*)(IDWriteFontFace3*))this->v->tbl[22])(this); }
static inline HRESULT                           IDWriteFontFace3_GetDesignGlyphAdvances                      (IDWriteFontFace3* this, UINT32 glyphCount, const UINT16* glyphIndices, INT32* glyphAdvances, BOOL isSideways) { return ((HRESULT (WINAPI*)(IDWriteFontFace3*, UINT32, const UINT16*, INT32*, BOOL))this->v->tbl[23])(this, glyphCount, glyphIndices, glyphAdvances, isSideways); }
static inline HRESULT                           IDWriteFontFace3_GetGdiCompatibleGlyphAdvances               (IDWriteFontFace3* this, FLOAT emSize, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, BOOL useGdiNatural, BOOL isSideways, UINT32 glyphCount, const UINT16* glyphIndices, INT32* glyphAdvances) { return ((HRESULT (WINAPI*)(IDWriteFontFace3*, FLOAT, FLOAT, const DWRITE_MATRIX*, BOOL, BOOL, UINT32, const UINT16*, INT32*))this->v->tbl[24])(this, emSize, pixelsPerDip, transform, useGdiNatural, isSideways, glyphCount, glyphIndices, glyphAdvances); }
static inline HRESULT                           IDWriteFontFace3_GetKerningPairAdjustments                   (IDWriteFontFace3* this, UINT32 glyphCount, const UINT16* glyphIndices, INT32* glyphAdvanceAdjustments) { return ((HRESULT (WINAPI*)(IDWriteFontFace3*, UINT32, const UINT16*, INT32*))this->v->tbl[25])(this, glyphCount, glyphIndices, glyphAdvanceAdjustments); }
static inline BOOL                              IDWriteFontFace3_HasKerningPairs                             (IDWriteFontFace3* this) { return ((BOOL (WINAPI*)(IDWriteFontFace3*))this->v->tbl[26])(this); }
static inline HRESULT                           IDWriteFontFace3_GetRecommendedRenderingMode1                (IDWriteFontFace3* this, FLOAT fontEmSize, FLOAT dpiX, FLOAT dpiY, const DWRITE_MATRIX* transform, BOOL isSideways, DWRITE_OUTLINE_THRESHOLD outlineThreshold, DWRITE_MEASURING_MODE measuringMode, DWRITE_RENDERING_MODE* renderingMode) { return ((HRESULT (WINAPI*)(IDWriteFontFace3*, FLOAT, FLOAT, FLOAT, const DWRITE_MATRIX*, BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, DWRITE_RENDERING_MODE*))this->v->tbl[27])(this, fontEmSize, dpiX, dpiY, transform, isSideways, outlineThreshold, measuringMode, renderingMode); }
static inline HRESULT                           IDWriteFontFace3_GetVerticalGlyphVariants                    (IDWriteFontFace3* this, UINT32 glyphCount, const UINT16* nominalGlyphIndices, UINT16* verticalGlyphIndices) { return ((HRESULT (WINAPI*)(IDWriteFontFace3*, UINT32, const UINT16*, UINT16*))this->v->tbl[28])(this, glyphCount, nominalGlyphIndices, verticalGlyphIndices); }
static inline BOOL                              IDWriteFontFace3_HasVerticalGlyphVariants                    (IDWriteFontFace3* this) { return ((BOOL (WINAPI*)(IDWriteFontFace3*))this->v->tbl[29])(this); }
static inline BOOL                              IDWriteFontFace3_IsColorFont                                 (IDWriteFontFace3* this) { return ((BOOL (WINAPI*)(IDWriteFontFace3*))this->v->tbl[30])(this); }
static inline UINT32                            IDWriteFontFace3_GetColorPaletteCount                        (IDWriteFontFace3* this) { return ((UINT32 (WINAPI*)(IDWriteFontFace3*))this->v->tbl[31])(this); }
static inline UINT32                            IDWriteFontFace3_GetPaletteEntryCount                        (IDWriteFontFace3* this) { return ((UINT32 (WINAPI*)(IDWriteFontFace3*))this->v->tbl[32])(this); }
static inline HRESULT                           IDWriteFontFace3_GetPaletteEntries                           (IDWriteFontFace3* this, UINT32 colorPaletteIndex, UINT32 firstEntryIndex, UINT32 entryCount, DWRITE_COLOR_F* paletteEntries) { return ((HRESULT (WINAPI*)(IDWriteFontFace3*, UINT32, UINT32, UINT32, DWRITE_COLOR_F*))this->v->tbl[33])(this, colorPaletteIndex, firstEntryIndex, entryCount, paletteEntries); }
static inline HRESULT                           IDWriteFontFace3_GetRecommendedRenderingMode2                (IDWriteFontFace3* this, FLOAT fontEmSize, FLOAT dpiX, FLOAT dpiY, const DWRITE_MATRIX* transform, BOOL isSideways, DWRITE_OUTLINE_THRESHOLD outlineThreshold, DWRITE_MEASURING_MODE measuringMode, IDWriteRenderingParams* renderingParams, DWRITE_RENDERING_MODE* renderingMode, DWRITE_GRID_FIT_MODE* gridFitMode) { return ((HRESULT (WINAPI*)(IDWriteFontFace3*, FLOAT, FLOAT, FLOAT, const DWRITE_MATRIX*, BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, IDWriteRenderingParams*, DWRITE_RENDERING_MODE*, DWRITE_GRID_FIT_MODE*))this->v->tbl[34])(this, fontEmSize, dpiX, dpiY, transform, isSideways, outlineThreshold, measuringMode, renderingParams, renderingMode, gridFitMode); }
static inline HRESULT                           IDWriteFontFace3_GetFontFaceReference                        (IDWriteFontFace3* this, IDWriteFontFaceReference** fontFaceReference) { return ((HRESULT (WINAPI*)(IDWriteFontFace3*, IDWriteFontFaceReference**))this->v->tbl[35])(this, fontFaceReference); }
static inline void                              IDWriteFontFace3_GetPanose                                   (IDWriteFontFace3* this, DWRITE_PANOSE* panose) { ((void (WINAPI*)(IDWriteFontFace3*, DWRITE_PANOSE*))this->v->tbl[36])(this, panose); }
static inline DWRITE_FONT_WEIGHT                IDWriteFontFace3_GetWeight                                   (IDWriteFontFace3* this) { return ((DWRITE_FONT_WEIGHT (WINAPI*)(IDWriteFontFace3*))this->v->tbl[37])(this); }
static inline DWRITE_FONT_STRETCH               IDWriteFontFace3_GetStretch                                  (IDWriteFontFace3* this) { return ((DWRITE_FONT_STRETCH (WINAPI*)(IDWriteFontFace3*))this->v->tbl[38])(this); }
static inline DWRITE_FONT_STYLE                 IDWriteFontFace3_GetStyle                                    (IDWriteFontFace3* this) { return ((DWRITE_FONT_STYLE (WINAPI*)(IDWriteFontFace3*))this->v->tbl[39])(this); }
static inline HRESULT                           IDWriteFontFace3_GetFamilyNames                              (IDWriteFontFace3* this, IDWriteLocalizedStrings** names) { return ((HRESULT (WINAPI*)(IDWriteFontFace3*, IDWriteLocalizedStrings**))this->v->tbl[40])(this, names); }
static inline HRESULT                           IDWriteFontFace3_GetFaceNames                                (IDWriteFontFace3* this, IDWriteLocalizedStrings** names) { return ((HRESULT (WINAPI*)(IDWriteFontFace3*, IDWriteLocalizedStrings**))this->v->tbl[41])(this, names); }
static inline HRESULT                           IDWriteFontFace3_GetInformationalStrings                     (IDWriteFontFace3* this, DWRITE_INFORMATIONAL_STRING_ID informationalStringID, IDWriteLocalizedStrings** informationalStrings, BOOL* exists) { return ((HRESULT (WINAPI*)(IDWriteFontFace3*, DWRITE_INFORMATIONAL_STRING_ID, IDWriteLocalizedStrings**, BOOL*))this->v->tbl[42])(this, informationalStringID, informationalStrings, exists); }
static inline BOOL                              IDWriteFontFace3_HasCharacter                                (IDWriteFontFace3* this, UINT32 unicodeValue) { return ((BOOL (WINAPI*)(IDWriteFontFace3*, UINT32))this->v->tbl[43])(this, unicodeValue); }
static inline HRESULT                           IDWriteFontFace3_GetRecommendedRenderingMode3                (IDWriteFontFace3* this, FLOAT fontEmSize, FLOAT dpiX, FLOAT dpiY, const DWRITE_MATRIX* transform, BOOL isSideways, DWRITE_OUTLINE_THRESHOLD outlineThreshold, DWRITE_MEASURING_MODE measuringMode, IDWriteRenderingParams* renderingParams, DWRITE_RENDERING_MODE1* renderingMode, DWRITE_GRID_FIT_MODE* gridFitMode) { return ((HRESULT (WINAPI*)(IDWriteFontFace3*, FLOAT, FLOAT, FLOAT, const DWRITE_MATRIX*, BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, IDWriteRenderingParams*, DWRITE_RENDERING_MODE1*, DWRITE_GRID_FIT_MODE*))this->v->tbl[44])(this, fontEmSize, dpiX, dpiY, transform, isSideways, outlineThreshold, measuringMode, renderingParams, renderingMode, gridFitMode); }
static inline BOOL                              IDWriteFontFace3_IsCharacterLocal                            (IDWriteFontFace3* this, UINT32 unicodeValue) { return ((BOOL (WINAPI*)(IDWriteFontFace3*, UINT32))this->v->tbl[45])(this, unicodeValue); }
static inline BOOL                              IDWriteFontFace3_IsGlyphLocal                                (IDWriteFontFace3* this, UINT16 glyphId) { return ((BOOL (WINAPI*)(IDWriteFontFace3*, UINT16))this->v->tbl[46])(this, glyphId); }
static inline HRESULT                           IDWriteFontFace3_AreCharactersLocal                          (IDWriteFontFace3* this, const WCHAR* characters, UINT32 characterCount, BOOL enqueueIfNotLocal, BOOL* isLocal) { return ((HRESULT (WINAPI*)(IDWriteFontFace3*, const WCHAR*, UINT32, BOOL, BOOL*))this->v->tbl[47])(this, characters, characterCount, enqueueIfNotLocal, isLocal); }
static inline HRESULT                           IDWriteFontFace3_AreGlyphsLocal                              (IDWriteFontFace3* this, const UINT16* glyphIndices, UINT32 glyphCount, BOOL enqueueIfNotLocal, BOOL* isLocal) { return ((HRESULT (WINAPI*)(IDWriteFontFace3*, const UINT16*, UINT32, BOOL, BOOL*))this->v->tbl[48])(this, glyphIndices, glyphCount, enqueueIfNotLocal, isLocal); }

static inline HRESULT                           IDWriteFontFace4_QueryInterface                              (IDWriteFontFace4* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFontFace4*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFontFace4_AddRef                                      (IDWriteFontFace4* this) { return ((UINT32 (WINAPI*)(IDWriteFontFace4*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFontFace4_Release                                     (IDWriteFontFace4* this) { return ((UINT32 (WINAPI*)(IDWriteFontFace4*))this->v->tbl[2])(this); }
static inline DWRITE_FONT_FACE_TYPE             IDWriteFontFace4_GetType                                     (IDWriteFontFace4* this) { return ((DWRITE_FONT_FACE_TYPE (WINAPI*)(IDWriteFontFace4*))this->v->tbl[3])(this); }
static inline HRESULT                           IDWriteFontFace4_GetFiles                                    (IDWriteFontFace4* this, UINT32* numberOfFiles, IDWriteFontFile** fontFiles) { return ((HRESULT (WINAPI*)(IDWriteFontFace4*, UINT32*, IDWriteFontFile**))this->v->tbl[4])(this, numberOfFiles, fontFiles); }
static inline UINT32                            IDWriteFontFace4_GetIndex                                    (IDWriteFontFace4* this) { return ((UINT32 (WINAPI*)(IDWriteFontFace4*))this->v->tbl[5])(this); }
static inline DWRITE_FONT_SIMULATIONS           IDWriteFontFace4_GetSimulations                              (IDWriteFontFace4* this) { return ((DWRITE_FONT_SIMULATIONS (WINAPI*)(IDWriteFontFace4*))this->v->tbl[6])(this); }
static inline BOOL                              IDWriteFontFace4_IsSymbolFont                                (IDWriteFontFace4* this) { return ((BOOL (WINAPI*)(IDWriteFontFace4*))this->v->tbl[7])(this); }
static inline void                              IDWriteFontFace4_GetMetrics                                  (IDWriteFontFace4* this, DWRITE_FONT_METRICS* fontFaceMetrics) { ((void (WINAPI*)(IDWriteFontFace4*, DWRITE_FONT_METRICS*))this->v->tbl[8])(this, fontFaceMetrics); }
static inline UINT16                            IDWriteFontFace4_GetGlyphCount                               (IDWriteFontFace4* this) { return ((UINT16 (WINAPI*)(IDWriteFontFace4*))this->v->tbl[9])(this); }
static inline HRESULT                           IDWriteFontFace4_GetDesignGlyphMetrics                       (IDWriteFontFace4* this, const UINT16* glyphIndices, UINT32 glyphCount, DWRITE_GLYPH_METRICS* glyphMetrics, BOOL isSideways) { return ((HRESULT (WINAPI*)(IDWriteFontFace4*, const UINT16*, UINT32, DWRITE_GLYPH_METRICS*, BOOL))this->v->tbl[10])(this, glyphIndices, glyphCount, glyphMetrics, isSideways); }
static inline HRESULT                           IDWriteFontFace4_GetGlyphIndices                             (IDWriteFontFace4* this, const UINT32* codePoints, UINT32 codePointCount, UINT16* glyphIndices) { return ((HRESULT (WINAPI*)(IDWriteFontFace4*, const UINT32*, UINT32, UINT16*))this->v->tbl[11])(this, codePoints, codePointCount, glyphIndices); }
static inline HRESULT                           IDWriteFontFace4_TryGetFontTable                             (IDWriteFontFace4* this, UINT32 openTypeTableTag, const void** tableData, UINT32* tableSize, void** tableContext, BOOL* exists) { return ((HRESULT (WINAPI*)(IDWriteFontFace4*, UINT32, const void**, UINT32*, void**, BOOL*))this->v->tbl[12])(this, openTypeTableTag, tableData, tableSize, tableContext, exists); }
static inline void                              IDWriteFontFace4_ReleaseFontTable                            (IDWriteFontFace4* this, void* tableContext) { ((void (WINAPI*)(IDWriteFontFace4*, void*))this->v->tbl[13])(this, tableContext); }
static inline HRESULT                           IDWriteFontFace4_GetGlyphRunOutline                          (IDWriteFontFace4* this, FLOAT emSize, const UINT16* glyphIndices, const FLOAT* glyphAdvances, const DWRITE_GLYPH_OFFSET* glyphOffsets, UINT32 glyphCount, BOOL isSideways, BOOL isRightToLeft, ID2D1SimplifiedGeometrySink* geometrySink) { return ((HRESULT (WINAPI*)(IDWriteFontFace4*, FLOAT, const UINT16*, const FLOAT*, const DWRITE_GLYPH_OFFSET*, UINT32, BOOL, BOOL, ID2D1SimplifiedGeometrySink*))this->v->tbl[14])(this, emSize, glyphIndices, glyphAdvances, glyphOffsets, glyphCount, isSideways, isRightToLeft, geometrySink); }
static inline HRESULT                           IDWriteFontFace4_GetRecommendedRenderingMode                 (IDWriteFontFace4* this, FLOAT emSize, FLOAT pixelsPerDip, DWRITE_MEASURING_MODE measuringMode, IDWriteRenderingParams* renderingParams, DWRITE_RENDERING_MODE* renderingMode) { return ((HRESULT (WINAPI*)(IDWriteFontFace4*, FLOAT, FLOAT, DWRITE_MEASURING_MODE, IDWriteRenderingParams*, DWRITE_RENDERING_MODE*))this->v->tbl[15])(this, emSize, pixelsPerDip, measuringMode, renderingParams, renderingMode); }
static inline HRESULT                           IDWriteFontFace4_GetGdiCompatibleMetrics                     (IDWriteFontFace4* this, FLOAT emSize, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, DWRITE_FONT_METRICS* fontFaceMetrics) { return ((HRESULT (WINAPI*)(IDWriteFontFace4*, FLOAT, FLOAT, const DWRITE_MATRIX*, DWRITE_FONT_METRICS*))this->v->tbl[16])(this, emSize, pixelsPerDip, transform, fontFaceMetrics); }
static inline HRESULT                           IDWriteFontFace4_GetGdiCompatibleGlyphMetrics                (IDWriteFontFace4* this, FLOAT emSize, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, BOOL useGdiNatural, const UINT16* glyphIndices, UINT32 glyphCount, DWRITE_GLYPH_METRICS* glyphMetrics, BOOL isSideways) { return ((HRESULT (WINAPI*)(IDWriteFontFace4*, FLOAT, FLOAT, const DWRITE_MATRIX*, BOOL, const UINT16*, UINT32, DWRITE_GLYPH_METRICS*, BOOL))this->v->tbl[17])(this, emSize, pixelsPerDip, transform, useGdiNatural, glyphIndices, glyphCount, glyphMetrics, isSideways); }
static inline void                              IDWriteFontFace4_GetMetrics1                                 (IDWriteFontFace4* this, DWRITE_FONT_METRICS1* fontMetrics) { ((void (WINAPI*)(IDWriteFontFace4*, DWRITE_FONT_METRICS1*))this->v->tbl[18])(this, fontMetrics); }
static inline HRESULT                           IDWriteFontFace4_GetGdiCompatibleMetrics1                    (IDWriteFontFace4* this, FLOAT emSize, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, DWRITE_FONT_METRICS1* fontMetrics) { return ((HRESULT (WINAPI*)(IDWriteFontFace4*, FLOAT, FLOAT, const DWRITE_MATRIX*, DWRITE_FONT_METRICS1*))this->v->tbl[19])(this, emSize, pixelsPerDip, transform, fontMetrics); }
static inline void                              IDWriteFontFace4_GetCaretMetrics                             (IDWriteFontFace4* this, DWRITE_CARET_METRICS* caretMetrics) { ((void (WINAPI*)(IDWriteFontFace4*, DWRITE_CARET_METRICS*))this->v->tbl[20])(this, caretMetrics); }
static inline HRESULT                           IDWriteFontFace4_GetUnicodeRanges                            (IDWriteFontFace4* this, UINT32 maxRangeCount, DWRITE_UNICODE_RANGE* unicodeRanges, UINT32* actualRangeCount) { return ((HRESULT (WINAPI*)(IDWriteFontFace4*, UINT32, DWRITE_UNICODE_RANGE*, UINT32*))this->v->tbl[21])(this, maxRangeCount, unicodeRanges, actualRangeCount); }
static inline BOOL                              IDWriteFontFace4_IsMonospacedFont                            (IDWriteFontFace4* this) { return ((BOOL (WINAPI*)(IDWriteFontFace4*))this->v->tbl[22])(this); }
static inline HRESULT                           IDWriteFontFace4_GetDesignGlyphAdvances                      (IDWriteFontFace4* this, UINT32 glyphCount, const UINT16* glyphIndices, INT32* glyphAdvances, BOOL isSideways) { return ((HRESULT (WINAPI*)(IDWriteFontFace4*, UINT32, const UINT16*, INT32*, BOOL))this->v->tbl[23])(this, glyphCount, glyphIndices, glyphAdvances, isSideways); }
static inline HRESULT                           IDWriteFontFace4_GetGdiCompatibleGlyphAdvances               (IDWriteFontFace4* this, FLOAT emSize, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, BOOL useGdiNatural, BOOL isSideways, UINT32 glyphCount, const UINT16* glyphIndices, INT32* glyphAdvances) { return ((HRESULT (WINAPI*)(IDWriteFontFace4*, FLOAT, FLOAT, const DWRITE_MATRIX*, BOOL, BOOL, UINT32, const UINT16*, INT32*))this->v->tbl[24])(this, emSize, pixelsPerDip, transform, useGdiNatural, isSideways, glyphCount, glyphIndices, glyphAdvances); }
static inline HRESULT                           IDWriteFontFace4_GetKerningPairAdjustments                   (IDWriteFontFace4* this, UINT32 glyphCount, const UINT16* glyphIndices, INT32* glyphAdvanceAdjustments) { return ((HRESULT (WINAPI*)(IDWriteFontFace4*, UINT32, const UINT16*, INT32*))this->v->tbl[25])(this, glyphCount, glyphIndices, glyphAdvanceAdjustments); }
static inline BOOL                              IDWriteFontFace4_HasKerningPairs                             (IDWriteFontFace4* this) { return ((BOOL (WINAPI*)(IDWriteFontFace4*))this->v->tbl[26])(this); }
static inline HRESULT                           IDWriteFontFace4_GetRecommendedRenderingMode1                (IDWriteFontFace4* this, FLOAT fontEmSize, FLOAT dpiX, FLOAT dpiY, const DWRITE_MATRIX* transform, BOOL isSideways, DWRITE_OUTLINE_THRESHOLD outlineThreshold, DWRITE_MEASURING_MODE measuringMode, DWRITE_RENDERING_MODE* renderingMode) { return ((HRESULT (WINAPI*)(IDWriteFontFace4*, FLOAT, FLOAT, FLOAT, const DWRITE_MATRIX*, BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, DWRITE_RENDERING_MODE*))this->v->tbl[27])(this, fontEmSize, dpiX, dpiY, transform, isSideways, outlineThreshold, measuringMode, renderingMode); }
static inline HRESULT                           IDWriteFontFace4_GetVerticalGlyphVariants                    (IDWriteFontFace4* this, UINT32 glyphCount, const UINT16* nominalGlyphIndices, UINT16* verticalGlyphIndices) { return ((HRESULT (WINAPI*)(IDWriteFontFace4*, UINT32, const UINT16*, UINT16*))this->v->tbl[28])(this, glyphCount, nominalGlyphIndices, verticalGlyphIndices); }
static inline BOOL                              IDWriteFontFace4_HasVerticalGlyphVariants                    (IDWriteFontFace4* this) { return ((BOOL (WINAPI*)(IDWriteFontFace4*))this->v->tbl[29])(this); }
static inline BOOL                              IDWriteFontFace4_IsColorFont                                 (IDWriteFontFace4* this) { return ((BOOL (WINAPI*)(IDWriteFontFace4*))this->v->tbl[30])(this); }
static inline UINT32                            IDWriteFontFace4_GetColorPaletteCount                        (IDWriteFontFace4* this) { return ((UINT32 (WINAPI*)(IDWriteFontFace4*))this->v->tbl[31])(this); }
static inline UINT32                            IDWriteFontFace4_GetPaletteEntryCount                        (IDWriteFontFace4* this) { return ((UINT32 (WINAPI*)(IDWriteFontFace4*))this->v->tbl[32])(this); }
static inline HRESULT                           IDWriteFontFace4_GetPaletteEntries                           (IDWriteFontFace4* this, UINT32 colorPaletteIndex, UINT32 firstEntryIndex, UINT32 entryCount, DWRITE_COLOR_F* paletteEntries) { return ((HRESULT (WINAPI*)(IDWriteFontFace4*, UINT32, UINT32, UINT32, DWRITE_COLOR_F*))this->v->tbl[33])(this, colorPaletteIndex, firstEntryIndex, entryCount, paletteEntries); }
static inline HRESULT                           IDWriteFontFace4_GetRecommendedRenderingMode2                (IDWriteFontFace4* this, FLOAT fontEmSize, FLOAT dpiX, FLOAT dpiY, const DWRITE_MATRIX* transform, BOOL isSideways, DWRITE_OUTLINE_THRESHOLD outlineThreshold, DWRITE_MEASURING_MODE measuringMode, IDWriteRenderingParams* renderingParams, DWRITE_RENDERING_MODE* renderingMode, DWRITE_GRID_FIT_MODE* gridFitMode) { return ((HRESULT (WINAPI*)(IDWriteFontFace4*, FLOAT, FLOAT, FLOAT, const DWRITE_MATRIX*, BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, IDWriteRenderingParams*, DWRITE_RENDERING_MODE*, DWRITE_GRID_FIT_MODE*))this->v->tbl[34])(this, fontEmSize, dpiX, dpiY, transform, isSideways, outlineThreshold, measuringMode, renderingParams, renderingMode, gridFitMode); }
static inline HRESULT                           IDWriteFontFace4_GetFontFaceReference                        (IDWriteFontFace4* this, IDWriteFontFaceReference** fontFaceReference) { return ((HRESULT (WINAPI*)(IDWriteFontFace4*, IDWriteFontFaceReference**))this->v->tbl[35])(this, fontFaceReference); }
static inline void                              IDWriteFontFace4_GetPanose                                   (IDWriteFontFace4* this, DWRITE_PANOSE* panose) { ((void (WINAPI*)(IDWriteFontFace4*, DWRITE_PANOSE*))this->v->tbl[36])(this, panose); }
static inline DWRITE_FONT_WEIGHT                IDWriteFontFace4_GetWeight                                   (IDWriteFontFace4* this) { return ((DWRITE_FONT_WEIGHT (WINAPI*)(IDWriteFontFace4*))this->v->tbl[37])(this); }
static inline DWRITE_FONT_STRETCH               IDWriteFontFace4_GetStretch                                  (IDWriteFontFace4* this) { return ((DWRITE_FONT_STRETCH (WINAPI*)(IDWriteFontFace4*))this->v->tbl[38])(this); }
static inline DWRITE_FONT_STYLE                 IDWriteFontFace4_GetStyle                                    (IDWriteFontFace4* this) { return ((DWRITE_FONT_STYLE (WINAPI*)(IDWriteFontFace4*))this->v->tbl[39])(this); }
static inline HRESULT                           IDWriteFontFace4_GetFamilyNames                              (IDWriteFontFace4* this, IDWriteLocalizedStrings** names) { return ((HRESULT (WINAPI*)(IDWriteFontFace4*, IDWriteLocalizedStrings**))this->v->tbl[40])(this, names); }
static inline HRESULT                           IDWriteFontFace4_GetFaceNames                                (IDWriteFontFace4* this, IDWriteLocalizedStrings** names) { return ((HRESULT (WINAPI*)(IDWriteFontFace4*, IDWriteLocalizedStrings**))this->v->tbl[41])(this, names); }
static inline HRESULT                           IDWriteFontFace4_GetInformationalStrings                     (IDWriteFontFace4* this, DWRITE_INFORMATIONAL_STRING_ID informationalStringID, IDWriteLocalizedStrings** informationalStrings, BOOL* exists) { return ((HRESULT (WINAPI*)(IDWriteFontFace4*, DWRITE_INFORMATIONAL_STRING_ID, IDWriteLocalizedStrings**, BOOL*))this->v->tbl[42])(this, informationalStringID, informationalStrings, exists); }
static inline BOOL                              IDWriteFontFace4_HasCharacter                                (IDWriteFontFace4* this, UINT32 unicodeValue) { return ((BOOL (WINAPI*)(IDWriteFontFace4*, UINT32))this->v->tbl[43])(this, unicodeValue); }
static inline HRESULT                           IDWriteFontFace4_GetRecommendedRenderingMode3                (IDWriteFontFace4* this, FLOAT fontEmSize, FLOAT dpiX, FLOAT dpiY, const DWRITE_MATRIX* transform, BOOL isSideways, DWRITE_OUTLINE_THRESHOLD outlineThreshold, DWRITE_MEASURING_MODE measuringMode, IDWriteRenderingParams* renderingParams, DWRITE_RENDERING_MODE1* renderingMode, DWRITE_GRID_FIT_MODE* gridFitMode) { return ((HRESULT (WINAPI*)(IDWriteFontFace4*, FLOAT, FLOAT, FLOAT, const DWRITE_MATRIX*, BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, IDWriteRenderingParams*, DWRITE_RENDERING_MODE1*, DWRITE_GRID_FIT_MODE*))this->v->tbl[44])(this, fontEmSize, dpiX, dpiY, transform, isSideways, outlineThreshold, measuringMode, renderingParams, renderingMode, gridFitMode); }
static inline BOOL                              IDWriteFontFace4_IsCharacterLocal                            (IDWriteFontFace4* this, UINT32 unicodeValue) { return ((BOOL (WINAPI*)(IDWriteFontFace4*, UINT32))this->v->tbl[45])(this, unicodeValue); }
static inline BOOL                              IDWriteFontFace4_IsGlyphLocal                                (IDWriteFontFace4* this, UINT16 glyphId) { return ((BOOL (WINAPI*)(IDWriteFontFace4*, UINT16))this->v->tbl[46])(this, glyphId); }
static inline HRESULT                           IDWriteFontFace4_AreCharactersLocal                          (IDWriteFontFace4* this, const WCHAR* characters, UINT32 characterCount, BOOL enqueueIfNotLocal, BOOL* isLocal) { return ((HRESULT (WINAPI*)(IDWriteFontFace4*, const WCHAR*, UINT32, BOOL, BOOL*))this->v->tbl[47])(this, characters, characterCount, enqueueIfNotLocal, isLocal); }
static inline HRESULT                           IDWriteFontFace4_AreGlyphsLocal                              (IDWriteFontFace4* this, const UINT16* glyphIndices, UINT32 glyphCount, BOOL enqueueIfNotLocal, BOOL* isLocal) { return ((HRESULT (WINAPI*)(IDWriteFontFace4*, const UINT16*, UINT32, BOOL, BOOL*))this->v->tbl[48])(this, glyphIndices, glyphCount, enqueueIfNotLocal, isLocal); }
static inline HRESULT                           IDWriteFontFace4_GetGlyphImageFormats                        (IDWriteFontFace4* this, UINT16 glyphId, UINT32 pixelsPerEmFirst, UINT32 pixelsPerEmLast, enum DWRITE_GLYPH_IMAGE_FORMATS* glyphImageFormats) { return ((HRESULT (WINAPI*)(IDWriteFontFace4*, UINT16, UINT32, UINT32, enum DWRITE_GLYPH_IMAGE_FORMATS*))this->v->tbl[49])(this, glyphId, pixelsPerEmFirst, pixelsPerEmLast, glyphImageFormats); }
static inline enum DWRITE_GLYPH_IMAGE_FORMATS   IDWriteFontFace4_GetGlyphImageFormats1                       (IDWriteFontFace4* this) { return ((enum DWRITE_GLYPH_IMAGE_FORMATS (WINAPI*)(IDWriteFontFace4*))this->v->tbl[50])(this); }
static inline HRESULT                           IDWriteFontFace4_GetGlyphImageData                           (IDWriteFontFace4* this, UINT16 glyphId, UINT32 pixelsPerEm, enum DWRITE_GLYPH_IMAGE_FORMATS glyphImageFormat, DWRITE_GLYPH_IMAGE_DATA* glyphData, void** glyphDataContext) { return ((HRESULT (WINAPI*)(IDWriteFontFace4*, UINT16, UINT32, enum DWRITE_GLYPH_IMAGE_FORMATS, DWRITE_GLYPH_IMAGE_DATA*, void**))this->v->tbl[51])(this, glyphId, pixelsPerEm, glyphImageFormat, glyphData, glyphDataContext); }
static inline void                              IDWriteFontFace4_ReleaseGlyphImageData                       (IDWriteFontFace4* this, void* glyphDataContext) { ((void (WINAPI*)(IDWriteFontFace4*, void*))this->v->tbl[52])(this, glyphDataContext); }

static inline HRESULT                           IDWriteFontFace5_QueryInterface                              (IDWriteFontFace5* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFontFace5*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFontFace5_AddRef                                      (IDWriteFontFace5* this) { return ((UINT32 (WINAPI*)(IDWriteFontFace5*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFontFace5_Release                                     (IDWriteFontFace5* this) { return ((UINT32 (WINAPI*)(IDWriteFontFace5*))this->v->tbl[2])(this); }
static inline DWRITE_FONT_FACE_TYPE             IDWriteFontFace5_GetType                                     (IDWriteFontFace5* this) { return ((DWRITE_FONT_FACE_TYPE (WINAPI*)(IDWriteFontFace5*))this->v->tbl[3])(this); }
static inline HRESULT                           IDWriteFontFace5_GetFiles                                    (IDWriteFontFace5* this, UINT32* numberOfFiles, IDWriteFontFile** fontFiles) { return ((HRESULT (WINAPI*)(IDWriteFontFace5*, UINT32*, IDWriteFontFile**))this->v->tbl[4])(this, numberOfFiles, fontFiles); }
static inline UINT32                            IDWriteFontFace5_GetIndex                                    (IDWriteFontFace5* this) { return ((UINT32 (WINAPI*)(IDWriteFontFace5*))this->v->tbl[5])(this); }
static inline DWRITE_FONT_SIMULATIONS           IDWriteFontFace5_GetSimulations                              (IDWriteFontFace5* this) { return ((DWRITE_FONT_SIMULATIONS (WINAPI*)(IDWriteFontFace5*))this->v->tbl[6])(this); }
static inline BOOL                              IDWriteFontFace5_IsSymbolFont                                (IDWriteFontFace5* this) { return ((BOOL (WINAPI*)(IDWriteFontFace5*))this->v->tbl[7])(this); }
static inline void                              IDWriteFontFace5_GetMetrics                                  (IDWriteFontFace5* this, DWRITE_FONT_METRICS* fontFaceMetrics) { ((void (WINAPI*)(IDWriteFontFace5*, DWRITE_FONT_METRICS*))this->v->tbl[8])(this, fontFaceMetrics); }
static inline UINT16                            IDWriteFontFace5_GetGlyphCount                               (IDWriteFontFace5* this) { return ((UINT16 (WINAPI*)(IDWriteFontFace5*))this->v->tbl[9])(this); }
static inline HRESULT                           IDWriteFontFace5_GetDesignGlyphMetrics                       (IDWriteFontFace5* this, const UINT16* glyphIndices, UINT32 glyphCount, DWRITE_GLYPH_METRICS* glyphMetrics, BOOL isSideways) { return ((HRESULT (WINAPI*)(IDWriteFontFace5*, const UINT16*, UINT32, DWRITE_GLYPH_METRICS*, BOOL))this->v->tbl[10])(this, glyphIndices, glyphCount, glyphMetrics, isSideways); }
static inline HRESULT                           IDWriteFontFace5_GetGlyphIndices                             (IDWriteFontFace5* this, const UINT32* codePoints, UINT32 codePointCount, UINT16* glyphIndices) { return ((HRESULT (WINAPI*)(IDWriteFontFace5*, const UINT32*, UINT32, UINT16*))this->v->tbl[11])(this, codePoints, codePointCount, glyphIndices); }
static inline HRESULT                           IDWriteFontFace5_TryGetFontTable                             (IDWriteFontFace5* this, UINT32 openTypeTableTag, const void** tableData, UINT32* tableSize, void** tableContext, BOOL* exists) { return ((HRESULT (WINAPI*)(IDWriteFontFace5*, UINT32, const void**, UINT32*, void**, BOOL*))this->v->tbl[12])(this, openTypeTableTag, tableData, tableSize, tableContext, exists); }
static inline void                              IDWriteFontFace5_ReleaseFontTable                            (IDWriteFontFace5* this, void* tableContext) { ((void (WINAPI*)(IDWriteFontFace5*, void*))this->v->tbl[13])(this, tableContext); }
static inline HRESULT                           IDWriteFontFace5_GetGlyphRunOutline                          (IDWriteFontFace5* this, FLOAT emSize, const UINT16* glyphIndices, const FLOAT* glyphAdvances, const DWRITE_GLYPH_OFFSET* glyphOffsets, UINT32 glyphCount, BOOL isSideways, BOOL isRightToLeft, ID2D1SimplifiedGeometrySink* geometrySink) { return ((HRESULT (WINAPI*)(IDWriteFontFace5*, FLOAT, const UINT16*, const FLOAT*, const DWRITE_GLYPH_OFFSET*, UINT32, BOOL, BOOL, ID2D1SimplifiedGeometrySink*))this->v->tbl[14])(this, emSize, glyphIndices, glyphAdvances, glyphOffsets, glyphCount, isSideways, isRightToLeft, geometrySink); }
static inline HRESULT                           IDWriteFontFace5_GetRecommendedRenderingMode                 (IDWriteFontFace5* this, FLOAT emSize, FLOAT pixelsPerDip, DWRITE_MEASURING_MODE measuringMode, IDWriteRenderingParams* renderingParams, DWRITE_RENDERING_MODE* renderingMode) { return ((HRESULT (WINAPI*)(IDWriteFontFace5*, FLOAT, FLOAT, DWRITE_MEASURING_MODE, IDWriteRenderingParams*, DWRITE_RENDERING_MODE*))this->v->tbl[15])(this, emSize, pixelsPerDip, measuringMode, renderingParams, renderingMode); }
static inline HRESULT                           IDWriteFontFace5_GetGdiCompatibleMetrics                     (IDWriteFontFace5* this, FLOAT emSize, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, DWRITE_FONT_METRICS* fontFaceMetrics) { return ((HRESULT (WINAPI*)(IDWriteFontFace5*, FLOAT, FLOAT, const DWRITE_MATRIX*, DWRITE_FONT_METRICS*))this->v->tbl[16])(this, emSize, pixelsPerDip, transform, fontFaceMetrics); }
static inline HRESULT                           IDWriteFontFace5_GetGdiCompatibleGlyphMetrics                (IDWriteFontFace5* this, FLOAT emSize, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, BOOL useGdiNatural, const UINT16* glyphIndices, UINT32 glyphCount, DWRITE_GLYPH_METRICS* glyphMetrics, BOOL isSideways) { return ((HRESULT (WINAPI*)(IDWriteFontFace5*, FLOAT, FLOAT, const DWRITE_MATRIX*, BOOL, const UINT16*, UINT32, DWRITE_GLYPH_METRICS*, BOOL))this->v->tbl[17])(this, emSize, pixelsPerDip, transform, useGdiNatural, glyphIndices, glyphCount, glyphMetrics, isSideways); }
static inline void                              IDWriteFontFace5_GetMetrics1                                 (IDWriteFontFace5* this, DWRITE_FONT_METRICS1* fontMetrics) { ((void (WINAPI*)(IDWriteFontFace5*, DWRITE_FONT_METRICS1*))this->v->tbl[18])(this, fontMetrics); }
static inline HRESULT                           IDWriteFontFace5_GetGdiCompatibleMetrics1                    (IDWriteFontFace5* this, FLOAT emSize, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, DWRITE_FONT_METRICS1* fontMetrics) { return ((HRESULT (WINAPI*)(IDWriteFontFace5*, FLOAT, FLOAT, const DWRITE_MATRIX*, DWRITE_FONT_METRICS1*))this->v->tbl[19])(this, emSize, pixelsPerDip, transform, fontMetrics); }
static inline void                              IDWriteFontFace5_GetCaretMetrics                             (IDWriteFontFace5* this, DWRITE_CARET_METRICS* caretMetrics) { ((void (WINAPI*)(IDWriteFontFace5*, DWRITE_CARET_METRICS*))this->v->tbl[20])(this, caretMetrics); }
static inline HRESULT                           IDWriteFontFace5_GetUnicodeRanges                            (IDWriteFontFace5* this, UINT32 maxRangeCount, DWRITE_UNICODE_RANGE* unicodeRanges, UINT32* actualRangeCount) { return ((HRESULT (WINAPI*)(IDWriteFontFace5*, UINT32, DWRITE_UNICODE_RANGE*, UINT32*))this->v->tbl[21])(this, maxRangeCount, unicodeRanges, actualRangeCount); }
static inline BOOL                              IDWriteFontFace5_IsMonospacedFont                            (IDWriteFontFace5* this) { return ((BOOL (WINAPI*)(IDWriteFontFace5*))this->v->tbl[22])(this); }
static inline HRESULT                           IDWriteFontFace5_GetDesignGlyphAdvances                      (IDWriteFontFace5* this, UINT32 glyphCount, const UINT16* glyphIndices, INT32* glyphAdvances, BOOL isSideways) { return ((HRESULT (WINAPI*)(IDWriteFontFace5*, UINT32, const UINT16*, INT32*, BOOL))this->v->tbl[23])(this, glyphCount, glyphIndices, glyphAdvances, isSideways); }
static inline HRESULT                           IDWriteFontFace5_GetGdiCompatibleGlyphAdvances               (IDWriteFontFace5* this, FLOAT emSize, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, BOOL useGdiNatural, BOOL isSideways, UINT32 glyphCount, const UINT16* glyphIndices, INT32* glyphAdvances) { return ((HRESULT (WINAPI*)(IDWriteFontFace5*, FLOAT, FLOAT, const DWRITE_MATRIX*, BOOL, BOOL, UINT32, const UINT16*, INT32*))this->v->tbl[24])(this, emSize, pixelsPerDip, transform, useGdiNatural, isSideways, glyphCount, glyphIndices, glyphAdvances); }
static inline HRESULT                           IDWriteFontFace5_GetKerningPairAdjustments                   (IDWriteFontFace5* this, UINT32 glyphCount, const UINT16* glyphIndices, INT32* glyphAdvanceAdjustments) { return ((HRESULT (WINAPI*)(IDWriteFontFace5*, UINT32, const UINT16*, INT32*))this->v->tbl[25])(this, glyphCount, glyphIndices, glyphAdvanceAdjustments); }
static inline BOOL                              IDWriteFontFace5_HasKerningPairs                             (IDWriteFontFace5* this) { return ((BOOL (WINAPI*)(IDWriteFontFace5*))this->v->tbl[26])(this); }
static inline HRESULT                           IDWriteFontFace5_GetRecommendedRenderingMode1                (IDWriteFontFace5* this, FLOAT fontEmSize, FLOAT dpiX, FLOAT dpiY, const DWRITE_MATRIX* transform, BOOL isSideways, DWRITE_OUTLINE_THRESHOLD outlineThreshold, DWRITE_MEASURING_MODE measuringMode, DWRITE_RENDERING_MODE* renderingMode) { return ((HRESULT (WINAPI*)(IDWriteFontFace5*, FLOAT, FLOAT, FLOAT, const DWRITE_MATRIX*, BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, DWRITE_RENDERING_MODE*))this->v->tbl[27])(this, fontEmSize, dpiX, dpiY, transform, isSideways, outlineThreshold, measuringMode, renderingMode); }
static inline HRESULT                           IDWriteFontFace5_GetVerticalGlyphVariants                    (IDWriteFontFace5* this, UINT32 glyphCount, const UINT16* nominalGlyphIndices, UINT16* verticalGlyphIndices) { return ((HRESULT (WINAPI*)(IDWriteFontFace5*, UINT32, const UINT16*, UINT16*))this->v->tbl[28])(this, glyphCount, nominalGlyphIndices, verticalGlyphIndices); }
static inline BOOL                              IDWriteFontFace5_HasVerticalGlyphVariants                    (IDWriteFontFace5* this) { return ((BOOL (WINAPI*)(IDWriteFontFace5*))this->v->tbl[29])(this); }
static inline BOOL                              IDWriteFontFace5_IsColorFont                                 (IDWriteFontFace5* this) { return ((BOOL (WINAPI*)(IDWriteFontFace5*))this->v->tbl[30])(this); }
static inline UINT32                            IDWriteFontFace5_GetColorPaletteCount                        (IDWriteFontFace5* this) { return ((UINT32 (WINAPI*)(IDWriteFontFace5*))this->v->tbl[31])(this); }
static inline UINT32                            IDWriteFontFace5_GetPaletteEntryCount                        (IDWriteFontFace5* this) { return ((UINT32 (WINAPI*)(IDWriteFontFace5*))this->v->tbl[32])(this); }
static inline HRESULT                           IDWriteFontFace5_GetPaletteEntries                           (IDWriteFontFace5* this, UINT32 colorPaletteIndex, UINT32 firstEntryIndex, UINT32 entryCount, DWRITE_COLOR_F* paletteEntries) { return ((HRESULT (WINAPI*)(IDWriteFontFace5*, UINT32, UINT32, UINT32, DWRITE_COLOR_F*))this->v->tbl[33])(this, colorPaletteIndex, firstEntryIndex, entryCount, paletteEntries); }
static inline HRESULT                           IDWriteFontFace5_GetRecommendedRenderingMode2                (IDWriteFontFace5* this, FLOAT fontEmSize, FLOAT dpiX, FLOAT dpiY, const DWRITE_MATRIX* transform, BOOL isSideways, DWRITE_OUTLINE_THRESHOLD outlineThreshold, DWRITE_MEASURING_MODE measuringMode, IDWriteRenderingParams* renderingParams, DWRITE_RENDERING_MODE* renderingMode, DWRITE_GRID_FIT_MODE* gridFitMode) { return ((HRESULT (WINAPI*)(IDWriteFontFace5*, FLOAT, FLOAT, FLOAT, const DWRITE_MATRIX*, BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, IDWriteRenderingParams*, DWRITE_RENDERING_MODE*, DWRITE_GRID_FIT_MODE*))this->v->tbl[34])(this, fontEmSize, dpiX, dpiY, transform, isSideways, outlineThreshold, measuringMode, renderingParams, renderingMode, gridFitMode); }
static inline HRESULT                           IDWriteFontFace5_GetFontFaceReference                        (IDWriteFontFace5* this, IDWriteFontFaceReference** fontFaceReference) { return ((HRESULT (WINAPI*)(IDWriteFontFace5*, IDWriteFontFaceReference**))this->v->tbl[35])(this, fontFaceReference); }
static inline void                              IDWriteFontFace5_GetPanose                                   (IDWriteFontFace5* this, DWRITE_PANOSE* panose) { ((void (WINAPI*)(IDWriteFontFace5*, DWRITE_PANOSE*))this->v->tbl[36])(this, panose); }
static inline DWRITE_FONT_WEIGHT                IDWriteFontFace5_GetWeight                                   (IDWriteFontFace5* this) { return ((DWRITE_FONT_WEIGHT (WINAPI*)(IDWriteFontFace5*))this->v->tbl[37])(this); }
static inline DWRITE_FONT_STRETCH               IDWriteFontFace5_GetStretch                                  (IDWriteFontFace5* this) { return ((DWRITE_FONT_STRETCH (WINAPI*)(IDWriteFontFace5*))this->v->tbl[38])(this); }
static inline DWRITE_FONT_STYLE                 IDWriteFontFace5_GetStyle                                    (IDWriteFontFace5* this) { return ((DWRITE_FONT_STYLE (WINAPI*)(IDWriteFontFace5*))this->v->tbl[39])(this); }
static inline HRESULT                           IDWriteFontFace5_GetFamilyNames                              (IDWriteFontFace5* this, IDWriteLocalizedStrings** names) { return ((HRESULT (WINAPI*)(IDWriteFontFace5*, IDWriteLocalizedStrings**))this->v->tbl[40])(this, names); }
static inline HRESULT                           IDWriteFontFace5_GetFaceNames                                (IDWriteFontFace5* this, IDWriteLocalizedStrings** names) { return ((HRESULT (WINAPI*)(IDWriteFontFace5*, IDWriteLocalizedStrings**))this->v->tbl[41])(this, names); }
static inline HRESULT                           IDWriteFontFace5_GetInformationalStrings                     (IDWriteFontFace5* this, DWRITE_INFORMATIONAL_STRING_ID informationalStringID, IDWriteLocalizedStrings** informationalStrings, BOOL* exists) { return ((HRESULT (WINAPI*)(IDWriteFontFace5*, DWRITE_INFORMATIONAL_STRING_ID, IDWriteLocalizedStrings**, BOOL*))this->v->tbl[42])(this, informationalStringID, informationalStrings, exists); }
static inline BOOL                              IDWriteFontFace5_HasCharacter                                (IDWriteFontFace5* this, UINT32 unicodeValue) { return ((BOOL (WINAPI*)(IDWriteFontFace5*, UINT32))this->v->tbl[43])(this, unicodeValue); }
static inline HRESULT                           IDWriteFontFace5_GetRecommendedRenderingMode3                (IDWriteFontFace5* this, FLOAT fontEmSize, FLOAT dpiX, FLOAT dpiY, const DWRITE_MATRIX* transform, BOOL isSideways, DWRITE_OUTLINE_THRESHOLD outlineThreshold, DWRITE_MEASURING_MODE measuringMode, IDWriteRenderingParams* renderingParams, DWRITE_RENDERING_MODE1* renderingMode, DWRITE_GRID_FIT_MODE* gridFitMode) { return ((HRESULT (WINAPI*)(IDWriteFontFace5*, FLOAT, FLOAT, FLOAT, const DWRITE_MATRIX*, BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, IDWriteRenderingParams*, DWRITE_RENDERING_MODE1*, DWRITE_GRID_FIT_MODE*))this->v->tbl[44])(this, fontEmSize, dpiX, dpiY, transform, isSideways, outlineThreshold, measuringMode, renderingParams, renderingMode, gridFitMode); }
static inline BOOL                              IDWriteFontFace5_IsCharacterLocal                            (IDWriteFontFace5* this, UINT32 unicodeValue) { return ((BOOL (WINAPI*)(IDWriteFontFace5*, UINT32))this->v->tbl[45])(this, unicodeValue); }
static inline BOOL                              IDWriteFontFace5_IsGlyphLocal                                (IDWriteFontFace5* this, UINT16 glyphId) { return ((BOOL (WINAPI*)(IDWriteFontFace5*, UINT16))this->v->tbl[46])(this, glyphId); }
static inline HRESULT                           IDWriteFontFace5_AreCharactersLocal                          (IDWriteFontFace5* this, const WCHAR* characters, UINT32 characterCount, BOOL enqueueIfNotLocal, BOOL* isLocal) { return ((HRESULT (WINAPI*)(IDWriteFontFace5*, const WCHAR*, UINT32, BOOL, BOOL*))this->v->tbl[47])(this, characters, characterCount, enqueueIfNotLocal, isLocal); }
static inline HRESULT                           IDWriteFontFace5_AreGlyphsLocal                              (IDWriteFontFace5* this, const UINT16* glyphIndices, UINT32 glyphCount, BOOL enqueueIfNotLocal, BOOL* isLocal) { return ((HRESULT (WINAPI*)(IDWriteFontFace5*, const UINT16*, UINT32, BOOL, BOOL*))this->v->tbl[48])(this, glyphIndices, glyphCount, enqueueIfNotLocal, isLocal); }
static inline HRESULT                           IDWriteFontFace5_GetGlyphImageFormats                        (IDWriteFontFace5* this, UINT16 glyphId, UINT32 pixelsPerEmFirst, UINT32 pixelsPerEmLast, enum DWRITE_GLYPH_IMAGE_FORMATS* glyphImageFormats) { return ((HRESULT (WINAPI*)(IDWriteFontFace5*, UINT16, UINT32, UINT32, enum DWRITE_GLYPH_IMAGE_FORMATS*))this->v->tbl[49])(this, glyphId, pixelsPerEmFirst, pixelsPerEmLast, glyphImageFormats); }
static inline enum DWRITE_GLYPH_IMAGE_FORMATS   IDWriteFontFace5_GetGlyphImageFormats1                       (IDWriteFontFace5* this) { return ((enum DWRITE_GLYPH_IMAGE_FORMATS (WINAPI*)(IDWriteFontFace5*))this->v->tbl[50])(this); }
static inline HRESULT                           IDWriteFontFace5_GetGlyphImageData                           (IDWriteFontFace5* this, UINT16 glyphId, UINT32 pixelsPerEm, enum DWRITE_GLYPH_IMAGE_FORMATS glyphImageFormat, DWRITE_GLYPH_IMAGE_DATA* glyphData, void** glyphDataContext) { return ((HRESULT (WINAPI*)(IDWriteFontFace5*, UINT16, UINT32, enum DWRITE_GLYPH_IMAGE_FORMATS, DWRITE_GLYPH_IMAGE_DATA*, void**))this->v->tbl[51])(this, glyphId, pixelsPerEm, glyphImageFormat, glyphData, glyphDataContext); }
static inline void                              IDWriteFontFace5_ReleaseGlyphImageData                       (IDWriteFontFace5* this, void* glyphDataContext) { ((void (WINAPI*)(IDWriteFontFace5*, void*))this->v->tbl[52])(this, glyphDataContext); }
static inline UINT32                            IDWriteFontFace5_GetFontAxisValueCount                       (IDWriteFontFace5* this) { return ((UINT32 (WINAPI*)(IDWriteFontFace5*))this->v->tbl[53])(this); }
static inline HRESULT                           IDWriteFontFace5_GetFontAxisValues                           (IDWriteFontFace5* this, DWRITE_FONT_AXIS_VALUE* fontAxisValues, UINT32 fontAxisValueCount) { return ((HRESULT (WINAPI*)(IDWriteFontFace5*, DWRITE_FONT_AXIS_VALUE*, UINT32))this->v->tbl[54])(this, fontAxisValues, fontAxisValueCount); }
static inline BOOL                              IDWriteFontFace5_HasVariations                               (IDWriteFontFace5* this) { return ((BOOL (WINAPI*)(IDWriteFontFace5*))this->v->tbl[55])(this); }
static inline HRESULT                           IDWriteFontFace5_GetFontResource                             (IDWriteFontFace5* this, IDWriteFontResource** fontResource) { return ((HRESULT (WINAPI*)(IDWriteFontFace5*, IDWriteFontResource**))this->v->tbl[56])(this, fontResource); }
static inline BOOL                              IDWriteFontFace5_Equals                                      (IDWriteFontFace5* this, IDWriteFontFace* fontFace) { return ((BOOL (WINAPI*)(IDWriteFontFace5*, IDWriteFontFace*))this->v->tbl[57])(this, fontFace); }

static inline HRESULT                           IDWriteFontFace6_QueryInterface                              (IDWriteFontFace6* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFontFace6*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFontFace6_AddRef                                      (IDWriteFontFace6* this) { return ((UINT32 (WINAPI*)(IDWriteFontFace6*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFontFace6_Release                                     (IDWriteFontFace6* this) { return ((UINT32 (WINAPI*)(IDWriteFontFace6*))this->v->tbl[2])(this); }
static inline DWRITE_FONT_FACE_TYPE             IDWriteFontFace6_GetType                                     (IDWriteFontFace6* this) { return ((DWRITE_FONT_FACE_TYPE (WINAPI*)(IDWriteFontFace6*))this->v->tbl[3])(this); }
static inline HRESULT                           IDWriteFontFace6_GetFiles                                    (IDWriteFontFace6* this, UINT32* numberOfFiles, IDWriteFontFile** fontFiles) { return ((HRESULT (WINAPI*)(IDWriteFontFace6*, UINT32*, IDWriteFontFile**))this->v->tbl[4])(this, numberOfFiles, fontFiles); }
static inline UINT32                            IDWriteFontFace6_GetIndex                                    (IDWriteFontFace6* this) { return ((UINT32 (WINAPI*)(IDWriteFontFace6*))this->v->tbl[5])(this); }
static inline DWRITE_FONT_SIMULATIONS           IDWriteFontFace6_GetSimulations                              (IDWriteFontFace6* this) { return ((DWRITE_FONT_SIMULATIONS (WINAPI*)(IDWriteFontFace6*))this->v->tbl[6])(this); }
static inline BOOL                              IDWriteFontFace6_IsSymbolFont                                (IDWriteFontFace6* this) { return ((BOOL (WINAPI*)(IDWriteFontFace6*))this->v->tbl[7])(this); }
static inline void                              IDWriteFontFace6_GetMetrics                                  (IDWriteFontFace6* this, DWRITE_FONT_METRICS* fontFaceMetrics) { ((void (WINAPI*)(IDWriteFontFace6*, DWRITE_FONT_METRICS*))this->v->tbl[8])(this, fontFaceMetrics); }
static inline UINT16                            IDWriteFontFace6_GetGlyphCount                               (IDWriteFontFace6* this) { return ((UINT16 (WINAPI*)(IDWriteFontFace6*))this->v->tbl[9])(this); }
static inline HRESULT                           IDWriteFontFace6_GetDesignGlyphMetrics                       (IDWriteFontFace6* this, const UINT16* glyphIndices, UINT32 glyphCount, DWRITE_GLYPH_METRICS* glyphMetrics, BOOL isSideways) { return ((HRESULT (WINAPI*)(IDWriteFontFace6*, const UINT16*, UINT32, DWRITE_GLYPH_METRICS*, BOOL))this->v->tbl[10])(this, glyphIndices, glyphCount, glyphMetrics, isSideways); }
static inline HRESULT                           IDWriteFontFace6_GetGlyphIndices                             (IDWriteFontFace6* this, const UINT32* codePoints, UINT32 codePointCount, UINT16* glyphIndices) { return ((HRESULT (WINAPI*)(IDWriteFontFace6*, const UINT32*, UINT32, UINT16*))this->v->tbl[11])(this, codePoints, codePointCount, glyphIndices); }
static inline HRESULT                           IDWriteFontFace6_TryGetFontTable                             (IDWriteFontFace6* this, UINT32 openTypeTableTag, const void** tableData, UINT32* tableSize, void** tableContext, BOOL* exists) { return ((HRESULT (WINAPI*)(IDWriteFontFace6*, UINT32, const void**, UINT32*, void**, BOOL*))this->v->tbl[12])(this, openTypeTableTag, tableData, tableSize, tableContext, exists); }
static inline void                              IDWriteFontFace6_ReleaseFontTable                            (IDWriteFontFace6* this, void* tableContext) { ((void (WINAPI*)(IDWriteFontFace6*, void*))this->v->tbl[13])(this, tableContext); }
static inline HRESULT                           IDWriteFontFace6_GetGlyphRunOutline                          (IDWriteFontFace6* this, FLOAT emSize, const UINT16* glyphIndices, const FLOAT* glyphAdvances, const DWRITE_GLYPH_OFFSET* glyphOffsets, UINT32 glyphCount, BOOL isSideways, BOOL isRightToLeft, ID2D1SimplifiedGeometrySink* geometrySink) { return ((HRESULT (WINAPI*)(IDWriteFontFace6*, FLOAT, const UINT16*, const FLOAT*, const DWRITE_GLYPH_OFFSET*, UINT32, BOOL, BOOL, ID2D1SimplifiedGeometrySink*))this->v->tbl[14])(this, emSize, glyphIndices, glyphAdvances, glyphOffsets, glyphCount, isSideways, isRightToLeft, geometrySink); }
static inline HRESULT                           IDWriteFontFace6_GetRecommendedRenderingMode                 (IDWriteFontFace6* this, FLOAT emSize, FLOAT pixelsPerDip, DWRITE_MEASURING_MODE measuringMode, IDWriteRenderingParams* renderingParams, DWRITE_RENDERING_MODE* renderingMode) { return ((HRESULT (WINAPI*)(IDWriteFontFace6*, FLOAT, FLOAT, DWRITE_MEASURING_MODE, IDWriteRenderingParams*, DWRITE_RENDERING_MODE*))this->v->tbl[15])(this, emSize, pixelsPerDip, measuringMode, renderingParams, renderingMode); }
static inline HRESULT                           IDWriteFontFace6_GetGdiCompatibleMetrics                     (IDWriteFontFace6* this, FLOAT emSize, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, DWRITE_FONT_METRICS* fontFaceMetrics) { return ((HRESULT (WINAPI*)(IDWriteFontFace6*, FLOAT, FLOAT, const DWRITE_MATRIX*, DWRITE_FONT_METRICS*))this->v->tbl[16])(this, emSize, pixelsPerDip, transform, fontFaceMetrics); }
static inline HRESULT                           IDWriteFontFace6_GetGdiCompatibleGlyphMetrics                (IDWriteFontFace6* this, FLOAT emSize, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, BOOL useGdiNatural, const UINT16* glyphIndices, UINT32 glyphCount, DWRITE_GLYPH_METRICS* glyphMetrics, BOOL isSideways) { return ((HRESULT (WINAPI*)(IDWriteFontFace6*, FLOAT, FLOAT, const DWRITE_MATRIX*, BOOL, const UINT16*, UINT32, DWRITE_GLYPH_METRICS*, BOOL))this->v->tbl[17])(this, emSize, pixelsPerDip, transform, useGdiNatural, glyphIndices, glyphCount, glyphMetrics, isSideways); }
static inline void                              IDWriteFontFace6_GetMetrics1                                 (IDWriteFontFace6* this, DWRITE_FONT_METRICS1* fontMetrics) { ((void (WINAPI*)(IDWriteFontFace6*, DWRITE_FONT_METRICS1*))this->v->tbl[18])(this, fontMetrics); }
static inline HRESULT                           IDWriteFontFace6_GetGdiCompatibleMetrics1                    (IDWriteFontFace6* this, FLOAT emSize, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, DWRITE_FONT_METRICS1* fontMetrics) { return ((HRESULT (WINAPI*)(IDWriteFontFace6*, FLOAT, FLOAT, const DWRITE_MATRIX*, DWRITE_FONT_METRICS1*))this->v->tbl[19])(this, emSize, pixelsPerDip, transform, fontMetrics); }
static inline void                              IDWriteFontFace6_GetCaretMetrics                             (IDWriteFontFace6* this, DWRITE_CARET_METRICS* caretMetrics) { ((void (WINAPI*)(IDWriteFontFace6*, DWRITE_CARET_METRICS*))this->v->tbl[20])(this, caretMetrics); }
static inline HRESULT                           IDWriteFontFace6_GetUnicodeRanges                            (IDWriteFontFace6* this, UINT32 maxRangeCount, DWRITE_UNICODE_RANGE* unicodeRanges, UINT32* actualRangeCount) { return ((HRESULT (WINAPI*)(IDWriteFontFace6*, UINT32, DWRITE_UNICODE_RANGE*, UINT32*))this->v->tbl[21])(this, maxRangeCount, unicodeRanges, actualRangeCount); }
static inline BOOL                              IDWriteFontFace6_IsMonospacedFont                            (IDWriteFontFace6* this) { return ((BOOL (WINAPI*)(IDWriteFontFace6*))this->v->tbl[22])(this); }
static inline HRESULT                           IDWriteFontFace6_GetDesignGlyphAdvances                      (IDWriteFontFace6* this, UINT32 glyphCount, const UINT16* glyphIndices, INT32* glyphAdvances, BOOL isSideways) { return ((HRESULT (WINAPI*)(IDWriteFontFace6*, UINT32, const UINT16*, INT32*, BOOL))this->v->tbl[23])(this, glyphCount, glyphIndices, glyphAdvances, isSideways); }
static inline HRESULT                           IDWriteFontFace6_GetGdiCompatibleGlyphAdvances               (IDWriteFontFace6* this, FLOAT emSize, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, BOOL useGdiNatural, BOOL isSideways, UINT32 glyphCount, const UINT16* glyphIndices, INT32* glyphAdvances) { return ((HRESULT (WINAPI*)(IDWriteFontFace6*, FLOAT, FLOAT, const DWRITE_MATRIX*, BOOL, BOOL, UINT32, const UINT16*, INT32*))this->v->tbl[24])(this, emSize, pixelsPerDip, transform, useGdiNatural, isSideways, glyphCount, glyphIndices, glyphAdvances); }
static inline HRESULT                           IDWriteFontFace6_GetKerningPairAdjustments                   (IDWriteFontFace6* this, UINT32 glyphCount, const UINT16* glyphIndices, INT32* glyphAdvanceAdjustments) { return ((HRESULT (WINAPI*)(IDWriteFontFace6*, UINT32, const UINT16*, INT32*))this->v->tbl[25])(this, glyphCount, glyphIndices, glyphAdvanceAdjustments); }
static inline BOOL                              IDWriteFontFace6_HasKerningPairs                             (IDWriteFontFace6* this) { return ((BOOL (WINAPI*)(IDWriteFontFace6*))this->v->tbl[26])(this); }
static inline HRESULT                           IDWriteFontFace6_GetRecommendedRenderingMode1                (IDWriteFontFace6* this, FLOAT fontEmSize, FLOAT dpiX, FLOAT dpiY, const DWRITE_MATRIX* transform, BOOL isSideways, DWRITE_OUTLINE_THRESHOLD outlineThreshold, DWRITE_MEASURING_MODE measuringMode, DWRITE_RENDERING_MODE* renderingMode) { return ((HRESULT (WINAPI*)(IDWriteFontFace6*, FLOAT, FLOAT, FLOAT, const DWRITE_MATRIX*, BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, DWRITE_RENDERING_MODE*))this->v->tbl[27])(this, fontEmSize, dpiX, dpiY, transform, isSideways, outlineThreshold, measuringMode, renderingMode); }
static inline HRESULT                           IDWriteFontFace6_GetVerticalGlyphVariants                    (IDWriteFontFace6* this, UINT32 glyphCount, const UINT16* nominalGlyphIndices, UINT16* verticalGlyphIndices) { return ((HRESULT (WINAPI*)(IDWriteFontFace6*, UINT32, const UINT16*, UINT16*))this->v->tbl[28])(this, glyphCount, nominalGlyphIndices, verticalGlyphIndices); }
static inline BOOL                              IDWriteFontFace6_HasVerticalGlyphVariants                    (IDWriteFontFace6* this) { return ((BOOL (WINAPI*)(IDWriteFontFace6*))this->v->tbl[29])(this); }
static inline BOOL                              IDWriteFontFace6_IsColorFont                                 (IDWriteFontFace6* this) { return ((BOOL (WINAPI*)(IDWriteFontFace6*))this->v->tbl[30])(this); }
static inline UINT32                            IDWriteFontFace6_GetColorPaletteCount                        (IDWriteFontFace6* this) { return ((UINT32 (WINAPI*)(IDWriteFontFace6*))this->v->tbl[31])(this); }
static inline UINT32                            IDWriteFontFace6_GetPaletteEntryCount                        (IDWriteFontFace6* this) { return ((UINT32 (WINAPI*)(IDWriteFontFace6*))this->v->tbl[32])(this); }
static inline HRESULT                           IDWriteFontFace6_GetPaletteEntries                           (IDWriteFontFace6* this, UINT32 colorPaletteIndex, UINT32 firstEntryIndex, UINT32 entryCount, DWRITE_COLOR_F* paletteEntries) { return ((HRESULT (WINAPI*)(IDWriteFontFace6*, UINT32, UINT32, UINT32, DWRITE_COLOR_F*))this->v->tbl[33])(this, colorPaletteIndex, firstEntryIndex, entryCount, paletteEntries); }
static inline HRESULT                           IDWriteFontFace6_GetRecommendedRenderingMode2                (IDWriteFontFace6* this, FLOAT fontEmSize, FLOAT dpiX, FLOAT dpiY, const DWRITE_MATRIX* transform, BOOL isSideways, DWRITE_OUTLINE_THRESHOLD outlineThreshold, DWRITE_MEASURING_MODE measuringMode, IDWriteRenderingParams* renderingParams, DWRITE_RENDERING_MODE* renderingMode, DWRITE_GRID_FIT_MODE* gridFitMode) { return ((HRESULT (WINAPI*)(IDWriteFontFace6*, FLOAT, FLOAT, FLOAT, const DWRITE_MATRIX*, BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, IDWriteRenderingParams*, DWRITE_RENDERING_MODE*, DWRITE_GRID_FIT_MODE*))this->v->tbl[34])(this, fontEmSize, dpiX, dpiY, transform, isSideways, outlineThreshold, measuringMode, renderingParams, renderingMode, gridFitMode); }
static inline HRESULT                           IDWriteFontFace6_GetFontFaceReference                        (IDWriteFontFace6* this, IDWriteFontFaceReference** fontFaceReference) { return ((HRESULT (WINAPI*)(IDWriteFontFace6*, IDWriteFontFaceReference**))this->v->tbl[35])(this, fontFaceReference); }
static inline void                              IDWriteFontFace6_GetPanose                                   (IDWriteFontFace6* this, DWRITE_PANOSE* panose) { ((void (WINAPI*)(IDWriteFontFace6*, DWRITE_PANOSE*))this->v->tbl[36])(this, panose); }
static inline DWRITE_FONT_WEIGHT                IDWriteFontFace6_GetWeight                                   (IDWriteFontFace6* this) { return ((DWRITE_FONT_WEIGHT (WINAPI*)(IDWriteFontFace6*))this->v->tbl[37])(this); }
static inline DWRITE_FONT_STRETCH               IDWriteFontFace6_GetStretch                                  (IDWriteFontFace6* this) { return ((DWRITE_FONT_STRETCH (WINAPI*)(IDWriteFontFace6*))this->v->tbl[38])(this); }
static inline DWRITE_FONT_STYLE                 IDWriteFontFace6_GetStyle                                    (IDWriteFontFace6* this) { return ((DWRITE_FONT_STYLE (WINAPI*)(IDWriteFontFace6*))this->v->tbl[39])(this); }
static inline HRESULT                           IDWriteFontFace6_GetFamilyNames                              (IDWriteFontFace6* this, IDWriteLocalizedStrings** names) { return ((HRESULT (WINAPI*)(IDWriteFontFace6*, IDWriteLocalizedStrings**))this->v->tbl[40])(this, names); }
static inline HRESULT                           IDWriteFontFace6_GetFaceNames                                (IDWriteFontFace6* this, IDWriteLocalizedStrings** names) { return ((HRESULT (WINAPI*)(IDWriteFontFace6*, IDWriteLocalizedStrings**))this->v->tbl[41])(this, names); }
static inline HRESULT                           IDWriteFontFace6_GetInformationalStrings                     (IDWriteFontFace6* this, DWRITE_INFORMATIONAL_STRING_ID informationalStringID, IDWriteLocalizedStrings** informationalStrings, BOOL* exists) { return ((HRESULT (WINAPI*)(IDWriteFontFace6*, DWRITE_INFORMATIONAL_STRING_ID, IDWriteLocalizedStrings**, BOOL*))this->v->tbl[42])(this, informationalStringID, informationalStrings, exists); }
static inline BOOL                              IDWriteFontFace6_HasCharacter                                (IDWriteFontFace6* this, UINT32 unicodeValue) { return ((BOOL (WINAPI*)(IDWriteFontFace6*, UINT32))this->v->tbl[43])(this, unicodeValue); }
static inline HRESULT                           IDWriteFontFace6_GetRecommendedRenderingMode3                (IDWriteFontFace6* this, FLOAT fontEmSize, FLOAT dpiX, FLOAT dpiY, const DWRITE_MATRIX* transform, BOOL isSideways, DWRITE_OUTLINE_THRESHOLD outlineThreshold, DWRITE_MEASURING_MODE measuringMode, IDWriteRenderingParams* renderingParams, DWRITE_RENDERING_MODE1* renderingMode, DWRITE_GRID_FIT_MODE* gridFitMode) { return ((HRESULT (WINAPI*)(IDWriteFontFace6*, FLOAT, FLOAT, FLOAT, const DWRITE_MATRIX*, BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, IDWriteRenderingParams*, DWRITE_RENDERING_MODE1*, DWRITE_GRID_FIT_MODE*))this->v->tbl[44])(this, fontEmSize, dpiX, dpiY, transform, isSideways, outlineThreshold, measuringMode, renderingParams, renderingMode, gridFitMode); }
static inline BOOL                              IDWriteFontFace6_IsCharacterLocal                            (IDWriteFontFace6* this, UINT32 unicodeValue) { return ((BOOL (WINAPI*)(IDWriteFontFace6*, UINT32))this->v->tbl[45])(this, unicodeValue); }
static inline BOOL                              IDWriteFontFace6_IsGlyphLocal                                (IDWriteFontFace6* this, UINT16 glyphId) { return ((BOOL (WINAPI*)(IDWriteFontFace6*, UINT16))this->v->tbl[46])(this, glyphId); }
static inline HRESULT                           IDWriteFontFace6_AreCharactersLocal                          (IDWriteFontFace6* this, const WCHAR* characters, UINT32 characterCount, BOOL enqueueIfNotLocal, BOOL* isLocal) { return ((HRESULT (WINAPI*)(IDWriteFontFace6*, const WCHAR*, UINT32, BOOL, BOOL*))this->v->tbl[47])(this, characters, characterCount, enqueueIfNotLocal, isLocal); }
static inline HRESULT                           IDWriteFontFace6_AreGlyphsLocal                              (IDWriteFontFace6* this, const UINT16* glyphIndices, UINT32 glyphCount, BOOL enqueueIfNotLocal, BOOL* isLocal) { return ((HRESULT (WINAPI*)(IDWriteFontFace6*, const UINT16*, UINT32, BOOL, BOOL*))this->v->tbl[48])(this, glyphIndices, glyphCount, enqueueIfNotLocal, isLocal); }
static inline HRESULT                           IDWriteFontFace6_GetGlyphImageFormats                        (IDWriteFontFace6* this, UINT16 glyphId, UINT32 pixelsPerEmFirst, UINT32 pixelsPerEmLast, enum DWRITE_GLYPH_IMAGE_FORMATS* glyphImageFormats) { return ((HRESULT (WINAPI*)(IDWriteFontFace6*, UINT16, UINT32, UINT32, enum DWRITE_GLYPH_IMAGE_FORMATS*))this->v->tbl[49])(this, glyphId, pixelsPerEmFirst, pixelsPerEmLast, glyphImageFormats); }
static inline enum DWRITE_GLYPH_IMAGE_FORMATS   IDWriteFontFace6_GetGlyphImageFormats1                       (IDWriteFontFace6* this) { return ((enum DWRITE_GLYPH_IMAGE_FORMATS (WINAPI*)(IDWriteFontFace6*))this->v->tbl[50])(this); }
static inline HRESULT                           IDWriteFontFace6_GetGlyphImageData                           (IDWriteFontFace6* this, UINT16 glyphId, UINT32 pixelsPerEm, enum DWRITE_GLYPH_IMAGE_FORMATS glyphImageFormat, DWRITE_GLYPH_IMAGE_DATA* glyphData, void** glyphDataContext) { return ((HRESULT (WINAPI*)(IDWriteFontFace6*, UINT16, UINT32, enum DWRITE_GLYPH_IMAGE_FORMATS, DWRITE_GLYPH_IMAGE_DATA*, void**))this->v->tbl[51])(this, glyphId, pixelsPerEm, glyphImageFormat, glyphData, glyphDataContext); }
static inline void                              IDWriteFontFace6_ReleaseGlyphImageData                       (IDWriteFontFace6* this, void* glyphDataContext) { ((void (WINAPI*)(IDWriteFontFace6*, void*))this->v->tbl[52])(this, glyphDataContext); }
static inline UINT32                            IDWriteFontFace6_GetFontAxisValueCount                       (IDWriteFontFace6* this) { return ((UINT32 (WINAPI*)(IDWriteFontFace6*))this->v->tbl[53])(this); }
static inline HRESULT                           IDWriteFontFace6_GetFontAxisValues                           (IDWriteFontFace6* this, DWRITE_FONT_AXIS_VALUE* fontAxisValues, UINT32 fontAxisValueCount) { return ((HRESULT (WINAPI*)(IDWriteFontFace6*, DWRITE_FONT_AXIS_VALUE*, UINT32))this->v->tbl[54])(this, fontAxisValues, fontAxisValueCount); }
static inline BOOL                              IDWriteFontFace6_HasVariations                               (IDWriteFontFace6* this) { return ((BOOL (WINAPI*)(IDWriteFontFace6*))this->v->tbl[55])(this); }
static inline HRESULT                           IDWriteFontFace6_GetFontResource                             (IDWriteFontFace6* this, IDWriteFontResource** fontResource) { return ((HRESULT (WINAPI*)(IDWriteFontFace6*, IDWriteFontResource**))this->v->tbl[56])(this, fontResource); }
static inline BOOL                              IDWriteFontFace6_Equals                                      (IDWriteFontFace6* this, IDWriteFontFace* fontFace) { return ((BOOL (WINAPI*)(IDWriteFontFace6*, IDWriteFontFace*))this->v->tbl[57])(this, fontFace); }
static inline HRESULT                           IDWriteFontFace6_GetFamilyNames1                             (IDWriteFontFace6* this, DWRITE_FONT_FAMILY_MODEL fontFamilyModel, IDWriteLocalizedStrings** names) { return ((HRESULT (WINAPI*)(IDWriteFontFace6*, DWRITE_FONT_FAMILY_MODEL, IDWriteLocalizedStrings**))this->v->tbl[58])(this, fontFamilyModel, names); }
static inline HRESULT                           IDWriteFontFace6_GetFaceNames1                               (IDWriteFontFace6* this, DWRITE_FONT_FAMILY_MODEL fontFamilyModel, IDWriteLocalizedStrings** names) { return ((HRESULT (WINAPI*)(IDWriteFontFace6*, DWRITE_FONT_FAMILY_MODEL, IDWriteLocalizedStrings**))this->v->tbl[59])(this, fontFamilyModel, names); }

static inline HRESULT                           IDWriteFontFaceReference_QueryInterface                      (IDWriteFontFaceReference* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFontFaceReference*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFontFaceReference_AddRef                              (IDWriteFontFaceReference* this) { return ((UINT32 (WINAPI*)(IDWriteFontFaceReference*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFontFaceReference_Release                             (IDWriteFontFaceReference* this) { return ((UINT32 (WINAPI*)(IDWriteFontFaceReference*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteFontFaceReference_CreateFontFace                      (IDWriteFontFaceReference* this, IDWriteFontFace3** fontFace) { return ((HRESULT (WINAPI*)(IDWriteFontFaceReference*, IDWriteFontFace3**))this->v->tbl[3])(this, fontFace); }
static inline HRESULT                           IDWriteFontFaceReference_CreateFontFaceWithSimulations       (IDWriteFontFaceReference* this, DWRITE_FONT_SIMULATIONS fontFaceSimulationFlags, IDWriteFontFace3** fontFace) { return ((HRESULT (WINAPI*)(IDWriteFontFaceReference*, DWRITE_FONT_SIMULATIONS, IDWriteFontFace3**))this->v->tbl[4])(this, fontFaceSimulationFlags, fontFace); }
static inline BOOL                              IDWriteFontFaceReference_Equals                              (IDWriteFontFaceReference* this, IDWriteFontFaceReference* fontFaceReference) { return ((BOOL (WINAPI*)(IDWriteFontFaceReference*, IDWriteFontFaceReference*))this->v->tbl[5])(this, fontFaceReference); }
static inline UINT32                            IDWriteFontFaceReference_GetFontFaceIndex                    (IDWriteFontFaceReference* this) { return ((UINT32 (WINAPI*)(IDWriteFontFaceReference*))this->v->tbl[6])(this); }
static inline DWRITE_FONT_SIMULATIONS           IDWriteFontFaceReference_GetSimulations                      (IDWriteFontFaceReference* this) { return ((DWRITE_FONT_SIMULATIONS (WINAPI*)(IDWriteFontFaceReference*))this->v->tbl[7])(this); }
static inline HRESULT                           IDWriteFontFaceReference_GetFontFile                         (IDWriteFontFaceReference* this, IDWriteFontFile** fontFile) { return ((HRESULT (WINAPI*)(IDWriteFontFaceReference*, IDWriteFontFile**))this->v->tbl[8])(this, fontFile); }
static inline UINT64                            IDWriteFontFaceReference_GetLocalFileSize                    (IDWriteFontFaceReference* this) { return ((UINT64 (WINAPI*)(IDWriteFontFaceReference*))this->v->tbl[9])(this); }
static inline UINT64                            IDWriteFontFaceReference_GetFileSize                         (IDWriteFontFaceReference* this) { return ((UINT64 (WINAPI*)(IDWriteFontFaceReference*))this->v->tbl[10])(this); }
static inline HRESULT                           IDWriteFontFaceReference_GetFileTime                         (IDWriteFontFaceReference* this, FILETIME* lastWriteTime) { return ((HRESULT (WINAPI*)(IDWriteFontFaceReference*, FILETIME*))this->v->tbl[11])(this, lastWriteTime); }
static inline DWRITE_LOCALITY                   IDWriteFontFaceReference_GetLocality                         (IDWriteFontFaceReference* this) { return ((DWRITE_LOCALITY (WINAPI*)(IDWriteFontFaceReference*))this->v->tbl[12])(this); }
static inline HRESULT                           IDWriteFontFaceReference_EnqueueFontDownloadRequest          (IDWriteFontFaceReference* this) { return ((HRESULT (WINAPI*)(IDWriteFontFaceReference*))this->v->tbl[13])(this); }
static inline HRESULT                           IDWriteFontFaceReference_EnqueueCharacterDownloadRequest     (IDWriteFontFaceReference* this, const WCHAR* characters, UINT32 characterCount) { return ((HRESULT (WINAPI*)(IDWriteFontFaceReference*, const WCHAR*, UINT32))this->v->tbl[14])(this, characters, characterCount); }
static inline HRESULT                           IDWriteFontFaceReference_EnqueueGlyphDownloadRequest         (IDWriteFontFaceReference* this, const UINT16* glyphIndices, UINT32 glyphCount) { return ((HRESULT (WINAPI*)(IDWriteFontFaceReference*, const UINT16*, UINT32))this->v->tbl[15])(this, glyphIndices, glyphCount); }
static inline HRESULT                           IDWriteFontFaceReference_EnqueueFileFragmentDownloadRequest  (IDWriteFontFaceReference* this, UINT64 fileOffset, UINT64 fragmentSize) { return ((HRESULT (WINAPI*)(IDWriteFontFaceReference*, UINT64, UINT64))this->v->tbl[16])(this, fileOffset, fragmentSize); }

static inline HRESULT                           IDWriteFontFaceReference1_QueryInterface                     (IDWriteFontFaceReference1* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFontFaceReference1*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFontFaceReference1_AddRef                             (IDWriteFontFaceReference1* this) { return ((UINT32 (WINAPI*)(IDWriteFontFaceReference1*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFontFaceReference1_Release                            (IDWriteFontFaceReference1* this) { return ((UINT32 (WINAPI*)(IDWriteFontFaceReference1*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteFontFaceReference1_CreateFontFace                     (IDWriteFontFaceReference1* this, IDWriteFontFace3** fontFace) { return ((HRESULT (WINAPI*)(IDWriteFontFaceReference1*, IDWriteFontFace3**))this->v->tbl[3])(this, fontFace); }
static inline HRESULT                           IDWriteFontFaceReference1_CreateFontFaceWithSimulations      (IDWriteFontFaceReference1* this, DWRITE_FONT_SIMULATIONS fontFaceSimulationFlags, IDWriteFontFace3** fontFace) { return ((HRESULT (WINAPI*)(IDWriteFontFaceReference1*, DWRITE_FONT_SIMULATIONS, IDWriteFontFace3**))this->v->tbl[4])(this, fontFaceSimulationFlags, fontFace); }
static inline BOOL                              IDWriteFontFaceReference1_Equals                             (IDWriteFontFaceReference1* this, IDWriteFontFaceReference* fontFaceReference) { return ((BOOL (WINAPI*)(IDWriteFontFaceReference1*, IDWriteFontFaceReference*))this->v->tbl[5])(this, fontFaceReference); }
static inline UINT32                            IDWriteFontFaceReference1_GetFontFaceIndex                   (IDWriteFontFaceReference1* this) { return ((UINT32 (WINAPI*)(IDWriteFontFaceReference1*))this->v->tbl[6])(this); }
static inline DWRITE_FONT_SIMULATIONS           IDWriteFontFaceReference1_GetSimulations                     (IDWriteFontFaceReference1* this) { return ((DWRITE_FONT_SIMULATIONS (WINAPI*)(IDWriteFontFaceReference1*))this->v->tbl[7])(this); }
static inline HRESULT                           IDWriteFontFaceReference1_GetFontFile                        (IDWriteFontFaceReference1* this, IDWriteFontFile** fontFile) { return ((HRESULT (WINAPI*)(IDWriteFontFaceReference1*, IDWriteFontFile**))this->v->tbl[8])(this, fontFile); }
static inline UINT64                            IDWriteFontFaceReference1_GetLocalFileSize                   (IDWriteFontFaceReference1* this) { return ((UINT64 (WINAPI*)(IDWriteFontFaceReference1*))this->v->tbl[9])(this); }
static inline UINT64                            IDWriteFontFaceReference1_GetFileSize                        (IDWriteFontFaceReference1* this) { return ((UINT64 (WINAPI*)(IDWriteFontFaceReference1*))this->v->tbl[10])(this); }
static inline HRESULT                           IDWriteFontFaceReference1_GetFileTime                        (IDWriteFontFaceReference1* this, FILETIME* lastWriteTime) { return ((HRESULT (WINAPI*)(IDWriteFontFaceReference1*, FILETIME*))this->v->tbl[11])(this, lastWriteTime); }
static inline DWRITE_LOCALITY                   IDWriteFontFaceReference1_GetLocality                        (IDWriteFontFaceReference1* this) { return ((DWRITE_LOCALITY (WINAPI*)(IDWriteFontFaceReference1*))this->v->tbl[12])(this); }
static inline HRESULT                           IDWriteFontFaceReference1_EnqueueFontDownloadRequest         (IDWriteFontFaceReference1* this) { return ((HRESULT (WINAPI*)(IDWriteFontFaceReference1*))this->v->tbl[13])(this); }
static inline HRESULT                           IDWriteFontFaceReference1_EnqueueCharacterDownloadRequest    (IDWriteFontFaceReference1* this, const WCHAR* characters, UINT32 characterCount) { return ((HRESULT (WINAPI*)(IDWriteFontFaceReference1*, const WCHAR*, UINT32))this->v->tbl[14])(this, characters, characterCount); }
static inline HRESULT                           IDWriteFontFaceReference1_EnqueueGlyphDownloadRequest        (IDWriteFontFaceReference1* this, const UINT16* glyphIndices, UINT32 glyphCount) { return ((HRESULT (WINAPI*)(IDWriteFontFaceReference1*, const UINT16*, UINT32))this->v->tbl[15])(this, glyphIndices, glyphCount); }
static inline HRESULT                           IDWriteFontFaceReference1_EnqueueFileFragmentDownloadRequest (IDWriteFontFaceReference1* this, UINT64 fileOffset, UINT64 fragmentSize) { return ((HRESULT (WINAPI*)(IDWriteFontFaceReference1*, UINT64, UINT64))this->v->tbl[16])(this, fileOffset, fragmentSize); }
static inline HRESULT                           IDWriteFontFaceReference1_CreateFontFace1                    (IDWriteFontFaceReference1* this, IDWriteFontFace5** fontFace) { return ((HRESULT (WINAPI*)(IDWriteFontFaceReference1*, IDWriteFontFace5**))this->v->tbl[17])(this, fontFace); }
static inline UINT32                            IDWriteFontFaceReference1_GetFontAxisValueCount              (IDWriteFontFaceReference1* this) { return ((UINT32 (WINAPI*)(IDWriteFontFaceReference1*))this->v->tbl[18])(this); }
static inline HRESULT                           IDWriteFontFaceReference1_GetFontAxisValues                  (IDWriteFontFaceReference1* this, DWRITE_FONT_AXIS_VALUE* fontAxisValues, UINT32 fontAxisValueCount) { return ((HRESULT (WINAPI*)(IDWriteFontFaceReference1*, DWRITE_FONT_AXIS_VALUE*, UINT32))this->v->tbl[19])(this, fontAxisValues, fontAxisValueCount); }

static inline HRESULT                           IDWriteFontFallback_QueryInterface                           (IDWriteFontFallback* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFontFallback*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFontFallback_AddRef                                   (IDWriteFontFallback* this) { return ((UINT32 (WINAPI*)(IDWriteFontFallback*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFontFallback_Release                                  (IDWriteFontFallback* this) { return ((UINT32 (WINAPI*)(IDWriteFontFallback*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteFontFallback_MapCharacters                            (IDWriteFontFallback* this, IDWriteTextAnalysisSource* analysisSource, UINT32 textPosition, UINT32 textLength, IDWriteFontCollection* baseFontCollection, const WCHAR* baseFamilyName, DWRITE_FONT_WEIGHT baseWeight, DWRITE_FONT_STYLE baseStyle, DWRITE_FONT_STRETCH baseStretch, UINT32* mappedLength, IDWriteFont** mappedFont, FLOAT* scale) { return ((HRESULT (WINAPI*)(IDWriteFontFallback*, IDWriteTextAnalysisSource*, UINT32, UINT32, IDWriteFontCollection*, const WCHAR*, DWRITE_FONT_WEIGHT, DWRITE_FONT_STYLE, DWRITE_FONT_STRETCH, UINT32*, IDWriteFont**, FLOAT*))this->v->tbl[3])(this, analysisSource, textPosition, textLength, baseFontCollection, baseFamilyName, baseWeight, baseStyle, baseStretch, mappedLength, mappedFont, scale); }

static inline HRESULT                           IDWriteFontFallback1_QueryInterface                          (IDWriteFontFallback1* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFontFallback1*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFontFallback1_AddRef                                  (IDWriteFontFallback1* this) { return ((UINT32 (WINAPI*)(IDWriteFontFallback1*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFontFallback1_Release                                 (IDWriteFontFallback1* this) { return ((UINT32 (WINAPI*)(IDWriteFontFallback1*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteFontFallback1_MapCharacters                           (IDWriteFontFallback1* this, IDWriteTextAnalysisSource* analysisSource, UINT32 textPosition, UINT32 textLength, IDWriteFontCollection* baseFontCollection, const WCHAR* baseFamilyName, DWRITE_FONT_WEIGHT baseWeight, DWRITE_FONT_STYLE baseStyle, DWRITE_FONT_STRETCH baseStretch, UINT32* mappedLength, IDWriteFont** mappedFont, FLOAT* scale) { return ((HRESULT (WINAPI*)(IDWriteFontFallback1*, IDWriteTextAnalysisSource*, UINT32, UINT32, IDWriteFontCollection*, const WCHAR*, DWRITE_FONT_WEIGHT, DWRITE_FONT_STYLE, DWRITE_FONT_STRETCH, UINT32*, IDWriteFont**, FLOAT*))this->v->tbl[3])(this, analysisSource, textPosition, textLength, baseFontCollection, baseFamilyName, baseWeight, baseStyle, baseStretch, mappedLength, mappedFont, scale); }
static inline HRESULT                           IDWriteFontFallback1_MapCharacters1                          (IDWriteFontFallback1* this, IDWriteTextAnalysisSource* analysisSource, UINT32 textPosition, UINT32 textLength, IDWriteFontCollection* baseFontCollection, const WCHAR* baseFamilyName, const DWRITE_FONT_AXIS_VALUE* fontAxisValues, UINT32 fontAxisValueCount, UINT32* mappedLength, FLOAT* scale, IDWriteFontFace5** mappedFontFace) { return ((HRESULT (WINAPI*)(IDWriteFontFallback1*, IDWriteTextAnalysisSource*, UINT32, UINT32, IDWriteFontCollection*, const WCHAR*, const DWRITE_FONT_AXIS_VALUE*, UINT32, UINT32*, FLOAT*, IDWriteFontFace5**))this->v->tbl[4])(this, analysisSource, textPosition, textLength, baseFontCollection, baseFamilyName, fontAxisValues, fontAxisValueCount, mappedLength, scale, mappedFontFace); }

static inline HRESULT                           IDWriteFontFallbackBuilder_QueryInterface                    (IDWriteFontFallbackBuilder* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFontFallbackBuilder*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFontFallbackBuilder_AddRef                            (IDWriteFontFallbackBuilder* this) { return ((UINT32 (WINAPI*)(IDWriteFontFallbackBuilder*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFontFallbackBuilder_Release                           (IDWriteFontFallbackBuilder* this) { return ((UINT32 (WINAPI*)(IDWriteFontFallbackBuilder*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteFontFallbackBuilder_AddMapping                        (IDWriteFontFallbackBuilder* this, const DWRITE_UNICODE_RANGE* ranges, UINT32 rangesCount, const UINT16** targetFamilyNames, UINT32 targetFamilyNamesCount, IDWriteFontCollection* fontCollection, const WCHAR* localeName, const WCHAR* baseFamilyName, FLOAT scale) { return ((HRESULT (WINAPI*)(IDWriteFontFallbackBuilder*, const DWRITE_UNICODE_RANGE*, UINT32, const UINT16**, UINT32, IDWriteFontCollection*, const WCHAR*, const WCHAR*, FLOAT))this->v->tbl[3])(this, ranges, rangesCount, targetFamilyNames, targetFamilyNamesCount, fontCollection, localeName, baseFamilyName, scale); }
static inline HRESULT                           IDWriteFontFallbackBuilder_AddMappings                       (IDWriteFontFallbackBuilder* this, IDWriteFontFallback* fontFallback) { return ((HRESULT (WINAPI*)(IDWriteFontFallbackBuilder*, IDWriteFontFallback*))this->v->tbl[4])(this, fontFallback); }
static inline HRESULT                           IDWriteFontFallbackBuilder_CreateFontFallback                (IDWriteFontFallbackBuilder* this, IDWriteFontFallback** fontFallback) { return ((HRESULT (WINAPI*)(IDWriteFontFallbackBuilder*, IDWriteFontFallback**))this->v->tbl[5])(this, fontFallback); }

static inline HRESULT                           IDWriteFontFamily_QueryInterface                             (IDWriteFontFamily* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFontFamily*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFontFamily_AddRef                                     (IDWriteFontFamily* this) { return ((UINT32 (WINAPI*)(IDWriteFontFamily*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFontFamily_Release                                    (IDWriteFontFamily* this) { return ((UINT32 (WINAPI*)(IDWriteFontFamily*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteFontFamily_GetFontCollection                          (IDWriteFontFamily* this, IDWriteFontCollection** fontCollection) { return ((HRESULT (WINAPI*)(IDWriteFontFamily*, IDWriteFontCollection**))this->v->tbl[3])(this, fontCollection); }
static inline UINT32                            IDWriteFontFamily_GetFontCount                               (IDWriteFontFamily* this) { return ((UINT32 (WINAPI*)(IDWriteFontFamily*))this->v->tbl[4])(this); }
static inline HRESULT                           IDWriteFontFamily_GetFont                                    (IDWriteFontFamily* this, UINT32 index, IDWriteFont** font) { return ((HRESULT (WINAPI*)(IDWriteFontFamily*, UINT32, IDWriteFont**))this->v->tbl[5])(this, index, font); }
static inline HRESULT                           IDWriteFontFamily_GetFamilyNames                             (IDWriteFontFamily* this, IDWriteLocalizedStrings** names) { return ((HRESULT (WINAPI*)(IDWriteFontFamily*, IDWriteLocalizedStrings**))this->v->tbl[6])(this, names); }
static inline HRESULT                           IDWriteFontFamily_GetFirstMatchingFont                       (IDWriteFontFamily* this, DWRITE_FONT_WEIGHT weight, DWRITE_FONT_STRETCH stretch, DWRITE_FONT_STYLE style, IDWriteFont** matchingFont) { return ((HRESULT (WINAPI*)(IDWriteFontFamily*, DWRITE_FONT_WEIGHT, DWRITE_FONT_STRETCH, DWRITE_FONT_STYLE, IDWriteFont**))this->v->tbl[7])(this, weight, stretch, style, matchingFont); }
static inline HRESULT                           IDWriteFontFamily_GetMatchingFonts                           (IDWriteFontFamily* this, DWRITE_FONT_WEIGHT weight, DWRITE_FONT_STRETCH stretch, DWRITE_FONT_STYLE style, IDWriteFontList** matchingFonts) { return ((HRESULT (WINAPI*)(IDWriteFontFamily*, DWRITE_FONT_WEIGHT, DWRITE_FONT_STRETCH, DWRITE_FONT_STYLE, IDWriteFontList**))this->v->tbl[8])(this, weight, stretch, style, matchingFonts); }

static inline HRESULT                           IDWriteFontFamily1_QueryInterface                            (IDWriteFontFamily1* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFontFamily1*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFontFamily1_AddRef                                    (IDWriteFontFamily1* this) { return ((UINT32 (WINAPI*)(IDWriteFontFamily1*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFontFamily1_Release                                   (IDWriteFontFamily1* this) { return ((UINT32 (WINAPI*)(IDWriteFontFamily1*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteFontFamily1_GetFontCollection                         (IDWriteFontFamily1* this, IDWriteFontCollection** fontCollection) { return ((HRESULT (WINAPI*)(IDWriteFontFamily1*, IDWriteFontCollection**))this->v->tbl[3])(this, fontCollection); }
static inline UINT32                            IDWriteFontFamily1_GetFontCount                              (IDWriteFontFamily1* this) { return ((UINT32 (WINAPI*)(IDWriteFontFamily1*))this->v->tbl[4])(this); }
static inline HRESULT                           IDWriteFontFamily1_GetFont                                   (IDWriteFontFamily1* this, UINT32 index, IDWriteFont** font) { return ((HRESULT (WINAPI*)(IDWriteFontFamily1*, UINT32, IDWriteFont**))this->v->tbl[5])(this, index, font); }
static inline HRESULT                           IDWriteFontFamily1_GetFamilyNames                            (IDWriteFontFamily1* this, IDWriteLocalizedStrings** names) { return ((HRESULT (WINAPI*)(IDWriteFontFamily1*, IDWriteLocalizedStrings**))this->v->tbl[6])(this, names); }
static inline HRESULT                           IDWriteFontFamily1_GetFirstMatchingFont                      (IDWriteFontFamily1* this, DWRITE_FONT_WEIGHT weight, DWRITE_FONT_STRETCH stretch, DWRITE_FONT_STYLE style, IDWriteFont** matchingFont) { return ((HRESULT (WINAPI*)(IDWriteFontFamily1*, DWRITE_FONT_WEIGHT, DWRITE_FONT_STRETCH, DWRITE_FONT_STYLE, IDWriteFont**))this->v->tbl[7])(this, weight, stretch, style, matchingFont); }
static inline HRESULT                           IDWriteFontFamily1_GetMatchingFonts                          (IDWriteFontFamily1* this, DWRITE_FONT_WEIGHT weight, DWRITE_FONT_STRETCH stretch, DWRITE_FONT_STYLE style, IDWriteFontList** matchingFonts) { return ((HRESULT (WINAPI*)(IDWriteFontFamily1*, DWRITE_FONT_WEIGHT, DWRITE_FONT_STRETCH, DWRITE_FONT_STYLE, IDWriteFontList**))this->v->tbl[8])(this, weight, stretch, style, matchingFonts); }
static inline DWRITE_LOCALITY                   IDWriteFontFamily1_GetFontLocality                           (IDWriteFontFamily1* this, UINT32 listIndex) { return ((DWRITE_LOCALITY (WINAPI*)(IDWriteFontFamily1*, UINT32))this->v->tbl[9])(this, listIndex); }
static inline HRESULT                           IDWriteFontFamily1_GetFont1                                  (IDWriteFontFamily1* this, UINT32 listIndex, IDWriteFont3** font) { return ((HRESULT (WINAPI*)(IDWriteFontFamily1*, UINT32, IDWriteFont3**))this->v->tbl[10])(this, listIndex, font); }
static inline HRESULT                           IDWriteFontFamily1_GetFontFaceReference                      (IDWriteFontFamily1* this, UINT32 listIndex, IDWriteFontFaceReference** fontFaceReference) { return ((HRESULT (WINAPI*)(IDWriteFontFamily1*, UINT32, IDWriteFontFaceReference**))this->v->tbl[11])(this, listIndex, fontFaceReference); }

static inline HRESULT                           IDWriteFontFamily2_QueryInterface                            (IDWriteFontFamily2* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFontFamily2*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFontFamily2_AddRef                                    (IDWriteFontFamily2* this) { return ((UINT32 (WINAPI*)(IDWriteFontFamily2*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFontFamily2_Release                                   (IDWriteFontFamily2* this) { return ((UINT32 (WINAPI*)(IDWriteFontFamily2*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteFontFamily2_GetFontCollection                         (IDWriteFontFamily2* this, IDWriteFontCollection** fontCollection) { return ((HRESULT (WINAPI*)(IDWriteFontFamily2*, IDWriteFontCollection**))this->v->tbl[3])(this, fontCollection); }
static inline UINT32                            IDWriteFontFamily2_GetFontCount                              (IDWriteFontFamily2* this) { return ((UINT32 (WINAPI*)(IDWriteFontFamily2*))this->v->tbl[4])(this); }
static inline HRESULT                           IDWriteFontFamily2_GetFont                                   (IDWriteFontFamily2* this, UINT32 index, IDWriteFont** font) { return ((HRESULT (WINAPI*)(IDWriteFontFamily2*, UINT32, IDWriteFont**))this->v->tbl[5])(this, index, font); }
static inline HRESULT                           IDWriteFontFamily2_GetFamilyNames                            (IDWriteFontFamily2* this, IDWriteLocalizedStrings** names) { return ((HRESULT (WINAPI*)(IDWriteFontFamily2*, IDWriteLocalizedStrings**))this->v->tbl[6])(this, names); }
static inline HRESULT                           IDWriteFontFamily2_GetFirstMatchingFont                      (IDWriteFontFamily2* this, DWRITE_FONT_WEIGHT weight, DWRITE_FONT_STRETCH stretch, DWRITE_FONT_STYLE style, IDWriteFont** matchingFont) { return ((HRESULT (WINAPI*)(IDWriteFontFamily2*, DWRITE_FONT_WEIGHT, DWRITE_FONT_STRETCH, DWRITE_FONT_STYLE, IDWriteFont**))this->v->tbl[7])(this, weight, stretch, style, matchingFont); }
static inline HRESULT                           IDWriteFontFamily2_GetMatchingFonts                          (IDWriteFontFamily2* this, DWRITE_FONT_WEIGHT weight, DWRITE_FONT_STRETCH stretch, DWRITE_FONT_STYLE style, IDWriteFontList** matchingFonts) { return ((HRESULT (WINAPI*)(IDWriteFontFamily2*, DWRITE_FONT_WEIGHT, DWRITE_FONT_STRETCH, DWRITE_FONT_STYLE, IDWriteFontList**))this->v->tbl[8])(this, weight, stretch, style, matchingFonts); }
static inline DWRITE_LOCALITY                   IDWriteFontFamily2_GetFontLocality                           (IDWriteFontFamily2* this, UINT32 listIndex) { return ((DWRITE_LOCALITY (WINAPI*)(IDWriteFontFamily2*, UINT32))this->v->tbl[9])(this, listIndex); }
static inline HRESULT                           IDWriteFontFamily2_GetFont1                                  (IDWriteFontFamily2* this, UINT32 listIndex, IDWriteFont3** font) { return ((HRESULT (WINAPI*)(IDWriteFontFamily2*, UINT32, IDWriteFont3**))this->v->tbl[10])(this, listIndex, font); }
static inline HRESULT                           IDWriteFontFamily2_GetFontFaceReference                      (IDWriteFontFamily2* this, UINT32 listIndex, IDWriteFontFaceReference** fontFaceReference) { return ((HRESULT (WINAPI*)(IDWriteFontFamily2*, UINT32, IDWriteFontFaceReference**))this->v->tbl[11])(this, listIndex, fontFaceReference); }
static inline HRESULT                           IDWriteFontFamily2_GetMatchingFonts1                         (IDWriteFontFamily2* this, const DWRITE_FONT_AXIS_VALUE* fontAxisValues, UINT32 fontAxisValueCount, IDWriteFontList2** matchingFonts) { return ((HRESULT (WINAPI*)(IDWriteFontFamily2*, const DWRITE_FONT_AXIS_VALUE*, UINT32, IDWriteFontList2**))this->v->tbl[12])(this, fontAxisValues, fontAxisValueCount, matchingFonts); }
static inline HRESULT                           IDWriteFontFamily2_GetFontSet                                (IDWriteFontFamily2* this, IDWriteFontSet1** fontSet) { return ((HRESULT (WINAPI*)(IDWriteFontFamily2*, IDWriteFontSet1**))this->v->tbl[13])(this, fontSet); }

static inline HRESULT                           IDWriteFontFile_QueryInterface                               (IDWriteFontFile* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFontFile*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFontFile_AddRef                                       (IDWriteFontFile* this) { return ((UINT32 (WINAPI*)(IDWriteFontFile*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFontFile_Release                                      (IDWriteFontFile* this) { return ((UINT32 (WINAPI*)(IDWriteFontFile*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteFontFile_GetReferenceKey                              (IDWriteFontFile* this, const void** fontFileReferenceKey, UINT32* fontFileReferenceKeySize) { return ((HRESULT (WINAPI*)(IDWriteFontFile*, const void**, UINT32*))this->v->tbl[3])(this, fontFileReferenceKey, fontFileReferenceKeySize); }
static inline HRESULT                           IDWriteFontFile_GetLoader                                    (IDWriteFontFile* this, IDWriteFontFileLoader** fontFileLoader) { return ((HRESULT (WINAPI*)(IDWriteFontFile*, IDWriteFontFileLoader**))this->v->tbl[4])(this, fontFileLoader); }
static inline HRESULT                           IDWriteFontFile_Analyze                                      (IDWriteFontFile* this, BOOL* isSupportedFontType, DWRITE_FONT_FILE_TYPE* fontFileType, DWRITE_FONT_FACE_TYPE* fontFaceType, UINT32* numberOfFaces) { return ((HRESULT (WINAPI*)(IDWriteFontFile*, BOOL*, DWRITE_FONT_FILE_TYPE*, DWRITE_FONT_FACE_TYPE*, UINT32*))this->v->tbl[5])(this, isSupportedFontType, fontFileType, fontFaceType, numberOfFaces); }

static inline HRESULT                           IDWriteFontFileEnumerator_QueryInterface                     (IDWriteFontFileEnumerator* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFontFileEnumerator*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFontFileEnumerator_AddRef                             (IDWriteFontFileEnumerator* this) { return ((UINT32 (WINAPI*)(IDWriteFontFileEnumerator*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFontFileEnumerator_Release                            (IDWriteFontFileEnumerator* this) { return ((UINT32 (WINAPI*)(IDWriteFontFileEnumerator*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteFontFileEnumerator_MoveNext                           (IDWriteFontFileEnumerator* this, BOOL* hasCurrentFile) { return ((HRESULT (WINAPI*)(IDWriteFontFileEnumerator*, BOOL*))this->v->tbl[3])(this, hasCurrentFile); }
static inline HRESULT                           IDWriteFontFileEnumerator_GetCurrentFontFile                 (IDWriteFontFileEnumerator* this, IDWriteFontFile** fontFile) { return ((HRESULT (WINAPI*)(IDWriteFontFileEnumerator*, IDWriteFontFile**))this->v->tbl[4])(this, fontFile); }

static inline HRESULT                           IDWriteFontFileLoader_QueryInterface                         (IDWriteFontFileLoader* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFontFileLoader*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFontFileLoader_AddRef                                 (IDWriteFontFileLoader* this) { return ((UINT32 (WINAPI*)(IDWriteFontFileLoader*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFontFileLoader_Release                                (IDWriteFontFileLoader* this) { return ((UINT32 (WINAPI*)(IDWriteFontFileLoader*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteFontFileLoader_CreateStreamFromKey                    (IDWriteFontFileLoader* this, const void* fontFileReferenceKey, UINT32 fontFileReferenceKeySize, IDWriteFontFileStream** fontFileStream) { return ((HRESULT (WINAPI*)(IDWriteFontFileLoader*, const void*, UINT32, IDWriteFontFileStream**))this->v->tbl[3])(this, fontFileReferenceKey, fontFileReferenceKeySize, fontFileStream); }

static inline HRESULT                           IDWriteFontFileStream_QueryInterface                         (IDWriteFontFileStream* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFontFileStream*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFontFileStream_AddRef                                 (IDWriteFontFileStream* this) { return ((UINT32 (WINAPI*)(IDWriteFontFileStream*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFontFileStream_Release                                (IDWriteFontFileStream* this) { return ((UINT32 (WINAPI*)(IDWriteFontFileStream*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteFontFileStream_ReadFileFragment                       (IDWriteFontFileStream* this, const void** fragmentStart, UINT64 fileOffset, UINT64 fragmentSize, void** fragmentContext) { return ((HRESULT (WINAPI*)(IDWriteFontFileStream*, const void**, UINT64, UINT64, void**))this->v->tbl[3])(this, fragmentStart, fileOffset, fragmentSize, fragmentContext); }
static inline void                              IDWriteFontFileStream_ReleaseFileFragment                    (IDWriteFontFileStream* this, void* fragmentContext) { ((void (WINAPI*)(IDWriteFontFileStream*, void*))this->v->tbl[4])(this, fragmentContext); }
static inline HRESULT                           IDWriteFontFileStream_GetFileSize                            (IDWriteFontFileStream* this, UINT64* fileSize) { return ((HRESULT (WINAPI*)(IDWriteFontFileStream*, UINT64*))this->v->tbl[5])(this, fileSize); }
static inline HRESULT                           IDWriteFontFileStream_GetLastWriteTime                       (IDWriteFontFileStream* this, UINT64* lastWriteTime) { return ((HRESULT (WINAPI*)(IDWriteFontFileStream*, UINT64*))this->v->tbl[6])(this, lastWriteTime); }

static inline HRESULT                           IDWriteFontList_QueryInterface                               (IDWriteFontList* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFontList*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFontList_AddRef                                       (IDWriteFontList* this) { return ((UINT32 (WINAPI*)(IDWriteFontList*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFontList_Release                                      (IDWriteFontList* this) { return ((UINT32 (WINAPI*)(IDWriteFontList*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteFontList_GetFontCollection                            (IDWriteFontList* this, IDWriteFontCollection** fontCollection) { return ((HRESULT (WINAPI*)(IDWriteFontList*, IDWriteFontCollection**))this->v->tbl[3])(this, fontCollection); }
static inline UINT32                            IDWriteFontList_GetFontCount                                 (IDWriteFontList* this) { return ((UINT32 (WINAPI*)(IDWriteFontList*))this->v->tbl[4])(this); }
static inline HRESULT                           IDWriteFontList_GetFont                                      (IDWriteFontList* this, UINT32 index, IDWriteFont** font) { return ((HRESULT (WINAPI*)(IDWriteFontList*, UINT32, IDWriteFont**))this->v->tbl[5])(this, index, font); }

static inline HRESULT                           IDWriteFontList1_QueryInterface                              (IDWriteFontList1* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFontList1*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFontList1_AddRef                                      (IDWriteFontList1* this) { return ((UINT32 (WINAPI*)(IDWriteFontList1*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFontList1_Release                                     (IDWriteFontList1* this) { return ((UINT32 (WINAPI*)(IDWriteFontList1*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteFontList1_GetFontCollection                           (IDWriteFontList1* this, IDWriteFontCollection** fontCollection) { return ((HRESULT (WINAPI*)(IDWriteFontList1*, IDWriteFontCollection**))this->v->tbl[3])(this, fontCollection); }
static inline UINT32                            IDWriteFontList1_GetFontCount                                (IDWriteFontList1* this) { return ((UINT32 (WINAPI*)(IDWriteFontList1*))this->v->tbl[4])(this); }
static inline HRESULT                           IDWriteFontList1_GetFont                                     (IDWriteFontList1* this, UINT32 index, IDWriteFont** font) { return ((HRESULT (WINAPI*)(IDWriteFontList1*, UINT32, IDWriteFont**))this->v->tbl[5])(this, index, font); }
static inline DWRITE_LOCALITY                   IDWriteFontList1_GetFontLocality                             (IDWriteFontList1* this, UINT32 listIndex) { return ((DWRITE_LOCALITY (WINAPI*)(IDWriteFontList1*, UINT32))this->v->tbl[6])(this, listIndex); }
static inline HRESULT                           IDWriteFontList1_GetFont1                                    (IDWriteFontList1* this, UINT32 listIndex, IDWriteFont3** font) { return ((HRESULT (WINAPI*)(IDWriteFontList1*, UINT32, IDWriteFont3**))this->v->tbl[7])(this, listIndex, font); }
static inline HRESULT                           IDWriteFontList1_GetFontFaceReference                        (IDWriteFontList1* this, UINT32 listIndex, IDWriteFontFaceReference** fontFaceReference) { return ((HRESULT (WINAPI*)(IDWriteFontList1*, UINT32, IDWriteFontFaceReference**))this->v->tbl[8])(this, listIndex, fontFaceReference); }

static inline HRESULT                           IDWriteFontList2_QueryInterface                              (IDWriteFontList2* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFontList2*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFontList2_AddRef                                      (IDWriteFontList2* this) { return ((UINT32 (WINAPI*)(IDWriteFontList2*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFontList2_Release                                     (IDWriteFontList2* this) { return ((UINT32 (WINAPI*)(IDWriteFontList2*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteFontList2_GetFontCollection                           (IDWriteFontList2* this, IDWriteFontCollection** fontCollection) { return ((HRESULT (WINAPI*)(IDWriteFontList2*, IDWriteFontCollection**))this->v->tbl[3])(this, fontCollection); }
static inline UINT32                            IDWriteFontList2_GetFontCount                                (IDWriteFontList2* this) { return ((UINT32 (WINAPI*)(IDWriteFontList2*))this->v->tbl[4])(this); }
static inline HRESULT                           IDWriteFontList2_GetFont                                     (IDWriteFontList2* this, UINT32 index, IDWriteFont** font) { return ((HRESULT (WINAPI*)(IDWriteFontList2*, UINT32, IDWriteFont**))this->v->tbl[5])(this, index, font); }
static inline DWRITE_LOCALITY                   IDWriteFontList2_GetFontLocality                             (IDWriteFontList2* this, UINT32 listIndex) { return ((DWRITE_LOCALITY (WINAPI*)(IDWriteFontList2*, UINT32))this->v->tbl[6])(this, listIndex); }
static inline HRESULT                           IDWriteFontList2_GetFont1                                    (IDWriteFontList2* this, UINT32 listIndex, IDWriteFont3** font) { return ((HRESULT (WINAPI*)(IDWriteFontList2*, UINT32, IDWriteFont3**))this->v->tbl[7])(this, listIndex, font); }
static inline HRESULT                           IDWriteFontList2_GetFontFaceReference                        (IDWriteFontList2* this, UINT32 listIndex, IDWriteFontFaceReference** fontFaceReference) { return ((HRESULT (WINAPI*)(IDWriteFontList2*, UINT32, IDWriteFontFaceReference**))this->v->tbl[8])(this, listIndex, fontFaceReference); }
static inline HRESULT                           IDWriteFontList2_GetFontSet                                  (IDWriteFontList2* this, IDWriteFontSet1** fontSet) { return ((HRESULT (WINAPI*)(IDWriteFontList2*, IDWriteFontSet1**))this->v->tbl[9])(this, fontSet); }

static inline HRESULT                           IDWriteFontResource_QueryInterface                           (IDWriteFontResource* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFontResource*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFontResource_AddRef                                   (IDWriteFontResource* this) { return ((UINT32 (WINAPI*)(IDWriteFontResource*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFontResource_Release                                  (IDWriteFontResource* this) { return ((UINT32 (WINAPI*)(IDWriteFontResource*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteFontResource_GetFontFile                              (IDWriteFontResource* this, IDWriteFontFile** fontFile) { return ((HRESULT (WINAPI*)(IDWriteFontResource*, IDWriteFontFile**))this->v->tbl[3])(this, fontFile); }
static inline UINT32                            IDWriteFontResource_GetFontFaceIndex                         (IDWriteFontResource* this) { return ((UINT32 (WINAPI*)(IDWriteFontResource*))this->v->tbl[4])(this); }
static inline UINT32                            IDWriteFontResource_GetFontAxisCount                         (IDWriteFontResource* this) { return ((UINT32 (WINAPI*)(IDWriteFontResource*))this->v->tbl[5])(this); }
static inline HRESULT                           IDWriteFontResource_GetDefaultFontAxisValues                 (IDWriteFontResource* this, DWRITE_FONT_AXIS_VALUE* fontAxisValues, UINT32 fontAxisValueCount) { return ((HRESULT (WINAPI*)(IDWriteFontResource*, DWRITE_FONT_AXIS_VALUE*, UINT32))this->v->tbl[6])(this, fontAxisValues, fontAxisValueCount); }
static inline HRESULT                           IDWriteFontResource_GetFontAxisRanges                        (IDWriteFontResource* this, DWRITE_FONT_AXIS_RANGE* fontAxisRanges, UINT32 fontAxisRangeCount) { return ((HRESULT (WINAPI*)(IDWriteFontResource*, DWRITE_FONT_AXIS_RANGE*, UINT32))this->v->tbl[7])(this, fontAxisRanges, fontAxisRangeCount); }
static inline DWRITE_FONT_AXIS_ATTRIBUTES       IDWriteFontResource_GetFontAxisAttributes                    (IDWriteFontResource* this, UINT32 axisIndex) { return ((DWRITE_FONT_AXIS_ATTRIBUTES (WINAPI*)(IDWriteFontResource*, UINT32))this->v->tbl[8])(this, axisIndex); }
static inline HRESULT                           IDWriteFontResource_GetAxisNames                             (IDWriteFontResource* this, UINT32 axisIndex, IDWriteLocalizedStrings** names) { return ((HRESULT (WINAPI*)(IDWriteFontResource*, UINT32, IDWriteLocalizedStrings**))this->v->tbl[9])(this, axisIndex, names); }
static inline UINT32                            IDWriteFontResource_GetAxisValueNameCount                    (IDWriteFontResource* this, UINT32 axisIndex) { return ((UINT32 (WINAPI*)(IDWriteFontResource*, UINT32))this->v->tbl[10])(this, axisIndex); }
static inline HRESULT                           IDWriteFontResource_GetAxisValueNames                        (IDWriteFontResource* this, UINT32 axisIndex, UINT32 axisValueIndex, DWRITE_FONT_AXIS_RANGE* fontAxisRange, IDWriteLocalizedStrings** names) { return ((HRESULT (WINAPI*)(IDWriteFontResource*, UINT32, UINT32, DWRITE_FONT_AXIS_RANGE*, IDWriteLocalizedStrings**))this->v->tbl[11])(this, axisIndex, axisValueIndex, fontAxisRange, names); }
static inline BOOL                              IDWriteFontResource_HasVariations                            (IDWriteFontResource* this) { return ((BOOL (WINAPI*)(IDWriteFontResource*))this->v->tbl[12])(this); }
static inline HRESULT                           IDWriteFontResource_CreateFontFace                           (IDWriteFontResource* this, DWRITE_FONT_SIMULATIONS fontSimulations, const DWRITE_FONT_AXIS_VALUE* fontAxisValues, UINT32 fontAxisValueCount, IDWriteFontFace5** fontFace) { return ((HRESULT (WINAPI*)(IDWriteFontResource*, DWRITE_FONT_SIMULATIONS, const DWRITE_FONT_AXIS_VALUE*, UINT32, IDWriteFontFace5**))this->v->tbl[13])(this, fontSimulations, fontAxisValues, fontAxisValueCount, fontFace); }
static inline HRESULT                           IDWriteFontResource_CreateFontFaceReference                  (IDWriteFontResource* this, DWRITE_FONT_SIMULATIONS fontSimulations, const DWRITE_FONT_AXIS_VALUE* fontAxisValues, UINT32 fontAxisValueCount, IDWriteFontFaceReference1** fontFaceReference) { return ((HRESULT (WINAPI*)(IDWriteFontResource*, DWRITE_FONT_SIMULATIONS, const DWRITE_FONT_AXIS_VALUE*, UINT32, IDWriteFontFaceReference1**))this->v->tbl[14])(this, fontSimulations, fontAxisValues, fontAxisValueCount, fontFaceReference); }

static inline HRESULT                           IDWriteFontSet_QueryInterface                                (IDWriteFontSet* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFontSet*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFontSet_AddRef                                        (IDWriteFontSet* this) { return ((UINT32 (WINAPI*)(IDWriteFontSet*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFontSet_Release                                       (IDWriteFontSet* this) { return ((UINT32 (WINAPI*)(IDWriteFontSet*))this->v->tbl[2])(this); }
static inline UINT32                            IDWriteFontSet_GetFontCount                                  (IDWriteFontSet* this) { return ((UINT32 (WINAPI*)(IDWriteFontSet*))this->v->tbl[3])(this); }
static inline HRESULT                           IDWriteFontSet_GetFontFaceReference                          (IDWriteFontSet* this, UINT32 listIndex, IDWriteFontFaceReference** fontFaceReference) { return ((HRESULT (WINAPI*)(IDWriteFontSet*, UINT32, IDWriteFontFaceReference**))this->v->tbl[4])(this, listIndex, fontFaceReference); }
static inline HRESULT                           IDWriteFontSet_FindFontFaceReference                         (IDWriteFontSet* this, IDWriteFontFaceReference* fontFaceReference, UINT32* listIndex, BOOL* exists) { return ((HRESULT (WINAPI*)(IDWriteFontSet*, IDWriteFontFaceReference*, UINT32*, BOOL*))this->v->tbl[5])(this, fontFaceReference, listIndex, exists); }
static inline HRESULT                           IDWriteFontSet_FindFontFace                                  (IDWriteFontSet* this, IDWriteFontFace* fontFace, UINT32* listIndex, BOOL* exists) { return ((HRESULT (WINAPI*)(IDWriteFontSet*, IDWriteFontFace*, UINT32*, BOOL*))this->v->tbl[6])(this, fontFace, listIndex, exists); }
static inline HRESULT                           IDWriteFontSet_GetPropertyValues                             (IDWriteFontSet* this, DWRITE_FONT_PROPERTY_ID propertyID, IDWriteStringList** values) { return ((HRESULT (WINAPI*)(IDWriteFontSet*, DWRITE_FONT_PROPERTY_ID, IDWriteStringList**))this->v->tbl[7])(this, propertyID, values); }
static inline HRESULT                           IDWriteFontSet_GetPropertyValues1                            (IDWriteFontSet* this, DWRITE_FONT_PROPERTY_ID propertyID, const WCHAR* preferredLocaleNames, IDWriteStringList** values) { return ((HRESULT (WINAPI*)(IDWriteFontSet*, DWRITE_FONT_PROPERTY_ID, const WCHAR*, IDWriteStringList**))this->v->tbl[8])(this, propertyID, preferredLocaleNames, values); }
static inline HRESULT                           IDWriteFontSet_GetPropertyValues2                            (IDWriteFontSet* this, UINT32 listIndex, DWRITE_FONT_PROPERTY_ID propertyId, BOOL* exists, IDWriteLocalizedStrings** values) { return ((HRESULT (WINAPI*)(IDWriteFontSet*, UINT32, DWRITE_FONT_PROPERTY_ID, BOOL*, IDWriteLocalizedStrings**))this->v->tbl[9])(this, listIndex, propertyId, exists, values); }
static inline HRESULT                           IDWriteFontSet_GetPropertyOccurrenceCount                    (IDWriteFontSet* this, const DWRITE_FONT_PROPERTY* property, UINT32* propertyOccurrenceCount) { return ((HRESULT (WINAPI*)(IDWriteFontSet*, const DWRITE_FONT_PROPERTY*, UINT32*))this->v->tbl[10])(this, property, propertyOccurrenceCount); }
static inline HRESULT                           IDWriteFontSet_GetMatchingFonts                              (IDWriteFontSet* this, const WCHAR* familyName, DWRITE_FONT_WEIGHT fontWeight, DWRITE_FONT_STRETCH fontStretch, DWRITE_FONT_STYLE fontStyle, IDWriteFontSet** filteredSet) { return ((HRESULT (WINAPI*)(IDWriteFontSet*, const WCHAR*, DWRITE_FONT_WEIGHT, DWRITE_FONT_STRETCH, DWRITE_FONT_STYLE, IDWriteFontSet**))this->v->tbl[11])(this, familyName, fontWeight, fontStretch, fontStyle, filteredSet); }
static inline HRESULT                           IDWriteFontSet_GetMatchingFonts1                             (IDWriteFontSet* this, const DWRITE_FONT_PROPERTY* properties, UINT32 propertyCount, IDWriteFontSet** filteredSet) { return ((HRESULT (WINAPI*)(IDWriteFontSet*, const DWRITE_FONT_PROPERTY*, UINT32, IDWriteFontSet**))this->v->tbl[12])(this, properties, propertyCount, filteredSet); }

static inline HRESULT                           IDWriteFontSet1_QueryInterface                               (IDWriteFontSet1* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFontSet1*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFontSet1_AddRef                                       (IDWriteFontSet1* this) { return ((UINT32 (WINAPI*)(IDWriteFontSet1*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFontSet1_Release                                      (IDWriteFontSet1* this) { return ((UINT32 (WINAPI*)(IDWriteFontSet1*))this->v->tbl[2])(this); }
static inline UINT32                            IDWriteFontSet1_GetFontCount                                 (IDWriteFontSet1* this) { return ((UINT32 (WINAPI*)(IDWriteFontSet1*))this->v->tbl[3])(this); }
static inline HRESULT                           IDWriteFontSet1_GetFontFaceReference                         (IDWriteFontSet1* this, UINT32 listIndex, IDWriteFontFaceReference** fontFaceReference) { return ((HRESULT (WINAPI*)(IDWriteFontSet1*, UINT32, IDWriteFontFaceReference**))this->v->tbl[4])(this, listIndex, fontFaceReference); }
static inline HRESULT                           IDWriteFontSet1_FindFontFaceReference                        (IDWriteFontSet1* this, IDWriteFontFaceReference* fontFaceReference, UINT32* listIndex, BOOL* exists) { return ((HRESULT (WINAPI*)(IDWriteFontSet1*, IDWriteFontFaceReference*, UINT32*, BOOL*))this->v->tbl[5])(this, fontFaceReference, listIndex, exists); }
static inline HRESULT                           IDWriteFontSet1_FindFontFace                                 (IDWriteFontSet1* this, IDWriteFontFace* fontFace, UINT32* listIndex, BOOL* exists) { return ((HRESULT (WINAPI*)(IDWriteFontSet1*, IDWriteFontFace*, UINT32*, BOOL*))this->v->tbl[6])(this, fontFace, listIndex, exists); }
static inline HRESULT                           IDWriteFontSet1_GetPropertyValues                            (IDWriteFontSet1* this, DWRITE_FONT_PROPERTY_ID propertyID, IDWriteStringList** values) { return ((HRESULT (WINAPI*)(IDWriteFontSet1*, DWRITE_FONT_PROPERTY_ID, IDWriteStringList**))this->v->tbl[7])(this, propertyID, values); }
static inline HRESULT                           IDWriteFontSet1_GetPropertyValues1                           (IDWriteFontSet1* this, DWRITE_FONT_PROPERTY_ID propertyID, const WCHAR* preferredLocaleNames, IDWriteStringList** values) { return ((HRESULT (WINAPI*)(IDWriteFontSet1*, DWRITE_FONT_PROPERTY_ID, const WCHAR*, IDWriteStringList**))this->v->tbl[8])(this, propertyID, preferredLocaleNames, values); }
static inline HRESULT                           IDWriteFontSet1_GetPropertyValues2                           (IDWriteFontSet1* this, UINT32 listIndex, DWRITE_FONT_PROPERTY_ID propertyId, BOOL* exists, IDWriteLocalizedStrings** values) { return ((HRESULT (WINAPI*)(IDWriteFontSet1*, UINT32, DWRITE_FONT_PROPERTY_ID, BOOL*, IDWriteLocalizedStrings**))this->v->tbl[9])(this, listIndex, propertyId, exists, values); }
static inline HRESULT                           IDWriteFontSet1_GetPropertyOccurrenceCount                   (IDWriteFontSet1* this, const DWRITE_FONT_PROPERTY* property, UINT32* propertyOccurrenceCount) { return ((HRESULT (WINAPI*)(IDWriteFontSet1*, const DWRITE_FONT_PROPERTY*, UINT32*))this->v->tbl[10])(this, property, propertyOccurrenceCount); }
static inline HRESULT                           IDWriteFontSet1_GetMatchingFonts                             (IDWriteFontSet1* this, const WCHAR* familyName, DWRITE_FONT_WEIGHT fontWeight, DWRITE_FONT_STRETCH fontStretch, DWRITE_FONT_STYLE fontStyle, IDWriteFontSet** filteredSet) { return ((HRESULT (WINAPI*)(IDWriteFontSet1*, const WCHAR*, DWRITE_FONT_WEIGHT, DWRITE_FONT_STRETCH, DWRITE_FONT_STYLE, IDWriteFontSet**))this->v->tbl[11])(this, familyName, fontWeight, fontStretch, fontStyle, filteredSet); }
static inline HRESULT                           IDWriteFontSet1_GetMatchingFonts1                            (IDWriteFontSet1* this, const DWRITE_FONT_PROPERTY* properties, UINT32 propertyCount, IDWriteFontSet** filteredSet) { return ((HRESULT (WINAPI*)(IDWriteFontSet1*, const DWRITE_FONT_PROPERTY*, UINT32, IDWriteFontSet**))this->v->tbl[12])(this, properties, propertyCount, filteredSet); }
static inline HRESULT                           IDWriteFontSet1_GetMatchingFonts2                            (IDWriteFontSet1* this, const DWRITE_FONT_PROPERTY* fontProperty, const DWRITE_FONT_AXIS_VALUE* fontAxisValues, UINT32 fontAxisValueCount, IDWriteFontSet1** matchingFonts) { return ((HRESULT (WINAPI*)(IDWriteFontSet1*, const DWRITE_FONT_PROPERTY*, const DWRITE_FONT_AXIS_VALUE*, UINT32, IDWriteFontSet1**))this->v->tbl[13])(this, fontProperty, fontAxisValues, fontAxisValueCount, matchingFonts); }
static inline HRESULT                           IDWriteFontSet1_GetFirstFontResources                        (IDWriteFontSet1* this, IDWriteFontSet1** filteredFontSet) { return ((HRESULT (WINAPI*)(IDWriteFontSet1*, IDWriteFontSet1**))this->v->tbl[14])(this, filteredFontSet); }
static inline HRESULT                           IDWriteFontSet1_GetFilteredFonts                             (IDWriteFontSet1* this, const UINT32* indices, UINT32 indexCount, IDWriteFontSet1** filteredFontSet) { return ((HRESULT (WINAPI*)(IDWriteFontSet1*, const UINT32*, UINT32, IDWriteFontSet1**))this->v->tbl[15])(this, indices, indexCount, filteredFontSet); }
static inline HRESULT                           IDWriteFontSet1_GetFilteredFonts1                            (IDWriteFontSet1* this, const DWRITE_FONT_AXIS_RANGE* fontAxisRanges, UINT32 fontAxisRangeCount, BOOL selectAnyRange, IDWriteFontSet1** filteredFontSet) { return ((HRESULT (WINAPI*)(IDWriteFontSet1*, const DWRITE_FONT_AXIS_RANGE*, UINT32, BOOL, IDWriteFontSet1**))this->v->tbl[16])(this, fontAxisRanges, fontAxisRangeCount, selectAnyRange, filteredFontSet); }
static inline HRESULT                           IDWriteFontSet1_GetFilteredFonts2                            (IDWriteFontSet1* this, const DWRITE_FONT_PROPERTY* properties, UINT32 propertyCount, BOOL selectAnyProperty, IDWriteFontSet1** filteredFontSet) { return ((HRESULT (WINAPI*)(IDWriteFontSet1*, const DWRITE_FONT_PROPERTY*, UINT32, BOOL, IDWriteFontSet1**))this->v->tbl[17])(this, properties, propertyCount, selectAnyProperty, filteredFontSet); }
static inline HRESULT                           IDWriteFontSet1_GetFilteredFontIndices                       (IDWriteFontSet1* this, const DWRITE_FONT_AXIS_RANGE* fontAxisRanges, UINT32 fontAxisRangeCount, BOOL selectAnyRange, UINT32* indices, UINT32 maxIndexCount, UINT32* actualIndexCount) { return ((HRESULT (WINAPI*)(IDWriteFontSet1*, const DWRITE_FONT_AXIS_RANGE*, UINT32, BOOL, UINT32*, UINT32, UINT32*))this->v->tbl[18])(this, fontAxisRanges, fontAxisRangeCount, selectAnyRange, indices, maxIndexCount, actualIndexCount); }
static inline HRESULT                           IDWriteFontSet1_GetFilteredFontIndices1                      (IDWriteFontSet1* this, const DWRITE_FONT_PROPERTY* properties, UINT32 propertyCount, BOOL selectAnyProperty, UINT32* indices, UINT32 maxIndexCount, UINT32* actualIndexCount) { return ((HRESULT (WINAPI*)(IDWriteFontSet1*, const DWRITE_FONT_PROPERTY*, UINT32, BOOL, UINT32*, UINT32, UINT32*))this->v->tbl[19])(this, properties, propertyCount, selectAnyProperty, indices, maxIndexCount, actualIndexCount); }
static inline HRESULT                           IDWriteFontSet1_GetFontAxisRanges                            (IDWriteFontSet1* this, UINT32 listIndex, DWRITE_FONT_AXIS_RANGE* fontAxisRanges, UINT32 maxFontAxisRangeCount, UINT32* actualFontAxisRangeCount) { return ((HRESULT (WINAPI*)(IDWriteFontSet1*, UINT32, DWRITE_FONT_AXIS_RANGE*, UINT32, UINT32*))this->v->tbl[20])(this, listIndex, fontAxisRanges, maxFontAxisRangeCount, actualFontAxisRangeCount); }
static inline HRESULT                           IDWriteFontSet1_GetFontAxisRanges1                           (IDWriteFontSet1* this, DWRITE_FONT_AXIS_RANGE* fontAxisRanges, UINT32 maxFontAxisRangeCount, UINT32* actualFontAxisRangeCount) { return ((HRESULT (WINAPI*)(IDWriteFontSet1*, DWRITE_FONT_AXIS_RANGE*, UINT32, UINT32*))this->v->tbl[21])(this, fontAxisRanges, maxFontAxisRangeCount, actualFontAxisRangeCount); }
static inline HRESULT                           IDWriteFontSet1_GetFontFaceReference1                        (IDWriteFontSet1* this, UINT32 listIndex, IDWriteFontFaceReference1** fontFaceReference) { return ((HRESULT (WINAPI*)(IDWriteFontSet1*, UINT32, IDWriteFontFaceReference1**))this->v->tbl[22])(this, listIndex, fontFaceReference); }
static inline HRESULT                           IDWriteFontSet1_CreateFontResource                           (IDWriteFontSet1* this, UINT32 listIndex, IDWriteFontResource** fontResource) { return ((HRESULT (WINAPI*)(IDWriteFontSet1*, UINT32, IDWriteFontResource**))this->v->tbl[23])(this, listIndex, fontResource); }
static inline HRESULT                           IDWriteFontSet1_CreateFontFace                               (IDWriteFontSet1* this, UINT32 listIndex, IDWriteFontFace5** fontFace) { return ((HRESULT (WINAPI*)(IDWriteFontSet1*, UINT32, IDWriteFontFace5**))this->v->tbl[24])(this, listIndex, fontFace); }
static inline DWRITE_LOCALITY                   IDWriteFontSet1_GetFontLocality                              (IDWriteFontSet1* this, UINT32 listIndex) { return ((DWRITE_LOCALITY (WINAPI*)(IDWriteFontSet1*, UINT32))this->v->tbl[25])(this, listIndex); }

static inline HRESULT                           IDWriteFontSet2_QueryInterface                               (IDWriteFontSet2* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFontSet2*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFontSet2_AddRef                                       (IDWriteFontSet2* this) { return ((UINT32 (WINAPI*)(IDWriteFontSet2*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFontSet2_Release                                      (IDWriteFontSet2* this) { return ((UINT32 (WINAPI*)(IDWriteFontSet2*))this->v->tbl[2])(this); }
static inline UINT32                            IDWriteFontSet2_GetFontCount                                 (IDWriteFontSet2* this) { return ((UINT32 (WINAPI*)(IDWriteFontSet2*))this->v->tbl[3])(this); }
static inline HRESULT                           IDWriteFontSet2_GetFontFaceReference                         (IDWriteFontSet2* this, UINT32 listIndex, IDWriteFontFaceReference** fontFaceReference) { return ((HRESULT (WINAPI*)(IDWriteFontSet2*, UINT32, IDWriteFontFaceReference**))this->v->tbl[4])(this, listIndex, fontFaceReference); }
static inline HRESULT                           IDWriteFontSet2_FindFontFaceReference                        (IDWriteFontSet2* this, IDWriteFontFaceReference* fontFaceReference, UINT32* listIndex, BOOL* exists) { return ((HRESULT (WINAPI*)(IDWriteFontSet2*, IDWriteFontFaceReference*, UINT32*, BOOL*))this->v->tbl[5])(this, fontFaceReference, listIndex, exists); }
static inline HRESULT                           IDWriteFontSet2_FindFontFace                                 (IDWriteFontSet2* this, IDWriteFontFace* fontFace, UINT32* listIndex, BOOL* exists) { return ((HRESULT (WINAPI*)(IDWriteFontSet2*, IDWriteFontFace*, UINT32*, BOOL*))this->v->tbl[6])(this, fontFace, listIndex, exists); }
static inline HRESULT                           IDWriteFontSet2_GetPropertyValues                            (IDWriteFontSet2* this, DWRITE_FONT_PROPERTY_ID propertyID, IDWriteStringList** values) { return ((HRESULT (WINAPI*)(IDWriteFontSet2*, DWRITE_FONT_PROPERTY_ID, IDWriteStringList**))this->v->tbl[7])(this, propertyID, values); }
static inline HRESULT                           IDWriteFontSet2_GetPropertyValues1                           (IDWriteFontSet2* this, DWRITE_FONT_PROPERTY_ID propertyID, const WCHAR* preferredLocaleNames, IDWriteStringList** values) { return ((HRESULT (WINAPI*)(IDWriteFontSet2*, DWRITE_FONT_PROPERTY_ID, const WCHAR*, IDWriteStringList**))this->v->tbl[8])(this, propertyID, preferredLocaleNames, values); }
static inline HRESULT                           IDWriteFontSet2_GetPropertyValues2                           (IDWriteFontSet2* this, UINT32 listIndex, DWRITE_FONT_PROPERTY_ID propertyId, BOOL* exists, IDWriteLocalizedStrings** values) { return ((HRESULT (WINAPI*)(IDWriteFontSet2*, UINT32, DWRITE_FONT_PROPERTY_ID, BOOL*, IDWriteLocalizedStrings**))this->v->tbl[9])(this, listIndex, propertyId, exists, values); }
static inline HRESULT                           IDWriteFontSet2_GetPropertyOccurrenceCount                   (IDWriteFontSet2* this, const DWRITE_FONT_PROPERTY* property, UINT32* propertyOccurrenceCount) { return ((HRESULT (WINAPI*)(IDWriteFontSet2*, const DWRITE_FONT_PROPERTY*, UINT32*))this->v->tbl[10])(this, property, propertyOccurrenceCount); }
static inline HRESULT                           IDWriteFontSet2_GetMatchingFonts                             (IDWriteFontSet2* this, const WCHAR* familyName, DWRITE_FONT_WEIGHT fontWeight, DWRITE_FONT_STRETCH fontStretch, DWRITE_FONT_STYLE fontStyle, IDWriteFontSet** filteredSet) { return ((HRESULT (WINAPI*)(IDWriteFontSet2*, const WCHAR*, DWRITE_FONT_WEIGHT, DWRITE_FONT_STRETCH, DWRITE_FONT_STYLE, IDWriteFontSet**))this->v->tbl[11])(this, familyName, fontWeight, fontStretch, fontStyle, filteredSet); }
static inline HRESULT                           IDWriteFontSet2_GetMatchingFonts1                            (IDWriteFontSet2* this, const DWRITE_FONT_PROPERTY* properties, UINT32 propertyCount, IDWriteFontSet** filteredSet) { return ((HRESULT (WINAPI*)(IDWriteFontSet2*, const DWRITE_FONT_PROPERTY*, UINT32, IDWriteFontSet**))this->v->tbl[12])(this, properties, propertyCount, filteredSet); }
static inline HRESULT                           IDWriteFontSet2_GetMatchingFonts2                            (IDWriteFontSet2* this, const DWRITE_FONT_PROPERTY* fontProperty, const DWRITE_FONT_AXIS_VALUE* fontAxisValues, UINT32 fontAxisValueCount, IDWriteFontSet1** matchingFonts) { return ((HRESULT (WINAPI*)(IDWriteFontSet2*, const DWRITE_FONT_PROPERTY*, const DWRITE_FONT_AXIS_VALUE*, UINT32, IDWriteFontSet1**))this->v->tbl[13])(this, fontProperty, fontAxisValues, fontAxisValueCount, matchingFonts); }
static inline HRESULT                           IDWriteFontSet2_GetFirstFontResources                        (IDWriteFontSet2* this, IDWriteFontSet1** filteredFontSet) { return ((HRESULT (WINAPI*)(IDWriteFontSet2*, IDWriteFontSet1**))this->v->tbl[14])(this, filteredFontSet); }
static inline HRESULT                           IDWriteFontSet2_GetFilteredFonts                             (IDWriteFontSet2* this, const UINT32* indices, UINT32 indexCount, IDWriteFontSet1** filteredFontSet) { return ((HRESULT (WINAPI*)(IDWriteFontSet2*, const UINT32*, UINT32, IDWriteFontSet1**))this->v->tbl[15])(this, indices, indexCount, filteredFontSet); }
static inline HRESULT                           IDWriteFontSet2_GetFilteredFonts1                            (IDWriteFontSet2* this, const DWRITE_FONT_AXIS_RANGE* fontAxisRanges, UINT32 fontAxisRangeCount, BOOL selectAnyRange, IDWriteFontSet1** filteredFontSet) { return ((HRESULT (WINAPI*)(IDWriteFontSet2*, const DWRITE_FONT_AXIS_RANGE*, UINT32, BOOL, IDWriteFontSet1**))this->v->tbl[16])(this, fontAxisRanges, fontAxisRangeCount, selectAnyRange, filteredFontSet); }
static inline HRESULT                           IDWriteFontSet2_GetFilteredFonts2                            (IDWriteFontSet2* this, const DWRITE_FONT_PROPERTY* properties, UINT32 propertyCount, BOOL selectAnyProperty, IDWriteFontSet1** filteredFontSet) { return ((HRESULT (WINAPI*)(IDWriteFontSet2*, const DWRITE_FONT_PROPERTY*, UINT32, BOOL, IDWriteFontSet1**))this->v->tbl[17])(this, properties, propertyCount, selectAnyProperty, filteredFontSet); }
static inline HRESULT                           IDWriteFontSet2_GetFilteredFontIndices                       (IDWriteFontSet2* this, const DWRITE_FONT_AXIS_RANGE* fontAxisRanges, UINT32 fontAxisRangeCount, BOOL selectAnyRange, UINT32* indices, UINT32 maxIndexCount, UINT32* actualIndexCount) { return ((HRESULT (WINAPI*)(IDWriteFontSet2*, const DWRITE_FONT_AXIS_RANGE*, UINT32, BOOL, UINT32*, UINT32, UINT32*))this->v->tbl[18])(this, fontAxisRanges, fontAxisRangeCount, selectAnyRange, indices, maxIndexCount, actualIndexCount); }
static inline HRESULT                           IDWriteFontSet2_GetFilteredFontIndices1                      (IDWriteFontSet2* this, const DWRITE_FONT_PROPERTY* properties, UINT32 propertyCount, BOOL selectAnyProperty, UINT32* indices, UINT32 maxIndexCount, UINT32* actualIndexCount) { return ((HRESULT (WINAPI*)(IDWriteFontSet2*, const DWRITE_FONT_PROPERTY*, UINT32, BOOL, UINT32*, UINT32, UINT32*))this->v->tbl[19])(this, properties, propertyCount, selectAnyProperty, indices, maxIndexCount, actualIndexCount); }
static inline HRESULT                           IDWriteFontSet2_GetFontAxisRanges                            (IDWriteFontSet2* this, UINT32 listIndex, DWRITE_FONT_AXIS_RANGE* fontAxisRanges, UINT32 maxFontAxisRangeCount, UINT32* actualFontAxisRangeCount) { return ((HRESULT (WINAPI*)(IDWriteFontSet2*, UINT32, DWRITE_FONT_AXIS_RANGE*, UINT32, UINT32*))this->v->tbl[20])(this, listIndex, fontAxisRanges, maxFontAxisRangeCount, actualFontAxisRangeCount); }
static inline HRESULT                           IDWriteFontSet2_GetFontAxisRanges1                           (IDWriteFontSet2* this, DWRITE_FONT_AXIS_RANGE* fontAxisRanges, UINT32 maxFontAxisRangeCount, UINT32* actualFontAxisRangeCount) { return ((HRESULT (WINAPI*)(IDWriteFontSet2*, DWRITE_FONT_AXIS_RANGE*, UINT32, UINT32*))this->v->tbl[21])(this, fontAxisRanges, maxFontAxisRangeCount, actualFontAxisRangeCount); }
static inline HRESULT                           IDWriteFontSet2_GetFontFaceReference1                        (IDWriteFontSet2* this, UINT32 listIndex, IDWriteFontFaceReference1** fontFaceReference) { return ((HRESULT (WINAPI*)(IDWriteFontSet2*, UINT32, IDWriteFontFaceReference1**))this->v->tbl[22])(this, listIndex, fontFaceReference); }
static inline HRESULT                           IDWriteFontSet2_CreateFontResource                           (IDWriteFontSet2* this, UINT32 listIndex, IDWriteFontResource** fontResource) { return ((HRESULT (WINAPI*)(IDWriteFontSet2*, UINT32, IDWriteFontResource**))this->v->tbl[23])(this, listIndex, fontResource); }
static inline HRESULT                           IDWriteFontSet2_CreateFontFace                               (IDWriteFontSet2* this, UINT32 listIndex, IDWriteFontFace5** fontFace) { return ((HRESULT (WINAPI*)(IDWriteFontSet2*, UINT32, IDWriteFontFace5**))this->v->tbl[24])(this, listIndex, fontFace); }
static inline DWRITE_LOCALITY                   IDWriteFontSet2_GetFontLocality                              (IDWriteFontSet2* this, UINT32 listIndex) { return ((DWRITE_LOCALITY (WINAPI*)(IDWriteFontSet2*, UINT32))this->v->tbl[25])(this, listIndex); }
static inline HANDLE                            IDWriteFontSet2_GetExpirationEvent                           (IDWriteFontSet2* this) { return ((HANDLE (WINAPI*)(IDWriteFontSet2*))this->v->tbl[26])(this); }

static inline HRESULT                           IDWriteFontSet3_QueryInterface                               (IDWriteFontSet3* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFontSet3*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFontSet3_AddRef                                       (IDWriteFontSet3* this) { return ((UINT32 (WINAPI*)(IDWriteFontSet3*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFontSet3_Release                                      (IDWriteFontSet3* this) { return ((UINT32 (WINAPI*)(IDWriteFontSet3*))this->v->tbl[2])(this); }
static inline UINT32                            IDWriteFontSet3_GetFontCount                                 (IDWriteFontSet3* this) { return ((UINT32 (WINAPI*)(IDWriteFontSet3*))this->v->tbl[3])(this); }
static inline HRESULT                           IDWriteFontSet3_GetFontFaceReference                         (IDWriteFontSet3* this, UINT32 listIndex, IDWriteFontFaceReference** fontFaceReference) { return ((HRESULT (WINAPI*)(IDWriteFontSet3*, UINT32, IDWriteFontFaceReference**))this->v->tbl[4])(this, listIndex, fontFaceReference); }
static inline HRESULT                           IDWriteFontSet3_FindFontFaceReference                        (IDWriteFontSet3* this, IDWriteFontFaceReference* fontFaceReference, UINT32* listIndex, BOOL* exists) { return ((HRESULT (WINAPI*)(IDWriteFontSet3*, IDWriteFontFaceReference*, UINT32*, BOOL*))this->v->tbl[5])(this, fontFaceReference, listIndex, exists); }
static inline HRESULT                           IDWriteFontSet3_FindFontFace                                 (IDWriteFontSet3* this, IDWriteFontFace* fontFace, UINT32* listIndex, BOOL* exists) { return ((HRESULT (WINAPI*)(IDWriteFontSet3*, IDWriteFontFace*, UINT32*, BOOL*))this->v->tbl[6])(this, fontFace, listIndex, exists); }
static inline HRESULT                           IDWriteFontSet3_GetPropertyValues                            (IDWriteFontSet3* this, DWRITE_FONT_PROPERTY_ID propertyID, IDWriteStringList** values) { return ((HRESULT (WINAPI*)(IDWriteFontSet3*, DWRITE_FONT_PROPERTY_ID, IDWriteStringList**))this->v->tbl[7])(this, propertyID, values); }
static inline HRESULT                           IDWriteFontSet3_GetPropertyValues1                           (IDWriteFontSet3* this, DWRITE_FONT_PROPERTY_ID propertyID, const WCHAR* preferredLocaleNames, IDWriteStringList** values) { return ((HRESULT (WINAPI*)(IDWriteFontSet3*, DWRITE_FONT_PROPERTY_ID, const WCHAR*, IDWriteStringList**))this->v->tbl[8])(this, propertyID, preferredLocaleNames, values); }
static inline HRESULT                           IDWriteFontSet3_GetPropertyValues2                           (IDWriteFontSet3* this, UINT32 listIndex, DWRITE_FONT_PROPERTY_ID propertyId, BOOL* exists, IDWriteLocalizedStrings** values) { return ((HRESULT (WINAPI*)(IDWriteFontSet3*, UINT32, DWRITE_FONT_PROPERTY_ID, BOOL*, IDWriteLocalizedStrings**))this->v->tbl[9])(this, listIndex, propertyId, exists, values); }
static inline HRESULT                           IDWriteFontSet3_GetPropertyOccurrenceCount                   (IDWriteFontSet3* this, const DWRITE_FONT_PROPERTY* property, UINT32* propertyOccurrenceCount) { return ((HRESULT (WINAPI*)(IDWriteFontSet3*, const DWRITE_FONT_PROPERTY*, UINT32*))this->v->tbl[10])(this, property, propertyOccurrenceCount); }
static inline HRESULT                           IDWriteFontSet3_GetMatchingFonts                             (IDWriteFontSet3* this, const WCHAR* familyName, DWRITE_FONT_WEIGHT fontWeight, DWRITE_FONT_STRETCH fontStretch, DWRITE_FONT_STYLE fontStyle, IDWriteFontSet** filteredSet) { return ((HRESULT (WINAPI*)(IDWriteFontSet3*, const WCHAR*, DWRITE_FONT_WEIGHT, DWRITE_FONT_STRETCH, DWRITE_FONT_STYLE, IDWriteFontSet**))this->v->tbl[11])(this, familyName, fontWeight, fontStretch, fontStyle, filteredSet); }
static inline HRESULT                           IDWriteFontSet3_GetMatchingFonts1                            (IDWriteFontSet3* this, const DWRITE_FONT_PROPERTY* properties, UINT32 propertyCount, IDWriteFontSet** filteredSet) { return ((HRESULT (WINAPI*)(IDWriteFontSet3*, const DWRITE_FONT_PROPERTY*, UINT32, IDWriteFontSet**))this->v->tbl[12])(this, properties, propertyCount, filteredSet); }
static inline HRESULT                           IDWriteFontSet3_GetMatchingFonts2                            (IDWriteFontSet3* this, const DWRITE_FONT_PROPERTY* fontProperty, const DWRITE_FONT_AXIS_VALUE* fontAxisValues, UINT32 fontAxisValueCount, IDWriteFontSet1** matchingFonts) { return ((HRESULT (WINAPI*)(IDWriteFontSet3*, const DWRITE_FONT_PROPERTY*, const DWRITE_FONT_AXIS_VALUE*, UINT32, IDWriteFontSet1**))this->v->tbl[13])(this, fontProperty, fontAxisValues, fontAxisValueCount, matchingFonts); }
static inline HRESULT                           IDWriteFontSet3_GetFirstFontResources                        (IDWriteFontSet3* this, IDWriteFontSet1** filteredFontSet) { return ((HRESULT (WINAPI*)(IDWriteFontSet3*, IDWriteFontSet1**))this->v->tbl[14])(this, filteredFontSet); }
static inline HRESULT                           IDWriteFontSet3_GetFilteredFonts                             (IDWriteFontSet3* this, const UINT32* indices, UINT32 indexCount, IDWriteFontSet1** filteredFontSet) { return ((HRESULT (WINAPI*)(IDWriteFontSet3*, const UINT32*, UINT32, IDWriteFontSet1**))this->v->tbl[15])(this, indices, indexCount, filteredFontSet); }
static inline HRESULT                           IDWriteFontSet3_GetFilteredFonts1                            (IDWriteFontSet3* this, const DWRITE_FONT_AXIS_RANGE* fontAxisRanges, UINT32 fontAxisRangeCount, BOOL selectAnyRange, IDWriteFontSet1** filteredFontSet) { return ((HRESULT (WINAPI*)(IDWriteFontSet3*, const DWRITE_FONT_AXIS_RANGE*, UINT32, BOOL, IDWriteFontSet1**))this->v->tbl[16])(this, fontAxisRanges, fontAxisRangeCount, selectAnyRange, filteredFontSet); }
static inline HRESULT                           IDWriteFontSet3_GetFilteredFonts2                            (IDWriteFontSet3* this, const DWRITE_FONT_PROPERTY* properties, UINT32 propertyCount, BOOL selectAnyProperty, IDWriteFontSet1** filteredFontSet) { return ((HRESULT (WINAPI*)(IDWriteFontSet3*, const DWRITE_FONT_PROPERTY*, UINT32, BOOL, IDWriteFontSet1**))this->v->tbl[17])(this, properties, propertyCount, selectAnyProperty, filteredFontSet); }
static inline HRESULT                           IDWriteFontSet3_GetFilteredFontIndices                       (IDWriteFontSet3* this, const DWRITE_FONT_AXIS_RANGE* fontAxisRanges, UINT32 fontAxisRangeCount, BOOL selectAnyRange, UINT32* indices, UINT32 maxIndexCount, UINT32* actualIndexCount) { return ((HRESULT (WINAPI*)(IDWriteFontSet3*, const DWRITE_FONT_AXIS_RANGE*, UINT32, BOOL, UINT32*, UINT32, UINT32*))this->v->tbl[18])(this, fontAxisRanges, fontAxisRangeCount, selectAnyRange, indices, maxIndexCount, actualIndexCount); }
static inline HRESULT                           IDWriteFontSet3_GetFilteredFontIndices1                      (IDWriteFontSet3* this, const DWRITE_FONT_PROPERTY* properties, UINT32 propertyCount, BOOL selectAnyProperty, UINT32* indices, UINT32 maxIndexCount, UINT32* actualIndexCount) { return ((HRESULT (WINAPI*)(IDWriteFontSet3*, const DWRITE_FONT_PROPERTY*, UINT32, BOOL, UINT32*, UINT32, UINT32*))this->v->tbl[19])(this, properties, propertyCount, selectAnyProperty, indices, maxIndexCount, actualIndexCount); }
static inline HRESULT                           IDWriteFontSet3_GetFontAxisRanges                            (IDWriteFontSet3* this, UINT32 listIndex, DWRITE_FONT_AXIS_RANGE* fontAxisRanges, UINT32 maxFontAxisRangeCount, UINT32* actualFontAxisRangeCount) { return ((HRESULT (WINAPI*)(IDWriteFontSet3*, UINT32, DWRITE_FONT_AXIS_RANGE*, UINT32, UINT32*))this->v->tbl[20])(this, listIndex, fontAxisRanges, maxFontAxisRangeCount, actualFontAxisRangeCount); }
static inline HRESULT                           IDWriteFontSet3_GetFontAxisRanges1                           (IDWriteFontSet3* this, DWRITE_FONT_AXIS_RANGE* fontAxisRanges, UINT32 maxFontAxisRangeCount, UINT32* actualFontAxisRangeCount) { return ((HRESULT (WINAPI*)(IDWriteFontSet3*, DWRITE_FONT_AXIS_RANGE*, UINT32, UINT32*))this->v->tbl[21])(this, fontAxisRanges, maxFontAxisRangeCount, actualFontAxisRangeCount); }
static inline HRESULT                           IDWriteFontSet3_GetFontFaceReference1                        (IDWriteFontSet3* this, UINT32 listIndex, IDWriteFontFaceReference1** fontFaceReference) { return ((HRESULT (WINAPI*)(IDWriteFontSet3*, UINT32, IDWriteFontFaceReference1**))this->v->tbl[22])(this, listIndex, fontFaceReference); }
static inline HRESULT                           IDWriteFontSet3_CreateFontResource                           (IDWriteFontSet3* this, UINT32 listIndex, IDWriteFontResource** fontResource) { return ((HRESULT (WINAPI*)(IDWriteFontSet3*, UINT32, IDWriteFontResource**))this->v->tbl[23])(this, listIndex, fontResource); }
static inline HRESULT                           IDWriteFontSet3_CreateFontFace                               (IDWriteFontSet3* this, UINT32 listIndex, IDWriteFontFace5** fontFace) { return ((HRESULT (WINAPI*)(IDWriteFontSet3*, UINT32, IDWriteFontFace5**))this->v->tbl[24])(this, listIndex, fontFace); }
static inline DWRITE_LOCALITY                   IDWriteFontSet3_GetFontLocality                              (IDWriteFontSet3* this, UINT32 listIndex) { return ((DWRITE_LOCALITY (WINAPI*)(IDWriteFontSet3*, UINT32))this->v->tbl[25])(this, listIndex); }
static inline HANDLE                            IDWriteFontSet3_GetExpirationEvent                           (IDWriteFontSet3* this) { return ((HANDLE (WINAPI*)(IDWriteFontSet3*))this->v->tbl[26])(this); }
static inline DWRITE_FONT_SOURCE_TYPE           IDWriteFontSet3_GetFontSourceType                            (IDWriteFontSet3* this, UINT32 fontIndex) { return ((DWRITE_FONT_SOURCE_TYPE (WINAPI*)(IDWriteFontSet3*, UINT32))this->v->tbl[27])(this, fontIndex); }
static inline UINT32                            IDWriteFontSet3_GetFontSourceNameLength                      (IDWriteFontSet3* this, UINT32 listIndex) { return ((UINT32 (WINAPI*)(IDWriteFontSet3*, UINT32))this->v->tbl[28])(this, listIndex); }
static inline HRESULT                           IDWriteFontSet3_GetFontSourceName                            (IDWriteFontSet3* this, UINT32 listIndex, WCHAR* stringBuffer, UINT32 stringBufferSize) { return ((HRESULT (WINAPI*)(IDWriteFontSet3*, UINT32, WCHAR*, UINT32))this->v->tbl[29])(this, listIndex, stringBuffer, stringBufferSize); }

static inline HRESULT                           IDWriteFontSet4_QueryInterface                               (IDWriteFontSet4* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFontSet4*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFontSet4_AddRef                                       (IDWriteFontSet4* this) { return ((UINT32 (WINAPI*)(IDWriteFontSet4*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFontSet4_Release                                      (IDWriteFontSet4* this) { return ((UINT32 (WINAPI*)(IDWriteFontSet4*))this->v->tbl[2])(this); }
static inline UINT32                            IDWriteFontSet4_GetFontCount                                 (IDWriteFontSet4* this) { return ((UINT32 (WINAPI*)(IDWriteFontSet4*))this->v->tbl[3])(this); }
static inline HRESULT                           IDWriteFontSet4_GetFontFaceReference                         (IDWriteFontSet4* this, UINT32 listIndex, IDWriteFontFaceReference** fontFaceReference) { return ((HRESULT (WINAPI*)(IDWriteFontSet4*, UINT32, IDWriteFontFaceReference**))this->v->tbl[4])(this, listIndex, fontFaceReference); }
static inline HRESULT                           IDWriteFontSet4_FindFontFaceReference                        (IDWriteFontSet4* this, IDWriteFontFaceReference* fontFaceReference, UINT32* listIndex, BOOL* exists) { return ((HRESULT (WINAPI*)(IDWriteFontSet4*, IDWriteFontFaceReference*, UINT32*, BOOL*))this->v->tbl[5])(this, fontFaceReference, listIndex, exists); }
static inline HRESULT                           IDWriteFontSet4_FindFontFace                                 (IDWriteFontSet4* this, IDWriteFontFace* fontFace, UINT32* listIndex, BOOL* exists) { return ((HRESULT (WINAPI*)(IDWriteFontSet4*, IDWriteFontFace*, UINT32*, BOOL*))this->v->tbl[6])(this, fontFace, listIndex, exists); }
static inline HRESULT                           IDWriteFontSet4_GetPropertyValues                            (IDWriteFontSet4* this, DWRITE_FONT_PROPERTY_ID propertyID, IDWriteStringList** values) { return ((HRESULT (WINAPI*)(IDWriteFontSet4*, DWRITE_FONT_PROPERTY_ID, IDWriteStringList**))this->v->tbl[7])(this, propertyID, values); }
static inline HRESULT                           IDWriteFontSet4_GetPropertyValues1                           (IDWriteFontSet4* this, DWRITE_FONT_PROPERTY_ID propertyID, const WCHAR* preferredLocaleNames, IDWriteStringList** values) { return ((HRESULT (WINAPI*)(IDWriteFontSet4*, DWRITE_FONT_PROPERTY_ID, const WCHAR*, IDWriteStringList**))this->v->tbl[8])(this, propertyID, preferredLocaleNames, values); }
static inline HRESULT                           IDWriteFontSet4_GetPropertyValues2                           (IDWriteFontSet4* this, UINT32 listIndex, DWRITE_FONT_PROPERTY_ID propertyId, BOOL* exists, IDWriteLocalizedStrings** values) { return ((HRESULT (WINAPI*)(IDWriteFontSet4*, UINT32, DWRITE_FONT_PROPERTY_ID, BOOL*, IDWriteLocalizedStrings**))this->v->tbl[9])(this, listIndex, propertyId, exists, values); }
static inline HRESULT                           IDWriteFontSet4_GetPropertyOccurrenceCount                   (IDWriteFontSet4* this, const DWRITE_FONT_PROPERTY* property, UINT32* propertyOccurrenceCount) { return ((HRESULT (WINAPI*)(IDWriteFontSet4*, const DWRITE_FONT_PROPERTY*, UINT32*))this->v->tbl[10])(this, property, propertyOccurrenceCount); }
static inline HRESULT                           IDWriteFontSet4_GetMatchingFonts                             (IDWriteFontSet4* this, const WCHAR* familyName, DWRITE_FONT_WEIGHT fontWeight, DWRITE_FONT_STRETCH fontStretch, DWRITE_FONT_STYLE fontStyle, IDWriteFontSet** filteredSet) { return ((HRESULT (WINAPI*)(IDWriteFontSet4*, const WCHAR*, DWRITE_FONT_WEIGHT, DWRITE_FONT_STRETCH, DWRITE_FONT_STYLE, IDWriteFontSet**))this->v->tbl[11])(this, familyName, fontWeight, fontStretch, fontStyle, filteredSet); }
static inline HRESULT                           IDWriteFontSet4_GetMatchingFonts1                            (IDWriteFontSet4* this, const DWRITE_FONT_PROPERTY* properties, UINT32 propertyCount, IDWriteFontSet** filteredSet) { return ((HRESULT (WINAPI*)(IDWriteFontSet4*, const DWRITE_FONT_PROPERTY*, UINT32, IDWriteFontSet**))this->v->tbl[12])(this, properties, propertyCount, filteredSet); }
static inline HRESULT                           IDWriteFontSet4_GetMatchingFonts2                            (IDWriteFontSet4* this, const DWRITE_FONT_PROPERTY* fontProperty, const DWRITE_FONT_AXIS_VALUE* fontAxisValues, UINT32 fontAxisValueCount, IDWriteFontSet1** matchingFonts) { return ((HRESULT (WINAPI*)(IDWriteFontSet4*, const DWRITE_FONT_PROPERTY*, const DWRITE_FONT_AXIS_VALUE*, UINT32, IDWriteFontSet1**))this->v->tbl[13])(this, fontProperty, fontAxisValues, fontAxisValueCount, matchingFonts); }
static inline HRESULT                           IDWriteFontSet4_GetFirstFontResources                        (IDWriteFontSet4* this, IDWriteFontSet1** filteredFontSet) { return ((HRESULT (WINAPI*)(IDWriteFontSet4*, IDWriteFontSet1**))this->v->tbl[14])(this, filteredFontSet); }
static inline HRESULT                           IDWriteFontSet4_GetFilteredFonts                             (IDWriteFontSet4* this, const UINT32* indices, UINT32 indexCount, IDWriteFontSet1** filteredFontSet) { return ((HRESULT (WINAPI*)(IDWriteFontSet4*, const UINT32*, UINT32, IDWriteFontSet1**))this->v->tbl[15])(this, indices, indexCount, filteredFontSet); }
static inline HRESULT                           IDWriteFontSet4_GetFilteredFonts1                            (IDWriteFontSet4* this, const DWRITE_FONT_AXIS_RANGE* fontAxisRanges, UINT32 fontAxisRangeCount, BOOL selectAnyRange, IDWriteFontSet1** filteredFontSet) { return ((HRESULT (WINAPI*)(IDWriteFontSet4*, const DWRITE_FONT_AXIS_RANGE*, UINT32, BOOL, IDWriteFontSet1**))this->v->tbl[16])(this, fontAxisRanges, fontAxisRangeCount, selectAnyRange, filteredFontSet); }
static inline HRESULT                           IDWriteFontSet4_GetFilteredFonts2                            (IDWriteFontSet4* this, const DWRITE_FONT_PROPERTY* properties, UINT32 propertyCount, BOOL selectAnyProperty, IDWriteFontSet1** filteredFontSet) { return ((HRESULT (WINAPI*)(IDWriteFontSet4*, const DWRITE_FONT_PROPERTY*, UINT32, BOOL, IDWriteFontSet1**))this->v->tbl[17])(this, properties, propertyCount, selectAnyProperty, filteredFontSet); }
static inline HRESULT                           IDWriteFontSet4_GetFilteredFontIndices                       (IDWriteFontSet4* this, const DWRITE_FONT_AXIS_RANGE* fontAxisRanges, UINT32 fontAxisRangeCount, BOOL selectAnyRange, UINT32* indices, UINT32 maxIndexCount, UINT32* actualIndexCount) { return ((HRESULT (WINAPI*)(IDWriteFontSet4*, const DWRITE_FONT_AXIS_RANGE*, UINT32, BOOL, UINT32*, UINT32, UINT32*))this->v->tbl[18])(this, fontAxisRanges, fontAxisRangeCount, selectAnyRange, indices, maxIndexCount, actualIndexCount); }
static inline HRESULT                           IDWriteFontSet4_GetFilteredFontIndices1                      (IDWriteFontSet4* this, const DWRITE_FONT_PROPERTY* properties, UINT32 propertyCount, BOOL selectAnyProperty, UINT32* indices, UINT32 maxIndexCount, UINT32* actualIndexCount) { return ((HRESULT (WINAPI*)(IDWriteFontSet4*, const DWRITE_FONT_PROPERTY*, UINT32, BOOL, UINT32*, UINT32, UINT32*))this->v->tbl[19])(this, properties, propertyCount, selectAnyProperty, indices, maxIndexCount, actualIndexCount); }
static inline HRESULT                           IDWriteFontSet4_GetFontAxisRanges                            (IDWriteFontSet4* this, UINT32 listIndex, DWRITE_FONT_AXIS_RANGE* fontAxisRanges, UINT32 maxFontAxisRangeCount, UINT32* actualFontAxisRangeCount) { return ((HRESULT (WINAPI*)(IDWriteFontSet4*, UINT32, DWRITE_FONT_AXIS_RANGE*, UINT32, UINT32*))this->v->tbl[20])(this, listIndex, fontAxisRanges, maxFontAxisRangeCount, actualFontAxisRangeCount); }
static inline HRESULT                           IDWriteFontSet4_GetFontAxisRanges1                           (IDWriteFontSet4* this, DWRITE_FONT_AXIS_RANGE* fontAxisRanges, UINT32 maxFontAxisRangeCount, UINT32* actualFontAxisRangeCount) { return ((HRESULT (WINAPI*)(IDWriteFontSet4*, DWRITE_FONT_AXIS_RANGE*, UINT32, UINT32*))this->v->tbl[21])(this, fontAxisRanges, maxFontAxisRangeCount, actualFontAxisRangeCount); }
static inline HRESULT                           IDWriteFontSet4_GetFontFaceReference1                        (IDWriteFontSet4* this, UINT32 listIndex, IDWriteFontFaceReference1** fontFaceReference) { return ((HRESULT (WINAPI*)(IDWriteFontSet4*, UINT32, IDWriteFontFaceReference1**))this->v->tbl[22])(this, listIndex, fontFaceReference); }
static inline HRESULT                           IDWriteFontSet4_CreateFontResource                           (IDWriteFontSet4* this, UINT32 listIndex, IDWriteFontResource** fontResource) { return ((HRESULT (WINAPI*)(IDWriteFontSet4*, UINT32, IDWriteFontResource**))this->v->tbl[23])(this, listIndex, fontResource); }
static inline HRESULT                           IDWriteFontSet4_CreateFontFace                               (IDWriteFontSet4* this, UINT32 listIndex, IDWriteFontFace5** fontFace) { return ((HRESULT (WINAPI*)(IDWriteFontSet4*, UINT32, IDWriteFontFace5**))this->v->tbl[24])(this, listIndex, fontFace); }
static inline DWRITE_LOCALITY                   IDWriteFontSet4_GetFontLocality                              (IDWriteFontSet4* this, UINT32 listIndex) { return ((DWRITE_LOCALITY (WINAPI*)(IDWriteFontSet4*, UINT32))this->v->tbl[25])(this, listIndex); }
static inline HANDLE                            IDWriteFontSet4_GetExpirationEvent                           (IDWriteFontSet4* this) { return ((HANDLE (WINAPI*)(IDWriteFontSet4*))this->v->tbl[26])(this); }
static inline DWRITE_FONT_SOURCE_TYPE           IDWriteFontSet4_GetFontSourceType                            (IDWriteFontSet4* this, UINT32 fontIndex) { return ((DWRITE_FONT_SOURCE_TYPE (WINAPI*)(IDWriteFontSet4*, UINT32))this->v->tbl[27])(this, fontIndex); }
static inline UINT32                            IDWriteFontSet4_GetFontSourceNameLength                      (IDWriteFontSet4* this, UINT32 listIndex) { return ((UINT32 (WINAPI*)(IDWriteFontSet4*, UINT32))this->v->tbl[28])(this, listIndex); }
static inline HRESULT                           IDWriteFontSet4_GetFontSourceName                            (IDWriteFontSet4* this, UINT32 listIndex, WCHAR* stringBuffer, UINT32 stringBufferSize) { return ((HRESULT (WINAPI*)(IDWriteFontSet4*, UINT32, WCHAR*, UINT32))this->v->tbl[29])(this, listIndex, stringBuffer, stringBufferSize); }
static inline UINT32                            IDWriteFontSet4_ConvertWeightStretchStyleToFontAxisValues    (IDWriteFontSet4* this, const DWRITE_FONT_AXIS_VALUE* inputAxisValues, UINT32 inputAxisCount, DWRITE_FONT_WEIGHT fontWeight, DWRITE_FONT_STRETCH fontStretch, DWRITE_FONT_STYLE fontStyle, FLOAT fontSize, DWRITE_FONT_AXIS_VALUE* outputAxisValues) { return ((UINT32 (WINAPI*)(IDWriteFontSet4*, const DWRITE_FONT_AXIS_VALUE*, UINT32, DWRITE_FONT_WEIGHT, DWRITE_FONT_STRETCH, DWRITE_FONT_STYLE, FLOAT, DWRITE_FONT_AXIS_VALUE*))this->v->tbl[30])(this, inputAxisValues, inputAxisCount, fontWeight, fontStretch, fontStyle, fontSize, outputAxisValues); }
static inline HRESULT                           IDWriteFontSet4_GetMatchingFonts3                            (IDWriteFontSet4* this, const WCHAR* familyName, const DWRITE_FONT_AXIS_VALUE* fontAxisValues, UINT32 fontAxisValueCount, DWRITE_FONT_SIMULATIONS allowedSimulations, IDWriteFontSet4** matchingFonts) { return ((HRESULT (WINAPI*)(IDWriteFontSet4*, const WCHAR*, const DWRITE_FONT_AXIS_VALUE*, UINT32, DWRITE_FONT_SIMULATIONS, IDWriteFontSet4**))this->v->tbl[31])(this, familyName, fontAxisValues, fontAxisValueCount, allowedSimulations, matchingFonts); }

static inline HRESULT                           IDWriteFontSetBuilder_QueryInterface                         (IDWriteFontSetBuilder* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFontSetBuilder*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFontSetBuilder_AddRef                                 (IDWriteFontSetBuilder* this) { return ((UINT32 (WINAPI*)(IDWriteFontSetBuilder*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFontSetBuilder_Release                                (IDWriteFontSetBuilder* this) { return ((UINT32 (WINAPI*)(IDWriteFontSetBuilder*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteFontSetBuilder_AddFontFaceReference                   (IDWriteFontSetBuilder* this, IDWriteFontFaceReference* fontFaceReference, const DWRITE_FONT_PROPERTY* properties, UINT32 propertyCount) { return ((HRESULT (WINAPI*)(IDWriteFontSetBuilder*, IDWriteFontFaceReference*, const DWRITE_FONT_PROPERTY*, UINT32))this->v->tbl[3])(this, fontFaceReference, properties, propertyCount); }
static inline HRESULT                           IDWriteFontSetBuilder_AddFontFaceReference1                  (IDWriteFontSetBuilder* this, IDWriteFontFaceReference* fontFaceReference) { return ((HRESULT (WINAPI*)(IDWriteFontSetBuilder*, IDWriteFontFaceReference*))this->v->tbl[4])(this, fontFaceReference); }
static inline HRESULT                           IDWriteFontSetBuilder_AddFontSet                             (IDWriteFontSetBuilder* this, IDWriteFontSet* fontSet) { return ((HRESULT (WINAPI*)(IDWriteFontSetBuilder*, IDWriteFontSet*))this->v->tbl[5])(this, fontSet); }
static inline HRESULT                           IDWriteFontSetBuilder_CreateFontSet                          (IDWriteFontSetBuilder* this, IDWriteFontSet** fontSet) { return ((HRESULT (WINAPI*)(IDWriteFontSetBuilder*, IDWriteFontSet**))this->v->tbl[6])(this, fontSet); }

static inline HRESULT                           IDWriteFontSetBuilder1_QueryInterface                        (IDWriteFontSetBuilder1* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFontSetBuilder1*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFontSetBuilder1_AddRef                                (IDWriteFontSetBuilder1* this) { return ((UINT32 (WINAPI*)(IDWriteFontSetBuilder1*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFontSetBuilder1_Release                               (IDWriteFontSetBuilder1* this) { return ((UINT32 (WINAPI*)(IDWriteFontSetBuilder1*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteFontSetBuilder1_AddFontFaceReference                  (IDWriteFontSetBuilder1* this, IDWriteFontFaceReference* fontFaceReference, const DWRITE_FONT_PROPERTY* properties, UINT32 propertyCount) { return ((HRESULT (WINAPI*)(IDWriteFontSetBuilder1*, IDWriteFontFaceReference*, const DWRITE_FONT_PROPERTY*, UINT32))this->v->tbl[3])(this, fontFaceReference, properties, propertyCount); }
static inline HRESULT                           IDWriteFontSetBuilder1_AddFontFaceReference1                 (IDWriteFontSetBuilder1* this, IDWriteFontFaceReference* fontFaceReference) { return ((HRESULT (WINAPI*)(IDWriteFontSetBuilder1*, IDWriteFontFaceReference*))this->v->tbl[4])(this, fontFaceReference); }
static inline HRESULT                           IDWriteFontSetBuilder1_AddFontSet                            (IDWriteFontSetBuilder1* this, IDWriteFontSet* fontSet) { return ((HRESULT (WINAPI*)(IDWriteFontSetBuilder1*, IDWriteFontSet*))this->v->tbl[5])(this, fontSet); }
static inline HRESULT                           IDWriteFontSetBuilder1_CreateFontSet                         (IDWriteFontSetBuilder1* this, IDWriteFontSet** fontSet) { return ((HRESULT (WINAPI*)(IDWriteFontSetBuilder1*, IDWriteFontSet**))this->v->tbl[6])(this, fontSet); }
static inline HRESULT                           IDWriteFontSetBuilder1_AddFontFile                           (IDWriteFontSetBuilder1* this, IDWriteFontFile* fontFile) { return ((HRESULT (WINAPI*)(IDWriteFontSetBuilder1*, IDWriteFontFile*))this->v->tbl[7])(this, fontFile); }

static inline HRESULT                           IDWriteFontSetBuilder2_QueryInterface                        (IDWriteFontSetBuilder2* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteFontSetBuilder2*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteFontSetBuilder2_AddRef                                (IDWriteFontSetBuilder2* this) { return ((UINT32 (WINAPI*)(IDWriteFontSetBuilder2*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteFontSetBuilder2_Release                               (IDWriteFontSetBuilder2* this) { return ((UINT32 (WINAPI*)(IDWriteFontSetBuilder2*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteFontSetBuilder2_AddFontFaceReference                  (IDWriteFontSetBuilder2* this, IDWriteFontFaceReference* fontFaceReference, const DWRITE_FONT_PROPERTY* properties, UINT32 propertyCount) { return ((HRESULT (WINAPI*)(IDWriteFontSetBuilder2*, IDWriteFontFaceReference*, const DWRITE_FONT_PROPERTY*, UINT32))this->v->tbl[3])(this, fontFaceReference, properties, propertyCount); }
static inline HRESULT                           IDWriteFontSetBuilder2_AddFontFaceReference1                 (IDWriteFontSetBuilder2* this, IDWriteFontFaceReference* fontFaceReference) { return ((HRESULT (WINAPI*)(IDWriteFontSetBuilder2*, IDWriteFontFaceReference*))this->v->tbl[4])(this, fontFaceReference); }
static inline HRESULT                           IDWriteFontSetBuilder2_AddFontSet                            (IDWriteFontSetBuilder2* this, IDWriteFontSet* fontSet) { return ((HRESULT (WINAPI*)(IDWriteFontSetBuilder2*, IDWriteFontSet*))this->v->tbl[5])(this, fontSet); }
static inline HRESULT                           IDWriteFontSetBuilder2_CreateFontSet                         (IDWriteFontSetBuilder2* this, IDWriteFontSet** fontSet) { return ((HRESULT (WINAPI*)(IDWriteFontSetBuilder2*, IDWriteFontSet**))this->v->tbl[6])(this, fontSet); }
static inline HRESULT                           IDWriteFontSetBuilder2_AddFontFile                           (IDWriteFontSetBuilder2* this, IDWriteFontFile* fontFile) { return ((HRESULT (WINAPI*)(IDWriteFontSetBuilder2*, IDWriteFontFile*))this->v->tbl[7])(this, fontFile); }
static inline HRESULT                           IDWriteFontSetBuilder2_AddFont                               (IDWriteFontSetBuilder2* this, IDWriteFontFile* fontFile, UINT32 fontFaceIndex, DWRITE_FONT_SIMULATIONS fontSimulations, const DWRITE_FONT_AXIS_VALUE* fontAxisValues, UINT32 fontAxisValueCount, const DWRITE_FONT_AXIS_RANGE* fontAxisRanges, UINT32 fontAxisRangeCount, const DWRITE_FONT_PROPERTY* properties, UINT32 propertyCount) { return ((HRESULT (WINAPI*)(IDWriteFontSetBuilder2*, IDWriteFontFile*, UINT32, DWRITE_FONT_SIMULATIONS, const DWRITE_FONT_AXIS_VALUE*, UINT32, const DWRITE_FONT_AXIS_RANGE*, UINT32, const DWRITE_FONT_PROPERTY*, UINT32))this->v->tbl[8])(this, fontFile, fontFaceIndex, fontSimulations, fontAxisValues, fontAxisValueCount, fontAxisRanges, fontAxisRangeCount, properties, propertyCount); }
static inline HRESULT                           IDWriteFontSetBuilder2_AddFontFile1                          (IDWriteFontSetBuilder2* this, const WCHAR* filePath) { return ((HRESULT (WINAPI*)(IDWriteFontSetBuilder2*, const WCHAR*))this->v->tbl[9])(this, filePath); }

static inline HRESULT                           IDWriteGdiInterop_QueryInterface                             (IDWriteGdiInterop* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteGdiInterop*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteGdiInterop_AddRef                                     (IDWriteGdiInterop* this) { return ((UINT32 (WINAPI*)(IDWriteGdiInterop*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteGdiInterop_Release                                    (IDWriteGdiInterop* this) { return ((UINT32 (WINAPI*)(IDWriteGdiInterop*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteGdiInterop_CreateFontFromLOGFONT                      (IDWriteGdiInterop* this, const LOGFONTW* logFont, IDWriteFont** font) { return ((HRESULT (WINAPI*)(IDWriteGdiInterop*, const LOGFONTW*, IDWriteFont**))this->v->tbl[3])(this, logFont, font); }
static inline HRESULT                           IDWriteGdiInterop_ConvertFontToLOGFONT                       (IDWriteGdiInterop* this, IDWriteFont* font, LOGFONTW* logFont, BOOL* isSystemFont) { return ((HRESULT (WINAPI*)(IDWriteGdiInterop*, IDWriteFont*, LOGFONTW*, BOOL*))this->v->tbl[4])(this, font, logFont, isSystemFont); }
static inline HRESULT                           IDWriteGdiInterop_ConvertFontFaceToLOGFONT                   (IDWriteGdiInterop* this, IDWriteFontFace* font, LOGFONTW* logFont) { return ((HRESULT (WINAPI*)(IDWriteGdiInterop*, IDWriteFontFace*, LOGFONTW*))this->v->tbl[5])(this, font, logFont); }
static inline HRESULT                           IDWriteGdiInterop_CreateFontFaceFromHdc                      (IDWriteGdiInterop* this, HDC hdc, IDWriteFontFace** fontFace) { return ((HRESULT (WINAPI*)(IDWriteGdiInterop*, HDC, IDWriteFontFace**))this->v->tbl[6])(this, hdc, fontFace); }
static inline HRESULT                           IDWriteGdiInterop_CreateBitmapRenderTarget                   (IDWriteGdiInterop* this, HDC hdc, UINT32 width, UINT32 height, IDWriteBitmapRenderTarget** renderTarget) { return ((HRESULT (WINAPI*)(IDWriteGdiInterop*, HDC, UINT32, UINT32, IDWriteBitmapRenderTarget**))this->v->tbl[7])(this, hdc, width, height, renderTarget); }

static inline HRESULT                           IDWriteGdiInterop1_QueryInterface                            (IDWriteGdiInterop1* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteGdiInterop1*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteGdiInterop1_AddRef                                    (IDWriteGdiInterop1* this) { return ((UINT32 (WINAPI*)(IDWriteGdiInterop1*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteGdiInterop1_Release                                   (IDWriteGdiInterop1* this) { return ((UINT32 (WINAPI*)(IDWriteGdiInterop1*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteGdiInterop1_CreateFontFromLOGFONT                     (IDWriteGdiInterop1* this, const LOGFONTW* logFont, IDWriteFont** font) { return ((HRESULT (WINAPI*)(IDWriteGdiInterop1*, const LOGFONTW*, IDWriteFont**))this->v->tbl[3])(this, logFont, font); }
static inline HRESULT                           IDWriteGdiInterop1_ConvertFontToLOGFONT                      (IDWriteGdiInterop1* this, IDWriteFont* font, LOGFONTW* logFont, BOOL* isSystemFont) { return ((HRESULT (WINAPI*)(IDWriteGdiInterop1*, IDWriteFont*, LOGFONTW*, BOOL*))this->v->tbl[4])(this, font, logFont, isSystemFont); }
static inline HRESULT                           IDWriteGdiInterop1_ConvertFontFaceToLOGFONT                  (IDWriteGdiInterop1* this, IDWriteFontFace* font, LOGFONTW* logFont) { return ((HRESULT (WINAPI*)(IDWriteGdiInterop1*, IDWriteFontFace*, LOGFONTW*))this->v->tbl[5])(this, font, logFont); }
static inline HRESULT                           IDWriteGdiInterop1_CreateFontFaceFromHdc                     (IDWriteGdiInterop1* this, HDC hdc, IDWriteFontFace** fontFace) { return ((HRESULT (WINAPI*)(IDWriteGdiInterop1*, HDC, IDWriteFontFace**))this->v->tbl[6])(this, hdc, fontFace); }
static inline HRESULT                           IDWriteGdiInterop1_CreateBitmapRenderTarget                  (IDWriteGdiInterop1* this, HDC hdc, UINT32 width, UINT32 height, IDWriteBitmapRenderTarget** renderTarget) { return ((HRESULT (WINAPI*)(IDWriteGdiInterop1*, HDC, UINT32, UINT32, IDWriteBitmapRenderTarget**))this->v->tbl[7])(this, hdc, width, height, renderTarget); }
static inline HRESULT                           IDWriteGdiInterop1_CreateFontFromLOGFONT1                    (IDWriteGdiInterop1* this, const LOGFONTW* logFont, IDWriteFontCollection* fontCollection, IDWriteFont** font) { return ((HRESULT (WINAPI*)(IDWriteGdiInterop1*, const LOGFONTW*, IDWriteFontCollection*, IDWriteFont**))this->v->tbl[8])(this, logFont, fontCollection, font); }
static inline HRESULT                           IDWriteGdiInterop1_GetFontSignature                          (IDWriteGdiInterop1* this, IDWriteFontFace* fontFace, FONTSIGNATURE* fontSignature) { return ((HRESULT (WINAPI*)(IDWriteGdiInterop1*, IDWriteFontFace*, FONTSIGNATURE*))this->v->tbl[9])(this, fontFace, fontSignature); }
static inline HRESULT                           IDWriteGdiInterop1_GetFontSignature1                         (IDWriteGdiInterop1* this, IDWriteFont* font, FONTSIGNATURE* fontSignature) { return ((HRESULT (WINAPI*)(IDWriteGdiInterop1*, IDWriteFont*, FONTSIGNATURE*))this->v->tbl[10])(this, font, fontSignature); }
static inline HRESULT                           IDWriteGdiInterop1_GetMatchingFontsByLOGFONT                 (IDWriteGdiInterop1* this, const LOGFONTA* logFont, IDWriteFontSet* fontSet, IDWriteFontSet** filteredSet) { return ((HRESULT (WINAPI*)(IDWriteGdiInterop1*, const LOGFONTA*, IDWriteFontSet*, IDWriteFontSet**))this->v->tbl[11])(this, logFont, fontSet, filteredSet); }

static inline HRESULT                           IDWriteGlyphRunAnalysis_QueryInterface                       (IDWriteGlyphRunAnalysis* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteGlyphRunAnalysis*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteGlyphRunAnalysis_AddRef                               (IDWriteGlyphRunAnalysis* this) { return ((UINT32 (WINAPI*)(IDWriteGlyphRunAnalysis*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteGlyphRunAnalysis_Release                              (IDWriteGlyphRunAnalysis* this) { return ((UINT32 (WINAPI*)(IDWriteGlyphRunAnalysis*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteGlyphRunAnalysis_GetAlphaTextureBounds                (IDWriteGlyphRunAnalysis* this, DWRITE_TEXTURE_TYPE textureType, RECT* textureBounds) { return ((HRESULT (WINAPI*)(IDWriteGlyphRunAnalysis*, DWRITE_TEXTURE_TYPE, RECT*))this->v->tbl[3])(this, textureType, textureBounds); }
static inline HRESULT                           IDWriteGlyphRunAnalysis_CreateAlphaTexture                   (IDWriteGlyphRunAnalysis* this, DWRITE_TEXTURE_TYPE textureType, const RECT* textureBounds, UINT8* alphaValues, UINT32 bufferSize) { return ((HRESULT (WINAPI*)(IDWriteGlyphRunAnalysis*, DWRITE_TEXTURE_TYPE, const RECT*, UINT8*, UINT32))this->v->tbl[4])(this, textureType, textureBounds, alphaValues, bufferSize); }
static inline HRESULT                           IDWriteGlyphRunAnalysis_GetAlphaBlendParams                  (IDWriteGlyphRunAnalysis* this, IDWriteRenderingParams* renderingParams, FLOAT* blendGamma, FLOAT* blendEnhancedContrast, FLOAT* blendClearTypeLevel) { return ((HRESULT (WINAPI*)(IDWriteGlyphRunAnalysis*, IDWriteRenderingParams*, FLOAT*, FLOAT*, FLOAT*))this->v->tbl[5])(this, renderingParams, blendGamma, blendEnhancedContrast, blendClearTypeLevel); }

static inline HRESULT                           IDWriteInlineObject_QueryInterface                           (IDWriteInlineObject* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteInlineObject*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteInlineObject_AddRef                                   (IDWriteInlineObject* this) { return ((UINT32 (WINAPI*)(IDWriteInlineObject*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteInlineObject_Release                                  (IDWriteInlineObject* this) { return ((UINT32 (WINAPI*)(IDWriteInlineObject*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteInlineObject_Draw                                     (IDWriteInlineObject* this, void* clientDrawingContext, IDWriteTextRenderer* renderer, FLOAT originX, FLOAT originY, BOOL isSideways, BOOL isRightToLeft, IUnknown* clientDrawingEffect) { return ((HRESULT (WINAPI*)(IDWriteInlineObject*, void*, IDWriteTextRenderer*, FLOAT, FLOAT, BOOL, BOOL, IUnknown*))this->v->tbl[3])(this, clientDrawingContext, renderer, originX, originY, isSideways, isRightToLeft, clientDrawingEffect); }
static inline HRESULT                           IDWriteInlineObject_GetMetrics                               (IDWriteInlineObject* this, DWRITE_INLINE_OBJECT_METRICS* metrics) { return ((HRESULT (WINAPI*)(IDWriteInlineObject*, DWRITE_INLINE_OBJECT_METRICS*))this->v->tbl[4])(this, metrics); }
static inline HRESULT                           IDWriteInlineObject_GetOverhangMetrics                       (IDWriteInlineObject* this, DWRITE_OVERHANG_METRICS* overhangs) { return ((HRESULT (WINAPI*)(IDWriteInlineObject*, DWRITE_OVERHANG_METRICS*))this->v->tbl[5])(this, overhangs); }
static inline HRESULT                           IDWriteInlineObject_GetBreakConditions                       (IDWriteInlineObject* this, DWRITE_BREAK_CONDITION* breakConditionBefore, DWRITE_BREAK_CONDITION* breakConditionAfter) { return ((HRESULT (WINAPI*)(IDWriteInlineObject*, DWRITE_BREAK_CONDITION*, DWRITE_BREAK_CONDITION*))this->v->tbl[6])(this, breakConditionBefore, breakConditionAfter); }

static inline HRESULT                           IDWriteInMemoryFontFileLoader_QueryInterface                 (IDWriteInMemoryFontFileLoader* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteInMemoryFontFileLoader*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteInMemoryFontFileLoader_AddRef                         (IDWriteInMemoryFontFileLoader* this) { return ((UINT32 (WINAPI*)(IDWriteInMemoryFontFileLoader*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteInMemoryFontFileLoader_Release                        (IDWriteInMemoryFontFileLoader* this) { return ((UINT32 (WINAPI*)(IDWriteInMemoryFontFileLoader*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteInMemoryFontFileLoader_CreateStreamFromKey            (IDWriteInMemoryFontFileLoader* this, const void* fontFileReferenceKey, UINT32 fontFileReferenceKeySize, IDWriteFontFileStream** fontFileStream) { return ((HRESULT (WINAPI*)(IDWriteInMemoryFontFileLoader*, const void*, UINT32, IDWriteFontFileStream**))this->v->tbl[3])(this, fontFileReferenceKey, fontFileReferenceKeySize, fontFileStream); }
static inline HRESULT                           IDWriteInMemoryFontFileLoader_CreateInMemoryFontFileReference(IDWriteInMemoryFontFileLoader* this, IDWriteFactory* factory, const void* fontData, UINT32 fontDataSize, IUnknown* ownerObject, IDWriteFontFile** fontFile) { return ((HRESULT (WINAPI*)(IDWriteInMemoryFontFileLoader*, IDWriteFactory*, const void*, UINT32, IUnknown*, IDWriteFontFile**))this->v->tbl[4])(this, factory, fontData, fontDataSize, ownerObject, fontFile); }
static inline UINT32                            IDWriteInMemoryFontFileLoader_GetFileCount                   (IDWriteInMemoryFontFileLoader* this) { return ((UINT32 (WINAPI*)(IDWriteInMemoryFontFileLoader*))this->v->tbl[5])(this); }

static inline HRESULT                           IDWriteLocalFontFileLoader_QueryInterface                    (IDWriteLocalFontFileLoader* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteLocalFontFileLoader*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteLocalFontFileLoader_AddRef                            (IDWriteLocalFontFileLoader* this) { return ((UINT32 (WINAPI*)(IDWriteLocalFontFileLoader*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteLocalFontFileLoader_Release                           (IDWriteLocalFontFileLoader* this) { return ((UINT32 (WINAPI*)(IDWriteLocalFontFileLoader*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteLocalFontFileLoader_CreateStreamFromKey               (IDWriteLocalFontFileLoader* this, const void* fontFileReferenceKey, UINT32 fontFileReferenceKeySize, IDWriteFontFileStream** fontFileStream) { return ((HRESULT (WINAPI*)(IDWriteLocalFontFileLoader*, const void*, UINT32, IDWriteFontFileStream**))this->v->tbl[3])(this, fontFileReferenceKey, fontFileReferenceKeySize, fontFileStream); }
static inline HRESULT                           IDWriteLocalFontFileLoader_GetFilePathLengthFromKey          (IDWriteLocalFontFileLoader* this, const void* fontFileReferenceKey, UINT32 fontFileReferenceKeySize, UINT32* filePathLength) { return ((HRESULT (WINAPI*)(IDWriteLocalFontFileLoader*, const void*, UINT32, UINT32*))this->v->tbl[4])(this, fontFileReferenceKey, fontFileReferenceKeySize, filePathLength); }
static inline HRESULT                           IDWriteLocalFontFileLoader_GetFilePathFromKey                (IDWriteLocalFontFileLoader* this, const void* fontFileReferenceKey, UINT32 fontFileReferenceKeySize, WCHAR* filePath, UINT32 filePathSize) { return ((HRESULT (WINAPI*)(IDWriteLocalFontFileLoader*, const void*, UINT32, WCHAR*, UINT32))this->v->tbl[5])(this, fontFileReferenceKey, fontFileReferenceKeySize, filePath, filePathSize); }
static inline HRESULT                           IDWriteLocalFontFileLoader_GetLastWriteTimeFromKey           (IDWriteLocalFontFileLoader* this, const void* fontFileReferenceKey, UINT32 fontFileReferenceKeySize, FILETIME* lastWriteTime) { return ((HRESULT (WINAPI*)(IDWriteLocalFontFileLoader*, const void*, UINT32, FILETIME*))this->v->tbl[6])(this, fontFileReferenceKey, fontFileReferenceKeySize, lastWriteTime); }

static inline HRESULT                           IDWriteLocalizedStrings_QueryInterface                       (IDWriteLocalizedStrings* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteLocalizedStrings*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteLocalizedStrings_AddRef                               (IDWriteLocalizedStrings* this) { return ((UINT32 (WINAPI*)(IDWriteLocalizedStrings*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteLocalizedStrings_Release                              (IDWriteLocalizedStrings* this) { return ((UINT32 (WINAPI*)(IDWriteLocalizedStrings*))this->v->tbl[2])(this); }
static inline UINT32                            IDWriteLocalizedStrings_GetCount                             (IDWriteLocalizedStrings* this) { return ((UINT32 (WINAPI*)(IDWriteLocalizedStrings*))this->v->tbl[3])(this); }
static inline HRESULT                           IDWriteLocalizedStrings_FindLocaleName                       (IDWriteLocalizedStrings* this, const WCHAR* localeName, UINT32* index, BOOL* exists) { return ((HRESULT (WINAPI*)(IDWriteLocalizedStrings*, const WCHAR*, UINT32*, BOOL*))this->v->tbl[4])(this, localeName, index, exists); }
static inline HRESULT                           IDWriteLocalizedStrings_GetLocaleNameLength                  (IDWriteLocalizedStrings* this, UINT32 index, UINT32* length) { return ((HRESULT (WINAPI*)(IDWriteLocalizedStrings*, UINT32, UINT32*))this->v->tbl[5])(this, index, length); }
static inline HRESULT                           IDWriteLocalizedStrings_GetLocaleName                        (IDWriteLocalizedStrings* this, UINT32 index, WCHAR* localeName, UINT32 size) { return ((HRESULT (WINAPI*)(IDWriteLocalizedStrings*, UINT32, WCHAR*, UINT32))this->v->tbl[6])(this, index, localeName, size); }
static inline HRESULT                           IDWriteLocalizedStrings_GetStringLength                      (IDWriteLocalizedStrings* this, UINT32 index, UINT32* length) { return ((HRESULT (WINAPI*)(IDWriteLocalizedStrings*, UINT32, UINT32*))this->v->tbl[7])(this, index, length); }
static inline HRESULT                           IDWriteLocalizedStrings_GetString                            (IDWriteLocalizedStrings* this, UINT32 index, WCHAR* stringBuffer, UINT32 size) { return ((HRESULT (WINAPI*)(IDWriteLocalizedStrings*, UINT32, WCHAR*, UINT32))this->v->tbl[8])(this, index, stringBuffer, size); }

static inline HRESULT                           IDWriteNumberSubstitution_QueryInterface                     (IDWriteNumberSubstitution* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteNumberSubstitution*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteNumberSubstitution_AddRef                             (IDWriteNumberSubstitution* this) { return ((UINT32 (WINAPI*)(IDWriteNumberSubstitution*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteNumberSubstitution_Release                            (IDWriteNumberSubstitution* this) { return ((UINT32 (WINAPI*)(IDWriteNumberSubstitution*))this->v->tbl[2])(this); }

static inline HRESULT                           IDWritePixelSnapping_QueryInterface                          (IDWritePixelSnapping* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWritePixelSnapping*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWritePixelSnapping_AddRef                                  (IDWritePixelSnapping* this) { return ((UINT32 (WINAPI*)(IDWritePixelSnapping*))this->v->tbl[1])(this); }
static inline UINT32                            IDWritePixelSnapping_Release                                 (IDWritePixelSnapping* this) { return ((UINT32 (WINAPI*)(IDWritePixelSnapping*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWritePixelSnapping_IsPixelSnappingDisabled                 (IDWritePixelSnapping* this, void* clientDrawingContext, BOOL* isDisabled) { return ((HRESULT (WINAPI*)(IDWritePixelSnapping*, void*, BOOL*))this->v->tbl[3])(this, clientDrawingContext, isDisabled); }
static inline HRESULT                           IDWritePixelSnapping_GetCurrentTransform                     (IDWritePixelSnapping* this, void* clientDrawingContext, DWRITE_MATRIX* transform) { return ((HRESULT (WINAPI*)(IDWritePixelSnapping*, void*, DWRITE_MATRIX*))this->v->tbl[4])(this, clientDrawingContext, transform); }
static inline HRESULT                           IDWritePixelSnapping_GetPixelsPerDip                         (IDWritePixelSnapping* this, void* clientDrawingContext, FLOAT* pixelsPerDip) { return ((HRESULT (WINAPI*)(IDWritePixelSnapping*, void*, FLOAT*))this->v->tbl[5])(this, clientDrawingContext, pixelsPerDip); }

static inline HRESULT                           IDWriteRemoteFontFileLoader_QueryInterface                   (IDWriteRemoteFontFileLoader* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteRemoteFontFileLoader*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteRemoteFontFileLoader_AddRef                           (IDWriteRemoteFontFileLoader* this) { return ((UINT32 (WINAPI*)(IDWriteRemoteFontFileLoader*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteRemoteFontFileLoader_Release                          (IDWriteRemoteFontFileLoader* this) { return ((UINT32 (WINAPI*)(IDWriteRemoteFontFileLoader*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteRemoteFontFileLoader_CreateStreamFromKey              (IDWriteRemoteFontFileLoader* this, const void* fontFileReferenceKey, UINT32 fontFileReferenceKeySize, IDWriteFontFileStream** fontFileStream) { return ((HRESULT (WINAPI*)(IDWriteRemoteFontFileLoader*, const void*, UINT32, IDWriteFontFileStream**))this->v->tbl[3])(this, fontFileReferenceKey, fontFileReferenceKeySize, fontFileStream); }
static inline HRESULT                           IDWriteRemoteFontFileLoader_CreateRemoteStreamFromKey        (IDWriteRemoteFontFileLoader* this, const void* fontFileReferenceKey, UINT32 fontFileReferenceKeySize, IDWriteRemoteFontFileStream** fontFileStream) { return ((HRESULT (WINAPI*)(IDWriteRemoteFontFileLoader*, const void*, UINT32, IDWriteRemoteFontFileStream**))this->v->tbl[4])(this, fontFileReferenceKey, fontFileReferenceKeySize, fontFileStream); }
static inline HRESULT                           IDWriteRemoteFontFileLoader_GetLocalityFromKey               (IDWriteRemoteFontFileLoader* this, const void* fontFileReferenceKey, UINT32 fontFileReferenceKeySize, DWRITE_LOCALITY* locality) { return ((HRESULT (WINAPI*)(IDWriteRemoteFontFileLoader*, const void*, UINT32, DWRITE_LOCALITY*))this->v->tbl[5])(this, fontFileReferenceKey, fontFileReferenceKeySize, locality); }
static inline HRESULT                           IDWriteRemoteFontFileLoader_CreateFontFileReferenceFromUrl   (IDWriteRemoteFontFileLoader* this, IDWriteFactory* factory, const WCHAR* baseUrl, const WCHAR* fontFileUrl, IDWriteFontFile** fontFile) { return ((HRESULT (WINAPI*)(IDWriteRemoteFontFileLoader*, IDWriteFactory*, const WCHAR*, const WCHAR*, IDWriteFontFile**))this->v->tbl[6])(this, factory, baseUrl, fontFileUrl, fontFile); }

static inline HRESULT                           IDWriteRemoteFontFileStream_QueryInterface                   (IDWriteRemoteFontFileStream* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteRemoteFontFileStream*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteRemoteFontFileStream_AddRef                           (IDWriteRemoteFontFileStream* this) { return ((UINT32 (WINAPI*)(IDWriteRemoteFontFileStream*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteRemoteFontFileStream_Release                          (IDWriteRemoteFontFileStream* this) { return ((UINT32 (WINAPI*)(IDWriteRemoteFontFileStream*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteRemoteFontFileStream_ReadFileFragment                 (IDWriteRemoteFontFileStream* this, const void** fragmentStart, UINT64 fileOffset, UINT64 fragmentSize, void** fragmentContext) { return ((HRESULT (WINAPI*)(IDWriteRemoteFontFileStream*, const void**, UINT64, UINT64, void**))this->v->tbl[3])(this, fragmentStart, fileOffset, fragmentSize, fragmentContext); }
static inline void                              IDWriteRemoteFontFileStream_ReleaseFileFragment              (IDWriteRemoteFontFileStream* this, void* fragmentContext) { ((void (WINAPI*)(IDWriteRemoteFontFileStream*, void*))this->v->tbl[4])(this, fragmentContext); }
static inline HRESULT                           IDWriteRemoteFontFileStream_GetFileSize                      (IDWriteRemoteFontFileStream* this, UINT64* fileSize) { return ((HRESULT (WINAPI*)(IDWriteRemoteFontFileStream*, UINT64*))this->v->tbl[5])(this, fileSize); }
static inline HRESULT                           IDWriteRemoteFontFileStream_GetLastWriteTime                 (IDWriteRemoteFontFileStream* this, UINT64* lastWriteTime) { return ((HRESULT (WINAPI*)(IDWriteRemoteFontFileStream*, UINT64*))this->v->tbl[6])(this, lastWriteTime); }
static inline HRESULT                           IDWriteRemoteFontFileStream_GetLocalFileSize                 (IDWriteRemoteFontFileStream* this, UINT64* localFileSize) { return ((HRESULT (WINAPI*)(IDWriteRemoteFontFileStream*, UINT64*))this->v->tbl[7])(this, localFileSize); }
static inline HRESULT                           IDWriteRemoteFontFileStream_GetFileFragmentLocality          (IDWriteRemoteFontFileStream* this, UINT64 fileOffset, UINT64 fragmentSize, BOOL* isLocal, UINT64* partialSize) { return ((HRESULT (WINAPI*)(IDWriteRemoteFontFileStream*, UINT64, UINT64, BOOL*, UINT64*))this->v->tbl[8])(this, fileOffset, fragmentSize, isLocal, partialSize); }
static inline DWRITE_LOCALITY                   IDWriteRemoteFontFileStream_GetLocality                      (IDWriteRemoteFontFileStream* this) { return ((DWRITE_LOCALITY (WINAPI*)(IDWriteRemoteFontFileStream*))this->v->tbl[9])(this); }
static inline HRESULT                           IDWriteRemoteFontFileStream_BeginDownload                    (IDWriteRemoteFontFileStream* this, const GUID* downloadOperationID, const DWRITE_FILE_FRAGMENT* fileFragments, UINT32 fragmentCount, IDWriteAsyncResult** asyncResult) { return ((HRESULT (WINAPI*)(IDWriteRemoteFontFileStream*, const GUID*, const DWRITE_FILE_FRAGMENT*, UINT32, IDWriteAsyncResult**))this->v->tbl[10])(this, downloadOperationID, fileFragments, fragmentCount, asyncResult); }

static inline HRESULT                           IDWriteRenderingParams_QueryInterface                        (IDWriteRenderingParams* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteRenderingParams*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteRenderingParams_AddRef                                (IDWriteRenderingParams* this) { return ((UINT32 (WINAPI*)(IDWriteRenderingParams*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteRenderingParams_Release                               (IDWriteRenderingParams* this) { return ((UINT32 (WINAPI*)(IDWriteRenderingParams*))this->v->tbl[2])(this); }
static inline FLOAT                             IDWriteRenderingParams_GetGamma                              (IDWriteRenderingParams* this) { return ((FLOAT (WINAPI*)(IDWriteRenderingParams*))this->v->tbl[3])(this); }
static inline FLOAT                             IDWriteRenderingParams_GetEnhancedContrast                   (IDWriteRenderingParams* this) { return ((FLOAT (WINAPI*)(IDWriteRenderingParams*))this->v->tbl[4])(this); }
static inline FLOAT                             IDWriteRenderingParams_GetClearTypeLevel                     (IDWriteRenderingParams* this) { return ((FLOAT (WINAPI*)(IDWriteRenderingParams*))this->v->tbl[5])(this); }
static inline DWRITE_PIXEL_GEOMETRY             IDWriteRenderingParams_GetPixelGeometry                      (IDWriteRenderingParams* this) { return ((DWRITE_PIXEL_GEOMETRY (WINAPI*)(IDWriteRenderingParams*))this->v->tbl[6])(this); }
static inline DWRITE_RENDERING_MODE             IDWriteRenderingParams_GetRenderingMode                      (IDWriteRenderingParams* this) { return ((DWRITE_RENDERING_MODE (WINAPI*)(IDWriteRenderingParams*))this->v->tbl[7])(this); }

static inline HRESULT                           IDWriteRenderingParams1_QueryInterface                       (IDWriteRenderingParams1* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteRenderingParams1*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteRenderingParams1_AddRef                               (IDWriteRenderingParams1* this) { return ((UINT32 (WINAPI*)(IDWriteRenderingParams1*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteRenderingParams1_Release                              (IDWriteRenderingParams1* this) { return ((UINT32 (WINAPI*)(IDWriteRenderingParams1*))this->v->tbl[2])(this); }
static inline FLOAT                             IDWriteRenderingParams1_GetGamma                             (IDWriteRenderingParams1* this) { return ((FLOAT (WINAPI*)(IDWriteRenderingParams1*))this->v->tbl[3])(this); }
static inline FLOAT                             IDWriteRenderingParams1_GetEnhancedContrast                  (IDWriteRenderingParams1* this) { return ((FLOAT (WINAPI*)(IDWriteRenderingParams1*))this->v->tbl[4])(this); }
static inline FLOAT                             IDWriteRenderingParams1_GetClearTypeLevel                    (IDWriteRenderingParams1* this) { return ((FLOAT (WINAPI*)(IDWriteRenderingParams1*))this->v->tbl[5])(this); }
static inline DWRITE_PIXEL_GEOMETRY             IDWriteRenderingParams1_GetPixelGeometry                     (IDWriteRenderingParams1* this) { return ((DWRITE_PIXEL_GEOMETRY (WINAPI*)(IDWriteRenderingParams1*))this->v->tbl[6])(this); }
static inline DWRITE_RENDERING_MODE             IDWriteRenderingParams1_GetRenderingMode                     (IDWriteRenderingParams1* this) { return ((DWRITE_RENDERING_MODE (WINAPI*)(IDWriteRenderingParams1*))this->v->tbl[7])(this); }
static inline FLOAT                             IDWriteRenderingParams1_GetGrayscaleEnhancedContrast         (IDWriteRenderingParams1* this) { return ((FLOAT (WINAPI*)(IDWriteRenderingParams1*))this->v->tbl[8])(this); }

static inline HRESULT                           IDWriteRenderingParams2_QueryInterface                       (IDWriteRenderingParams2* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteRenderingParams2*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteRenderingParams2_AddRef                               (IDWriteRenderingParams2* this) { return ((UINT32 (WINAPI*)(IDWriteRenderingParams2*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteRenderingParams2_Release                              (IDWriteRenderingParams2* this) { return ((UINT32 (WINAPI*)(IDWriteRenderingParams2*))this->v->tbl[2])(this); }
static inline FLOAT                             IDWriteRenderingParams2_GetGamma                             (IDWriteRenderingParams2* this) { return ((FLOAT (WINAPI*)(IDWriteRenderingParams2*))this->v->tbl[3])(this); }
static inline FLOAT                             IDWriteRenderingParams2_GetEnhancedContrast                  (IDWriteRenderingParams2* this) { return ((FLOAT (WINAPI*)(IDWriteRenderingParams2*))this->v->tbl[4])(this); }
static inline FLOAT                             IDWriteRenderingParams2_GetClearTypeLevel                    (IDWriteRenderingParams2* this) { return ((FLOAT (WINAPI*)(IDWriteRenderingParams2*))this->v->tbl[5])(this); }
static inline DWRITE_PIXEL_GEOMETRY             IDWriteRenderingParams2_GetPixelGeometry                     (IDWriteRenderingParams2* this) { return ((DWRITE_PIXEL_GEOMETRY (WINAPI*)(IDWriteRenderingParams2*))this->v->tbl[6])(this); }
static inline DWRITE_RENDERING_MODE             IDWriteRenderingParams2_GetRenderingMode                     (IDWriteRenderingParams2* this) { return ((DWRITE_RENDERING_MODE (WINAPI*)(IDWriteRenderingParams2*))this->v->tbl[7])(this); }
static inline FLOAT                             IDWriteRenderingParams2_GetGrayscaleEnhancedContrast         (IDWriteRenderingParams2* this) { return ((FLOAT (WINAPI*)(IDWriteRenderingParams2*))this->v->tbl[8])(this); }
static inline DWRITE_GRID_FIT_MODE              IDWriteRenderingParams2_GetGridFitMode                       (IDWriteRenderingParams2* this) { return ((DWRITE_GRID_FIT_MODE (WINAPI*)(IDWriteRenderingParams2*))this->v->tbl[9])(this); }

static inline HRESULT                           IDWriteRenderingParams3_QueryInterface                       (IDWriteRenderingParams3* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteRenderingParams3*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteRenderingParams3_AddRef                               (IDWriteRenderingParams3* this) { return ((UINT32 (WINAPI*)(IDWriteRenderingParams3*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteRenderingParams3_Release                              (IDWriteRenderingParams3* this) { return ((UINT32 (WINAPI*)(IDWriteRenderingParams3*))this->v->tbl[2])(this); }
static inline FLOAT                             IDWriteRenderingParams3_GetGamma                             (IDWriteRenderingParams3* this) { return ((FLOAT (WINAPI*)(IDWriteRenderingParams3*))this->v->tbl[3])(this); }
static inline FLOAT                             IDWriteRenderingParams3_GetEnhancedContrast                  (IDWriteRenderingParams3* this) { return ((FLOAT (WINAPI*)(IDWriteRenderingParams3*))this->v->tbl[4])(this); }
static inline FLOAT                             IDWriteRenderingParams3_GetClearTypeLevel                    (IDWriteRenderingParams3* this) { return ((FLOAT (WINAPI*)(IDWriteRenderingParams3*))this->v->tbl[5])(this); }
static inline DWRITE_PIXEL_GEOMETRY             IDWriteRenderingParams3_GetPixelGeometry                     (IDWriteRenderingParams3* this) { return ((DWRITE_PIXEL_GEOMETRY (WINAPI*)(IDWriteRenderingParams3*))this->v->tbl[6])(this); }
static inline DWRITE_RENDERING_MODE             IDWriteRenderingParams3_GetRenderingMode                     (IDWriteRenderingParams3* this) { return ((DWRITE_RENDERING_MODE (WINAPI*)(IDWriteRenderingParams3*))this->v->tbl[7])(this); }
static inline FLOAT                             IDWriteRenderingParams3_GetGrayscaleEnhancedContrast         (IDWriteRenderingParams3* this) { return ((FLOAT (WINAPI*)(IDWriteRenderingParams3*))this->v->tbl[8])(this); }
static inline DWRITE_GRID_FIT_MODE              IDWriteRenderingParams3_GetGridFitMode                       (IDWriteRenderingParams3* this) { return ((DWRITE_GRID_FIT_MODE (WINAPI*)(IDWriteRenderingParams3*))this->v->tbl[9])(this); }
static inline DWRITE_RENDERING_MODE1            IDWriteRenderingParams3_GetRenderingMode1                    (IDWriteRenderingParams3* this) { return ((DWRITE_RENDERING_MODE1 (WINAPI*)(IDWriteRenderingParams3*))this->v->tbl[10])(this); }

static inline HRESULT                           IDWriteStringList_QueryInterface                             (IDWriteStringList* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteStringList*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteStringList_AddRef                                     (IDWriteStringList* this) { return ((UINT32 (WINAPI*)(IDWriteStringList*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteStringList_Release                                    (IDWriteStringList* this) { return ((UINT32 (WINAPI*)(IDWriteStringList*))this->v->tbl[2])(this); }
static inline UINT32                            IDWriteStringList_GetCount                                   (IDWriteStringList* this) { return ((UINT32 (WINAPI*)(IDWriteStringList*))this->v->tbl[3])(this); }
static inline HRESULT                           IDWriteStringList_GetLocaleNameLength                        (IDWriteStringList* this, UINT32 listIndex, UINT32* length) { return ((HRESULT (WINAPI*)(IDWriteStringList*, UINT32, UINT32*))this->v->tbl[4])(this, listIndex, length); }
static inline HRESULT                           IDWriteStringList_GetLocaleName                              (IDWriteStringList* this, UINT32 listIndex, WCHAR* localeName, UINT32 size) { return ((HRESULT (WINAPI*)(IDWriteStringList*, UINT32, WCHAR*, UINT32))this->v->tbl[5])(this, listIndex, localeName, size); }
static inline HRESULT                           IDWriteStringList_GetStringLength                            (IDWriteStringList* this, UINT32 listIndex, UINT32* length) { return ((HRESULT (WINAPI*)(IDWriteStringList*, UINT32, UINT32*))this->v->tbl[6])(this, listIndex, length); }
static inline HRESULT                           IDWriteStringList_GetString                                  (IDWriteStringList* this, UINT32 listIndex, WCHAR* stringBuffer, UINT32 stringBufferSize) { return ((HRESULT (WINAPI*)(IDWriteStringList*, UINT32, WCHAR*, UINT32))this->v->tbl[7])(this, listIndex, stringBuffer, stringBufferSize); }

static inline HRESULT                           IDWriteTextAnalysisSink_QueryInterface                       (IDWriteTextAnalysisSink* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteTextAnalysisSink*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteTextAnalysisSink_AddRef                               (IDWriteTextAnalysisSink* this) { return ((UINT32 (WINAPI*)(IDWriteTextAnalysisSink*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteTextAnalysisSink_Release                              (IDWriteTextAnalysisSink* this) { return ((UINT32 (WINAPI*)(IDWriteTextAnalysisSink*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteTextAnalysisSink_SetScriptAnalysis                    (IDWriteTextAnalysisSink* this, UINT32 textPosition, UINT32 textLength, const DWRITE_SCRIPT_ANALYSIS* scriptAnalysis) { return ((HRESULT (WINAPI*)(IDWriteTextAnalysisSink*, UINT32, UINT32, const DWRITE_SCRIPT_ANALYSIS*))this->v->tbl[3])(this, textPosition, textLength, scriptAnalysis); }
static inline HRESULT                           IDWriteTextAnalysisSink_SetLineBreakpoints                   (IDWriteTextAnalysisSink* this, UINT32 textPosition, UINT32 textLength, const DWRITE_LINE_BREAKPOINT* lineBreakpoints) { return ((HRESULT (WINAPI*)(IDWriteTextAnalysisSink*, UINT32, UINT32, const DWRITE_LINE_BREAKPOINT*))this->v->tbl[4])(this, textPosition, textLength, lineBreakpoints); }
static inline HRESULT                           IDWriteTextAnalysisSink_SetBidiLevel                         (IDWriteTextAnalysisSink* this, UINT32 textPosition, UINT32 textLength, UINT8 explicitLevel, UINT8 resolvedLevel) { return ((HRESULT (WINAPI*)(IDWriteTextAnalysisSink*, UINT32, UINT32, UINT8, UINT8))this->v->tbl[5])(this, textPosition, textLength, explicitLevel, resolvedLevel); }
static inline HRESULT                           IDWriteTextAnalysisSink_SetNumberSubstitution                (IDWriteTextAnalysisSink* this, UINT32 textPosition, UINT32 textLength, IDWriteNumberSubstitution* numberSubstitution) { return ((HRESULT (WINAPI*)(IDWriteTextAnalysisSink*, UINT32, UINT32, IDWriteNumberSubstitution*))this->v->tbl[6])(this, textPosition, textLength, numberSubstitution); }

static inline HRESULT                           IDWriteTextAnalysisSink1_QueryInterface                      (IDWriteTextAnalysisSink1* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteTextAnalysisSink1*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteTextAnalysisSink1_AddRef                              (IDWriteTextAnalysisSink1* this) { return ((UINT32 (WINAPI*)(IDWriteTextAnalysisSink1*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteTextAnalysisSink1_Release                             (IDWriteTextAnalysisSink1* this) { return ((UINT32 (WINAPI*)(IDWriteTextAnalysisSink1*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteTextAnalysisSink1_SetScriptAnalysis                   (IDWriteTextAnalysisSink1* this, UINT32 textPosition, UINT32 textLength, const DWRITE_SCRIPT_ANALYSIS* scriptAnalysis) { return ((HRESULT (WINAPI*)(IDWriteTextAnalysisSink1*, UINT32, UINT32, const DWRITE_SCRIPT_ANALYSIS*))this->v->tbl[3])(this, textPosition, textLength, scriptAnalysis); }
static inline HRESULT                           IDWriteTextAnalysisSink1_SetLineBreakpoints                  (IDWriteTextAnalysisSink1* this, UINT32 textPosition, UINT32 textLength, const DWRITE_LINE_BREAKPOINT* lineBreakpoints) { return ((HRESULT (WINAPI*)(IDWriteTextAnalysisSink1*, UINT32, UINT32, const DWRITE_LINE_BREAKPOINT*))this->v->tbl[4])(this, textPosition, textLength, lineBreakpoints); }
static inline HRESULT                           IDWriteTextAnalysisSink1_SetBidiLevel                        (IDWriteTextAnalysisSink1* this, UINT32 textPosition, UINT32 textLength, UINT8 explicitLevel, UINT8 resolvedLevel) { return ((HRESULT (WINAPI*)(IDWriteTextAnalysisSink1*, UINT32, UINT32, UINT8, UINT8))this->v->tbl[5])(this, textPosition, textLength, explicitLevel, resolvedLevel); }
static inline HRESULT                           IDWriteTextAnalysisSink1_SetNumberSubstitution               (IDWriteTextAnalysisSink1* this, UINT32 textPosition, UINT32 textLength, IDWriteNumberSubstitution* numberSubstitution) { return ((HRESULT (WINAPI*)(IDWriteTextAnalysisSink1*, UINT32, UINT32, IDWriteNumberSubstitution*))this->v->tbl[6])(this, textPosition, textLength, numberSubstitution); }
static inline HRESULT                           IDWriteTextAnalysisSink1_SetGlyphOrientation                 (IDWriteTextAnalysisSink1* this, UINT32 textPosition, UINT32 textLength, DWRITE_GLYPH_ORIENTATION_ANGLE glyphOrientationAngle, UINT8 adjustedBidiLevel, BOOL isSideways, BOOL isRightToLeft) { return ((HRESULT (WINAPI*)(IDWriteTextAnalysisSink1*, UINT32, UINT32, DWRITE_GLYPH_ORIENTATION_ANGLE, UINT8, BOOL, BOOL))this->v->tbl[7])(this, textPosition, textLength, glyphOrientationAngle, adjustedBidiLevel, isSideways, isRightToLeft); }

static inline HRESULT                           IDWriteTextAnalysisSource_QueryInterface                     (IDWriteTextAnalysisSource* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteTextAnalysisSource*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteTextAnalysisSource_AddRef                             (IDWriteTextAnalysisSource* this) { return ((UINT32 (WINAPI*)(IDWriteTextAnalysisSource*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteTextAnalysisSource_Release                            (IDWriteTextAnalysisSource* this) { return ((UINT32 (WINAPI*)(IDWriteTextAnalysisSource*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteTextAnalysisSource_GetTextAtPosition                  (IDWriteTextAnalysisSource* this, UINT32 textPosition, const UINT16** textString, UINT32* textLength) { return ((HRESULT (WINAPI*)(IDWriteTextAnalysisSource*, UINT32, const UINT16**, UINT32*))this->v->tbl[3])(this, textPosition, textString, textLength); }
static inline HRESULT                           IDWriteTextAnalysisSource_GetTextBeforePosition              (IDWriteTextAnalysisSource* this, UINT32 textPosition, const UINT16** textString, UINT32* textLength) { return ((HRESULT (WINAPI*)(IDWriteTextAnalysisSource*, UINT32, const UINT16**, UINT32*))this->v->tbl[4])(this, textPosition, textString, textLength); }
static inline DWRITE_READING_DIRECTION          IDWriteTextAnalysisSource_GetParagraphReadingDirection       (IDWriteTextAnalysisSource* this) { return ((DWRITE_READING_DIRECTION (WINAPI*)(IDWriteTextAnalysisSource*))this->v->tbl[5])(this); }
static inline HRESULT                           IDWriteTextAnalysisSource_GetLocaleName                      (IDWriteTextAnalysisSource* this, UINT32 textPosition, UINT32* textLength, const UINT16** localeName) { return ((HRESULT (WINAPI*)(IDWriteTextAnalysisSource*, UINT32, UINT32*, const UINT16**))this->v->tbl[6])(this, textPosition, textLength, localeName); }
static inline HRESULT                           IDWriteTextAnalysisSource_GetNumberSubstitution              (IDWriteTextAnalysisSource* this, UINT32 textPosition, UINT32* textLength, IDWriteNumberSubstitution** numberSubstitution) { return ((HRESULT (WINAPI*)(IDWriteTextAnalysisSource*, UINT32, UINT32*, IDWriteNumberSubstitution**))this->v->tbl[7])(this, textPosition, textLength, numberSubstitution); }

static inline HRESULT                           IDWriteTextAnalysisSource1_QueryInterface                    (IDWriteTextAnalysisSource1* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteTextAnalysisSource1*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteTextAnalysisSource1_AddRef                            (IDWriteTextAnalysisSource1* this) { return ((UINT32 (WINAPI*)(IDWriteTextAnalysisSource1*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteTextAnalysisSource1_Release                           (IDWriteTextAnalysisSource1* this) { return ((UINT32 (WINAPI*)(IDWriteTextAnalysisSource1*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteTextAnalysisSource1_GetTextAtPosition                 (IDWriteTextAnalysisSource1* this, UINT32 textPosition, const UINT16** textString, UINT32* textLength) { return ((HRESULT (WINAPI*)(IDWriteTextAnalysisSource1*, UINT32, const UINT16**, UINT32*))this->v->tbl[3])(this, textPosition, textString, textLength); }
static inline HRESULT                           IDWriteTextAnalysisSource1_GetTextBeforePosition             (IDWriteTextAnalysisSource1* this, UINT32 textPosition, const UINT16** textString, UINT32* textLength) { return ((HRESULT (WINAPI*)(IDWriteTextAnalysisSource1*, UINT32, const UINT16**, UINT32*))this->v->tbl[4])(this, textPosition, textString, textLength); }
static inline DWRITE_READING_DIRECTION          IDWriteTextAnalysisSource1_GetParagraphReadingDirection      (IDWriteTextAnalysisSource1* this) { return ((DWRITE_READING_DIRECTION (WINAPI*)(IDWriteTextAnalysisSource1*))this->v->tbl[5])(this); }
static inline HRESULT                           IDWriteTextAnalysisSource1_GetLocaleName                     (IDWriteTextAnalysisSource1* this, UINT32 textPosition, UINT32* textLength, const UINT16** localeName) { return ((HRESULT (WINAPI*)(IDWriteTextAnalysisSource1*, UINT32, UINT32*, const UINT16**))this->v->tbl[6])(this, textPosition, textLength, localeName); }
static inline HRESULT                           IDWriteTextAnalysisSource1_GetNumberSubstitution             (IDWriteTextAnalysisSource1* this, UINT32 textPosition, UINT32* textLength, IDWriteNumberSubstitution** numberSubstitution) { return ((HRESULT (WINAPI*)(IDWriteTextAnalysisSource1*, UINT32, UINT32*, IDWriteNumberSubstitution**))this->v->tbl[7])(this, textPosition, textLength, numberSubstitution); }
static inline HRESULT                           IDWriteTextAnalysisSource1_GetVerticalGlyphOrientation       (IDWriteTextAnalysisSource1* this, UINT32 textPosition, UINT32* textLength, DWRITE_VERTICAL_GLYPH_ORIENTATION* glyphOrientation, UINT8* bidiLevel) { return ((HRESULT (WINAPI*)(IDWriteTextAnalysisSource1*, UINT32, UINT32*, DWRITE_VERTICAL_GLYPH_ORIENTATION*, UINT8*))this->v->tbl[8])(this, textPosition, textLength, glyphOrientation, bidiLevel); }

static inline HRESULT                           IDWriteTextAnalyzer_QueryInterface                           (IDWriteTextAnalyzer* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteTextAnalyzer_AddRef                                   (IDWriteTextAnalyzer* this) { return ((UINT32 (WINAPI*)(IDWriteTextAnalyzer*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteTextAnalyzer_Release                                  (IDWriteTextAnalyzer* this) { return ((UINT32 (WINAPI*)(IDWriteTextAnalyzer*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteTextAnalyzer_AnalyzeScript                            (IDWriteTextAnalyzer* this, IDWriteTextAnalysisSource* analysisSource, UINT32 textPosition, UINT32 textLength, IDWriteTextAnalysisSink* analysisSink) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer*, IDWriteTextAnalysisSource*, UINT32, UINT32, IDWriteTextAnalysisSink*))this->v->tbl[3])(this, analysisSource, textPosition, textLength, analysisSink); }
static inline HRESULT                           IDWriteTextAnalyzer_AnalyzeBidi                              (IDWriteTextAnalyzer* this, IDWriteTextAnalysisSource* analysisSource, UINT32 textPosition, UINT32 textLength, IDWriteTextAnalysisSink* analysisSink) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer*, IDWriteTextAnalysisSource*, UINT32, UINT32, IDWriteTextAnalysisSink*))this->v->tbl[4])(this, analysisSource, textPosition, textLength, analysisSink); }
static inline HRESULT                           IDWriteTextAnalyzer_AnalyzeNumberSubstitution                (IDWriteTextAnalyzer* this, IDWriteTextAnalysisSource* analysisSource, UINT32 textPosition, UINT32 textLength, IDWriteTextAnalysisSink* analysisSink) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer*, IDWriteTextAnalysisSource*, UINT32, UINT32, IDWriteTextAnalysisSink*))this->v->tbl[5])(this, analysisSource, textPosition, textLength, analysisSink); }
static inline HRESULT                           IDWriteTextAnalyzer_AnalyzeLineBreakpoints                   (IDWriteTextAnalyzer* this, IDWriteTextAnalysisSource* analysisSource, UINT32 textPosition, UINT32 textLength, IDWriteTextAnalysisSink* analysisSink) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer*, IDWriteTextAnalysisSource*, UINT32, UINT32, IDWriteTextAnalysisSink*))this->v->tbl[6])(this, analysisSource, textPosition, textLength, analysisSink); }
static inline HRESULT                           IDWriteTextAnalyzer_GetGlyphs                                (IDWriteTextAnalyzer* this, const WCHAR* textString, UINT32 textLength, IDWriteFontFace* fontFace, BOOL isSideways, BOOL isRightToLeft, const DWRITE_SCRIPT_ANALYSIS* scriptAnalysis, const WCHAR* localeName, IDWriteNumberSubstitution* numberSubstitution, const DWRITE_TYPOGRAPHIC_FEATURES** features, const UINT32* featureRangeLengths, UINT32 featureRanges, UINT32 maxGlyphCount, UINT16* clusterMap, DWRITE_SHAPING_TEXT_PROPERTIES* textProps, UINT16* glyphIndices, DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProps, UINT32* actualGlyphCount) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer*, const WCHAR*, UINT32, IDWriteFontFace*, BOOL, BOOL, const DWRITE_SCRIPT_ANALYSIS*, const WCHAR*, IDWriteNumberSubstitution*, const DWRITE_TYPOGRAPHIC_FEATURES**, const UINT32*, UINT32, UINT32, UINT16*, DWRITE_SHAPING_TEXT_PROPERTIES*, UINT16*, DWRITE_SHAPING_GLYPH_PROPERTIES*, UINT32*))this->v->tbl[7])(this, textString, textLength, fontFace, isSideways, isRightToLeft, scriptAnalysis, localeName, numberSubstitution, features, featureRangeLengths, featureRanges, maxGlyphCount, clusterMap, textProps, glyphIndices, glyphProps, actualGlyphCount); }
static inline HRESULT                           IDWriteTextAnalyzer_GetGlyphPlacements                       (IDWriteTextAnalyzer* this, const WCHAR* textString, const UINT16* clusterMap, DWRITE_SHAPING_TEXT_PROPERTIES* textProps, UINT32 textLength, const UINT16* glyphIndices, const DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProps, UINT32 glyphCount, IDWriteFontFace* fontFace, FLOAT fontEmSize, BOOL isSideways, BOOL isRightToLeft, const DWRITE_SCRIPT_ANALYSIS* scriptAnalysis, const WCHAR* localeName, const DWRITE_TYPOGRAPHIC_FEATURES** features, const UINT32* featureRangeLengths, UINT32 featureRanges, FLOAT* glyphAdvances, DWRITE_GLYPH_OFFSET* glyphOffsets) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer*, const WCHAR*, const UINT16*, DWRITE_SHAPING_TEXT_PROPERTIES*, UINT32, const UINT16*, const DWRITE_SHAPING_GLYPH_PROPERTIES*, UINT32, IDWriteFontFace*, FLOAT, BOOL, BOOL, const DWRITE_SCRIPT_ANALYSIS*, const WCHAR*, const DWRITE_TYPOGRAPHIC_FEATURES**, const UINT32*, UINT32, FLOAT*, DWRITE_GLYPH_OFFSET*))this->v->tbl[8])(this, textString, clusterMap, textProps, textLength, glyphIndices, glyphProps, glyphCount, fontFace, fontEmSize, isSideways, isRightToLeft, scriptAnalysis, localeName, features, featureRangeLengths, featureRanges, glyphAdvances, glyphOffsets); }
static inline HRESULT                           IDWriteTextAnalyzer_GetGdiCompatibleGlyphPlacements          (IDWriteTextAnalyzer* this, const WCHAR* textString, const UINT16* clusterMap, DWRITE_SHAPING_TEXT_PROPERTIES* textProps, UINT32 textLength, const UINT16* glyphIndices, const DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProps, UINT32 glyphCount, IDWriteFontFace* fontFace, FLOAT fontEmSize, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, BOOL useGdiNatural, BOOL isSideways, BOOL isRightToLeft, const DWRITE_SCRIPT_ANALYSIS* scriptAnalysis, const WCHAR* localeName, const DWRITE_TYPOGRAPHIC_FEATURES** features, const UINT32* featureRangeLengths, UINT32 featureRanges, FLOAT* glyphAdvances, DWRITE_GLYPH_OFFSET* glyphOffsets) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer*, const WCHAR*, const UINT16*, DWRITE_SHAPING_TEXT_PROPERTIES*, UINT32, const UINT16*, const DWRITE_SHAPING_GLYPH_PROPERTIES*, UINT32, IDWriteFontFace*, FLOAT, FLOAT, const DWRITE_MATRIX*, BOOL, BOOL, BOOL, const DWRITE_SCRIPT_ANALYSIS*, const WCHAR*, const DWRITE_TYPOGRAPHIC_FEATURES**, const UINT32*, UINT32, FLOAT*, DWRITE_GLYPH_OFFSET*))this->v->tbl[9])(this, textString, clusterMap, textProps, textLength, glyphIndices, glyphProps, glyphCount, fontFace, fontEmSize, pixelsPerDip, transform, useGdiNatural, isSideways, isRightToLeft, scriptAnalysis, localeName, features, featureRangeLengths, featureRanges, glyphAdvances, glyphOffsets); }

static inline HRESULT                           IDWriteTextAnalyzer1_QueryInterface                          (IDWriteTextAnalyzer1* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer1*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteTextAnalyzer1_AddRef                                  (IDWriteTextAnalyzer1* this) { return ((UINT32 (WINAPI*)(IDWriteTextAnalyzer1*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteTextAnalyzer1_Release                                 (IDWriteTextAnalyzer1* this) { return ((UINT32 (WINAPI*)(IDWriteTextAnalyzer1*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteTextAnalyzer1_AnalyzeScript                           (IDWriteTextAnalyzer1* this, IDWriteTextAnalysisSource* analysisSource, UINT32 textPosition, UINT32 textLength, IDWriteTextAnalysisSink* analysisSink) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer1*, IDWriteTextAnalysisSource*, UINT32, UINT32, IDWriteTextAnalysisSink*))this->v->tbl[3])(this, analysisSource, textPosition, textLength, analysisSink); }
static inline HRESULT                           IDWriteTextAnalyzer1_AnalyzeBidi                             (IDWriteTextAnalyzer1* this, IDWriteTextAnalysisSource* analysisSource, UINT32 textPosition, UINT32 textLength, IDWriteTextAnalysisSink* analysisSink) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer1*, IDWriteTextAnalysisSource*, UINT32, UINT32, IDWriteTextAnalysisSink*))this->v->tbl[4])(this, analysisSource, textPosition, textLength, analysisSink); }
static inline HRESULT                           IDWriteTextAnalyzer1_AnalyzeNumberSubstitution               (IDWriteTextAnalyzer1* this, IDWriteTextAnalysisSource* analysisSource, UINT32 textPosition, UINT32 textLength, IDWriteTextAnalysisSink* analysisSink) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer1*, IDWriteTextAnalysisSource*, UINT32, UINT32, IDWriteTextAnalysisSink*))this->v->tbl[5])(this, analysisSource, textPosition, textLength, analysisSink); }
static inline HRESULT                           IDWriteTextAnalyzer1_AnalyzeLineBreakpoints                  (IDWriteTextAnalyzer1* this, IDWriteTextAnalysisSource* analysisSource, UINT32 textPosition, UINT32 textLength, IDWriteTextAnalysisSink* analysisSink) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer1*, IDWriteTextAnalysisSource*, UINT32, UINT32, IDWriteTextAnalysisSink*))this->v->tbl[6])(this, analysisSource, textPosition, textLength, analysisSink); }
static inline HRESULT                           IDWriteTextAnalyzer1_GetGlyphs                               (IDWriteTextAnalyzer1* this, const WCHAR* textString, UINT32 textLength, IDWriteFontFace* fontFace, BOOL isSideways, BOOL isRightToLeft, const DWRITE_SCRIPT_ANALYSIS* scriptAnalysis, const WCHAR* localeName, IDWriteNumberSubstitution* numberSubstitution, const DWRITE_TYPOGRAPHIC_FEATURES** features, const UINT32* featureRangeLengths, UINT32 featureRanges, UINT32 maxGlyphCount, UINT16* clusterMap, DWRITE_SHAPING_TEXT_PROPERTIES* textProps, UINT16* glyphIndices, DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProps, UINT32* actualGlyphCount) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer1*, const WCHAR*, UINT32, IDWriteFontFace*, BOOL, BOOL, const DWRITE_SCRIPT_ANALYSIS*, const WCHAR*, IDWriteNumberSubstitution*, const DWRITE_TYPOGRAPHIC_FEATURES**, const UINT32*, UINT32, UINT32, UINT16*, DWRITE_SHAPING_TEXT_PROPERTIES*, UINT16*, DWRITE_SHAPING_GLYPH_PROPERTIES*, UINT32*))this->v->tbl[7])(this, textString, textLength, fontFace, isSideways, isRightToLeft, scriptAnalysis, localeName, numberSubstitution, features, featureRangeLengths, featureRanges, maxGlyphCount, clusterMap, textProps, glyphIndices, glyphProps, actualGlyphCount); }
static inline HRESULT                           IDWriteTextAnalyzer1_GetGlyphPlacements                      (IDWriteTextAnalyzer1* this, const WCHAR* textString, const UINT16* clusterMap, DWRITE_SHAPING_TEXT_PROPERTIES* textProps, UINT32 textLength, const UINT16* glyphIndices, const DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProps, UINT32 glyphCount, IDWriteFontFace* fontFace, FLOAT fontEmSize, BOOL isSideways, BOOL isRightToLeft, const DWRITE_SCRIPT_ANALYSIS* scriptAnalysis, const WCHAR* localeName, const DWRITE_TYPOGRAPHIC_FEATURES** features, const UINT32* featureRangeLengths, UINT32 featureRanges, FLOAT* glyphAdvances, DWRITE_GLYPH_OFFSET* glyphOffsets) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer1*, const WCHAR*, const UINT16*, DWRITE_SHAPING_TEXT_PROPERTIES*, UINT32, const UINT16*, const DWRITE_SHAPING_GLYPH_PROPERTIES*, UINT32, IDWriteFontFace*, FLOAT, BOOL, BOOL, const DWRITE_SCRIPT_ANALYSIS*, const WCHAR*, const DWRITE_TYPOGRAPHIC_FEATURES**, const UINT32*, UINT32, FLOAT*, DWRITE_GLYPH_OFFSET*))this->v->tbl[8])(this, textString, clusterMap, textProps, textLength, glyphIndices, glyphProps, glyphCount, fontFace, fontEmSize, isSideways, isRightToLeft, scriptAnalysis, localeName, features, featureRangeLengths, featureRanges, glyphAdvances, glyphOffsets); }
static inline HRESULT                           IDWriteTextAnalyzer1_GetGdiCompatibleGlyphPlacements         (IDWriteTextAnalyzer1* this, const WCHAR* textString, const UINT16* clusterMap, DWRITE_SHAPING_TEXT_PROPERTIES* textProps, UINT32 textLength, const UINT16* glyphIndices, const DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProps, UINT32 glyphCount, IDWriteFontFace* fontFace, FLOAT fontEmSize, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, BOOL useGdiNatural, BOOL isSideways, BOOL isRightToLeft, const DWRITE_SCRIPT_ANALYSIS* scriptAnalysis, const WCHAR* localeName, const DWRITE_TYPOGRAPHIC_FEATURES** features, const UINT32* featureRangeLengths, UINT32 featureRanges, FLOAT* glyphAdvances, DWRITE_GLYPH_OFFSET* glyphOffsets) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer1*, const WCHAR*, const UINT16*, DWRITE_SHAPING_TEXT_PROPERTIES*, UINT32, const UINT16*, const DWRITE_SHAPING_GLYPH_PROPERTIES*, UINT32, IDWriteFontFace*, FLOAT, FLOAT, const DWRITE_MATRIX*, BOOL, BOOL, BOOL, const DWRITE_SCRIPT_ANALYSIS*, const WCHAR*, const DWRITE_TYPOGRAPHIC_FEATURES**, const UINT32*, UINT32, FLOAT*, DWRITE_GLYPH_OFFSET*))this->v->tbl[9])(this, textString, clusterMap, textProps, textLength, glyphIndices, glyphProps, glyphCount, fontFace, fontEmSize, pixelsPerDip, transform, useGdiNatural, isSideways, isRightToLeft, scriptAnalysis, localeName, features, featureRangeLengths, featureRanges, glyphAdvances, glyphOffsets); }
static inline HRESULT                           IDWriteTextAnalyzer1_ApplyCharacterSpacing                   (IDWriteTextAnalyzer1* this, FLOAT leadingSpacing, FLOAT trailingSpacing, FLOAT minimumAdvanceWidth, UINT32 textLength, UINT32 glyphCount, const UINT16* clusterMap, const FLOAT* glyphAdvances, const DWRITE_GLYPH_OFFSET* glyphOffsets, const DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProperties, FLOAT* modifiedGlyphAdvances, DWRITE_GLYPH_OFFSET* modifiedGlyphOffsets) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer1*, FLOAT, FLOAT, FLOAT, UINT32, UINT32, const UINT16*, const FLOAT*, const DWRITE_GLYPH_OFFSET*, const DWRITE_SHAPING_GLYPH_PROPERTIES*, FLOAT*, DWRITE_GLYPH_OFFSET*))this->v->tbl[10])(this, leadingSpacing, trailingSpacing, minimumAdvanceWidth, textLength, glyphCount, clusterMap, glyphAdvances, glyphOffsets, glyphProperties, modifiedGlyphAdvances, modifiedGlyphOffsets); }
static inline HRESULT                           IDWriteTextAnalyzer1_GetBaseline                             (IDWriteTextAnalyzer1* this, IDWriteFontFace* fontFace, DWRITE_BASELINE baseline, BOOL isVertical, BOOL isSimulationAllowed, DWRITE_SCRIPT_ANALYSIS scriptAnalysis, const WCHAR* localeName, INT32* baselineCoordinate, BOOL* exists) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer1*, IDWriteFontFace*, DWRITE_BASELINE, BOOL, BOOL, DWRITE_SCRIPT_ANALYSIS, const WCHAR*, INT32*, BOOL*))this->v->tbl[11])(this, fontFace, baseline, isVertical, isSimulationAllowed, scriptAnalysis, localeName, baselineCoordinate, exists); }
static inline HRESULT                           IDWriteTextAnalyzer1_AnalyzeVerticalGlyphOrientation         (IDWriteTextAnalyzer1* this, IDWriteTextAnalysisSource1* analysisSource, UINT32 textPosition, UINT32 textLength, IDWriteTextAnalysisSink1* analysisSink) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer1*, IDWriteTextAnalysisSource1*, UINT32, UINT32, IDWriteTextAnalysisSink1*))this->v->tbl[12])(this, analysisSource, textPosition, textLength, analysisSink); }
static inline HRESULT                           IDWriteTextAnalyzer1_GetGlyphOrientationTransform            (IDWriteTextAnalyzer1* this, DWRITE_GLYPH_ORIENTATION_ANGLE glyphOrientationAngle, BOOL isSideways, DWRITE_MATRIX* transform) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer1*, DWRITE_GLYPH_ORIENTATION_ANGLE, BOOL, DWRITE_MATRIX*))this->v->tbl[13])(this, glyphOrientationAngle, isSideways, transform); }
static inline HRESULT                           IDWriteTextAnalyzer1_GetScriptProperties                     (IDWriteTextAnalyzer1* this, DWRITE_SCRIPT_ANALYSIS scriptAnalysis, DWRITE_SCRIPT_PROPERTIES* scriptProperties) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer1*, DWRITE_SCRIPT_ANALYSIS, DWRITE_SCRIPT_PROPERTIES*))this->v->tbl[14])(this, scriptAnalysis, scriptProperties); }
static inline HRESULT                           IDWriteTextAnalyzer1_GetTextComplexity                       (IDWriteTextAnalyzer1* this, const WCHAR* textString, UINT32 textLength, IDWriteFontFace* fontFace, BOOL* isTextSimple, UINT32* textLengthRead, UINT16* glyphIndices) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer1*, const WCHAR*, UINT32, IDWriteFontFace*, BOOL*, UINT32*, UINT16*))this->v->tbl[15])(this, textString, textLength, fontFace, isTextSimple, textLengthRead, glyphIndices); }
static inline HRESULT                           IDWriteTextAnalyzer1_GetJustificationOpportunities           (IDWriteTextAnalyzer1* this, IDWriteFontFace* fontFace, FLOAT fontEmSize, DWRITE_SCRIPT_ANALYSIS scriptAnalysis, UINT32 textLength, UINT32 glyphCount, const WCHAR* textString, const UINT16* clusterMap, const DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProperties, DWRITE_JUSTIFICATION_OPPORTUNITY* justificationOpportunities) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer1*, IDWriteFontFace*, FLOAT, DWRITE_SCRIPT_ANALYSIS, UINT32, UINT32, const WCHAR*, const UINT16*, const DWRITE_SHAPING_GLYPH_PROPERTIES*, DWRITE_JUSTIFICATION_OPPORTUNITY*))this->v->tbl[16])(this, fontFace, fontEmSize, scriptAnalysis, textLength, glyphCount, textString, clusterMap, glyphProperties, justificationOpportunities); }
static inline HRESULT                           IDWriteTextAnalyzer1_JustifyGlyphAdvances                    (IDWriteTextAnalyzer1* this, FLOAT lineWidth, UINT32 glyphCount, const DWRITE_JUSTIFICATION_OPPORTUNITY* justificationOpportunities, const FLOAT* glyphAdvances, const DWRITE_GLYPH_OFFSET* glyphOffsets, FLOAT* justifiedGlyphAdvances, DWRITE_GLYPH_OFFSET* justifiedGlyphOffsets) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer1*, FLOAT, UINT32, const DWRITE_JUSTIFICATION_OPPORTUNITY*, const FLOAT*, const DWRITE_GLYPH_OFFSET*, FLOAT*, DWRITE_GLYPH_OFFSET*))this->v->tbl[17])(this, lineWidth, glyphCount, justificationOpportunities, glyphAdvances, glyphOffsets, justifiedGlyphAdvances, justifiedGlyphOffsets); }
static inline HRESULT                           IDWriteTextAnalyzer1_GetJustifiedGlyphs                      (IDWriteTextAnalyzer1* this, IDWriteFontFace* fontFace, FLOAT fontEmSize, DWRITE_SCRIPT_ANALYSIS scriptAnalysis, UINT32 textLength, UINT32 glyphCount, UINT32 maxGlyphCount, const UINT16* clusterMap, const UINT16* glyphIndices, const FLOAT* glyphAdvances, const FLOAT* justifiedGlyphAdvances, const DWRITE_GLYPH_OFFSET* justifiedGlyphOffsets, const DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProperties, UINT32* actualGlyphCount, UINT16* modifiedClusterMap, UINT16* modifiedGlyphIndices, FLOAT* modifiedGlyphAdvances, DWRITE_GLYPH_OFFSET* modifiedGlyphOffsets) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer1*, IDWriteFontFace*, FLOAT, DWRITE_SCRIPT_ANALYSIS, UINT32, UINT32, UINT32, const UINT16*, const UINT16*, const FLOAT*, const FLOAT*, const DWRITE_GLYPH_OFFSET*, const DWRITE_SHAPING_GLYPH_PROPERTIES*, UINT32*, UINT16*, UINT16*, FLOAT*, DWRITE_GLYPH_OFFSET*))this->v->tbl[18])(this, fontFace, fontEmSize, scriptAnalysis, textLength, glyphCount, maxGlyphCount, clusterMap, glyphIndices, glyphAdvances, justifiedGlyphAdvances, justifiedGlyphOffsets, glyphProperties, actualGlyphCount, modifiedClusterMap, modifiedGlyphIndices, modifiedGlyphAdvances, modifiedGlyphOffsets); }

static inline HRESULT                           IDWriteTextAnalyzer2_QueryInterface                          (IDWriteTextAnalyzer2* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer2*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteTextAnalyzer2_AddRef                                  (IDWriteTextAnalyzer2* this) { return ((UINT32 (WINAPI*)(IDWriteTextAnalyzer2*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteTextAnalyzer2_Release                                 (IDWriteTextAnalyzer2* this) { return ((UINT32 (WINAPI*)(IDWriteTextAnalyzer2*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteTextAnalyzer2_AnalyzeScript                           (IDWriteTextAnalyzer2* this, IDWriteTextAnalysisSource* analysisSource, UINT32 textPosition, UINT32 textLength, IDWriteTextAnalysisSink* analysisSink) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer2*, IDWriteTextAnalysisSource*, UINT32, UINT32, IDWriteTextAnalysisSink*))this->v->tbl[3])(this, analysisSource, textPosition, textLength, analysisSink); }
static inline HRESULT                           IDWriteTextAnalyzer2_AnalyzeBidi                             (IDWriteTextAnalyzer2* this, IDWriteTextAnalysisSource* analysisSource, UINT32 textPosition, UINT32 textLength, IDWriteTextAnalysisSink* analysisSink) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer2*, IDWriteTextAnalysisSource*, UINT32, UINT32, IDWriteTextAnalysisSink*))this->v->tbl[4])(this, analysisSource, textPosition, textLength, analysisSink); }
static inline HRESULT                           IDWriteTextAnalyzer2_AnalyzeNumberSubstitution               (IDWriteTextAnalyzer2* this, IDWriteTextAnalysisSource* analysisSource, UINT32 textPosition, UINT32 textLength, IDWriteTextAnalysisSink* analysisSink) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer2*, IDWriteTextAnalysisSource*, UINT32, UINT32, IDWriteTextAnalysisSink*))this->v->tbl[5])(this, analysisSource, textPosition, textLength, analysisSink); }
static inline HRESULT                           IDWriteTextAnalyzer2_AnalyzeLineBreakpoints                  (IDWriteTextAnalyzer2* this, IDWriteTextAnalysisSource* analysisSource, UINT32 textPosition, UINT32 textLength, IDWriteTextAnalysisSink* analysisSink) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer2*, IDWriteTextAnalysisSource*, UINT32, UINT32, IDWriteTextAnalysisSink*))this->v->tbl[6])(this, analysisSource, textPosition, textLength, analysisSink); }
static inline HRESULT                           IDWriteTextAnalyzer2_GetGlyphs                               (IDWriteTextAnalyzer2* this, const WCHAR* textString, UINT32 textLength, IDWriteFontFace* fontFace, BOOL isSideways, BOOL isRightToLeft, const DWRITE_SCRIPT_ANALYSIS* scriptAnalysis, const WCHAR* localeName, IDWriteNumberSubstitution* numberSubstitution, const DWRITE_TYPOGRAPHIC_FEATURES** features, const UINT32* featureRangeLengths, UINT32 featureRanges, UINT32 maxGlyphCount, UINT16* clusterMap, DWRITE_SHAPING_TEXT_PROPERTIES* textProps, UINT16* glyphIndices, DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProps, UINT32* actualGlyphCount) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer2*, const WCHAR*, UINT32, IDWriteFontFace*, BOOL, BOOL, const DWRITE_SCRIPT_ANALYSIS*, const WCHAR*, IDWriteNumberSubstitution*, const DWRITE_TYPOGRAPHIC_FEATURES**, const UINT32*, UINT32, UINT32, UINT16*, DWRITE_SHAPING_TEXT_PROPERTIES*, UINT16*, DWRITE_SHAPING_GLYPH_PROPERTIES*, UINT32*))this->v->tbl[7])(this, textString, textLength, fontFace, isSideways, isRightToLeft, scriptAnalysis, localeName, numberSubstitution, features, featureRangeLengths, featureRanges, maxGlyphCount, clusterMap, textProps, glyphIndices, glyphProps, actualGlyphCount); }
static inline HRESULT                           IDWriteTextAnalyzer2_GetGlyphPlacements                      (IDWriteTextAnalyzer2* this, const WCHAR* textString, const UINT16* clusterMap, DWRITE_SHAPING_TEXT_PROPERTIES* textProps, UINT32 textLength, const UINT16* glyphIndices, const DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProps, UINT32 glyphCount, IDWriteFontFace* fontFace, FLOAT fontEmSize, BOOL isSideways, BOOL isRightToLeft, const DWRITE_SCRIPT_ANALYSIS* scriptAnalysis, const WCHAR* localeName, const DWRITE_TYPOGRAPHIC_FEATURES** features, const UINT32* featureRangeLengths, UINT32 featureRanges, FLOAT* glyphAdvances, DWRITE_GLYPH_OFFSET* glyphOffsets) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer2*, const WCHAR*, const UINT16*, DWRITE_SHAPING_TEXT_PROPERTIES*, UINT32, const UINT16*, const DWRITE_SHAPING_GLYPH_PROPERTIES*, UINT32, IDWriteFontFace*, FLOAT, BOOL, BOOL, const DWRITE_SCRIPT_ANALYSIS*, const WCHAR*, const DWRITE_TYPOGRAPHIC_FEATURES**, const UINT32*, UINT32, FLOAT*, DWRITE_GLYPH_OFFSET*))this->v->tbl[8])(this, textString, clusterMap, textProps, textLength, glyphIndices, glyphProps, glyphCount, fontFace, fontEmSize, isSideways, isRightToLeft, scriptAnalysis, localeName, features, featureRangeLengths, featureRanges, glyphAdvances, glyphOffsets); }
static inline HRESULT                           IDWriteTextAnalyzer2_GetGdiCompatibleGlyphPlacements         (IDWriteTextAnalyzer2* this, const WCHAR* textString, const UINT16* clusterMap, DWRITE_SHAPING_TEXT_PROPERTIES* textProps, UINT32 textLength, const UINT16* glyphIndices, const DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProps, UINT32 glyphCount, IDWriteFontFace* fontFace, FLOAT fontEmSize, FLOAT pixelsPerDip, const DWRITE_MATRIX* transform, BOOL useGdiNatural, BOOL isSideways, BOOL isRightToLeft, const DWRITE_SCRIPT_ANALYSIS* scriptAnalysis, const WCHAR* localeName, const DWRITE_TYPOGRAPHIC_FEATURES** features, const UINT32* featureRangeLengths, UINT32 featureRanges, FLOAT* glyphAdvances, DWRITE_GLYPH_OFFSET* glyphOffsets) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer2*, const WCHAR*, const UINT16*, DWRITE_SHAPING_TEXT_PROPERTIES*, UINT32, const UINT16*, const DWRITE_SHAPING_GLYPH_PROPERTIES*, UINT32, IDWriteFontFace*, FLOAT, FLOAT, const DWRITE_MATRIX*, BOOL, BOOL, BOOL, const DWRITE_SCRIPT_ANALYSIS*, const WCHAR*, const DWRITE_TYPOGRAPHIC_FEATURES**, const UINT32*, UINT32, FLOAT*, DWRITE_GLYPH_OFFSET*))this->v->tbl[9])(this, textString, clusterMap, textProps, textLength, glyphIndices, glyphProps, glyphCount, fontFace, fontEmSize, pixelsPerDip, transform, useGdiNatural, isSideways, isRightToLeft, scriptAnalysis, localeName, features, featureRangeLengths, featureRanges, glyphAdvances, glyphOffsets); }
static inline HRESULT                           IDWriteTextAnalyzer2_ApplyCharacterSpacing                   (IDWriteTextAnalyzer2* this, FLOAT leadingSpacing, FLOAT trailingSpacing, FLOAT minimumAdvanceWidth, UINT32 textLength, UINT32 glyphCount, const UINT16* clusterMap, const FLOAT* glyphAdvances, const DWRITE_GLYPH_OFFSET* glyphOffsets, const DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProperties, FLOAT* modifiedGlyphAdvances, DWRITE_GLYPH_OFFSET* modifiedGlyphOffsets) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer2*, FLOAT, FLOAT, FLOAT, UINT32, UINT32, const UINT16*, const FLOAT*, const DWRITE_GLYPH_OFFSET*, const DWRITE_SHAPING_GLYPH_PROPERTIES*, FLOAT*, DWRITE_GLYPH_OFFSET*))this->v->tbl[10])(this, leadingSpacing, trailingSpacing, minimumAdvanceWidth, textLength, glyphCount, clusterMap, glyphAdvances, glyphOffsets, glyphProperties, modifiedGlyphAdvances, modifiedGlyphOffsets); }
static inline HRESULT                           IDWriteTextAnalyzer2_GetBaseline                             (IDWriteTextAnalyzer2* this, IDWriteFontFace* fontFace, DWRITE_BASELINE baseline, BOOL isVertical, BOOL isSimulationAllowed, DWRITE_SCRIPT_ANALYSIS scriptAnalysis, const WCHAR* localeName, INT32* baselineCoordinate, BOOL* exists) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer2*, IDWriteFontFace*, DWRITE_BASELINE, BOOL, BOOL, DWRITE_SCRIPT_ANALYSIS, const WCHAR*, INT32*, BOOL*))this->v->tbl[11])(this, fontFace, baseline, isVertical, isSimulationAllowed, scriptAnalysis, localeName, baselineCoordinate, exists); }
static inline HRESULT                           IDWriteTextAnalyzer2_AnalyzeVerticalGlyphOrientation         (IDWriteTextAnalyzer2* this, IDWriteTextAnalysisSource1* analysisSource, UINT32 textPosition, UINT32 textLength, IDWriteTextAnalysisSink1* analysisSink) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer2*, IDWriteTextAnalysisSource1*, UINT32, UINT32, IDWriteTextAnalysisSink1*))this->v->tbl[12])(this, analysisSource, textPosition, textLength, analysisSink); }
static inline HRESULT                           IDWriteTextAnalyzer2_GetGlyphOrientationTransform            (IDWriteTextAnalyzer2* this, DWRITE_GLYPH_ORIENTATION_ANGLE glyphOrientationAngle, BOOL isSideways, DWRITE_MATRIX* transform) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer2*, DWRITE_GLYPH_ORIENTATION_ANGLE, BOOL, DWRITE_MATRIX*))this->v->tbl[13])(this, glyphOrientationAngle, isSideways, transform); }
static inline HRESULT                           IDWriteTextAnalyzer2_GetScriptProperties                     (IDWriteTextAnalyzer2* this, DWRITE_SCRIPT_ANALYSIS scriptAnalysis, DWRITE_SCRIPT_PROPERTIES* scriptProperties) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer2*, DWRITE_SCRIPT_ANALYSIS, DWRITE_SCRIPT_PROPERTIES*))this->v->tbl[14])(this, scriptAnalysis, scriptProperties); }
static inline HRESULT                           IDWriteTextAnalyzer2_GetTextComplexity                       (IDWriteTextAnalyzer2* this, const WCHAR* textString, UINT32 textLength, IDWriteFontFace* fontFace, BOOL* isTextSimple, UINT32* textLengthRead, UINT16* glyphIndices) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer2*, const WCHAR*, UINT32, IDWriteFontFace*, BOOL*, UINT32*, UINT16*))this->v->tbl[15])(this, textString, textLength, fontFace, isTextSimple, textLengthRead, glyphIndices); }
static inline HRESULT                           IDWriteTextAnalyzer2_GetJustificationOpportunities           (IDWriteTextAnalyzer2* this, IDWriteFontFace* fontFace, FLOAT fontEmSize, DWRITE_SCRIPT_ANALYSIS scriptAnalysis, UINT32 textLength, UINT32 glyphCount, const WCHAR* textString, const UINT16* clusterMap, const DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProperties, DWRITE_JUSTIFICATION_OPPORTUNITY* justificationOpportunities) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer2*, IDWriteFontFace*, FLOAT, DWRITE_SCRIPT_ANALYSIS, UINT32, UINT32, const WCHAR*, const UINT16*, const DWRITE_SHAPING_GLYPH_PROPERTIES*, DWRITE_JUSTIFICATION_OPPORTUNITY*))this->v->tbl[16])(this, fontFace, fontEmSize, scriptAnalysis, textLength, glyphCount, textString, clusterMap, glyphProperties, justificationOpportunities); }
static inline HRESULT                           IDWriteTextAnalyzer2_JustifyGlyphAdvances                    (IDWriteTextAnalyzer2* this, FLOAT lineWidth, UINT32 glyphCount, const DWRITE_JUSTIFICATION_OPPORTUNITY* justificationOpportunities, const FLOAT* glyphAdvances, const DWRITE_GLYPH_OFFSET* glyphOffsets, FLOAT* justifiedGlyphAdvances, DWRITE_GLYPH_OFFSET* justifiedGlyphOffsets) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer2*, FLOAT, UINT32, const DWRITE_JUSTIFICATION_OPPORTUNITY*, const FLOAT*, const DWRITE_GLYPH_OFFSET*, FLOAT*, DWRITE_GLYPH_OFFSET*))this->v->tbl[17])(this, lineWidth, glyphCount, justificationOpportunities, glyphAdvances, glyphOffsets, justifiedGlyphAdvances, justifiedGlyphOffsets); }
static inline HRESULT                           IDWriteTextAnalyzer2_GetJustifiedGlyphs                      (IDWriteTextAnalyzer2* this, IDWriteFontFace* fontFace, FLOAT fontEmSize, DWRITE_SCRIPT_ANALYSIS scriptAnalysis, UINT32 textLength, UINT32 glyphCount, UINT32 maxGlyphCount, const UINT16* clusterMap, const UINT16* glyphIndices, const FLOAT* glyphAdvances, const FLOAT* justifiedGlyphAdvances, const DWRITE_GLYPH_OFFSET* justifiedGlyphOffsets, const DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProperties, UINT32* actualGlyphCount, UINT16* modifiedClusterMap, UINT16* modifiedGlyphIndices, FLOAT* modifiedGlyphAdvances, DWRITE_GLYPH_OFFSET* modifiedGlyphOffsets) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer2*, IDWriteFontFace*, FLOAT, DWRITE_SCRIPT_ANALYSIS, UINT32, UINT32, UINT32, const UINT16*, const UINT16*, const FLOAT*, const FLOAT*, const DWRITE_GLYPH_OFFSET*, const DWRITE_SHAPING_GLYPH_PROPERTIES*, UINT32*, UINT16*, UINT16*, FLOAT*, DWRITE_GLYPH_OFFSET*))this->v->tbl[18])(this, fontFace, fontEmSize, scriptAnalysis, textLength, glyphCount, maxGlyphCount, clusterMap, glyphIndices, glyphAdvances, justifiedGlyphAdvances, justifiedGlyphOffsets, glyphProperties, actualGlyphCount, modifiedClusterMap, modifiedGlyphIndices, modifiedGlyphAdvances, modifiedGlyphOffsets); }
static inline HRESULT                           IDWriteTextAnalyzer2_GetGlyphOrientationTransform1           (IDWriteTextAnalyzer2* this, DWRITE_GLYPH_ORIENTATION_ANGLE glyphOrientationAngle, BOOL isSideways, FLOAT originX, FLOAT originY, DWRITE_MATRIX* transform) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer2*, DWRITE_GLYPH_ORIENTATION_ANGLE, BOOL, FLOAT, FLOAT, DWRITE_MATRIX*))this->v->tbl[19])(this, glyphOrientationAngle, isSideways, originX, originY, transform); }
static inline HRESULT                           IDWriteTextAnalyzer2_GetTypographicFeatures                  (IDWriteTextAnalyzer2* this, IDWriteFontFace* fontFace, DWRITE_SCRIPT_ANALYSIS scriptAnalysis, const WCHAR* localeName, UINT32 maxTagCount, UINT32* actualTagCount, DWRITE_FONT_FEATURE_TAG* tags) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer2*, IDWriteFontFace*, DWRITE_SCRIPT_ANALYSIS, const WCHAR*, UINT32, UINT32*, DWRITE_FONT_FEATURE_TAG*))this->v->tbl[20])(this, fontFace, scriptAnalysis, localeName, maxTagCount, actualTagCount, tags); }
static inline HRESULT                           IDWriteTextAnalyzer2_CheckTypographicFeature                 (IDWriteTextAnalyzer2* this, IDWriteFontFace* fontFace, DWRITE_SCRIPT_ANALYSIS scriptAnalysis, const WCHAR* localeName, DWRITE_FONT_FEATURE_TAG featureTag, UINT32 glyphCount, const UINT16* glyphIndices, UINT8* featureApplies) { return ((HRESULT (WINAPI*)(IDWriteTextAnalyzer2*, IDWriteFontFace*, DWRITE_SCRIPT_ANALYSIS, const WCHAR*, DWRITE_FONT_FEATURE_TAG, UINT32, const UINT16*, UINT8*))this->v->tbl[21])(this, fontFace, scriptAnalysis, localeName, featureTag, glyphCount, glyphIndices, featureApplies); }

static inline HRESULT                           IDWriteTextFormat_QueryInterface                             (IDWriteTextFormat* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteTextFormat*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteTextFormat_AddRef                                     (IDWriteTextFormat* this) { return ((UINT32 (WINAPI*)(IDWriteTextFormat*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteTextFormat_Release                                    (IDWriteTextFormat* this) { return ((UINT32 (WINAPI*)(IDWriteTextFormat*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteTextFormat_SetTextAlignment                           (IDWriteTextFormat* this, DWRITE_TEXT_ALIGNMENT textAlignment) { return ((HRESULT (WINAPI*)(IDWriteTextFormat*, DWRITE_TEXT_ALIGNMENT))this->v->tbl[3])(this, textAlignment); }
static inline HRESULT                           IDWriteTextFormat_SetParagraphAlignment                      (IDWriteTextFormat* this, DWRITE_PARAGRAPH_ALIGNMENT paragraphAlignment) { return ((HRESULT (WINAPI*)(IDWriteTextFormat*, DWRITE_PARAGRAPH_ALIGNMENT))this->v->tbl[4])(this, paragraphAlignment); }
static inline HRESULT                           IDWriteTextFormat_SetWordWrapping                            (IDWriteTextFormat* this, DWRITE_WORD_WRAPPING wordWrapping) { return ((HRESULT (WINAPI*)(IDWriteTextFormat*, DWRITE_WORD_WRAPPING))this->v->tbl[5])(this, wordWrapping); }
static inline HRESULT                           IDWriteTextFormat_SetReadingDirection                        (IDWriteTextFormat* this, DWRITE_READING_DIRECTION readingDirection) { return ((HRESULT (WINAPI*)(IDWriteTextFormat*, DWRITE_READING_DIRECTION))this->v->tbl[6])(this, readingDirection); }
static inline HRESULT                           IDWriteTextFormat_SetFlowDirection                           (IDWriteTextFormat* this, DWRITE_FLOW_DIRECTION flowDirection) { return ((HRESULT (WINAPI*)(IDWriteTextFormat*, DWRITE_FLOW_DIRECTION))this->v->tbl[7])(this, flowDirection); }
static inline HRESULT                           IDWriteTextFormat_SetIncrementalTabStop                      (IDWriteTextFormat* this, FLOAT incrementalTabStop) { return ((HRESULT (WINAPI*)(IDWriteTextFormat*, FLOAT))this->v->tbl[8])(this, incrementalTabStop); }
static inline HRESULT                           IDWriteTextFormat_SetTrimming                                (IDWriteTextFormat* this, const DWRITE_TRIMMING* trimmingOptions, IDWriteInlineObject* trimmingSign) { return ((HRESULT (WINAPI*)(IDWriteTextFormat*, const DWRITE_TRIMMING*, IDWriteInlineObject*))this->v->tbl[9])(this, trimmingOptions, trimmingSign); }
static inline HRESULT                           IDWriteTextFormat_SetLineSpacing                             (IDWriteTextFormat* this, DWRITE_LINE_SPACING_METHOD lineSpacingMethod, FLOAT lineSpacing, FLOAT baseline) { return ((HRESULT (WINAPI*)(IDWriteTextFormat*, DWRITE_LINE_SPACING_METHOD, FLOAT, FLOAT))this->v->tbl[10])(this, lineSpacingMethod, lineSpacing, baseline); }
static inline DWRITE_TEXT_ALIGNMENT             IDWriteTextFormat_GetTextAlignment                           (IDWriteTextFormat* this) { return ((DWRITE_TEXT_ALIGNMENT (WINAPI*)(IDWriteTextFormat*))this->v->tbl[11])(this); }
static inline DWRITE_PARAGRAPH_ALIGNMENT        IDWriteTextFormat_GetParagraphAlignment                      (IDWriteTextFormat* this) { return ((DWRITE_PARAGRAPH_ALIGNMENT (WINAPI*)(IDWriteTextFormat*))this->v->tbl[12])(this); }
static inline DWRITE_WORD_WRAPPING              IDWriteTextFormat_GetWordWrapping                            (IDWriteTextFormat* this) { return ((DWRITE_WORD_WRAPPING (WINAPI*)(IDWriteTextFormat*))this->v->tbl[13])(this); }
static inline DWRITE_READING_DIRECTION          IDWriteTextFormat_GetReadingDirection                        (IDWriteTextFormat* this) { return ((DWRITE_READING_DIRECTION (WINAPI*)(IDWriteTextFormat*))this->v->tbl[14])(this); }
static inline DWRITE_FLOW_DIRECTION             IDWriteTextFormat_GetFlowDirection                           (IDWriteTextFormat* this) { return ((DWRITE_FLOW_DIRECTION (WINAPI*)(IDWriteTextFormat*))this->v->tbl[15])(this); }
static inline FLOAT                             IDWriteTextFormat_GetIncrementalTabStop                      (IDWriteTextFormat* this) { return ((FLOAT (WINAPI*)(IDWriteTextFormat*))this->v->tbl[16])(this); }
static inline HRESULT                           IDWriteTextFormat_GetTrimming                                (IDWriteTextFormat* this, DWRITE_TRIMMING* trimmingOptions, IDWriteInlineObject** trimmingSign) { return ((HRESULT (WINAPI*)(IDWriteTextFormat*, DWRITE_TRIMMING*, IDWriteInlineObject**))this->v->tbl[17])(this, trimmingOptions, trimmingSign); }
static inline HRESULT                           IDWriteTextFormat_GetLineSpacing                             (IDWriteTextFormat* this, DWRITE_LINE_SPACING_METHOD* lineSpacingMethod, FLOAT* lineSpacing, FLOAT* baseline) { return ((HRESULT (WINAPI*)(IDWriteTextFormat*, DWRITE_LINE_SPACING_METHOD*, FLOAT*, FLOAT*))this->v->tbl[18])(this, lineSpacingMethod, lineSpacing, baseline); }
static inline HRESULT                           IDWriteTextFormat_GetFontCollection                          (IDWriteTextFormat* this, IDWriteFontCollection** fontCollection) { return ((HRESULT (WINAPI*)(IDWriteTextFormat*, IDWriteFontCollection**))this->v->tbl[19])(this, fontCollection); }
static inline UINT32                            IDWriteTextFormat_GetFontFamilyNameLength                    (IDWriteTextFormat* this) { return ((UINT32 (WINAPI*)(IDWriteTextFormat*))this->v->tbl[20])(this); }
static inline HRESULT                           IDWriteTextFormat_GetFontFamilyName                          (IDWriteTextFormat* this, WCHAR* fontFamilyName, UINT32 nameSize) { return ((HRESULT (WINAPI*)(IDWriteTextFormat*, WCHAR*, UINT32))this->v->tbl[21])(this, fontFamilyName, nameSize); }
static inline DWRITE_FONT_WEIGHT                IDWriteTextFormat_GetFontWeight                              (IDWriteTextFormat* this) { return ((DWRITE_FONT_WEIGHT (WINAPI*)(IDWriteTextFormat*))this->v->tbl[22])(this); }
static inline DWRITE_FONT_STYLE                 IDWriteTextFormat_GetFontStyle                               (IDWriteTextFormat* this) { return ((DWRITE_FONT_STYLE (WINAPI*)(IDWriteTextFormat*))this->v->tbl[23])(this); }
static inline DWRITE_FONT_STRETCH               IDWriteTextFormat_GetFontStretch                             (IDWriteTextFormat* this) { return ((DWRITE_FONT_STRETCH (WINAPI*)(IDWriteTextFormat*))this->v->tbl[24])(this); }
static inline FLOAT                             IDWriteTextFormat_GetFontSize                                (IDWriteTextFormat* this) { return ((FLOAT (WINAPI*)(IDWriteTextFormat*))this->v->tbl[25])(this); }
static inline UINT32                            IDWriteTextFormat_GetLocaleNameLength                        (IDWriteTextFormat* this) { return ((UINT32 (WINAPI*)(IDWriteTextFormat*))this->v->tbl[26])(this); }
static inline HRESULT                           IDWriteTextFormat_GetLocaleName                              (IDWriteTextFormat* this, WCHAR* localeName, UINT32 nameSize) { return ((HRESULT (WINAPI*)(IDWriteTextFormat*, WCHAR*, UINT32))this->v->tbl[27])(this, localeName, nameSize); }

static inline HRESULT                           IDWriteTextFormat1_QueryInterface                            (IDWriteTextFormat1* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteTextFormat1*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteTextFormat1_AddRef                                    (IDWriteTextFormat1* this) { return ((UINT32 (WINAPI*)(IDWriteTextFormat1*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteTextFormat1_Release                                   (IDWriteTextFormat1* this) { return ((UINT32 (WINAPI*)(IDWriteTextFormat1*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteTextFormat1_SetTextAlignment                          (IDWriteTextFormat1* this, DWRITE_TEXT_ALIGNMENT textAlignment) { return ((HRESULT (WINAPI*)(IDWriteTextFormat1*, DWRITE_TEXT_ALIGNMENT))this->v->tbl[3])(this, textAlignment); }
static inline HRESULT                           IDWriteTextFormat1_SetParagraphAlignment                     (IDWriteTextFormat1* this, DWRITE_PARAGRAPH_ALIGNMENT paragraphAlignment) { return ((HRESULT (WINAPI*)(IDWriteTextFormat1*, DWRITE_PARAGRAPH_ALIGNMENT))this->v->tbl[4])(this, paragraphAlignment); }
static inline HRESULT                           IDWriteTextFormat1_SetWordWrapping                           (IDWriteTextFormat1* this, DWRITE_WORD_WRAPPING wordWrapping) { return ((HRESULT (WINAPI*)(IDWriteTextFormat1*, DWRITE_WORD_WRAPPING))this->v->tbl[5])(this, wordWrapping); }
static inline HRESULT                           IDWriteTextFormat1_SetReadingDirection                       (IDWriteTextFormat1* this, DWRITE_READING_DIRECTION readingDirection) { return ((HRESULT (WINAPI*)(IDWriteTextFormat1*, DWRITE_READING_DIRECTION))this->v->tbl[6])(this, readingDirection); }
static inline HRESULT                           IDWriteTextFormat1_SetFlowDirection                          (IDWriteTextFormat1* this, DWRITE_FLOW_DIRECTION flowDirection) { return ((HRESULT (WINAPI*)(IDWriteTextFormat1*, DWRITE_FLOW_DIRECTION))this->v->tbl[7])(this, flowDirection); }
static inline HRESULT                           IDWriteTextFormat1_SetIncrementalTabStop                     (IDWriteTextFormat1* this, FLOAT incrementalTabStop) { return ((HRESULT (WINAPI*)(IDWriteTextFormat1*, FLOAT))this->v->tbl[8])(this, incrementalTabStop); }
static inline HRESULT                           IDWriteTextFormat1_SetTrimming                               (IDWriteTextFormat1* this, const DWRITE_TRIMMING* trimmingOptions, IDWriteInlineObject* trimmingSign) { return ((HRESULT (WINAPI*)(IDWriteTextFormat1*, const DWRITE_TRIMMING*, IDWriteInlineObject*))this->v->tbl[9])(this, trimmingOptions, trimmingSign); }
static inline HRESULT                           IDWriteTextFormat1_SetLineSpacing                            (IDWriteTextFormat1* this, DWRITE_LINE_SPACING_METHOD lineSpacingMethod, FLOAT lineSpacing, FLOAT baseline) { return ((HRESULT (WINAPI*)(IDWriteTextFormat1*, DWRITE_LINE_SPACING_METHOD, FLOAT, FLOAT))this->v->tbl[10])(this, lineSpacingMethod, lineSpacing, baseline); }
static inline DWRITE_TEXT_ALIGNMENT             IDWriteTextFormat1_GetTextAlignment                          (IDWriteTextFormat1* this) { return ((DWRITE_TEXT_ALIGNMENT (WINAPI*)(IDWriteTextFormat1*))this->v->tbl[11])(this); }
static inline DWRITE_PARAGRAPH_ALIGNMENT        IDWriteTextFormat1_GetParagraphAlignment                     (IDWriteTextFormat1* this) { return ((DWRITE_PARAGRAPH_ALIGNMENT (WINAPI*)(IDWriteTextFormat1*))this->v->tbl[12])(this); }
static inline DWRITE_WORD_WRAPPING              IDWriteTextFormat1_GetWordWrapping                           (IDWriteTextFormat1* this) { return ((DWRITE_WORD_WRAPPING (WINAPI*)(IDWriteTextFormat1*))this->v->tbl[13])(this); }
static inline DWRITE_READING_DIRECTION          IDWriteTextFormat1_GetReadingDirection                       (IDWriteTextFormat1* this) { return ((DWRITE_READING_DIRECTION (WINAPI*)(IDWriteTextFormat1*))this->v->tbl[14])(this); }
static inline DWRITE_FLOW_DIRECTION             IDWriteTextFormat1_GetFlowDirection                          (IDWriteTextFormat1* this) { return ((DWRITE_FLOW_DIRECTION (WINAPI*)(IDWriteTextFormat1*))this->v->tbl[15])(this); }
static inline FLOAT                             IDWriteTextFormat1_GetIncrementalTabStop                     (IDWriteTextFormat1* this) { return ((FLOAT (WINAPI*)(IDWriteTextFormat1*))this->v->tbl[16])(this); }
static inline HRESULT                           IDWriteTextFormat1_GetTrimming                               (IDWriteTextFormat1* this, DWRITE_TRIMMING* trimmingOptions, IDWriteInlineObject** trimmingSign) { return ((HRESULT (WINAPI*)(IDWriteTextFormat1*, DWRITE_TRIMMING*, IDWriteInlineObject**))this->v->tbl[17])(this, trimmingOptions, trimmingSign); }
static inline HRESULT                           IDWriteTextFormat1_GetLineSpacing                            (IDWriteTextFormat1* this, DWRITE_LINE_SPACING_METHOD* lineSpacingMethod, FLOAT* lineSpacing, FLOAT* baseline) { return ((HRESULT (WINAPI*)(IDWriteTextFormat1*, DWRITE_LINE_SPACING_METHOD*, FLOAT*, FLOAT*))this->v->tbl[18])(this, lineSpacingMethod, lineSpacing, baseline); }
static inline HRESULT                           IDWriteTextFormat1_GetFontCollection                         (IDWriteTextFormat1* this, IDWriteFontCollection** fontCollection) { return ((HRESULT (WINAPI*)(IDWriteTextFormat1*, IDWriteFontCollection**))this->v->tbl[19])(this, fontCollection); }
static inline UINT32                            IDWriteTextFormat1_GetFontFamilyNameLength                   (IDWriteTextFormat1* this) { return ((UINT32 (WINAPI*)(IDWriteTextFormat1*))this->v->tbl[20])(this); }
static inline HRESULT                           IDWriteTextFormat1_GetFontFamilyName                         (IDWriteTextFormat1* this, WCHAR* fontFamilyName, UINT32 nameSize) { return ((HRESULT (WINAPI*)(IDWriteTextFormat1*, WCHAR*, UINT32))this->v->tbl[21])(this, fontFamilyName, nameSize); }
static inline DWRITE_FONT_WEIGHT                IDWriteTextFormat1_GetFontWeight                             (IDWriteTextFormat1* this) { return ((DWRITE_FONT_WEIGHT (WINAPI*)(IDWriteTextFormat1*))this->v->tbl[22])(this); }
static inline DWRITE_FONT_STYLE                 IDWriteTextFormat1_GetFontStyle                              (IDWriteTextFormat1* this) { return ((DWRITE_FONT_STYLE (WINAPI*)(IDWriteTextFormat1*))this->v->tbl[23])(this); }
static inline DWRITE_FONT_STRETCH               IDWriteTextFormat1_GetFontStretch                            (IDWriteTextFormat1* this) { return ((DWRITE_FONT_STRETCH (WINAPI*)(IDWriteTextFormat1*))this->v->tbl[24])(this); }
static inline FLOAT                             IDWriteTextFormat1_GetFontSize                               (IDWriteTextFormat1* this) { return ((FLOAT (WINAPI*)(IDWriteTextFormat1*))this->v->tbl[25])(this); }
static inline UINT32                            IDWriteTextFormat1_GetLocaleNameLength                       (IDWriteTextFormat1* this) { return ((UINT32 (WINAPI*)(IDWriteTextFormat1*))this->v->tbl[26])(this); }
static inline HRESULT                           IDWriteTextFormat1_GetLocaleName                             (IDWriteTextFormat1* this, WCHAR* localeName, UINT32 nameSize) { return ((HRESULT (WINAPI*)(IDWriteTextFormat1*, WCHAR*, UINT32))this->v->tbl[27])(this, localeName, nameSize); }
static inline HRESULT                           IDWriteTextFormat1_SetVerticalGlyphOrientation               (IDWriteTextFormat1* this, DWRITE_VERTICAL_GLYPH_ORIENTATION glyphOrientation) { return ((HRESULT (WINAPI*)(IDWriteTextFormat1*, DWRITE_VERTICAL_GLYPH_ORIENTATION))this->v->tbl[28])(this, glyphOrientation); }
static inline DWRITE_VERTICAL_GLYPH_ORIENTATION IDWriteTextFormat1_GetVerticalGlyphOrientation               (IDWriteTextFormat1* this) { return ((DWRITE_VERTICAL_GLYPH_ORIENTATION (WINAPI*)(IDWriteTextFormat1*))this->v->tbl[29])(this); }
static inline HRESULT                           IDWriteTextFormat1_SetLastLineWrapping                       (IDWriteTextFormat1* this, BOOL isLastLineWrappingEnabled) { return ((HRESULT (WINAPI*)(IDWriteTextFormat1*, BOOL))this->v->tbl[30])(this, isLastLineWrappingEnabled); }
static inline BOOL                              IDWriteTextFormat1_GetLastLineWrapping                       (IDWriteTextFormat1* this) { return ((BOOL (WINAPI*)(IDWriteTextFormat1*))this->v->tbl[31])(this); }
static inline HRESULT                           IDWriteTextFormat1_SetOpticalAlignment                       (IDWriteTextFormat1* this, DWRITE_OPTICAL_ALIGNMENT opticalAlignment) { return ((HRESULT (WINAPI*)(IDWriteTextFormat1*, DWRITE_OPTICAL_ALIGNMENT))this->v->tbl[32])(this, opticalAlignment); }
static inline DWRITE_OPTICAL_ALIGNMENT          IDWriteTextFormat1_GetOpticalAlignment                       (IDWriteTextFormat1* this) { return ((DWRITE_OPTICAL_ALIGNMENT (WINAPI*)(IDWriteTextFormat1*))this->v->tbl[33])(this); }
static inline HRESULT                           IDWriteTextFormat1_SetFontFallback                           (IDWriteTextFormat1* this, IDWriteFontFallback* fontFallback) { return ((HRESULT (WINAPI*)(IDWriteTextFormat1*, IDWriteFontFallback*))this->v->tbl[34])(this, fontFallback); }
static inline HRESULT                           IDWriteTextFormat1_GetFontFallback                           (IDWriteTextFormat1* this, IDWriteFontFallback** fontFallback) { return ((HRESULT (WINAPI*)(IDWriteTextFormat1*, IDWriteFontFallback**))this->v->tbl[35])(this, fontFallback); }

static inline HRESULT                           IDWriteTextFormat2_QueryInterface                            (IDWriteTextFormat2* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteTextFormat2*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteTextFormat2_AddRef                                    (IDWriteTextFormat2* this) { return ((UINT32 (WINAPI*)(IDWriteTextFormat2*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteTextFormat2_Release                                   (IDWriteTextFormat2* this) { return ((UINT32 (WINAPI*)(IDWriteTextFormat2*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteTextFormat2_SetTextAlignment                          (IDWriteTextFormat2* this, DWRITE_TEXT_ALIGNMENT textAlignment) { return ((HRESULT (WINAPI*)(IDWriteTextFormat2*, DWRITE_TEXT_ALIGNMENT))this->v->tbl[3])(this, textAlignment); }
static inline HRESULT                           IDWriteTextFormat2_SetParagraphAlignment                     (IDWriteTextFormat2* this, DWRITE_PARAGRAPH_ALIGNMENT paragraphAlignment) { return ((HRESULT (WINAPI*)(IDWriteTextFormat2*, DWRITE_PARAGRAPH_ALIGNMENT))this->v->tbl[4])(this, paragraphAlignment); }
static inline HRESULT                           IDWriteTextFormat2_SetWordWrapping                           (IDWriteTextFormat2* this, DWRITE_WORD_WRAPPING wordWrapping) { return ((HRESULT (WINAPI*)(IDWriteTextFormat2*, DWRITE_WORD_WRAPPING))this->v->tbl[5])(this, wordWrapping); }
static inline HRESULT                           IDWriteTextFormat2_SetReadingDirection                       (IDWriteTextFormat2* this, DWRITE_READING_DIRECTION readingDirection) { return ((HRESULT (WINAPI*)(IDWriteTextFormat2*, DWRITE_READING_DIRECTION))this->v->tbl[6])(this, readingDirection); }
static inline HRESULT                           IDWriteTextFormat2_SetFlowDirection                          (IDWriteTextFormat2* this, DWRITE_FLOW_DIRECTION flowDirection) { return ((HRESULT (WINAPI*)(IDWriteTextFormat2*, DWRITE_FLOW_DIRECTION))this->v->tbl[7])(this, flowDirection); }
static inline HRESULT                           IDWriteTextFormat2_SetIncrementalTabStop                     (IDWriteTextFormat2* this, FLOAT incrementalTabStop) { return ((HRESULT (WINAPI*)(IDWriteTextFormat2*, FLOAT))this->v->tbl[8])(this, incrementalTabStop); }
static inline HRESULT                           IDWriteTextFormat2_SetTrimming                               (IDWriteTextFormat2* this, const DWRITE_TRIMMING* trimmingOptions, IDWriteInlineObject* trimmingSign) { return ((HRESULT (WINAPI*)(IDWriteTextFormat2*, const DWRITE_TRIMMING*, IDWriteInlineObject*))this->v->tbl[9])(this, trimmingOptions, trimmingSign); }
static inline HRESULT                           IDWriteTextFormat2_SetLineSpacing                            (IDWriteTextFormat2* this, DWRITE_LINE_SPACING_METHOD lineSpacingMethod, FLOAT lineSpacing, FLOAT baseline) { return ((HRESULT (WINAPI*)(IDWriteTextFormat2*, DWRITE_LINE_SPACING_METHOD, FLOAT, FLOAT))this->v->tbl[10])(this, lineSpacingMethod, lineSpacing, baseline); }
static inline DWRITE_TEXT_ALIGNMENT             IDWriteTextFormat2_GetTextAlignment                          (IDWriteTextFormat2* this) { return ((DWRITE_TEXT_ALIGNMENT (WINAPI*)(IDWriteTextFormat2*))this->v->tbl[11])(this); }
static inline DWRITE_PARAGRAPH_ALIGNMENT        IDWriteTextFormat2_GetParagraphAlignment                     (IDWriteTextFormat2* this) { return ((DWRITE_PARAGRAPH_ALIGNMENT (WINAPI*)(IDWriteTextFormat2*))this->v->tbl[12])(this); }
static inline DWRITE_WORD_WRAPPING              IDWriteTextFormat2_GetWordWrapping                           (IDWriteTextFormat2* this) { return ((DWRITE_WORD_WRAPPING (WINAPI*)(IDWriteTextFormat2*))this->v->tbl[13])(this); }
static inline DWRITE_READING_DIRECTION          IDWriteTextFormat2_GetReadingDirection                       (IDWriteTextFormat2* this) { return ((DWRITE_READING_DIRECTION (WINAPI*)(IDWriteTextFormat2*))this->v->tbl[14])(this); }
static inline DWRITE_FLOW_DIRECTION             IDWriteTextFormat2_GetFlowDirection                          (IDWriteTextFormat2* this) { return ((DWRITE_FLOW_DIRECTION (WINAPI*)(IDWriteTextFormat2*))this->v->tbl[15])(this); }
static inline FLOAT                             IDWriteTextFormat2_GetIncrementalTabStop                     (IDWriteTextFormat2* this) { return ((FLOAT (WINAPI*)(IDWriteTextFormat2*))this->v->tbl[16])(this); }
static inline HRESULT                           IDWriteTextFormat2_GetTrimming                               (IDWriteTextFormat2* this, DWRITE_TRIMMING* trimmingOptions, IDWriteInlineObject** trimmingSign) { return ((HRESULT (WINAPI*)(IDWriteTextFormat2*, DWRITE_TRIMMING*, IDWriteInlineObject**))this->v->tbl[17])(this, trimmingOptions, trimmingSign); }
static inline HRESULT                           IDWriteTextFormat2_GetLineSpacing                            (IDWriteTextFormat2* this, DWRITE_LINE_SPACING_METHOD* lineSpacingMethod, FLOAT* lineSpacing, FLOAT* baseline) { return ((HRESULT (WINAPI*)(IDWriteTextFormat2*, DWRITE_LINE_SPACING_METHOD*, FLOAT*, FLOAT*))this->v->tbl[18])(this, lineSpacingMethod, lineSpacing, baseline); }
static inline HRESULT                           IDWriteTextFormat2_GetFontCollection                         (IDWriteTextFormat2* this, IDWriteFontCollection** fontCollection) { return ((HRESULT (WINAPI*)(IDWriteTextFormat2*, IDWriteFontCollection**))this->v->tbl[19])(this, fontCollection); }
static inline UINT32                            IDWriteTextFormat2_GetFontFamilyNameLength                   (IDWriteTextFormat2* this) { return ((UINT32 (WINAPI*)(IDWriteTextFormat2*))this->v->tbl[20])(this); }
static inline HRESULT                           IDWriteTextFormat2_GetFontFamilyName                         (IDWriteTextFormat2* this, WCHAR* fontFamilyName, UINT32 nameSize) { return ((HRESULT (WINAPI*)(IDWriteTextFormat2*, WCHAR*, UINT32))this->v->tbl[21])(this, fontFamilyName, nameSize); }
static inline DWRITE_FONT_WEIGHT                IDWriteTextFormat2_GetFontWeight                             (IDWriteTextFormat2* this) { return ((DWRITE_FONT_WEIGHT (WINAPI*)(IDWriteTextFormat2*))this->v->tbl[22])(this); }
static inline DWRITE_FONT_STYLE                 IDWriteTextFormat2_GetFontStyle                              (IDWriteTextFormat2* this) { return ((DWRITE_FONT_STYLE (WINAPI*)(IDWriteTextFormat2*))this->v->tbl[23])(this); }
static inline DWRITE_FONT_STRETCH               IDWriteTextFormat2_GetFontStretch                            (IDWriteTextFormat2* this) { return ((DWRITE_FONT_STRETCH (WINAPI*)(IDWriteTextFormat2*))this->v->tbl[24])(this); }
static inline FLOAT                             IDWriteTextFormat2_GetFontSize                               (IDWriteTextFormat2* this) { return ((FLOAT (WINAPI*)(IDWriteTextFormat2*))this->v->tbl[25])(this); }
static inline UINT32                            IDWriteTextFormat2_GetLocaleNameLength                       (IDWriteTextFormat2* this) { return ((UINT32 (WINAPI*)(IDWriteTextFormat2*))this->v->tbl[26])(this); }
static inline HRESULT                           IDWriteTextFormat2_GetLocaleName                             (IDWriteTextFormat2* this, WCHAR* localeName, UINT32 nameSize) { return ((HRESULT (WINAPI*)(IDWriteTextFormat2*, WCHAR*, UINT32))this->v->tbl[27])(this, localeName, nameSize); }
static inline HRESULT                           IDWriteTextFormat2_SetVerticalGlyphOrientation               (IDWriteTextFormat2* this, DWRITE_VERTICAL_GLYPH_ORIENTATION glyphOrientation) { return ((HRESULT (WINAPI*)(IDWriteTextFormat2*, DWRITE_VERTICAL_GLYPH_ORIENTATION))this->v->tbl[28])(this, glyphOrientation); }
static inline DWRITE_VERTICAL_GLYPH_ORIENTATION IDWriteTextFormat2_GetVerticalGlyphOrientation               (IDWriteTextFormat2* this) { return ((DWRITE_VERTICAL_GLYPH_ORIENTATION (WINAPI*)(IDWriteTextFormat2*))this->v->tbl[29])(this); }
static inline HRESULT                           IDWriteTextFormat2_SetLastLineWrapping                       (IDWriteTextFormat2* this, BOOL isLastLineWrappingEnabled) { return ((HRESULT (WINAPI*)(IDWriteTextFormat2*, BOOL))this->v->tbl[30])(this, isLastLineWrappingEnabled); }
static inline BOOL                              IDWriteTextFormat2_GetLastLineWrapping                       (IDWriteTextFormat2* this) { return ((BOOL (WINAPI*)(IDWriteTextFormat2*))this->v->tbl[31])(this); }
static inline HRESULT                           IDWriteTextFormat2_SetOpticalAlignment                       (IDWriteTextFormat2* this, DWRITE_OPTICAL_ALIGNMENT opticalAlignment) { return ((HRESULT (WINAPI*)(IDWriteTextFormat2*, DWRITE_OPTICAL_ALIGNMENT))this->v->tbl[32])(this, opticalAlignment); }
static inline DWRITE_OPTICAL_ALIGNMENT          IDWriteTextFormat2_GetOpticalAlignment                       (IDWriteTextFormat2* this) { return ((DWRITE_OPTICAL_ALIGNMENT (WINAPI*)(IDWriteTextFormat2*))this->v->tbl[33])(this); }
static inline HRESULT                           IDWriteTextFormat2_SetFontFallback                           (IDWriteTextFormat2* this, IDWriteFontFallback* fontFallback) { return ((HRESULT (WINAPI*)(IDWriteTextFormat2*, IDWriteFontFallback*))this->v->tbl[34])(this, fontFallback); }
static inline HRESULT                           IDWriteTextFormat2_GetFontFallback                           (IDWriteTextFormat2* this, IDWriteFontFallback** fontFallback) { return ((HRESULT (WINAPI*)(IDWriteTextFormat2*, IDWriteFontFallback**))this->v->tbl[35])(this, fontFallback); }
static inline HRESULT                           IDWriteTextFormat2_SetLineSpacing1                           (IDWriteTextFormat2* this, const DWRITE_LINE_SPACING* lineSpacingOptions) { return ((HRESULT (WINAPI*)(IDWriteTextFormat2*, const DWRITE_LINE_SPACING*))this->v->tbl[36])(this, lineSpacingOptions); }
static inline HRESULT                           IDWriteTextFormat2_GetLineSpacing1                           (IDWriteTextFormat2* this, DWRITE_LINE_SPACING* lineSpacingOptions) { return ((HRESULT (WINAPI*)(IDWriteTextFormat2*, DWRITE_LINE_SPACING*))this->v->tbl[37])(this, lineSpacingOptions); }

static inline HRESULT                           IDWriteTextFormat3_QueryInterface                            (IDWriteTextFormat3* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteTextFormat3*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteTextFormat3_AddRef                                    (IDWriteTextFormat3* this) { return ((UINT32 (WINAPI*)(IDWriteTextFormat3*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteTextFormat3_Release                                   (IDWriteTextFormat3* this) { return ((UINT32 (WINAPI*)(IDWriteTextFormat3*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteTextFormat3_SetTextAlignment                          (IDWriteTextFormat3* this, DWRITE_TEXT_ALIGNMENT textAlignment) { return ((HRESULT (WINAPI*)(IDWriteTextFormat3*, DWRITE_TEXT_ALIGNMENT))this->v->tbl[3])(this, textAlignment); }
static inline HRESULT                           IDWriteTextFormat3_SetParagraphAlignment                     (IDWriteTextFormat3* this, DWRITE_PARAGRAPH_ALIGNMENT paragraphAlignment) { return ((HRESULT (WINAPI*)(IDWriteTextFormat3*, DWRITE_PARAGRAPH_ALIGNMENT))this->v->tbl[4])(this, paragraphAlignment); }
static inline HRESULT                           IDWriteTextFormat3_SetWordWrapping                           (IDWriteTextFormat3* this, DWRITE_WORD_WRAPPING wordWrapping) { return ((HRESULT (WINAPI*)(IDWriteTextFormat3*, DWRITE_WORD_WRAPPING))this->v->tbl[5])(this, wordWrapping); }
static inline HRESULT                           IDWriteTextFormat3_SetReadingDirection                       (IDWriteTextFormat3* this, DWRITE_READING_DIRECTION readingDirection) { return ((HRESULT (WINAPI*)(IDWriteTextFormat3*, DWRITE_READING_DIRECTION))this->v->tbl[6])(this, readingDirection); }
static inline HRESULT                           IDWriteTextFormat3_SetFlowDirection                          (IDWriteTextFormat3* this, DWRITE_FLOW_DIRECTION flowDirection) { return ((HRESULT (WINAPI*)(IDWriteTextFormat3*, DWRITE_FLOW_DIRECTION))this->v->tbl[7])(this, flowDirection); }
static inline HRESULT                           IDWriteTextFormat3_SetIncrementalTabStop                     (IDWriteTextFormat3* this, FLOAT incrementalTabStop) { return ((HRESULT (WINAPI*)(IDWriteTextFormat3*, FLOAT))this->v->tbl[8])(this, incrementalTabStop); }
static inline HRESULT                           IDWriteTextFormat3_SetTrimming                               (IDWriteTextFormat3* this, const DWRITE_TRIMMING* trimmingOptions, IDWriteInlineObject* trimmingSign) { return ((HRESULT (WINAPI*)(IDWriteTextFormat3*, const DWRITE_TRIMMING*, IDWriteInlineObject*))this->v->tbl[9])(this, trimmingOptions, trimmingSign); }
static inline HRESULT                           IDWriteTextFormat3_SetLineSpacing                            (IDWriteTextFormat3* this, DWRITE_LINE_SPACING_METHOD lineSpacingMethod, FLOAT lineSpacing, FLOAT baseline) { return ((HRESULT (WINAPI*)(IDWriteTextFormat3*, DWRITE_LINE_SPACING_METHOD, FLOAT, FLOAT))this->v->tbl[10])(this, lineSpacingMethod, lineSpacing, baseline); }
static inline DWRITE_TEXT_ALIGNMENT             IDWriteTextFormat3_GetTextAlignment                          (IDWriteTextFormat3* this) { return ((DWRITE_TEXT_ALIGNMENT (WINAPI*)(IDWriteTextFormat3*))this->v->tbl[11])(this); }
static inline DWRITE_PARAGRAPH_ALIGNMENT        IDWriteTextFormat3_GetParagraphAlignment                     (IDWriteTextFormat3* this) { return ((DWRITE_PARAGRAPH_ALIGNMENT (WINAPI*)(IDWriteTextFormat3*))this->v->tbl[12])(this); }
static inline DWRITE_WORD_WRAPPING              IDWriteTextFormat3_GetWordWrapping                           (IDWriteTextFormat3* this) { return ((DWRITE_WORD_WRAPPING (WINAPI*)(IDWriteTextFormat3*))this->v->tbl[13])(this); }
static inline DWRITE_READING_DIRECTION          IDWriteTextFormat3_GetReadingDirection                       (IDWriteTextFormat3* this) { return ((DWRITE_READING_DIRECTION (WINAPI*)(IDWriteTextFormat3*))this->v->tbl[14])(this); }
static inline DWRITE_FLOW_DIRECTION             IDWriteTextFormat3_GetFlowDirection                          (IDWriteTextFormat3* this) { return ((DWRITE_FLOW_DIRECTION (WINAPI*)(IDWriteTextFormat3*))this->v->tbl[15])(this); }
static inline FLOAT                             IDWriteTextFormat3_GetIncrementalTabStop                     (IDWriteTextFormat3* this) { return ((FLOAT (WINAPI*)(IDWriteTextFormat3*))this->v->tbl[16])(this); }
static inline HRESULT                           IDWriteTextFormat3_GetTrimming                               (IDWriteTextFormat3* this, DWRITE_TRIMMING* trimmingOptions, IDWriteInlineObject** trimmingSign) { return ((HRESULT (WINAPI*)(IDWriteTextFormat3*, DWRITE_TRIMMING*, IDWriteInlineObject**))this->v->tbl[17])(this, trimmingOptions, trimmingSign); }
static inline HRESULT                           IDWriteTextFormat3_GetLineSpacing                            (IDWriteTextFormat3* this, DWRITE_LINE_SPACING_METHOD* lineSpacingMethod, FLOAT* lineSpacing, FLOAT* baseline) { return ((HRESULT (WINAPI*)(IDWriteTextFormat3*, DWRITE_LINE_SPACING_METHOD*, FLOAT*, FLOAT*))this->v->tbl[18])(this, lineSpacingMethod, lineSpacing, baseline); }
static inline HRESULT                           IDWriteTextFormat3_GetFontCollection                         (IDWriteTextFormat3* this, IDWriteFontCollection** fontCollection) { return ((HRESULT (WINAPI*)(IDWriteTextFormat3*, IDWriteFontCollection**))this->v->tbl[19])(this, fontCollection); }
static inline UINT32                            IDWriteTextFormat3_GetFontFamilyNameLength                   (IDWriteTextFormat3* this) { return ((UINT32 (WINAPI*)(IDWriteTextFormat3*))this->v->tbl[20])(this); }
static inline HRESULT                           IDWriteTextFormat3_GetFontFamilyName                         (IDWriteTextFormat3* this, WCHAR* fontFamilyName, UINT32 nameSize) { return ((HRESULT (WINAPI*)(IDWriteTextFormat3*, WCHAR*, UINT32))this->v->tbl[21])(this, fontFamilyName, nameSize); }
static inline DWRITE_FONT_WEIGHT                IDWriteTextFormat3_GetFontWeight                             (IDWriteTextFormat3* this) { return ((DWRITE_FONT_WEIGHT (WINAPI*)(IDWriteTextFormat3*))this->v->tbl[22])(this); }
static inline DWRITE_FONT_STYLE                 IDWriteTextFormat3_GetFontStyle                              (IDWriteTextFormat3* this) { return ((DWRITE_FONT_STYLE (WINAPI*)(IDWriteTextFormat3*))this->v->tbl[23])(this); }
static inline DWRITE_FONT_STRETCH               IDWriteTextFormat3_GetFontStretch                            (IDWriteTextFormat3* this) { return ((DWRITE_FONT_STRETCH (WINAPI*)(IDWriteTextFormat3*))this->v->tbl[24])(this); }
static inline FLOAT                             IDWriteTextFormat3_GetFontSize                               (IDWriteTextFormat3* this) { return ((FLOAT (WINAPI*)(IDWriteTextFormat3*))this->v->tbl[25])(this); }
static inline UINT32                            IDWriteTextFormat3_GetLocaleNameLength                       (IDWriteTextFormat3* this) { return ((UINT32 (WINAPI*)(IDWriteTextFormat3*))this->v->tbl[26])(this); }
static inline HRESULT                           IDWriteTextFormat3_GetLocaleName                             (IDWriteTextFormat3* this, WCHAR* localeName, UINT32 nameSize) { return ((HRESULT (WINAPI*)(IDWriteTextFormat3*, WCHAR*, UINT32))this->v->tbl[27])(this, localeName, nameSize); }
static inline HRESULT                           IDWriteTextFormat3_SetVerticalGlyphOrientation               (IDWriteTextFormat3* this, DWRITE_VERTICAL_GLYPH_ORIENTATION glyphOrientation) { return ((HRESULT (WINAPI*)(IDWriteTextFormat3*, DWRITE_VERTICAL_GLYPH_ORIENTATION))this->v->tbl[28])(this, glyphOrientation); }
static inline DWRITE_VERTICAL_GLYPH_ORIENTATION IDWriteTextFormat3_GetVerticalGlyphOrientation               (IDWriteTextFormat3* this) { return ((DWRITE_VERTICAL_GLYPH_ORIENTATION (WINAPI*)(IDWriteTextFormat3*))this->v->tbl[29])(this); }
static inline HRESULT                           IDWriteTextFormat3_SetLastLineWrapping                       (IDWriteTextFormat3* this, BOOL isLastLineWrappingEnabled) { return ((HRESULT (WINAPI*)(IDWriteTextFormat3*, BOOL))this->v->tbl[30])(this, isLastLineWrappingEnabled); }
static inline BOOL                              IDWriteTextFormat3_GetLastLineWrapping                       (IDWriteTextFormat3* this) { return ((BOOL (WINAPI*)(IDWriteTextFormat3*))this->v->tbl[31])(this); }
static inline HRESULT                           IDWriteTextFormat3_SetOpticalAlignment                       (IDWriteTextFormat3* this, DWRITE_OPTICAL_ALIGNMENT opticalAlignment) { return ((HRESULT (WINAPI*)(IDWriteTextFormat3*, DWRITE_OPTICAL_ALIGNMENT))this->v->tbl[32])(this, opticalAlignment); }
static inline DWRITE_OPTICAL_ALIGNMENT          IDWriteTextFormat3_GetOpticalAlignment                       (IDWriteTextFormat3* this) { return ((DWRITE_OPTICAL_ALIGNMENT (WINAPI*)(IDWriteTextFormat3*))this->v->tbl[33])(this); }
static inline HRESULT                           IDWriteTextFormat3_SetFontFallback                           (IDWriteTextFormat3* this, IDWriteFontFallback* fontFallback) { return ((HRESULT (WINAPI*)(IDWriteTextFormat3*, IDWriteFontFallback*))this->v->tbl[34])(this, fontFallback); }
static inline HRESULT                           IDWriteTextFormat3_GetFontFallback                           (IDWriteTextFormat3* this, IDWriteFontFallback** fontFallback) { return ((HRESULT (WINAPI*)(IDWriteTextFormat3*, IDWriteFontFallback**))this->v->tbl[35])(this, fontFallback); }
static inline HRESULT                           IDWriteTextFormat3_SetLineSpacing1                           (IDWriteTextFormat3* this, const DWRITE_LINE_SPACING* lineSpacingOptions) { return ((HRESULT (WINAPI*)(IDWriteTextFormat3*, const DWRITE_LINE_SPACING*))this->v->tbl[36])(this, lineSpacingOptions); }
static inline HRESULT                           IDWriteTextFormat3_GetLineSpacing1                           (IDWriteTextFormat3* this, DWRITE_LINE_SPACING* lineSpacingOptions) { return ((HRESULT (WINAPI*)(IDWriteTextFormat3*, DWRITE_LINE_SPACING*))this->v->tbl[37])(this, lineSpacingOptions); }
static inline HRESULT                           IDWriteTextFormat3_SetFontAxisValues                         (IDWriteTextFormat3* this, const DWRITE_FONT_AXIS_VALUE* fontAxisValues, UINT32 fontAxisValueCount) { return ((HRESULT (WINAPI*)(IDWriteTextFormat3*, const DWRITE_FONT_AXIS_VALUE*, UINT32))this->v->tbl[38])(this, fontAxisValues, fontAxisValueCount); }
static inline UINT32                            IDWriteTextFormat3_GetFontAxisValueCount                     (IDWriteTextFormat3* this) { return ((UINT32 (WINAPI*)(IDWriteTextFormat3*))this->v->tbl[39])(this); }
static inline HRESULT                           IDWriteTextFormat3_GetFontAxisValues                         (IDWriteTextFormat3* this, DWRITE_FONT_AXIS_VALUE* fontAxisValues, UINT32 fontAxisValueCount) { return ((HRESULT (WINAPI*)(IDWriteTextFormat3*, DWRITE_FONT_AXIS_VALUE*, UINT32))this->v->tbl[40])(this, fontAxisValues, fontAxisValueCount); }
static inline DWRITE_AUTOMATIC_FONT_AXES        IDWriteTextFormat3_GetAutomaticFontAxes                      (IDWriteTextFormat3* this) { return ((DWRITE_AUTOMATIC_FONT_AXES (WINAPI*)(IDWriteTextFormat3*))this->v->tbl[41])(this); }
static inline HRESULT                           IDWriteTextFormat3_SetAutomaticFontAxes                      (IDWriteTextFormat3* this, DWRITE_AUTOMATIC_FONT_AXES automaticFontAxes) { return ((HRESULT (WINAPI*)(IDWriteTextFormat3*, DWRITE_AUTOMATIC_FONT_AXES))this->v->tbl[42])(this, automaticFontAxes); }

static inline HRESULT                           IDWriteTextLayout_QueryInterface                             (IDWriteTextLayout* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteTextLayout_AddRef                                     (IDWriteTextLayout* this) { return ((UINT32 (WINAPI*)(IDWriteTextLayout*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteTextLayout_Release                                    (IDWriteTextLayout* this) { return ((UINT32 (WINAPI*)(IDWriteTextLayout*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteTextLayout_SetTextAlignment                           (IDWriteTextLayout* this, DWRITE_TEXT_ALIGNMENT textAlignment) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, DWRITE_TEXT_ALIGNMENT))this->v->tbl[3])(this, textAlignment); }
static inline HRESULT                           IDWriteTextLayout_SetParagraphAlignment                      (IDWriteTextLayout* this, DWRITE_PARAGRAPH_ALIGNMENT paragraphAlignment) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, DWRITE_PARAGRAPH_ALIGNMENT))this->v->tbl[4])(this, paragraphAlignment); }
static inline HRESULT                           IDWriteTextLayout_SetWordWrapping                            (IDWriteTextLayout* this, DWRITE_WORD_WRAPPING wordWrapping) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, DWRITE_WORD_WRAPPING))this->v->tbl[5])(this, wordWrapping); }
static inline HRESULT                           IDWriteTextLayout_SetReadingDirection                        (IDWriteTextLayout* this, DWRITE_READING_DIRECTION readingDirection) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, DWRITE_READING_DIRECTION))this->v->tbl[6])(this, readingDirection); }
static inline HRESULT                           IDWriteTextLayout_SetFlowDirection                           (IDWriteTextLayout* this, DWRITE_FLOW_DIRECTION flowDirection) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, DWRITE_FLOW_DIRECTION))this->v->tbl[7])(this, flowDirection); }
static inline HRESULT                           IDWriteTextLayout_SetIncrementalTabStop                      (IDWriteTextLayout* this, FLOAT incrementalTabStop) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, FLOAT))this->v->tbl[8])(this, incrementalTabStop); }
static inline HRESULT                           IDWriteTextLayout_SetTrimming                                (IDWriteTextLayout* this, const DWRITE_TRIMMING* trimmingOptions, IDWriteInlineObject* trimmingSign) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, const DWRITE_TRIMMING*, IDWriteInlineObject*))this->v->tbl[9])(this, trimmingOptions, trimmingSign); }
static inline HRESULT                           IDWriteTextLayout_SetLineSpacing                             (IDWriteTextLayout* this, DWRITE_LINE_SPACING_METHOD lineSpacingMethod, FLOAT lineSpacing, FLOAT baseline) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, DWRITE_LINE_SPACING_METHOD, FLOAT, FLOAT))this->v->tbl[10])(this, lineSpacingMethod, lineSpacing, baseline); }
static inline DWRITE_TEXT_ALIGNMENT             IDWriteTextLayout_GetTextAlignment                           (IDWriteTextLayout* this) { return ((DWRITE_TEXT_ALIGNMENT (WINAPI*)(IDWriteTextLayout*))this->v->tbl[11])(this); }
static inline DWRITE_PARAGRAPH_ALIGNMENT        IDWriteTextLayout_GetParagraphAlignment                      (IDWriteTextLayout* this) { return ((DWRITE_PARAGRAPH_ALIGNMENT (WINAPI*)(IDWriteTextLayout*))this->v->tbl[12])(this); }
static inline DWRITE_WORD_WRAPPING              IDWriteTextLayout_GetWordWrapping                            (IDWriteTextLayout* this) { return ((DWRITE_WORD_WRAPPING (WINAPI*)(IDWriteTextLayout*))this->v->tbl[13])(this); }
static inline DWRITE_READING_DIRECTION          IDWriteTextLayout_GetReadingDirection                        (IDWriteTextLayout* this) { return ((DWRITE_READING_DIRECTION (WINAPI*)(IDWriteTextLayout*))this->v->tbl[14])(this); }
static inline DWRITE_FLOW_DIRECTION             IDWriteTextLayout_GetFlowDirection                           (IDWriteTextLayout* this) { return ((DWRITE_FLOW_DIRECTION (WINAPI*)(IDWriteTextLayout*))this->v->tbl[15])(this); }
static inline FLOAT                             IDWriteTextLayout_GetIncrementalTabStop                      (IDWriteTextLayout* this) { return ((FLOAT (WINAPI*)(IDWriteTextLayout*))this->v->tbl[16])(this); }
static inline HRESULT                           IDWriteTextLayout_GetTrimming                                (IDWriteTextLayout* this, DWRITE_TRIMMING* trimmingOptions, IDWriteInlineObject** trimmingSign) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, DWRITE_TRIMMING*, IDWriteInlineObject**))this->v->tbl[17])(this, trimmingOptions, trimmingSign); }
static inline HRESULT                           IDWriteTextLayout_GetLineSpacing                             (IDWriteTextLayout* this, DWRITE_LINE_SPACING_METHOD* lineSpacingMethod, FLOAT* lineSpacing, FLOAT* baseline) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, DWRITE_LINE_SPACING_METHOD*, FLOAT*, FLOAT*))this->v->tbl[18])(this, lineSpacingMethod, lineSpacing, baseline); }
static inline HRESULT                           IDWriteTextLayout_GetFontCollection                          (IDWriteTextLayout* this, IDWriteFontCollection** fontCollection) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, IDWriteFontCollection**))this->v->tbl[19])(this, fontCollection); }
static inline UINT32                            IDWriteTextLayout_GetFontFamilyNameLength                    (IDWriteTextLayout* this) { return ((UINT32 (WINAPI*)(IDWriteTextLayout*))this->v->tbl[20])(this); }
static inline HRESULT                           IDWriteTextLayout_GetFontFamilyName                          (IDWriteTextLayout* this, WCHAR* fontFamilyName, UINT32 nameSize) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, WCHAR*, UINT32))this->v->tbl[21])(this, fontFamilyName, nameSize); }
static inline DWRITE_FONT_WEIGHT                IDWriteTextLayout_GetFontWeight                              (IDWriteTextLayout* this) { return ((DWRITE_FONT_WEIGHT (WINAPI*)(IDWriteTextLayout*))this->v->tbl[22])(this); }
static inline DWRITE_FONT_STYLE                 IDWriteTextLayout_GetFontStyle                               (IDWriteTextLayout* this) { return ((DWRITE_FONT_STYLE (WINAPI*)(IDWriteTextLayout*))this->v->tbl[23])(this); }
static inline DWRITE_FONT_STRETCH               IDWriteTextLayout_GetFontStretch                             (IDWriteTextLayout* this) { return ((DWRITE_FONT_STRETCH (WINAPI*)(IDWriteTextLayout*))this->v->tbl[24])(this); }
static inline FLOAT                             IDWriteTextLayout_GetFontSize                                (IDWriteTextLayout* this) { return ((FLOAT (WINAPI*)(IDWriteTextLayout*))this->v->tbl[25])(this); }
static inline UINT32                            IDWriteTextLayout_GetLocaleNameLength                        (IDWriteTextLayout* this) { return ((UINT32 (WINAPI*)(IDWriteTextLayout*))this->v->tbl[26])(this); }
static inline HRESULT                           IDWriteTextLayout_GetLocaleName                              (IDWriteTextLayout* this, WCHAR* localeName, UINT32 nameSize) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, WCHAR*, UINT32))this->v->tbl[27])(this, localeName, nameSize); }
static inline HRESULT                           IDWriteTextLayout_SetMaxWidth                                (IDWriteTextLayout* this, FLOAT maxWidth) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, FLOAT))this->v->tbl[28])(this, maxWidth); }
static inline HRESULT                           IDWriteTextLayout_SetMaxHeight                               (IDWriteTextLayout* this, FLOAT maxHeight) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, FLOAT))this->v->tbl[29])(this, maxHeight); }
static inline HRESULT                           IDWriteTextLayout_SetFontCollection                          (IDWriteTextLayout* this, IDWriteFontCollection* fontCollection, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, IDWriteFontCollection*, DWRITE_TEXT_RANGE))this->v->tbl[30])(this, fontCollection, textRange); }
static inline HRESULT                           IDWriteTextLayout_SetFontFamilyName                          (IDWriteTextLayout* this, const WCHAR* fontFamilyName, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, const WCHAR*, DWRITE_TEXT_RANGE))this->v->tbl[31])(this, fontFamilyName, textRange); }
static inline HRESULT                           IDWriteTextLayout_SetFontWeight                              (IDWriteTextLayout* this, DWRITE_FONT_WEIGHT fontWeight, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, DWRITE_FONT_WEIGHT, DWRITE_TEXT_RANGE))this->v->tbl[32])(this, fontWeight, textRange); }
static inline HRESULT                           IDWriteTextLayout_SetFontStyle                               (IDWriteTextLayout* this, DWRITE_FONT_STYLE fontStyle, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, DWRITE_FONT_STYLE, DWRITE_TEXT_RANGE))this->v->tbl[33])(this, fontStyle, textRange); }
static inline HRESULT                           IDWriteTextLayout_SetFontStretch                             (IDWriteTextLayout* this, DWRITE_FONT_STRETCH fontStretch, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, DWRITE_FONT_STRETCH, DWRITE_TEXT_RANGE))this->v->tbl[34])(this, fontStretch, textRange); }
static inline HRESULT                           IDWriteTextLayout_SetFontSize                                (IDWriteTextLayout* this, FLOAT fontSize, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, FLOAT, DWRITE_TEXT_RANGE))this->v->tbl[35])(this, fontSize, textRange); }
static inline HRESULT                           IDWriteTextLayout_SetUnderline                               (IDWriteTextLayout* this, BOOL hasUnderline, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, BOOL, DWRITE_TEXT_RANGE))this->v->tbl[36])(this, hasUnderline, textRange); }
static inline HRESULT                           IDWriteTextLayout_SetStrikethrough                           (IDWriteTextLayout* this, BOOL hasStrikethrough, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, BOOL, DWRITE_TEXT_RANGE))this->v->tbl[37])(this, hasStrikethrough, textRange); }
static inline HRESULT                           IDWriteTextLayout_SetDrawingEffect                           (IDWriteTextLayout* this, IUnknown* drawingEffect, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, IUnknown*, DWRITE_TEXT_RANGE))this->v->tbl[38])(this, drawingEffect, textRange); }
static inline HRESULT                           IDWriteTextLayout_SetInlineObject                            (IDWriteTextLayout* this, IDWriteInlineObject* inlineObject, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, IDWriteInlineObject*, DWRITE_TEXT_RANGE))this->v->tbl[39])(this, inlineObject, textRange); }
static inline HRESULT                           IDWriteTextLayout_SetTypography                              (IDWriteTextLayout* this, IDWriteTypography* typography, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, IDWriteTypography*, DWRITE_TEXT_RANGE))this->v->tbl[40])(this, typography, textRange); }
static inline HRESULT                           IDWriteTextLayout_SetLocaleName                              (IDWriteTextLayout* this, const WCHAR* localeName, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, const WCHAR*, DWRITE_TEXT_RANGE))this->v->tbl[41])(this, localeName, textRange); }
static inline FLOAT                             IDWriteTextLayout_GetMaxWidth                                (IDWriteTextLayout* this) { return ((FLOAT (WINAPI*)(IDWriteTextLayout*))this->v->tbl[42])(this); }
static inline FLOAT                             IDWriteTextLayout_GetMaxHeight                               (IDWriteTextLayout* this) { return ((FLOAT (WINAPI*)(IDWriteTextLayout*))this->v->tbl[43])(this); }
static inline HRESULT                           IDWriteTextLayout_GetFontCollection1                         (IDWriteTextLayout* this, UINT32 currentPosition, IDWriteFontCollection** fontCollection, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, UINT32, IDWriteFontCollection**, DWRITE_TEXT_RANGE*))this->v->tbl[44])(this, currentPosition, fontCollection, textRange); }
static inline HRESULT                           IDWriteTextLayout_GetFontFamilyNameLength1                   (IDWriteTextLayout* this, UINT32 currentPosition, UINT32* nameLength, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, UINT32, UINT32*, DWRITE_TEXT_RANGE*))this->v->tbl[45])(this, currentPosition, nameLength, textRange); }
static inline HRESULT                           IDWriteTextLayout_GetFontFamilyName1                         (IDWriteTextLayout* this, UINT32 currentPosition, WCHAR* fontFamilyName, UINT32 nameSize, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, UINT32, WCHAR*, UINT32, DWRITE_TEXT_RANGE*))this->v->tbl[46])(this, currentPosition, fontFamilyName, nameSize, textRange); }
static inline HRESULT                           IDWriteTextLayout_GetFontWeight1                             (IDWriteTextLayout* this, UINT32 currentPosition, DWRITE_FONT_WEIGHT* fontWeight, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, UINT32, DWRITE_FONT_WEIGHT*, DWRITE_TEXT_RANGE*))this->v->tbl[47])(this, currentPosition, fontWeight, textRange); }
static inline HRESULT                           IDWriteTextLayout_GetFontStyle1                              (IDWriteTextLayout* this, UINT32 currentPosition, DWRITE_FONT_STYLE* fontStyle, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, UINT32, DWRITE_FONT_STYLE*, DWRITE_TEXT_RANGE*))this->v->tbl[48])(this, currentPosition, fontStyle, textRange); }
static inline HRESULT                           IDWriteTextLayout_GetFontStretch1                            (IDWriteTextLayout* this, UINT32 currentPosition, DWRITE_FONT_STRETCH* fontStretch, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, UINT32, DWRITE_FONT_STRETCH*, DWRITE_TEXT_RANGE*))this->v->tbl[49])(this, currentPosition, fontStretch, textRange); }
static inline HRESULT                           IDWriteTextLayout_GetFontSize1                               (IDWriteTextLayout* this, UINT32 currentPosition, FLOAT* fontSize, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, UINT32, FLOAT*, DWRITE_TEXT_RANGE*))this->v->tbl[50])(this, currentPosition, fontSize, textRange); }
static inline HRESULT                           IDWriteTextLayout_GetUnderline                               (IDWriteTextLayout* this, UINT32 currentPosition, BOOL* hasUnderline, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, UINT32, BOOL*, DWRITE_TEXT_RANGE*))this->v->tbl[51])(this, currentPosition, hasUnderline, textRange); }
static inline HRESULT                           IDWriteTextLayout_GetStrikethrough                           (IDWriteTextLayout* this, UINT32 currentPosition, BOOL* hasStrikethrough, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, UINT32, BOOL*, DWRITE_TEXT_RANGE*))this->v->tbl[52])(this, currentPosition, hasStrikethrough, textRange); }
static inline HRESULT                           IDWriteTextLayout_GetDrawingEffect                           (IDWriteTextLayout* this, UINT32 currentPosition, IUnknown** drawingEffect, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, UINT32, IUnknown**, DWRITE_TEXT_RANGE*))this->v->tbl[53])(this, currentPosition, drawingEffect, textRange); }
static inline HRESULT                           IDWriteTextLayout_GetInlineObject                            (IDWriteTextLayout* this, UINT32 currentPosition, IDWriteInlineObject** inlineObject, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, UINT32, IDWriteInlineObject**, DWRITE_TEXT_RANGE*))this->v->tbl[54])(this, currentPosition, inlineObject, textRange); }
static inline HRESULT                           IDWriteTextLayout_GetTypography                              (IDWriteTextLayout* this, UINT32 currentPosition, IDWriteTypography** typography, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, UINT32, IDWriteTypography**, DWRITE_TEXT_RANGE*))this->v->tbl[55])(this, currentPosition, typography, textRange); }
static inline HRESULT                           IDWriteTextLayout_GetLocaleNameLength1                       (IDWriteTextLayout* this, UINT32 currentPosition, UINT32* nameLength, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, UINT32, UINT32*, DWRITE_TEXT_RANGE*))this->v->tbl[56])(this, currentPosition, nameLength, textRange); }
static inline HRESULT                           IDWriteTextLayout_GetLocaleName1                             (IDWriteTextLayout* this, UINT32 currentPosition, WCHAR* localeName, UINT32 nameSize, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, UINT32, WCHAR*, UINT32, DWRITE_TEXT_RANGE*))this->v->tbl[57])(this, currentPosition, localeName, nameSize, textRange); }
static inline HRESULT                           IDWriteTextLayout_Draw                                       (IDWriteTextLayout* this, void* clientDrawingContext, IDWriteTextRenderer* renderer, FLOAT originX, FLOAT originY) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, void*, IDWriteTextRenderer*, FLOAT, FLOAT))this->v->tbl[58])(this, clientDrawingContext, renderer, originX, originY); }
static inline HRESULT                           IDWriteTextLayout_GetLineMetrics                             (IDWriteTextLayout* this, DWRITE_LINE_METRICS* lineMetrics, UINT32 maxLineCount, UINT32* actualLineCount) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, DWRITE_LINE_METRICS*, UINT32, UINT32*))this->v->tbl[59])(this, lineMetrics, maxLineCount, actualLineCount); }
static inline HRESULT                           IDWriteTextLayout_GetMetrics                                 (IDWriteTextLayout* this, DWRITE_TEXT_METRICS* textMetrics) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, DWRITE_TEXT_METRICS*))this->v->tbl[60])(this, textMetrics); }
static inline HRESULT                           IDWriteTextLayout_GetOverhangMetrics                         (IDWriteTextLayout* this, DWRITE_OVERHANG_METRICS* overhangs) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, DWRITE_OVERHANG_METRICS*))this->v->tbl[61])(this, overhangs); }
static inline HRESULT                           IDWriteTextLayout_GetClusterMetrics                          (IDWriteTextLayout* this, DWRITE_CLUSTER_METRICS* clusterMetrics, UINT32 maxClusterCount, UINT32* actualClusterCount) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, DWRITE_CLUSTER_METRICS*, UINT32, UINT32*))this->v->tbl[62])(this, clusterMetrics, maxClusterCount, actualClusterCount); }
static inline HRESULT                           IDWriteTextLayout_DetermineMinWidth                          (IDWriteTextLayout* this, FLOAT* minWidth) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, FLOAT*))this->v->tbl[63])(this, minWidth); }
static inline HRESULT                           IDWriteTextLayout_HitTestPoint                               (IDWriteTextLayout* this, FLOAT pointX, FLOAT pointY, BOOL* isTrailingHit, BOOL* isInside, DWRITE_HIT_TEST_METRICS* hitTestMetrics) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, FLOAT, FLOAT, BOOL*, BOOL*, DWRITE_HIT_TEST_METRICS*))this->v->tbl[64])(this, pointX, pointY, isTrailingHit, isInside, hitTestMetrics); }
static inline HRESULT                           IDWriteTextLayout_HitTestTextPosition                        (IDWriteTextLayout* this, UINT32 textPosition, BOOL isTrailingHit, FLOAT* pointX, FLOAT* pointY, DWRITE_HIT_TEST_METRICS* hitTestMetrics) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, UINT32, BOOL, FLOAT*, FLOAT*, DWRITE_HIT_TEST_METRICS*))this->v->tbl[65])(this, textPosition, isTrailingHit, pointX, pointY, hitTestMetrics); }
static inline HRESULT                           IDWriteTextLayout_HitTestTextRange                           (IDWriteTextLayout* this, UINT32 textPosition, UINT32 textLength, FLOAT originX, FLOAT originY, DWRITE_HIT_TEST_METRICS* hitTestMetrics, UINT32 maxHitTestMetricsCount, UINT32* actualHitTestMetricsCount) { return ((HRESULT (WINAPI*)(IDWriteTextLayout*, UINT32, UINT32, FLOAT, FLOAT, DWRITE_HIT_TEST_METRICS*, UINT32, UINT32*))this->v->tbl[66])(this, textPosition, textLength, originX, originY, hitTestMetrics, maxHitTestMetricsCount, actualHitTestMetricsCount); }

static inline HRESULT                           IDWriteTextLayout1_QueryInterface                            (IDWriteTextLayout1* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteTextLayout1_AddRef                                    (IDWriteTextLayout1* this) { return ((UINT32 (WINAPI*)(IDWriteTextLayout1*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteTextLayout1_Release                                   (IDWriteTextLayout1* this) { return ((UINT32 (WINAPI*)(IDWriteTextLayout1*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteTextLayout1_SetTextAlignment                          (IDWriteTextLayout1* this, DWRITE_TEXT_ALIGNMENT textAlignment) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, DWRITE_TEXT_ALIGNMENT))this->v->tbl[3])(this, textAlignment); }
static inline HRESULT                           IDWriteTextLayout1_SetParagraphAlignment                     (IDWriteTextLayout1* this, DWRITE_PARAGRAPH_ALIGNMENT paragraphAlignment) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, DWRITE_PARAGRAPH_ALIGNMENT))this->v->tbl[4])(this, paragraphAlignment); }
static inline HRESULT                           IDWriteTextLayout1_SetWordWrapping                           (IDWriteTextLayout1* this, DWRITE_WORD_WRAPPING wordWrapping) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, DWRITE_WORD_WRAPPING))this->v->tbl[5])(this, wordWrapping); }
static inline HRESULT                           IDWriteTextLayout1_SetReadingDirection                       (IDWriteTextLayout1* this, DWRITE_READING_DIRECTION readingDirection) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, DWRITE_READING_DIRECTION))this->v->tbl[6])(this, readingDirection); }
static inline HRESULT                           IDWriteTextLayout1_SetFlowDirection                          (IDWriteTextLayout1* this, DWRITE_FLOW_DIRECTION flowDirection) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, DWRITE_FLOW_DIRECTION))this->v->tbl[7])(this, flowDirection); }
static inline HRESULT                           IDWriteTextLayout1_SetIncrementalTabStop                     (IDWriteTextLayout1* this, FLOAT incrementalTabStop) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, FLOAT))this->v->tbl[8])(this, incrementalTabStop); }
static inline HRESULT                           IDWriteTextLayout1_SetTrimming                               (IDWriteTextLayout1* this, const DWRITE_TRIMMING* trimmingOptions, IDWriteInlineObject* trimmingSign) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, const DWRITE_TRIMMING*, IDWriteInlineObject*))this->v->tbl[9])(this, trimmingOptions, trimmingSign); }
static inline HRESULT                           IDWriteTextLayout1_SetLineSpacing                            (IDWriteTextLayout1* this, DWRITE_LINE_SPACING_METHOD lineSpacingMethod, FLOAT lineSpacing, FLOAT baseline) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, DWRITE_LINE_SPACING_METHOD, FLOAT, FLOAT))this->v->tbl[10])(this, lineSpacingMethod, lineSpacing, baseline); }
static inline DWRITE_TEXT_ALIGNMENT             IDWriteTextLayout1_GetTextAlignment                          (IDWriteTextLayout1* this) { return ((DWRITE_TEXT_ALIGNMENT (WINAPI*)(IDWriteTextLayout1*))this->v->tbl[11])(this); }
static inline DWRITE_PARAGRAPH_ALIGNMENT        IDWriteTextLayout1_GetParagraphAlignment                     (IDWriteTextLayout1* this) { return ((DWRITE_PARAGRAPH_ALIGNMENT (WINAPI*)(IDWriteTextLayout1*))this->v->tbl[12])(this); }
static inline DWRITE_WORD_WRAPPING              IDWriteTextLayout1_GetWordWrapping                           (IDWriteTextLayout1* this) { return ((DWRITE_WORD_WRAPPING (WINAPI*)(IDWriteTextLayout1*))this->v->tbl[13])(this); }
static inline DWRITE_READING_DIRECTION          IDWriteTextLayout1_GetReadingDirection                       (IDWriteTextLayout1* this) { return ((DWRITE_READING_DIRECTION (WINAPI*)(IDWriteTextLayout1*))this->v->tbl[14])(this); }
static inline DWRITE_FLOW_DIRECTION             IDWriteTextLayout1_GetFlowDirection                          (IDWriteTextLayout1* this) { return ((DWRITE_FLOW_DIRECTION (WINAPI*)(IDWriteTextLayout1*))this->v->tbl[15])(this); }
static inline FLOAT                             IDWriteTextLayout1_GetIncrementalTabStop                     (IDWriteTextLayout1* this) { return ((FLOAT (WINAPI*)(IDWriteTextLayout1*))this->v->tbl[16])(this); }
static inline HRESULT                           IDWriteTextLayout1_GetTrimming                               (IDWriteTextLayout1* this, DWRITE_TRIMMING* trimmingOptions, IDWriteInlineObject** trimmingSign) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, DWRITE_TRIMMING*, IDWriteInlineObject**))this->v->tbl[17])(this, trimmingOptions, trimmingSign); }
static inline HRESULT                           IDWriteTextLayout1_GetLineSpacing                            (IDWriteTextLayout1* this, DWRITE_LINE_SPACING_METHOD* lineSpacingMethod, FLOAT* lineSpacing, FLOAT* baseline) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, DWRITE_LINE_SPACING_METHOD*, FLOAT*, FLOAT*))this->v->tbl[18])(this, lineSpacingMethod, lineSpacing, baseline); }
static inline HRESULT                           IDWriteTextLayout1_GetFontCollection                         (IDWriteTextLayout1* this, IDWriteFontCollection** fontCollection) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, IDWriteFontCollection**))this->v->tbl[19])(this, fontCollection); }
static inline UINT32                            IDWriteTextLayout1_GetFontFamilyNameLength                   (IDWriteTextLayout1* this) { return ((UINT32 (WINAPI*)(IDWriteTextLayout1*))this->v->tbl[20])(this); }
static inline HRESULT                           IDWriteTextLayout1_GetFontFamilyName                         (IDWriteTextLayout1* this, WCHAR* fontFamilyName, UINT32 nameSize) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, WCHAR*, UINT32))this->v->tbl[21])(this, fontFamilyName, nameSize); }
static inline DWRITE_FONT_WEIGHT                IDWriteTextLayout1_GetFontWeight                             (IDWriteTextLayout1* this) { return ((DWRITE_FONT_WEIGHT (WINAPI*)(IDWriteTextLayout1*))this->v->tbl[22])(this); }
static inline DWRITE_FONT_STYLE                 IDWriteTextLayout1_GetFontStyle                              (IDWriteTextLayout1* this) { return ((DWRITE_FONT_STYLE (WINAPI*)(IDWriteTextLayout1*))this->v->tbl[23])(this); }
static inline DWRITE_FONT_STRETCH               IDWriteTextLayout1_GetFontStretch                            (IDWriteTextLayout1* this) { return ((DWRITE_FONT_STRETCH (WINAPI*)(IDWriteTextLayout1*))this->v->tbl[24])(this); }
static inline FLOAT                             IDWriteTextLayout1_GetFontSize                               (IDWriteTextLayout1* this) { return ((FLOAT (WINAPI*)(IDWriteTextLayout1*))this->v->tbl[25])(this); }
static inline UINT32                            IDWriteTextLayout1_GetLocaleNameLength                       (IDWriteTextLayout1* this) { return ((UINT32 (WINAPI*)(IDWriteTextLayout1*))this->v->tbl[26])(this); }
static inline HRESULT                           IDWriteTextLayout1_GetLocaleName                             (IDWriteTextLayout1* this, WCHAR* localeName, UINT32 nameSize) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, WCHAR*, UINT32))this->v->tbl[27])(this, localeName, nameSize); }
static inline HRESULT                           IDWriteTextLayout1_SetMaxWidth                               (IDWriteTextLayout1* this, FLOAT maxWidth) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, FLOAT))this->v->tbl[28])(this, maxWidth); }
static inline HRESULT                           IDWriteTextLayout1_SetMaxHeight                              (IDWriteTextLayout1* this, FLOAT maxHeight) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, FLOAT))this->v->tbl[29])(this, maxHeight); }
static inline HRESULT                           IDWriteTextLayout1_SetFontCollection                         (IDWriteTextLayout1* this, IDWriteFontCollection* fontCollection, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, IDWriteFontCollection*, DWRITE_TEXT_RANGE))this->v->tbl[30])(this, fontCollection, textRange); }
static inline HRESULT                           IDWriteTextLayout1_SetFontFamilyName                         (IDWriteTextLayout1* this, const WCHAR* fontFamilyName, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, const WCHAR*, DWRITE_TEXT_RANGE))this->v->tbl[31])(this, fontFamilyName, textRange); }
static inline HRESULT                           IDWriteTextLayout1_SetFontWeight                             (IDWriteTextLayout1* this, DWRITE_FONT_WEIGHT fontWeight, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, DWRITE_FONT_WEIGHT, DWRITE_TEXT_RANGE))this->v->tbl[32])(this, fontWeight, textRange); }
static inline HRESULT                           IDWriteTextLayout1_SetFontStyle                              (IDWriteTextLayout1* this, DWRITE_FONT_STYLE fontStyle, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, DWRITE_FONT_STYLE, DWRITE_TEXT_RANGE))this->v->tbl[33])(this, fontStyle, textRange); }
static inline HRESULT                           IDWriteTextLayout1_SetFontStretch                            (IDWriteTextLayout1* this, DWRITE_FONT_STRETCH fontStretch, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, DWRITE_FONT_STRETCH, DWRITE_TEXT_RANGE))this->v->tbl[34])(this, fontStretch, textRange); }
static inline HRESULT                           IDWriteTextLayout1_SetFontSize                               (IDWriteTextLayout1* this, FLOAT fontSize, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, FLOAT, DWRITE_TEXT_RANGE))this->v->tbl[35])(this, fontSize, textRange); }
static inline HRESULT                           IDWriteTextLayout1_SetUnderline                              (IDWriteTextLayout1* this, BOOL hasUnderline, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, BOOL, DWRITE_TEXT_RANGE))this->v->tbl[36])(this, hasUnderline, textRange); }
static inline HRESULT                           IDWriteTextLayout1_SetStrikethrough                          (IDWriteTextLayout1* this, BOOL hasStrikethrough, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, BOOL, DWRITE_TEXT_RANGE))this->v->tbl[37])(this, hasStrikethrough, textRange); }
static inline HRESULT                           IDWriteTextLayout1_SetDrawingEffect                          (IDWriteTextLayout1* this, IUnknown* drawingEffect, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, IUnknown*, DWRITE_TEXT_RANGE))this->v->tbl[38])(this, drawingEffect, textRange); }
static inline HRESULT                           IDWriteTextLayout1_SetInlineObject                           (IDWriteTextLayout1* this, IDWriteInlineObject* inlineObject, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, IDWriteInlineObject*, DWRITE_TEXT_RANGE))this->v->tbl[39])(this, inlineObject, textRange); }
static inline HRESULT                           IDWriteTextLayout1_SetTypography                             (IDWriteTextLayout1* this, IDWriteTypography* typography, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, IDWriteTypography*, DWRITE_TEXT_RANGE))this->v->tbl[40])(this, typography, textRange); }
static inline HRESULT                           IDWriteTextLayout1_SetLocaleName                             (IDWriteTextLayout1* this, const WCHAR* localeName, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, const WCHAR*, DWRITE_TEXT_RANGE))this->v->tbl[41])(this, localeName, textRange); }
static inline FLOAT                             IDWriteTextLayout1_GetMaxWidth                               (IDWriteTextLayout1* this) { return ((FLOAT (WINAPI*)(IDWriteTextLayout1*))this->v->tbl[42])(this); }
static inline FLOAT                             IDWriteTextLayout1_GetMaxHeight                              (IDWriteTextLayout1* this) { return ((FLOAT (WINAPI*)(IDWriteTextLayout1*))this->v->tbl[43])(this); }
static inline HRESULT                           IDWriteTextLayout1_GetFontCollection1                        (IDWriteTextLayout1* this, UINT32 currentPosition, IDWriteFontCollection** fontCollection, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, UINT32, IDWriteFontCollection**, DWRITE_TEXT_RANGE*))this->v->tbl[44])(this, currentPosition, fontCollection, textRange); }
static inline HRESULT                           IDWriteTextLayout1_GetFontFamilyNameLength1                  (IDWriteTextLayout1* this, UINT32 currentPosition, UINT32* nameLength, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, UINT32, UINT32*, DWRITE_TEXT_RANGE*))this->v->tbl[45])(this, currentPosition, nameLength, textRange); }
static inline HRESULT                           IDWriteTextLayout1_GetFontFamilyName1                        (IDWriteTextLayout1* this, UINT32 currentPosition, WCHAR* fontFamilyName, UINT32 nameSize, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, UINT32, WCHAR*, UINT32, DWRITE_TEXT_RANGE*))this->v->tbl[46])(this, currentPosition, fontFamilyName, nameSize, textRange); }
static inline HRESULT                           IDWriteTextLayout1_GetFontWeight1                            (IDWriteTextLayout1* this, UINT32 currentPosition, DWRITE_FONT_WEIGHT* fontWeight, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, UINT32, DWRITE_FONT_WEIGHT*, DWRITE_TEXT_RANGE*))this->v->tbl[47])(this, currentPosition, fontWeight, textRange); }
static inline HRESULT                           IDWriteTextLayout1_GetFontStyle1                             (IDWriteTextLayout1* this, UINT32 currentPosition, DWRITE_FONT_STYLE* fontStyle, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, UINT32, DWRITE_FONT_STYLE*, DWRITE_TEXT_RANGE*))this->v->tbl[48])(this, currentPosition, fontStyle, textRange); }
static inline HRESULT                           IDWriteTextLayout1_GetFontStretch1                           (IDWriteTextLayout1* this, UINT32 currentPosition, DWRITE_FONT_STRETCH* fontStretch, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, UINT32, DWRITE_FONT_STRETCH*, DWRITE_TEXT_RANGE*))this->v->tbl[49])(this, currentPosition, fontStretch, textRange); }
static inline HRESULT                           IDWriteTextLayout1_GetFontSize1                              (IDWriteTextLayout1* this, UINT32 currentPosition, FLOAT* fontSize, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, UINT32, FLOAT*, DWRITE_TEXT_RANGE*))this->v->tbl[50])(this, currentPosition, fontSize, textRange); }
static inline HRESULT                           IDWriteTextLayout1_GetUnderline                              (IDWriteTextLayout1* this, UINT32 currentPosition, BOOL* hasUnderline, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, UINT32, BOOL*, DWRITE_TEXT_RANGE*))this->v->tbl[51])(this, currentPosition, hasUnderline, textRange); }
static inline HRESULT                           IDWriteTextLayout1_GetStrikethrough                          (IDWriteTextLayout1* this, UINT32 currentPosition, BOOL* hasStrikethrough, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, UINT32, BOOL*, DWRITE_TEXT_RANGE*))this->v->tbl[52])(this, currentPosition, hasStrikethrough, textRange); }
static inline HRESULT                           IDWriteTextLayout1_GetDrawingEffect                          (IDWriteTextLayout1* this, UINT32 currentPosition, IUnknown** drawingEffect, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, UINT32, IUnknown**, DWRITE_TEXT_RANGE*))this->v->tbl[53])(this, currentPosition, drawingEffect, textRange); }
static inline HRESULT                           IDWriteTextLayout1_GetInlineObject                           (IDWriteTextLayout1* this, UINT32 currentPosition, IDWriteInlineObject** inlineObject, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, UINT32, IDWriteInlineObject**, DWRITE_TEXT_RANGE*))this->v->tbl[54])(this, currentPosition, inlineObject, textRange); }
static inline HRESULT                           IDWriteTextLayout1_GetTypography                             (IDWriteTextLayout1* this, UINT32 currentPosition, IDWriteTypography** typography, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, UINT32, IDWriteTypography**, DWRITE_TEXT_RANGE*))this->v->tbl[55])(this, currentPosition, typography, textRange); }
static inline HRESULT                           IDWriteTextLayout1_GetLocaleNameLength1                      (IDWriteTextLayout1* this, UINT32 currentPosition, UINT32* nameLength, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, UINT32, UINT32*, DWRITE_TEXT_RANGE*))this->v->tbl[56])(this, currentPosition, nameLength, textRange); }
static inline HRESULT                           IDWriteTextLayout1_GetLocaleName1                            (IDWriteTextLayout1* this, UINT32 currentPosition, WCHAR* localeName, UINT32 nameSize, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, UINT32, WCHAR*, UINT32, DWRITE_TEXT_RANGE*))this->v->tbl[57])(this, currentPosition, localeName, nameSize, textRange); }
static inline HRESULT                           IDWriteTextLayout1_Draw                                      (IDWriteTextLayout1* this, void* clientDrawingContext, IDWriteTextRenderer* renderer, FLOAT originX, FLOAT originY) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, void*, IDWriteTextRenderer*, FLOAT, FLOAT))this->v->tbl[58])(this, clientDrawingContext, renderer, originX, originY); }
static inline HRESULT                           IDWriteTextLayout1_GetLineMetrics                            (IDWriteTextLayout1* this, DWRITE_LINE_METRICS* lineMetrics, UINT32 maxLineCount, UINT32* actualLineCount) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, DWRITE_LINE_METRICS*, UINT32, UINT32*))this->v->tbl[59])(this, lineMetrics, maxLineCount, actualLineCount); }
static inline HRESULT                           IDWriteTextLayout1_GetMetrics                                (IDWriteTextLayout1* this, DWRITE_TEXT_METRICS* textMetrics) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, DWRITE_TEXT_METRICS*))this->v->tbl[60])(this, textMetrics); }
static inline HRESULT                           IDWriteTextLayout1_GetOverhangMetrics                        (IDWriteTextLayout1* this, DWRITE_OVERHANG_METRICS* overhangs) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, DWRITE_OVERHANG_METRICS*))this->v->tbl[61])(this, overhangs); }
static inline HRESULT                           IDWriteTextLayout1_GetClusterMetrics                         (IDWriteTextLayout1* this, DWRITE_CLUSTER_METRICS* clusterMetrics, UINT32 maxClusterCount, UINT32* actualClusterCount) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, DWRITE_CLUSTER_METRICS*, UINT32, UINT32*))this->v->tbl[62])(this, clusterMetrics, maxClusterCount, actualClusterCount); }
static inline HRESULT                           IDWriteTextLayout1_DetermineMinWidth                         (IDWriteTextLayout1* this, FLOAT* minWidth) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, FLOAT*))this->v->tbl[63])(this, minWidth); }
static inline HRESULT                           IDWriteTextLayout1_HitTestPoint                              (IDWriteTextLayout1* this, FLOAT pointX, FLOAT pointY, BOOL* isTrailingHit, BOOL* isInside, DWRITE_HIT_TEST_METRICS* hitTestMetrics) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, FLOAT, FLOAT, BOOL*, BOOL*, DWRITE_HIT_TEST_METRICS*))this->v->tbl[64])(this, pointX, pointY, isTrailingHit, isInside, hitTestMetrics); }
static inline HRESULT                           IDWriteTextLayout1_HitTestTextPosition                       (IDWriteTextLayout1* this, UINT32 textPosition, BOOL isTrailingHit, FLOAT* pointX, FLOAT* pointY, DWRITE_HIT_TEST_METRICS* hitTestMetrics) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, UINT32, BOOL, FLOAT*, FLOAT*, DWRITE_HIT_TEST_METRICS*))this->v->tbl[65])(this, textPosition, isTrailingHit, pointX, pointY, hitTestMetrics); }
static inline HRESULT                           IDWriteTextLayout1_HitTestTextRange                          (IDWriteTextLayout1* this, UINT32 textPosition, UINT32 textLength, FLOAT originX, FLOAT originY, DWRITE_HIT_TEST_METRICS* hitTestMetrics, UINT32 maxHitTestMetricsCount, UINT32* actualHitTestMetricsCount) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, UINT32, UINT32, FLOAT, FLOAT, DWRITE_HIT_TEST_METRICS*, UINT32, UINT32*))this->v->tbl[66])(this, textPosition, textLength, originX, originY, hitTestMetrics, maxHitTestMetricsCount, actualHitTestMetricsCount); }
static inline HRESULT                           IDWriteTextLayout1_SetPairKerning                            (IDWriteTextLayout1* this, BOOL isPairKerningEnabled, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, BOOL, DWRITE_TEXT_RANGE))this->v->tbl[67])(this, isPairKerningEnabled, textRange); }
static inline HRESULT                           IDWriteTextLayout1_GetPairKerning                            (IDWriteTextLayout1* this, UINT32 currentPosition, BOOL* isPairKerningEnabled, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, UINT32, BOOL*, DWRITE_TEXT_RANGE*))this->v->tbl[68])(this, currentPosition, isPairKerningEnabled, textRange); }
static inline HRESULT                           IDWriteTextLayout1_SetCharacterSpacing                       (IDWriteTextLayout1* this, FLOAT leadingSpacing, FLOAT trailingSpacing, FLOAT minimumAdvanceWidth, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, FLOAT, FLOAT, FLOAT, DWRITE_TEXT_RANGE))this->v->tbl[69])(this, leadingSpacing, trailingSpacing, minimumAdvanceWidth, textRange); }
static inline HRESULT                           IDWriteTextLayout1_GetCharacterSpacing                       (IDWriteTextLayout1* this, UINT32 currentPosition, FLOAT* leadingSpacing, FLOAT* trailingSpacing, FLOAT* minimumAdvanceWidth, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout1*, UINT32, FLOAT*, FLOAT*, FLOAT*, DWRITE_TEXT_RANGE*))this->v->tbl[70])(this, currentPosition, leadingSpacing, trailingSpacing, minimumAdvanceWidth, textRange); }

static inline HRESULT                           IDWriteTextLayout2_QueryInterface                            (IDWriteTextLayout2* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteTextLayout2_AddRef                                    (IDWriteTextLayout2* this) { return ((UINT32 (WINAPI*)(IDWriteTextLayout2*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteTextLayout2_Release                                   (IDWriteTextLayout2* this) { return ((UINT32 (WINAPI*)(IDWriteTextLayout2*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteTextLayout2_SetTextAlignment                          (IDWriteTextLayout2* this, DWRITE_TEXT_ALIGNMENT textAlignment) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, DWRITE_TEXT_ALIGNMENT))this->v->tbl[3])(this, textAlignment); }
static inline HRESULT                           IDWriteTextLayout2_SetParagraphAlignment                     (IDWriteTextLayout2* this, DWRITE_PARAGRAPH_ALIGNMENT paragraphAlignment) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, DWRITE_PARAGRAPH_ALIGNMENT))this->v->tbl[4])(this, paragraphAlignment); }
static inline HRESULT                           IDWriteTextLayout2_SetWordWrapping                           (IDWriteTextLayout2* this, DWRITE_WORD_WRAPPING wordWrapping) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, DWRITE_WORD_WRAPPING))this->v->tbl[5])(this, wordWrapping); }
static inline HRESULT                           IDWriteTextLayout2_SetReadingDirection                       (IDWriteTextLayout2* this, DWRITE_READING_DIRECTION readingDirection) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, DWRITE_READING_DIRECTION))this->v->tbl[6])(this, readingDirection); }
static inline HRESULT                           IDWriteTextLayout2_SetFlowDirection                          (IDWriteTextLayout2* this, DWRITE_FLOW_DIRECTION flowDirection) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, DWRITE_FLOW_DIRECTION))this->v->tbl[7])(this, flowDirection); }
static inline HRESULT                           IDWriteTextLayout2_SetIncrementalTabStop                     (IDWriteTextLayout2* this, FLOAT incrementalTabStop) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, FLOAT))this->v->tbl[8])(this, incrementalTabStop); }
static inline HRESULT                           IDWriteTextLayout2_SetTrimming                               (IDWriteTextLayout2* this, const DWRITE_TRIMMING* trimmingOptions, IDWriteInlineObject* trimmingSign) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, const DWRITE_TRIMMING*, IDWriteInlineObject*))this->v->tbl[9])(this, trimmingOptions, trimmingSign); }
static inline HRESULT                           IDWriteTextLayout2_SetLineSpacing                            (IDWriteTextLayout2* this, DWRITE_LINE_SPACING_METHOD lineSpacingMethod, FLOAT lineSpacing, FLOAT baseline) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, DWRITE_LINE_SPACING_METHOD, FLOAT, FLOAT))this->v->tbl[10])(this, lineSpacingMethod, lineSpacing, baseline); }
static inline DWRITE_TEXT_ALIGNMENT             IDWriteTextLayout2_GetTextAlignment                          (IDWriteTextLayout2* this) { return ((DWRITE_TEXT_ALIGNMENT (WINAPI*)(IDWriteTextLayout2*))this->v->tbl[11])(this); }
static inline DWRITE_PARAGRAPH_ALIGNMENT        IDWriteTextLayout2_GetParagraphAlignment                     (IDWriteTextLayout2* this) { return ((DWRITE_PARAGRAPH_ALIGNMENT (WINAPI*)(IDWriteTextLayout2*))this->v->tbl[12])(this); }
static inline DWRITE_WORD_WRAPPING              IDWriteTextLayout2_GetWordWrapping                           (IDWriteTextLayout2* this) { return ((DWRITE_WORD_WRAPPING (WINAPI*)(IDWriteTextLayout2*))this->v->tbl[13])(this); }
static inline DWRITE_READING_DIRECTION          IDWriteTextLayout2_GetReadingDirection                       (IDWriteTextLayout2* this) { return ((DWRITE_READING_DIRECTION (WINAPI*)(IDWriteTextLayout2*))this->v->tbl[14])(this); }
static inline DWRITE_FLOW_DIRECTION             IDWriteTextLayout2_GetFlowDirection                          (IDWriteTextLayout2* this) { return ((DWRITE_FLOW_DIRECTION (WINAPI*)(IDWriteTextLayout2*))this->v->tbl[15])(this); }
static inline FLOAT                             IDWriteTextLayout2_GetIncrementalTabStop                     (IDWriteTextLayout2* this) { return ((FLOAT (WINAPI*)(IDWriteTextLayout2*))this->v->tbl[16])(this); }
static inline HRESULT                           IDWriteTextLayout2_GetTrimming                               (IDWriteTextLayout2* this, DWRITE_TRIMMING* trimmingOptions, IDWriteInlineObject** trimmingSign) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, DWRITE_TRIMMING*, IDWriteInlineObject**))this->v->tbl[17])(this, trimmingOptions, trimmingSign); }
static inline HRESULT                           IDWriteTextLayout2_GetLineSpacing                            (IDWriteTextLayout2* this, DWRITE_LINE_SPACING_METHOD* lineSpacingMethod, FLOAT* lineSpacing, FLOAT* baseline) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, DWRITE_LINE_SPACING_METHOD*, FLOAT*, FLOAT*))this->v->tbl[18])(this, lineSpacingMethod, lineSpacing, baseline); }
static inline HRESULT                           IDWriteTextLayout2_GetFontCollection                         (IDWriteTextLayout2* this, IDWriteFontCollection** fontCollection) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, IDWriteFontCollection**))this->v->tbl[19])(this, fontCollection); }
static inline UINT32                            IDWriteTextLayout2_GetFontFamilyNameLength                   (IDWriteTextLayout2* this) { return ((UINT32 (WINAPI*)(IDWriteTextLayout2*))this->v->tbl[20])(this); }
static inline HRESULT                           IDWriteTextLayout2_GetFontFamilyName                         (IDWriteTextLayout2* this, WCHAR* fontFamilyName, UINT32 nameSize) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, WCHAR*, UINT32))this->v->tbl[21])(this, fontFamilyName, nameSize); }
static inline DWRITE_FONT_WEIGHT                IDWriteTextLayout2_GetFontWeight                             (IDWriteTextLayout2* this) { return ((DWRITE_FONT_WEIGHT (WINAPI*)(IDWriteTextLayout2*))this->v->tbl[22])(this); }
static inline DWRITE_FONT_STYLE                 IDWriteTextLayout2_GetFontStyle                              (IDWriteTextLayout2* this) { return ((DWRITE_FONT_STYLE (WINAPI*)(IDWriteTextLayout2*))this->v->tbl[23])(this); }
static inline DWRITE_FONT_STRETCH               IDWriteTextLayout2_GetFontStretch                            (IDWriteTextLayout2* this) { return ((DWRITE_FONT_STRETCH (WINAPI*)(IDWriteTextLayout2*))this->v->tbl[24])(this); }
static inline FLOAT                             IDWriteTextLayout2_GetFontSize                               (IDWriteTextLayout2* this) { return ((FLOAT (WINAPI*)(IDWriteTextLayout2*))this->v->tbl[25])(this); }
static inline UINT32                            IDWriteTextLayout2_GetLocaleNameLength                       (IDWriteTextLayout2* this) { return ((UINT32 (WINAPI*)(IDWriteTextLayout2*))this->v->tbl[26])(this); }
static inline HRESULT                           IDWriteTextLayout2_GetLocaleName                             (IDWriteTextLayout2* this, WCHAR* localeName, UINT32 nameSize) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, WCHAR*, UINT32))this->v->tbl[27])(this, localeName, nameSize); }
static inline HRESULT                           IDWriteTextLayout2_SetMaxWidth                               (IDWriteTextLayout2* this, FLOAT maxWidth) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, FLOAT))this->v->tbl[28])(this, maxWidth); }
static inline HRESULT                           IDWriteTextLayout2_SetMaxHeight                              (IDWriteTextLayout2* this, FLOAT maxHeight) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, FLOAT))this->v->tbl[29])(this, maxHeight); }
static inline HRESULT                           IDWriteTextLayout2_SetFontCollection                         (IDWriteTextLayout2* this, IDWriteFontCollection* fontCollection, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, IDWriteFontCollection*, DWRITE_TEXT_RANGE))this->v->tbl[30])(this, fontCollection, textRange); }
static inline HRESULT                           IDWriteTextLayout2_SetFontFamilyName                         (IDWriteTextLayout2* this, const WCHAR* fontFamilyName, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, const WCHAR*, DWRITE_TEXT_RANGE))this->v->tbl[31])(this, fontFamilyName, textRange); }
static inline HRESULT                           IDWriteTextLayout2_SetFontWeight                             (IDWriteTextLayout2* this, DWRITE_FONT_WEIGHT fontWeight, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, DWRITE_FONT_WEIGHT, DWRITE_TEXT_RANGE))this->v->tbl[32])(this, fontWeight, textRange); }
static inline HRESULT                           IDWriteTextLayout2_SetFontStyle                              (IDWriteTextLayout2* this, DWRITE_FONT_STYLE fontStyle, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, DWRITE_FONT_STYLE, DWRITE_TEXT_RANGE))this->v->tbl[33])(this, fontStyle, textRange); }
static inline HRESULT                           IDWriteTextLayout2_SetFontStretch                            (IDWriteTextLayout2* this, DWRITE_FONT_STRETCH fontStretch, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, DWRITE_FONT_STRETCH, DWRITE_TEXT_RANGE))this->v->tbl[34])(this, fontStretch, textRange); }
static inline HRESULT                           IDWriteTextLayout2_SetFontSize                               (IDWriteTextLayout2* this, FLOAT fontSize, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, FLOAT, DWRITE_TEXT_RANGE))this->v->tbl[35])(this, fontSize, textRange); }
static inline HRESULT                           IDWriteTextLayout2_SetUnderline                              (IDWriteTextLayout2* this, BOOL hasUnderline, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, BOOL, DWRITE_TEXT_RANGE))this->v->tbl[36])(this, hasUnderline, textRange); }
static inline HRESULT                           IDWriteTextLayout2_SetStrikethrough                          (IDWriteTextLayout2* this, BOOL hasStrikethrough, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, BOOL, DWRITE_TEXT_RANGE))this->v->tbl[37])(this, hasStrikethrough, textRange); }
static inline HRESULT                           IDWriteTextLayout2_SetDrawingEffect                          (IDWriteTextLayout2* this, IUnknown* drawingEffect, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, IUnknown*, DWRITE_TEXT_RANGE))this->v->tbl[38])(this, drawingEffect, textRange); }
static inline HRESULT                           IDWriteTextLayout2_SetInlineObject                           (IDWriteTextLayout2* this, IDWriteInlineObject* inlineObject, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, IDWriteInlineObject*, DWRITE_TEXT_RANGE))this->v->tbl[39])(this, inlineObject, textRange); }
static inline HRESULT                           IDWriteTextLayout2_SetTypography                             (IDWriteTextLayout2* this, IDWriteTypography* typography, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, IDWriteTypography*, DWRITE_TEXT_RANGE))this->v->tbl[40])(this, typography, textRange); }
static inline HRESULT                           IDWriteTextLayout2_SetLocaleName                             (IDWriteTextLayout2* this, const WCHAR* localeName, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, const WCHAR*, DWRITE_TEXT_RANGE))this->v->tbl[41])(this, localeName, textRange); }
static inline FLOAT                             IDWriteTextLayout2_GetMaxWidth                               (IDWriteTextLayout2* this) { return ((FLOAT (WINAPI*)(IDWriteTextLayout2*))this->v->tbl[42])(this); }
static inline FLOAT                             IDWriteTextLayout2_GetMaxHeight                              (IDWriteTextLayout2* this) { return ((FLOAT (WINAPI*)(IDWriteTextLayout2*))this->v->tbl[43])(this); }
static inline HRESULT                           IDWriteTextLayout2_GetFontCollection1                        (IDWriteTextLayout2* this, UINT32 currentPosition, IDWriteFontCollection** fontCollection, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, UINT32, IDWriteFontCollection**, DWRITE_TEXT_RANGE*))this->v->tbl[44])(this, currentPosition, fontCollection, textRange); }
static inline HRESULT                           IDWriteTextLayout2_GetFontFamilyNameLength1                  (IDWriteTextLayout2* this, UINT32 currentPosition, UINT32* nameLength, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, UINT32, UINT32*, DWRITE_TEXT_RANGE*))this->v->tbl[45])(this, currentPosition, nameLength, textRange); }
static inline HRESULT                           IDWriteTextLayout2_GetFontFamilyName1                        (IDWriteTextLayout2* this, UINT32 currentPosition, WCHAR* fontFamilyName, UINT32 nameSize, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, UINT32, WCHAR*, UINT32, DWRITE_TEXT_RANGE*))this->v->tbl[46])(this, currentPosition, fontFamilyName, nameSize, textRange); }
static inline HRESULT                           IDWriteTextLayout2_GetFontWeight1                            (IDWriteTextLayout2* this, UINT32 currentPosition, DWRITE_FONT_WEIGHT* fontWeight, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, UINT32, DWRITE_FONT_WEIGHT*, DWRITE_TEXT_RANGE*))this->v->tbl[47])(this, currentPosition, fontWeight, textRange); }
static inline HRESULT                           IDWriteTextLayout2_GetFontStyle1                             (IDWriteTextLayout2* this, UINT32 currentPosition, DWRITE_FONT_STYLE* fontStyle, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, UINT32, DWRITE_FONT_STYLE*, DWRITE_TEXT_RANGE*))this->v->tbl[48])(this, currentPosition, fontStyle, textRange); }
static inline HRESULT                           IDWriteTextLayout2_GetFontStretch1                           (IDWriteTextLayout2* this, UINT32 currentPosition, DWRITE_FONT_STRETCH* fontStretch, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, UINT32, DWRITE_FONT_STRETCH*, DWRITE_TEXT_RANGE*))this->v->tbl[49])(this, currentPosition, fontStretch, textRange); }
static inline HRESULT                           IDWriteTextLayout2_GetFontSize1                              (IDWriteTextLayout2* this, UINT32 currentPosition, FLOAT* fontSize, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, UINT32, FLOAT*, DWRITE_TEXT_RANGE*))this->v->tbl[50])(this, currentPosition, fontSize, textRange); }
static inline HRESULT                           IDWriteTextLayout2_GetUnderline                              (IDWriteTextLayout2* this, UINT32 currentPosition, BOOL* hasUnderline, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, UINT32, BOOL*, DWRITE_TEXT_RANGE*))this->v->tbl[51])(this, currentPosition, hasUnderline, textRange); }
static inline HRESULT                           IDWriteTextLayout2_GetStrikethrough                          (IDWriteTextLayout2* this, UINT32 currentPosition, BOOL* hasStrikethrough, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, UINT32, BOOL*, DWRITE_TEXT_RANGE*))this->v->tbl[52])(this, currentPosition, hasStrikethrough, textRange); }
static inline HRESULT                           IDWriteTextLayout2_GetDrawingEffect                          (IDWriteTextLayout2* this, UINT32 currentPosition, IUnknown** drawingEffect, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, UINT32, IUnknown**, DWRITE_TEXT_RANGE*))this->v->tbl[53])(this, currentPosition, drawingEffect, textRange); }
static inline HRESULT                           IDWriteTextLayout2_GetInlineObject                           (IDWriteTextLayout2* this, UINT32 currentPosition, IDWriteInlineObject** inlineObject, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, UINT32, IDWriteInlineObject**, DWRITE_TEXT_RANGE*))this->v->tbl[54])(this, currentPosition, inlineObject, textRange); }
static inline HRESULT                           IDWriteTextLayout2_GetTypography                             (IDWriteTextLayout2* this, UINT32 currentPosition, IDWriteTypography** typography, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, UINT32, IDWriteTypography**, DWRITE_TEXT_RANGE*))this->v->tbl[55])(this, currentPosition, typography, textRange); }
static inline HRESULT                           IDWriteTextLayout2_GetLocaleNameLength1                      (IDWriteTextLayout2* this, UINT32 currentPosition, UINT32* nameLength, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, UINT32, UINT32*, DWRITE_TEXT_RANGE*))this->v->tbl[56])(this, currentPosition, nameLength, textRange); }
static inline HRESULT                           IDWriteTextLayout2_GetLocaleName1                            (IDWriteTextLayout2* this, UINT32 currentPosition, WCHAR* localeName, UINT32 nameSize, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, UINT32, WCHAR*, UINT32, DWRITE_TEXT_RANGE*))this->v->tbl[57])(this, currentPosition, localeName, nameSize, textRange); }
static inline HRESULT                           IDWriteTextLayout2_Draw                                      (IDWriteTextLayout2* this, void* clientDrawingContext, IDWriteTextRenderer* renderer, FLOAT originX, FLOAT originY) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, void*, IDWriteTextRenderer*, FLOAT, FLOAT))this->v->tbl[58])(this, clientDrawingContext, renderer, originX, originY); }
static inline HRESULT                           IDWriteTextLayout2_GetLineMetrics                            (IDWriteTextLayout2* this, DWRITE_LINE_METRICS* lineMetrics, UINT32 maxLineCount, UINT32* actualLineCount) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, DWRITE_LINE_METRICS*, UINT32, UINT32*))this->v->tbl[59])(this, lineMetrics, maxLineCount, actualLineCount); }
static inline HRESULT                           IDWriteTextLayout2_GetMetrics                                (IDWriteTextLayout2* this, DWRITE_TEXT_METRICS* textMetrics) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, DWRITE_TEXT_METRICS*))this->v->tbl[60])(this, textMetrics); }
static inline HRESULT                           IDWriteTextLayout2_GetOverhangMetrics                        (IDWriteTextLayout2* this, DWRITE_OVERHANG_METRICS* overhangs) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, DWRITE_OVERHANG_METRICS*))this->v->tbl[61])(this, overhangs); }
static inline HRESULT                           IDWriteTextLayout2_GetClusterMetrics                         (IDWriteTextLayout2* this, DWRITE_CLUSTER_METRICS* clusterMetrics, UINT32 maxClusterCount, UINT32* actualClusterCount) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, DWRITE_CLUSTER_METRICS*, UINT32, UINT32*))this->v->tbl[62])(this, clusterMetrics, maxClusterCount, actualClusterCount); }
static inline HRESULT                           IDWriteTextLayout2_DetermineMinWidth                         (IDWriteTextLayout2* this, FLOAT* minWidth) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, FLOAT*))this->v->tbl[63])(this, minWidth); }
static inline HRESULT                           IDWriteTextLayout2_HitTestPoint                              (IDWriteTextLayout2* this, FLOAT pointX, FLOAT pointY, BOOL* isTrailingHit, BOOL* isInside, DWRITE_HIT_TEST_METRICS* hitTestMetrics) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, FLOAT, FLOAT, BOOL*, BOOL*, DWRITE_HIT_TEST_METRICS*))this->v->tbl[64])(this, pointX, pointY, isTrailingHit, isInside, hitTestMetrics); }
static inline HRESULT                           IDWriteTextLayout2_HitTestTextPosition                       (IDWriteTextLayout2* this, UINT32 textPosition, BOOL isTrailingHit, FLOAT* pointX, FLOAT* pointY, DWRITE_HIT_TEST_METRICS* hitTestMetrics) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, UINT32, BOOL, FLOAT*, FLOAT*, DWRITE_HIT_TEST_METRICS*))this->v->tbl[65])(this, textPosition, isTrailingHit, pointX, pointY, hitTestMetrics); }
static inline HRESULT                           IDWriteTextLayout2_HitTestTextRange                          (IDWriteTextLayout2* this, UINT32 textPosition, UINT32 textLength, FLOAT originX, FLOAT originY, DWRITE_HIT_TEST_METRICS* hitTestMetrics, UINT32 maxHitTestMetricsCount, UINT32* actualHitTestMetricsCount) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, UINT32, UINT32, FLOAT, FLOAT, DWRITE_HIT_TEST_METRICS*, UINT32, UINT32*))this->v->tbl[66])(this, textPosition, textLength, originX, originY, hitTestMetrics, maxHitTestMetricsCount, actualHitTestMetricsCount); }
static inline HRESULT                           IDWriteTextLayout2_SetPairKerning                            (IDWriteTextLayout2* this, BOOL isPairKerningEnabled, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, BOOL, DWRITE_TEXT_RANGE))this->v->tbl[67])(this, isPairKerningEnabled, textRange); }
static inline HRESULT                           IDWriteTextLayout2_GetPairKerning                            (IDWriteTextLayout2* this, UINT32 currentPosition, BOOL* isPairKerningEnabled, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, UINT32, BOOL*, DWRITE_TEXT_RANGE*))this->v->tbl[68])(this, currentPosition, isPairKerningEnabled, textRange); }
static inline HRESULT                           IDWriteTextLayout2_SetCharacterSpacing                       (IDWriteTextLayout2* this, FLOAT leadingSpacing, FLOAT trailingSpacing, FLOAT minimumAdvanceWidth, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, FLOAT, FLOAT, FLOAT, DWRITE_TEXT_RANGE))this->v->tbl[69])(this, leadingSpacing, trailingSpacing, minimumAdvanceWidth, textRange); }
static inline HRESULT                           IDWriteTextLayout2_GetCharacterSpacing                       (IDWriteTextLayout2* this, UINT32 currentPosition, FLOAT* leadingSpacing, FLOAT* trailingSpacing, FLOAT* minimumAdvanceWidth, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, UINT32, FLOAT*, FLOAT*, FLOAT*, DWRITE_TEXT_RANGE*))this->v->tbl[70])(this, currentPosition, leadingSpacing, trailingSpacing, minimumAdvanceWidth, textRange); }
static inline HRESULT                           IDWriteTextLayout2_GetMetrics1                               (IDWriteTextLayout2* this, DWRITE_TEXT_METRICS1* textMetrics) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, DWRITE_TEXT_METRICS1*))this->v->tbl[71])(this, textMetrics); }
static inline HRESULT                           IDWriteTextLayout2_SetVerticalGlyphOrientation               (IDWriteTextLayout2* this, DWRITE_VERTICAL_GLYPH_ORIENTATION glyphOrientation) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, DWRITE_VERTICAL_GLYPH_ORIENTATION))this->v->tbl[72])(this, glyphOrientation); }
static inline DWRITE_VERTICAL_GLYPH_ORIENTATION IDWriteTextLayout2_GetVerticalGlyphOrientation               (IDWriteTextLayout2* this) { return ((DWRITE_VERTICAL_GLYPH_ORIENTATION (WINAPI*)(IDWriteTextLayout2*))this->v->tbl[73])(this); }
static inline HRESULT                           IDWriteTextLayout2_SetLastLineWrapping                       (IDWriteTextLayout2* this, BOOL isLastLineWrappingEnabled) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, BOOL))this->v->tbl[74])(this, isLastLineWrappingEnabled); }
static inline BOOL                              IDWriteTextLayout2_GetLastLineWrapping                       (IDWriteTextLayout2* this) { return ((BOOL (WINAPI*)(IDWriteTextLayout2*))this->v->tbl[75])(this); }
static inline HRESULT                           IDWriteTextLayout2_SetOpticalAlignment                       (IDWriteTextLayout2* this, DWRITE_OPTICAL_ALIGNMENT opticalAlignment) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, DWRITE_OPTICAL_ALIGNMENT))this->v->tbl[76])(this, opticalAlignment); }
static inline DWRITE_OPTICAL_ALIGNMENT          IDWriteTextLayout2_GetOpticalAlignment                       (IDWriteTextLayout2* this) { return ((DWRITE_OPTICAL_ALIGNMENT (WINAPI*)(IDWriteTextLayout2*))this->v->tbl[77])(this); }
static inline HRESULT                           IDWriteTextLayout2_SetFontFallback                           (IDWriteTextLayout2* this, IDWriteFontFallback* fontFallback) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, IDWriteFontFallback*))this->v->tbl[78])(this, fontFallback); }
static inline HRESULT                           IDWriteTextLayout2_GetFontFallback                           (IDWriteTextLayout2* this, IDWriteFontFallback** fontFallback) { return ((HRESULT (WINAPI*)(IDWriteTextLayout2*, IDWriteFontFallback**))this->v->tbl[79])(this, fontFallback); }

static inline HRESULT                           IDWriteTextLayout3_QueryInterface                            (IDWriteTextLayout3* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteTextLayout3_AddRef                                    (IDWriteTextLayout3* this) { return ((UINT32 (WINAPI*)(IDWriteTextLayout3*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteTextLayout3_Release                                   (IDWriteTextLayout3* this) { return ((UINT32 (WINAPI*)(IDWriteTextLayout3*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteTextLayout3_SetTextAlignment                          (IDWriteTextLayout3* this, DWRITE_TEXT_ALIGNMENT textAlignment) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, DWRITE_TEXT_ALIGNMENT))this->v->tbl[3])(this, textAlignment); }
static inline HRESULT                           IDWriteTextLayout3_SetParagraphAlignment                     (IDWriteTextLayout3* this, DWRITE_PARAGRAPH_ALIGNMENT paragraphAlignment) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, DWRITE_PARAGRAPH_ALIGNMENT))this->v->tbl[4])(this, paragraphAlignment); }
static inline HRESULT                           IDWriteTextLayout3_SetWordWrapping                           (IDWriteTextLayout3* this, DWRITE_WORD_WRAPPING wordWrapping) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, DWRITE_WORD_WRAPPING))this->v->tbl[5])(this, wordWrapping); }
static inline HRESULT                           IDWriteTextLayout3_SetReadingDirection                       (IDWriteTextLayout3* this, DWRITE_READING_DIRECTION readingDirection) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, DWRITE_READING_DIRECTION))this->v->tbl[6])(this, readingDirection); }
static inline HRESULT                           IDWriteTextLayout3_SetFlowDirection                          (IDWriteTextLayout3* this, DWRITE_FLOW_DIRECTION flowDirection) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, DWRITE_FLOW_DIRECTION))this->v->tbl[7])(this, flowDirection); }
static inline HRESULT                           IDWriteTextLayout3_SetIncrementalTabStop                     (IDWriteTextLayout3* this, FLOAT incrementalTabStop) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, FLOAT))this->v->tbl[8])(this, incrementalTabStop); }
static inline HRESULT                           IDWriteTextLayout3_SetTrimming                               (IDWriteTextLayout3* this, const DWRITE_TRIMMING* trimmingOptions, IDWriteInlineObject* trimmingSign) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, const DWRITE_TRIMMING*, IDWriteInlineObject*))this->v->tbl[9])(this, trimmingOptions, trimmingSign); }
static inline HRESULT                           IDWriteTextLayout3_SetLineSpacing                            (IDWriteTextLayout3* this, DWRITE_LINE_SPACING_METHOD lineSpacingMethod, FLOAT lineSpacing, FLOAT baseline) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, DWRITE_LINE_SPACING_METHOD, FLOAT, FLOAT))this->v->tbl[10])(this, lineSpacingMethod, lineSpacing, baseline); }
static inline DWRITE_TEXT_ALIGNMENT             IDWriteTextLayout3_GetTextAlignment                          (IDWriteTextLayout3* this) { return ((DWRITE_TEXT_ALIGNMENT (WINAPI*)(IDWriteTextLayout3*))this->v->tbl[11])(this); }
static inline DWRITE_PARAGRAPH_ALIGNMENT        IDWriteTextLayout3_GetParagraphAlignment                     (IDWriteTextLayout3* this) { return ((DWRITE_PARAGRAPH_ALIGNMENT (WINAPI*)(IDWriteTextLayout3*))this->v->tbl[12])(this); }
static inline DWRITE_WORD_WRAPPING              IDWriteTextLayout3_GetWordWrapping                           (IDWriteTextLayout3* this) { return ((DWRITE_WORD_WRAPPING (WINAPI*)(IDWriteTextLayout3*))this->v->tbl[13])(this); }
static inline DWRITE_READING_DIRECTION          IDWriteTextLayout3_GetReadingDirection                       (IDWriteTextLayout3* this) { return ((DWRITE_READING_DIRECTION (WINAPI*)(IDWriteTextLayout3*))this->v->tbl[14])(this); }
static inline DWRITE_FLOW_DIRECTION             IDWriteTextLayout3_GetFlowDirection                          (IDWriteTextLayout3* this) { return ((DWRITE_FLOW_DIRECTION (WINAPI*)(IDWriteTextLayout3*))this->v->tbl[15])(this); }
static inline FLOAT                             IDWriteTextLayout3_GetIncrementalTabStop                     (IDWriteTextLayout3* this) { return ((FLOAT (WINAPI*)(IDWriteTextLayout3*))this->v->tbl[16])(this); }
static inline HRESULT                           IDWriteTextLayout3_GetTrimming                               (IDWriteTextLayout3* this, DWRITE_TRIMMING* trimmingOptions, IDWriteInlineObject** trimmingSign) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, DWRITE_TRIMMING*, IDWriteInlineObject**))this->v->tbl[17])(this, trimmingOptions, trimmingSign); }
static inline HRESULT                           IDWriteTextLayout3_GetLineSpacing                            (IDWriteTextLayout3* this, DWRITE_LINE_SPACING_METHOD* lineSpacingMethod, FLOAT* lineSpacing, FLOAT* baseline) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, DWRITE_LINE_SPACING_METHOD*, FLOAT*, FLOAT*))this->v->tbl[18])(this, lineSpacingMethod, lineSpacing, baseline); }
static inline HRESULT                           IDWriteTextLayout3_GetFontCollection                         (IDWriteTextLayout3* this, IDWriteFontCollection** fontCollection) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, IDWriteFontCollection**))this->v->tbl[19])(this, fontCollection); }
static inline UINT32                            IDWriteTextLayout3_GetFontFamilyNameLength                   (IDWriteTextLayout3* this) { return ((UINT32 (WINAPI*)(IDWriteTextLayout3*))this->v->tbl[20])(this); }
static inline HRESULT                           IDWriteTextLayout3_GetFontFamilyName                         (IDWriteTextLayout3* this, WCHAR* fontFamilyName, UINT32 nameSize) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, WCHAR*, UINT32))this->v->tbl[21])(this, fontFamilyName, nameSize); }
static inline DWRITE_FONT_WEIGHT                IDWriteTextLayout3_GetFontWeight                             (IDWriteTextLayout3* this) { return ((DWRITE_FONT_WEIGHT (WINAPI*)(IDWriteTextLayout3*))this->v->tbl[22])(this); }
static inline DWRITE_FONT_STYLE                 IDWriteTextLayout3_GetFontStyle                              (IDWriteTextLayout3* this) { return ((DWRITE_FONT_STYLE (WINAPI*)(IDWriteTextLayout3*))this->v->tbl[23])(this); }
static inline DWRITE_FONT_STRETCH               IDWriteTextLayout3_GetFontStretch                            (IDWriteTextLayout3* this) { return ((DWRITE_FONT_STRETCH (WINAPI*)(IDWriteTextLayout3*))this->v->tbl[24])(this); }
static inline FLOAT                             IDWriteTextLayout3_GetFontSize                               (IDWriteTextLayout3* this) { return ((FLOAT (WINAPI*)(IDWriteTextLayout3*))this->v->tbl[25])(this); }
static inline UINT32                            IDWriteTextLayout3_GetLocaleNameLength                       (IDWriteTextLayout3* this) { return ((UINT32 (WINAPI*)(IDWriteTextLayout3*))this->v->tbl[26])(this); }
static inline HRESULT                           IDWriteTextLayout3_GetLocaleName                             (IDWriteTextLayout3* this, WCHAR* localeName, UINT32 nameSize) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, WCHAR*, UINT32))this->v->tbl[27])(this, localeName, nameSize); }
static inline HRESULT                           IDWriteTextLayout3_SetMaxWidth                               (IDWriteTextLayout3* this, FLOAT maxWidth) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, FLOAT))this->v->tbl[28])(this, maxWidth); }
static inline HRESULT                           IDWriteTextLayout3_SetMaxHeight                              (IDWriteTextLayout3* this, FLOAT maxHeight) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, FLOAT))this->v->tbl[29])(this, maxHeight); }
static inline HRESULT                           IDWriteTextLayout3_SetFontCollection                         (IDWriteTextLayout3* this, IDWriteFontCollection* fontCollection, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, IDWriteFontCollection*, DWRITE_TEXT_RANGE))this->v->tbl[30])(this, fontCollection, textRange); }
static inline HRESULT                           IDWriteTextLayout3_SetFontFamilyName                         (IDWriteTextLayout3* this, const WCHAR* fontFamilyName, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, const WCHAR*, DWRITE_TEXT_RANGE))this->v->tbl[31])(this, fontFamilyName, textRange); }
static inline HRESULT                           IDWriteTextLayout3_SetFontWeight                             (IDWriteTextLayout3* this, DWRITE_FONT_WEIGHT fontWeight, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, DWRITE_FONT_WEIGHT, DWRITE_TEXT_RANGE))this->v->tbl[32])(this, fontWeight, textRange); }
static inline HRESULT                           IDWriteTextLayout3_SetFontStyle                              (IDWriteTextLayout3* this, DWRITE_FONT_STYLE fontStyle, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, DWRITE_FONT_STYLE, DWRITE_TEXT_RANGE))this->v->tbl[33])(this, fontStyle, textRange); }
static inline HRESULT                           IDWriteTextLayout3_SetFontStretch                            (IDWriteTextLayout3* this, DWRITE_FONT_STRETCH fontStretch, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, DWRITE_FONT_STRETCH, DWRITE_TEXT_RANGE))this->v->tbl[34])(this, fontStretch, textRange); }
static inline HRESULT                           IDWriteTextLayout3_SetFontSize                               (IDWriteTextLayout3* this, FLOAT fontSize, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, FLOAT, DWRITE_TEXT_RANGE))this->v->tbl[35])(this, fontSize, textRange); }
static inline HRESULT                           IDWriteTextLayout3_SetUnderline                              (IDWriteTextLayout3* this, BOOL hasUnderline, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, BOOL, DWRITE_TEXT_RANGE))this->v->tbl[36])(this, hasUnderline, textRange); }
static inline HRESULT                           IDWriteTextLayout3_SetStrikethrough                          (IDWriteTextLayout3* this, BOOL hasStrikethrough, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, BOOL, DWRITE_TEXT_RANGE))this->v->tbl[37])(this, hasStrikethrough, textRange); }
static inline HRESULT                           IDWriteTextLayout3_SetDrawingEffect                          (IDWriteTextLayout3* this, IUnknown* drawingEffect, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, IUnknown*, DWRITE_TEXT_RANGE))this->v->tbl[38])(this, drawingEffect, textRange); }
static inline HRESULT                           IDWriteTextLayout3_SetInlineObject                           (IDWriteTextLayout3* this, IDWriteInlineObject* inlineObject, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, IDWriteInlineObject*, DWRITE_TEXT_RANGE))this->v->tbl[39])(this, inlineObject, textRange); }
static inline HRESULT                           IDWriteTextLayout3_SetTypography                             (IDWriteTextLayout3* this, IDWriteTypography* typography, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, IDWriteTypography*, DWRITE_TEXT_RANGE))this->v->tbl[40])(this, typography, textRange); }
static inline HRESULT                           IDWriteTextLayout3_SetLocaleName                             (IDWriteTextLayout3* this, const WCHAR* localeName, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, const WCHAR*, DWRITE_TEXT_RANGE))this->v->tbl[41])(this, localeName, textRange); }
static inline FLOAT                             IDWriteTextLayout3_GetMaxWidth                               (IDWriteTextLayout3* this) { return ((FLOAT (WINAPI*)(IDWriteTextLayout3*))this->v->tbl[42])(this); }
static inline FLOAT                             IDWriteTextLayout3_GetMaxHeight                              (IDWriteTextLayout3* this) { return ((FLOAT (WINAPI*)(IDWriteTextLayout3*))this->v->tbl[43])(this); }
static inline HRESULT                           IDWriteTextLayout3_GetFontCollection1                        (IDWriteTextLayout3* this, UINT32 currentPosition, IDWriteFontCollection** fontCollection, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, UINT32, IDWriteFontCollection**, DWRITE_TEXT_RANGE*))this->v->tbl[44])(this, currentPosition, fontCollection, textRange); }
static inline HRESULT                           IDWriteTextLayout3_GetFontFamilyNameLength1                  (IDWriteTextLayout3* this, UINT32 currentPosition, UINT32* nameLength, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, UINT32, UINT32*, DWRITE_TEXT_RANGE*))this->v->tbl[45])(this, currentPosition, nameLength, textRange); }
static inline HRESULT                           IDWriteTextLayout3_GetFontFamilyName1                        (IDWriteTextLayout3* this, UINT32 currentPosition, WCHAR* fontFamilyName, UINT32 nameSize, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, UINT32, WCHAR*, UINT32, DWRITE_TEXT_RANGE*))this->v->tbl[46])(this, currentPosition, fontFamilyName, nameSize, textRange); }
static inline HRESULT                           IDWriteTextLayout3_GetFontWeight1                            (IDWriteTextLayout3* this, UINT32 currentPosition, DWRITE_FONT_WEIGHT* fontWeight, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, UINT32, DWRITE_FONT_WEIGHT*, DWRITE_TEXT_RANGE*))this->v->tbl[47])(this, currentPosition, fontWeight, textRange); }
static inline HRESULT                           IDWriteTextLayout3_GetFontStyle1                             (IDWriteTextLayout3* this, UINT32 currentPosition, DWRITE_FONT_STYLE* fontStyle, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, UINT32, DWRITE_FONT_STYLE*, DWRITE_TEXT_RANGE*))this->v->tbl[48])(this, currentPosition, fontStyle, textRange); }
static inline HRESULT                           IDWriteTextLayout3_GetFontStretch1                           (IDWriteTextLayout3* this, UINT32 currentPosition, DWRITE_FONT_STRETCH* fontStretch, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, UINT32, DWRITE_FONT_STRETCH*, DWRITE_TEXT_RANGE*))this->v->tbl[49])(this, currentPosition, fontStretch, textRange); }
static inline HRESULT                           IDWriteTextLayout3_GetFontSize1                              (IDWriteTextLayout3* this, UINT32 currentPosition, FLOAT* fontSize, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, UINT32, FLOAT*, DWRITE_TEXT_RANGE*))this->v->tbl[50])(this, currentPosition, fontSize, textRange); }
static inline HRESULT                           IDWriteTextLayout3_GetUnderline                              (IDWriteTextLayout3* this, UINT32 currentPosition, BOOL* hasUnderline, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, UINT32, BOOL*, DWRITE_TEXT_RANGE*))this->v->tbl[51])(this, currentPosition, hasUnderline, textRange); }
static inline HRESULT                           IDWriteTextLayout3_GetStrikethrough                          (IDWriteTextLayout3* this, UINT32 currentPosition, BOOL* hasStrikethrough, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, UINT32, BOOL*, DWRITE_TEXT_RANGE*))this->v->tbl[52])(this, currentPosition, hasStrikethrough, textRange); }
static inline HRESULT                           IDWriteTextLayout3_GetDrawingEffect                          (IDWriteTextLayout3* this, UINT32 currentPosition, IUnknown** drawingEffect, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, UINT32, IUnknown**, DWRITE_TEXT_RANGE*))this->v->tbl[53])(this, currentPosition, drawingEffect, textRange); }
static inline HRESULT                           IDWriteTextLayout3_GetInlineObject                           (IDWriteTextLayout3* this, UINT32 currentPosition, IDWriteInlineObject** inlineObject, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, UINT32, IDWriteInlineObject**, DWRITE_TEXT_RANGE*))this->v->tbl[54])(this, currentPosition, inlineObject, textRange); }
static inline HRESULT                           IDWriteTextLayout3_GetTypography                             (IDWriteTextLayout3* this, UINT32 currentPosition, IDWriteTypography** typography, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, UINT32, IDWriteTypography**, DWRITE_TEXT_RANGE*))this->v->tbl[55])(this, currentPosition, typography, textRange); }
static inline HRESULT                           IDWriteTextLayout3_GetLocaleNameLength1                      (IDWriteTextLayout3* this, UINT32 currentPosition, UINT32* nameLength, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, UINT32, UINT32*, DWRITE_TEXT_RANGE*))this->v->tbl[56])(this, currentPosition, nameLength, textRange); }
static inline HRESULT                           IDWriteTextLayout3_GetLocaleName1                            (IDWriteTextLayout3* this, UINT32 currentPosition, WCHAR* localeName, UINT32 nameSize, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, UINT32, WCHAR*, UINT32, DWRITE_TEXT_RANGE*))this->v->tbl[57])(this, currentPosition, localeName, nameSize, textRange); }
static inline HRESULT                           IDWriteTextLayout3_Draw                                      (IDWriteTextLayout3* this, void* clientDrawingContext, IDWriteTextRenderer* renderer, FLOAT originX, FLOAT originY) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, void*, IDWriteTextRenderer*, FLOAT, FLOAT))this->v->tbl[58])(this, clientDrawingContext, renderer, originX, originY); }
static inline HRESULT                           IDWriteTextLayout3_GetLineMetrics                            (IDWriteTextLayout3* this, DWRITE_LINE_METRICS* lineMetrics, UINT32 maxLineCount, UINT32* actualLineCount) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, DWRITE_LINE_METRICS*, UINT32, UINT32*))this->v->tbl[59])(this, lineMetrics, maxLineCount, actualLineCount); }
static inline HRESULT                           IDWriteTextLayout3_GetMetrics                                (IDWriteTextLayout3* this, DWRITE_TEXT_METRICS* textMetrics) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, DWRITE_TEXT_METRICS*))this->v->tbl[60])(this, textMetrics); }
static inline HRESULT                           IDWriteTextLayout3_GetOverhangMetrics                        (IDWriteTextLayout3* this, DWRITE_OVERHANG_METRICS* overhangs) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, DWRITE_OVERHANG_METRICS*))this->v->tbl[61])(this, overhangs); }
static inline HRESULT                           IDWriteTextLayout3_GetClusterMetrics                         (IDWriteTextLayout3* this, DWRITE_CLUSTER_METRICS* clusterMetrics, UINT32 maxClusterCount, UINT32* actualClusterCount) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, DWRITE_CLUSTER_METRICS*, UINT32, UINT32*))this->v->tbl[62])(this, clusterMetrics, maxClusterCount, actualClusterCount); }
static inline HRESULT                           IDWriteTextLayout3_DetermineMinWidth                         (IDWriteTextLayout3* this, FLOAT* minWidth) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, FLOAT*))this->v->tbl[63])(this, minWidth); }
static inline HRESULT                           IDWriteTextLayout3_HitTestPoint                              (IDWriteTextLayout3* this, FLOAT pointX, FLOAT pointY, BOOL* isTrailingHit, BOOL* isInside, DWRITE_HIT_TEST_METRICS* hitTestMetrics) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, FLOAT, FLOAT, BOOL*, BOOL*, DWRITE_HIT_TEST_METRICS*))this->v->tbl[64])(this, pointX, pointY, isTrailingHit, isInside, hitTestMetrics); }
static inline HRESULT                           IDWriteTextLayout3_HitTestTextPosition                       (IDWriteTextLayout3* this, UINT32 textPosition, BOOL isTrailingHit, FLOAT* pointX, FLOAT* pointY, DWRITE_HIT_TEST_METRICS* hitTestMetrics) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, UINT32, BOOL, FLOAT*, FLOAT*, DWRITE_HIT_TEST_METRICS*))this->v->tbl[65])(this, textPosition, isTrailingHit, pointX, pointY, hitTestMetrics); }
static inline HRESULT                           IDWriteTextLayout3_HitTestTextRange                          (IDWriteTextLayout3* this, UINT32 textPosition, UINT32 textLength, FLOAT originX, FLOAT originY, DWRITE_HIT_TEST_METRICS* hitTestMetrics, UINT32 maxHitTestMetricsCount, UINT32* actualHitTestMetricsCount) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, UINT32, UINT32, FLOAT, FLOAT, DWRITE_HIT_TEST_METRICS*, UINT32, UINT32*))this->v->tbl[66])(this, textPosition, textLength, originX, originY, hitTestMetrics, maxHitTestMetricsCount, actualHitTestMetricsCount); }
static inline HRESULT                           IDWriteTextLayout3_SetPairKerning                            (IDWriteTextLayout3* this, BOOL isPairKerningEnabled, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, BOOL, DWRITE_TEXT_RANGE))this->v->tbl[67])(this, isPairKerningEnabled, textRange); }
static inline HRESULT                           IDWriteTextLayout3_GetPairKerning                            (IDWriteTextLayout3* this, UINT32 currentPosition, BOOL* isPairKerningEnabled, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, UINT32, BOOL*, DWRITE_TEXT_RANGE*))this->v->tbl[68])(this, currentPosition, isPairKerningEnabled, textRange); }
static inline HRESULT                           IDWriteTextLayout3_SetCharacterSpacing                       (IDWriteTextLayout3* this, FLOAT leadingSpacing, FLOAT trailingSpacing, FLOAT minimumAdvanceWidth, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, FLOAT, FLOAT, FLOAT, DWRITE_TEXT_RANGE))this->v->tbl[69])(this, leadingSpacing, trailingSpacing, minimumAdvanceWidth, textRange); }
static inline HRESULT                           IDWriteTextLayout3_GetCharacterSpacing                       (IDWriteTextLayout3* this, UINT32 currentPosition, FLOAT* leadingSpacing, FLOAT* trailingSpacing, FLOAT* minimumAdvanceWidth, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, UINT32, FLOAT*, FLOAT*, FLOAT*, DWRITE_TEXT_RANGE*))this->v->tbl[70])(this, currentPosition, leadingSpacing, trailingSpacing, minimumAdvanceWidth, textRange); }
static inline HRESULT                           IDWriteTextLayout3_GetMetrics1                               (IDWriteTextLayout3* this, DWRITE_TEXT_METRICS1* textMetrics) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, DWRITE_TEXT_METRICS1*))this->v->tbl[71])(this, textMetrics); }
static inline HRESULT                           IDWriteTextLayout3_SetVerticalGlyphOrientation               (IDWriteTextLayout3* this, DWRITE_VERTICAL_GLYPH_ORIENTATION glyphOrientation) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, DWRITE_VERTICAL_GLYPH_ORIENTATION))this->v->tbl[72])(this, glyphOrientation); }
static inline DWRITE_VERTICAL_GLYPH_ORIENTATION IDWriteTextLayout3_GetVerticalGlyphOrientation               (IDWriteTextLayout3* this) { return ((DWRITE_VERTICAL_GLYPH_ORIENTATION (WINAPI*)(IDWriteTextLayout3*))this->v->tbl[73])(this); }
static inline HRESULT                           IDWriteTextLayout3_SetLastLineWrapping                       (IDWriteTextLayout3* this, BOOL isLastLineWrappingEnabled) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, BOOL))this->v->tbl[74])(this, isLastLineWrappingEnabled); }
static inline BOOL                              IDWriteTextLayout3_GetLastLineWrapping                       (IDWriteTextLayout3* this) { return ((BOOL (WINAPI*)(IDWriteTextLayout3*))this->v->tbl[75])(this); }
static inline HRESULT                           IDWriteTextLayout3_SetOpticalAlignment                       (IDWriteTextLayout3* this, DWRITE_OPTICAL_ALIGNMENT opticalAlignment) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, DWRITE_OPTICAL_ALIGNMENT))this->v->tbl[76])(this, opticalAlignment); }
static inline DWRITE_OPTICAL_ALIGNMENT          IDWriteTextLayout3_GetOpticalAlignment                       (IDWriteTextLayout3* this) { return ((DWRITE_OPTICAL_ALIGNMENT (WINAPI*)(IDWriteTextLayout3*))this->v->tbl[77])(this); }
static inline HRESULT                           IDWriteTextLayout3_SetFontFallback                           (IDWriteTextLayout3* this, IDWriteFontFallback* fontFallback) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, IDWriteFontFallback*))this->v->tbl[78])(this, fontFallback); }
static inline HRESULT                           IDWriteTextLayout3_GetFontFallback                           (IDWriteTextLayout3* this, IDWriteFontFallback** fontFallback) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, IDWriteFontFallback**))this->v->tbl[79])(this, fontFallback); }
static inline HRESULT                           IDWriteTextLayout3_InvalidateLayout                          (IDWriteTextLayout3* this) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*))this->v->tbl[80])(this); }
static inline HRESULT                           IDWriteTextLayout3_SetLineSpacing1                           (IDWriteTextLayout3* this, const DWRITE_LINE_SPACING* lineSpacingOptions) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, const DWRITE_LINE_SPACING*))this->v->tbl[81])(this, lineSpacingOptions); }
static inline HRESULT                           IDWriteTextLayout3_GetLineSpacing1                           (IDWriteTextLayout3* this, DWRITE_LINE_SPACING* lineSpacingOptions) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, DWRITE_LINE_SPACING*))this->v->tbl[82])(this, lineSpacingOptions); }
static inline HRESULT                           IDWriteTextLayout3_GetLineMetrics1                           (IDWriteTextLayout3* this, DWRITE_LINE_METRICS1* lineMetrics, UINT32 maxLineCount, UINT32* actualLineCount) { return ((HRESULT (WINAPI*)(IDWriteTextLayout3*, DWRITE_LINE_METRICS1*, UINT32, UINT32*))this->v->tbl[83])(this, lineMetrics, maxLineCount, actualLineCount); }

static inline HRESULT                           IDWriteTextLayout4_QueryInterface                            (IDWriteTextLayout4* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteTextLayout4_AddRef                                    (IDWriteTextLayout4* this) { return ((UINT32 (WINAPI*)(IDWriteTextLayout4*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteTextLayout4_Release                                   (IDWriteTextLayout4* this) { return ((UINT32 (WINAPI*)(IDWriteTextLayout4*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteTextLayout4_SetTextAlignment                          (IDWriteTextLayout4* this, DWRITE_TEXT_ALIGNMENT textAlignment) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, DWRITE_TEXT_ALIGNMENT))this->v->tbl[3])(this, textAlignment); }
static inline HRESULT                           IDWriteTextLayout4_SetParagraphAlignment                     (IDWriteTextLayout4* this, DWRITE_PARAGRAPH_ALIGNMENT paragraphAlignment) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, DWRITE_PARAGRAPH_ALIGNMENT))this->v->tbl[4])(this, paragraphAlignment); }
static inline HRESULT                           IDWriteTextLayout4_SetWordWrapping                           (IDWriteTextLayout4* this, DWRITE_WORD_WRAPPING wordWrapping) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, DWRITE_WORD_WRAPPING))this->v->tbl[5])(this, wordWrapping); }
static inline HRESULT                           IDWriteTextLayout4_SetReadingDirection                       (IDWriteTextLayout4* this, DWRITE_READING_DIRECTION readingDirection) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, DWRITE_READING_DIRECTION))this->v->tbl[6])(this, readingDirection); }
static inline HRESULT                           IDWriteTextLayout4_SetFlowDirection                          (IDWriteTextLayout4* this, DWRITE_FLOW_DIRECTION flowDirection) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, DWRITE_FLOW_DIRECTION))this->v->tbl[7])(this, flowDirection); }
static inline HRESULT                           IDWriteTextLayout4_SetIncrementalTabStop                     (IDWriteTextLayout4* this, FLOAT incrementalTabStop) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, FLOAT))this->v->tbl[8])(this, incrementalTabStop); }
static inline HRESULT                           IDWriteTextLayout4_SetTrimming                               (IDWriteTextLayout4* this, const DWRITE_TRIMMING* trimmingOptions, IDWriteInlineObject* trimmingSign) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, const DWRITE_TRIMMING*, IDWriteInlineObject*))this->v->tbl[9])(this, trimmingOptions, trimmingSign); }
static inline HRESULT                           IDWriteTextLayout4_SetLineSpacing                            (IDWriteTextLayout4* this, DWRITE_LINE_SPACING_METHOD lineSpacingMethod, FLOAT lineSpacing, FLOAT baseline) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, DWRITE_LINE_SPACING_METHOD, FLOAT, FLOAT))this->v->tbl[10])(this, lineSpacingMethod, lineSpacing, baseline); }
static inline DWRITE_TEXT_ALIGNMENT             IDWriteTextLayout4_GetTextAlignment                          (IDWriteTextLayout4* this) { return ((DWRITE_TEXT_ALIGNMENT (WINAPI*)(IDWriteTextLayout4*))this->v->tbl[11])(this); }
static inline DWRITE_PARAGRAPH_ALIGNMENT        IDWriteTextLayout4_GetParagraphAlignment                     (IDWriteTextLayout4* this) { return ((DWRITE_PARAGRAPH_ALIGNMENT (WINAPI*)(IDWriteTextLayout4*))this->v->tbl[12])(this); }
static inline DWRITE_WORD_WRAPPING              IDWriteTextLayout4_GetWordWrapping                           (IDWriteTextLayout4* this) { return ((DWRITE_WORD_WRAPPING (WINAPI*)(IDWriteTextLayout4*))this->v->tbl[13])(this); }
static inline DWRITE_READING_DIRECTION          IDWriteTextLayout4_GetReadingDirection                       (IDWriteTextLayout4* this) { return ((DWRITE_READING_DIRECTION (WINAPI*)(IDWriteTextLayout4*))this->v->tbl[14])(this); }
static inline DWRITE_FLOW_DIRECTION             IDWriteTextLayout4_GetFlowDirection                          (IDWriteTextLayout4* this) { return ((DWRITE_FLOW_DIRECTION (WINAPI*)(IDWriteTextLayout4*))this->v->tbl[15])(this); }
static inline FLOAT                             IDWriteTextLayout4_GetIncrementalTabStop                     (IDWriteTextLayout4* this) { return ((FLOAT (WINAPI*)(IDWriteTextLayout4*))this->v->tbl[16])(this); }
static inline HRESULT                           IDWriteTextLayout4_GetTrimming                               (IDWriteTextLayout4* this, DWRITE_TRIMMING* trimmingOptions, IDWriteInlineObject** trimmingSign) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, DWRITE_TRIMMING*, IDWriteInlineObject**))this->v->tbl[17])(this, trimmingOptions, trimmingSign); }
static inline HRESULT                           IDWriteTextLayout4_GetLineSpacing                            (IDWriteTextLayout4* this, DWRITE_LINE_SPACING_METHOD* lineSpacingMethod, FLOAT* lineSpacing, FLOAT* baseline) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, DWRITE_LINE_SPACING_METHOD*, FLOAT*, FLOAT*))this->v->tbl[18])(this, lineSpacingMethod, lineSpacing, baseline); }
static inline HRESULT                           IDWriteTextLayout4_GetFontCollection                         (IDWriteTextLayout4* this, IDWriteFontCollection** fontCollection) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, IDWriteFontCollection**))this->v->tbl[19])(this, fontCollection); }
static inline UINT32                            IDWriteTextLayout4_GetFontFamilyNameLength                   (IDWriteTextLayout4* this) { return ((UINT32 (WINAPI*)(IDWriteTextLayout4*))this->v->tbl[20])(this); }
static inline HRESULT                           IDWriteTextLayout4_GetFontFamilyName                         (IDWriteTextLayout4* this, WCHAR* fontFamilyName, UINT32 nameSize) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, WCHAR*, UINT32))this->v->tbl[21])(this, fontFamilyName, nameSize); }
static inline DWRITE_FONT_WEIGHT                IDWriteTextLayout4_GetFontWeight                             (IDWriteTextLayout4* this) { return ((DWRITE_FONT_WEIGHT (WINAPI*)(IDWriteTextLayout4*))this->v->tbl[22])(this); }
static inline DWRITE_FONT_STYLE                 IDWriteTextLayout4_GetFontStyle                              (IDWriteTextLayout4* this) { return ((DWRITE_FONT_STYLE (WINAPI*)(IDWriteTextLayout4*))this->v->tbl[23])(this); }
static inline DWRITE_FONT_STRETCH               IDWriteTextLayout4_GetFontStretch                            (IDWriteTextLayout4* this) { return ((DWRITE_FONT_STRETCH (WINAPI*)(IDWriteTextLayout4*))this->v->tbl[24])(this); }
static inline FLOAT                             IDWriteTextLayout4_GetFontSize                               (IDWriteTextLayout4* this) { return ((FLOAT (WINAPI*)(IDWriteTextLayout4*))this->v->tbl[25])(this); }
static inline UINT32                            IDWriteTextLayout4_GetLocaleNameLength                       (IDWriteTextLayout4* this) { return ((UINT32 (WINAPI*)(IDWriteTextLayout4*))this->v->tbl[26])(this); }
static inline HRESULT                           IDWriteTextLayout4_GetLocaleName                             (IDWriteTextLayout4* this, WCHAR* localeName, UINT32 nameSize) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, WCHAR*, UINT32))this->v->tbl[27])(this, localeName, nameSize); }
static inline HRESULT                           IDWriteTextLayout4_SetMaxWidth                               (IDWriteTextLayout4* this, FLOAT maxWidth) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, FLOAT))this->v->tbl[28])(this, maxWidth); }
static inline HRESULT                           IDWriteTextLayout4_SetMaxHeight                              (IDWriteTextLayout4* this, FLOAT maxHeight) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, FLOAT))this->v->tbl[29])(this, maxHeight); }
static inline HRESULT                           IDWriteTextLayout4_SetFontCollection                         (IDWriteTextLayout4* this, IDWriteFontCollection* fontCollection, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, IDWriteFontCollection*, DWRITE_TEXT_RANGE))this->v->tbl[30])(this, fontCollection, textRange); }
static inline HRESULT                           IDWriteTextLayout4_SetFontFamilyName                         (IDWriteTextLayout4* this, const WCHAR* fontFamilyName, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, const WCHAR*, DWRITE_TEXT_RANGE))this->v->tbl[31])(this, fontFamilyName, textRange); }
static inline HRESULT                           IDWriteTextLayout4_SetFontWeight                             (IDWriteTextLayout4* this, DWRITE_FONT_WEIGHT fontWeight, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, DWRITE_FONT_WEIGHT, DWRITE_TEXT_RANGE))this->v->tbl[32])(this, fontWeight, textRange); }
static inline HRESULT                           IDWriteTextLayout4_SetFontStyle                              (IDWriteTextLayout4* this, DWRITE_FONT_STYLE fontStyle, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, DWRITE_FONT_STYLE, DWRITE_TEXT_RANGE))this->v->tbl[33])(this, fontStyle, textRange); }
static inline HRESULT                           IDWriteTextLayout4_SetFontStretch                            (IDWriteTextLayout4* this, DWRITE_FONT_STRETCH fontStretch, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, DWRITE_FONT_STRETCH, DWRITE_TEXT_RANGE))this->v->tbl[34])(this, fontStretch, textRange); }
static inline HRESULT                           IDWriteTextLayout4_SetFontSize                               (IDWriteTextLayout4* this, FLOAT fontSize, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, FLOAT, DWRITE_TEXT_RANGE))this->v->tbl[35])(this, fontSize, textRange); }
static inline HRESULT                           IDWriteTextLayout4_SetUnderline                              (IDWriteTextLayout4* this, BOOL hasUnderline, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, BOOL, DWRITE_TEXT_RANGE))this->v->tbl[36])(this, hasUnderline, textRange); }
static inline HRESULT                           IDWriteTextLayout4_SetStrikethrough                          (IDWriteTextLayout4* this, BOOL hasStrikethrough, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, BOOL, DWRITE_TEXT_RANGE))this->v->tbl[37])(this, hasStrikethrough, textRange); }
static inline HRESULT                           IDWriteTextLayout4_SetDrawingEffect                          (IDWriteTextLayout4* this, IUnknown* drawingEffect, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, IUnknown*, DWRITE_TEXT_RANGE))this->v->tbl[38])(this, drawingEffect, textRange); }
static inline HRESULT                           IDWriteTextLayout4_SetInlineObject                           (IDWriteTextLayout4* this, IDWriteInlineObject* inlineObject, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, IDWriteInlineObject*, DWRITE_TEXT_RANGE))this->v->tbl[39])(this, inlineObject, textRange); }
static inline HRESULT                           IDWriteTextLayout4_SetTypography                             (IDWriteTextLayout4* this, IDWriteTypography* typography, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, IDWriteTypography*, DWRITE_TEXT_RANGE))this->v->tbl[40])(this, typography, textRange); }
static inline HRESULT                           IDWriteTextLayout4_SetLocaleName                             (IDWriteTextLayout4* this, const WCHAR* localeName, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, const WCHAR*, DWRITE_TEXT_RANGE))this->v->tbl[41])(this, localeName, textRange); }
static inline FLOAT                             IDWriteTextLayout4_GetMaxWidth                               (IDWriteTextLayout4* this) { return ((FLOAT (WINAPI*)(IDWriteTextLayout4*))this->v->tbl[42])(this); }
static inline FLOAT                             IDWriteTextLayout4_GetMaxHeight                              (IDWriteTextLayout4* this) { return ((FLOAT (WINAPI*)(IDWriteTextLayout4*))this->v->tbl[43])(this); }
static inline HRESULT                           IDWriteTextLayout4_GetFontCollection1                        (IDWriteTextLayout4* this, UINT32 currentPosition, IDWriteFontCollection** fontCollection, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, UINT32, IDWriteFontCollection**, DWRITE_TEXT_RANGE*))this->v->tbl[44])(this, currentPosition, fontCollection, textRange); }
static inline HRESULT                           IDWriteTextLayout4_GetFontFamilyNameLength1                  (IDWriteTextLayout4* this, UINT32 currentPosition, UINT32* nameLength, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, UINT32, UINT32*, DWRITE_TEXT_RANGE*))this->v->tbl[45])(this, currentPosition, nameLength, textRange); }
static inline HRESULT                           IDWriteTextLayout4_GetFontFamilyName1                        (IDWriteTextLayout4* this, UINT32 currentPosition, WCHAR* fontFamilyName, UINT32 nameSize, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, UINT32, WCHAR*, UINT32, DWRITE_TEXT_RANGE*))this->v->tbl[46])(this, currentPosition, fontFamilyName, nameSize, textRange); }
static inline HRESULT                           IDWriteTextLayout4_GetFontWeight1                            (IDWriteTextLayout4* this, UINT32 currentPosition, DWRITE_FONT_WEIGHT* fontWeight, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, UINT32, DWRITE_FONT_WEIGHT*, DWRITE_TEXT_RANGE*))this->v->tbl[47])(this, currentPosition, fontWeight, textRange); }
static inline HRESULT                           IDWriteTextLayout4_GetFontStyle1                             (IDWriteTextLayout4* this, UINT32 currentPosition, DWRITE_FONT_STYLE* fontStyle, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, UINT32, DWRITE_FONT_STYLE*, DWRITE_TEXT_RANGE*))this->v->tbl[48])(this, currentPosition, fontStyle, textRange); }
static inline HRESULT                           IDWriteTextLayout4_GetFontStretch1                           (IDWriteTextLayout4* this, UINT32 currentPosition, DWRITE_FONT_STRETCH* fontStretch, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, UINT32, DWRITE_FONT_STRETCH*, DWRITE_TEXT_RANGE*))this->v->tbl[49])(this, currentPosition, fontStretch, textRange); }
static inline HRESULT                           IDWriteTextLayout4_GetFontSize1                              (IDWriteTextLayout4* this, UINT32 currentPosition, FLOAT* fontSize, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, UINT32, FLOAT*, DWRITE_TEXT_RANGE*))this->v->tbl[50])(this, currentPosition, fontSize, textRange); }
static inline HRESULT                           IDWriteTextLayout4_GetUnderline                              (IDWriteTextLayout4* this, UINT32 currentPosition, BOOL* hasUnderline, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, UINT32, BOOL*, DWRITE_TEXT_RANGE*))this->v->tbl[51])(this, currentPosition, hasUnderline, textRange); }
static inline HRESULT                           IDWriteTextLayout4_GetStrikethrough                          (IDWriteTextLayout4* this, UINT32 currentPosition, BOOL* hasStrikethrough, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, UINT32, BOOL*, DWRITE_TEXT_RANGE*))this->v->tbl[52])(this, currentPosition, hasStrikethrough, textRange); }
static inline HRESULT                           IDWriteTextLayout4_GetDrawingEffect                          (IDWriteTextLayout4* this, UINT32 currentPosition, IUnknown** drawingEffect, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, UINT32, IUnknown**, DWRITE_TEXT_RANGE*))this->v->tbl[53])(this, currentPosition, drawingEffect, textRange); }
static inline HRESULT                           IDWriteTextLayout4_GetInlineObject                           (IDWriteTextLayout4* this, UINT32 currentPosition, IDWriteInlineObject** inlineObject, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, UINT32, IDWriteInlineObject**, DWRITE_TEXT_RANGE*))this->v->tbl[54])(this, currentPosition, inlineObject, textRange); }
static inline HRESULT                           IDWriteTextLayout4_GetTypography                             (IDWriteTextLayout4* this, UINT32 currentPosition, IDWriteTypography** typography, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, UINT32, IDWriteTypography**, DWRITE_TEXT_RANGE*))this->v->tbl[55])(this, currentPosition, typography, textRange); }
static inline HRESULT                           IDWriteTextLayout4_GetLocaleNameLength1                      (IDWriteTextLayout4* this, UINT32 currentPosition, UINT32* nameLength, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, UINT32, UINT32*, DWRITE_TEXT_RANGE*))this->v->tbl[56])(this, currentPosition, nameLength, textRange); }
static inline HRESULT                           IDWriteTextLayout4_GetLocaleName1                            (IDWriteTextLayout4* this, UINT32 currentPosition, WCHAR* localeName, UINT32 nameSize, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, UINT32, WCHAR*, UINT32, DWRITE_TEXT_RANGE*))this->v->tbl[57])(this, currentPosition, localeName, nameSize, textRange); }
static inline HRESULT                           IDWriteTextLayout4_Draw                                      (IDWriteTextLayout4* this, void* clientDrawingContext, IDWriteTextRenderer* renderer, FLOAT originX, FLOAT originY) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, void*, IDWriteTextRenderer*, FLOAT, FLOAT))this->v->tbl[58])(this, clientDrawingContext, renderer, originX, originY); }
static inline HRESULT                           IDWriteTextLayout4_GetLineMetrics                            (IDWriteTextLayout4* this, DWRITE_LINE_METRICS* lineMetrics, UINT32 maxLineCount, UINT32* actualLineCount) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, DWRITE_LINE_METRICS*, UINT32, UINT32*))this->v->tbl[59])(this, lineMetrics, maxLineCount, actualLineCount); }
static inline HRESULT                           IDWriteTextLayout4_GetMetrics                                (IDWriteTextLayout4* this, DWRITE_TEXT_METRICS* textMetrics) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, DWRITE_TEXT_METRICS*))this->v->tbl[60])(this, textMetrics); }
static inline HRESULT                           IDWriteTextLayout4_GetOverhangMetrics                        (IDWriteTextLayout4* this, DWRITE_OVERHANG_METRICS* overhangs) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, DWRITE_OVERHANG_METRICS*))this->v->tbl[61])(this, overhangs); }
static inline HRESULT                           IDWriteTextLayout4_GetClusterMetrics                         (IDWriteTextLayout4* this, DWRITE_CLUSTER_METRICS* clusterMetrics, UINT32 maxClusterCount, UINT32* actualClusterCount) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, DWRITE_CLUSTER_METRICS*, UINT32, UINT32*))this->v->tbl[62])(this, clusterMetrics, maxClusterCount, actualClusterCount); }
static inline HRESULT                           IDWriteTextLayout4_DetermineMinWidth                         (IDWriteTextLayout4* this, FLOAT* minWidth) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, FLOAT*))this->v->tbl[63])(this, minWidth); }
static inline HRESULT                           IDWriteTextLayout4_HitTestPoint                              (IDWriteTextLayout4* this, FLOAT pointX, FLOAT pointY, BOOL* isTrailingHit, BOOL* isInside, DWRITE_HIT_TEST_METRICS* hitTestMetrics) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, FLOAT, FLOAT, BOOL*, BOOL*, DWRITE_HIT_TEST_METRICS*))this->v->tbl[64])(this, pointX, pointY, isTrailingHit, isInside, hitTestMetrics); }
static inline HRESULT                           IDWriteTextLayout4_HitTestTextPosition                       (IDWriteTextLayout4* this, UINT32 textPosition, BOOL isTrailingHit, FLOAT* pointX, FLOAT* pointY, DWRITE_HIT_TEST_METRICS* hitTestMetrics) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, UINT32, BOOL, FLOAT*, FLOAT*, DWRITE_HIT_TEST_METRICS*))this->v->tbl[65])(this, textPosition, isTrailingHit, pointX, pointY, hitTestMetrics); }
static inline HRESULT                           IDWriteTextLayout4_HitTestTextRange                          (IDWriteTextLayout4* this, UINT32 textPosition, UINT32 textLength, FLOAT originX, FLOAT originY, DWRITE_HIT_TEST_METRICS* hitTestMetrics, UINT32 maxHitTestMetricsCount, UINT32* actualHitTestMetricsCount) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, UINT32, UINT32, FLOAT, FLOAT, DWRITE_HIT_TEST_METRICS*, UINT32, UINT32*))this->v->tbl[66])(this, textPosition, textLength, originX, originY, hitTestMetrics, maxHitTestMetricsCount, actualHitTestMetricsCount); }
static inline HRESULT                           IDWriteTextLayout4_SetPairKerning                            (IDWriteTextLayout4* this, BOOL isPairKerningEnabled, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, BOOL, DWRITE_TEXT_RANGE))this->v->tbl[67])(this, isPairKerningEnabled, textRange); }
static inline HRESULT                           IDWriteTextLayout4_GetPairKerning                            (IDWriteTextLayout4* this, UINT32 currentPosition, BOOL* isPairKerningEnabled, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, UINT32, BOOL*, DWRITE_TEXT_RANGE*))this->v->tbl[68])(this, currentPosition, isPairKerningEnabled, textRange); }
static inline HRESULT                           IDWriteTextLayout4_SetCharacterSpacing                       (IDWriteTextLayout4* this, FLOAT leadingSpacing, FLOAT trailingSpacing, FLOAT minimumAdvanceWidth, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, FLOAT, FLOAT, FLOAT, DWRITE_TEXT_RANGE))this->v->tbl[69])(this, leadingSpacing, trailingSpacing, minimumAdvanceWidth, textRange); }
static inline HRESULT                           IDWriteTextLayout4_GetCharacterSpacing                       (IDWriteTextLayout4* this, UINT32 currentPosition, FLOAT* leadingSpacing, FLOAT* trailingSpacing, FLOAT* minimumAdvanceWidth, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, UINT32, FLOAT*, FLOAT*, FLOAT*, DWRITE_TEXT_RANGE*))this->v->tbl[70])(this, currentPosition, leadingSpacing, trailingSpacing, minimumAdvanceWidth, textRange); }
static inline HRESULT                           IDWriteTextLayout4_GetMetrics1                               (IDWriteTextLayout4* this, DWRITE_TEXT_METRICS1* textMetrics) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, DWRITE_TEXT_METRICS1*))this->v->tbl[71])(this, textMetrics); }
static inline HRESULT                           IDWriteTextLayout4_SetVerticalGlyphOrientation               (IDWriteTextLayout4* this, DWRITE_VERTICAL_GLYPH_ORIENTATION glyphOrientation) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, DWRITE_VERTICAL_GLYPH_ORIENTATION))this->v->tbl[72])(this, glyphOrientation); }
static inline DWRITE_VERTICAL_GLYPH_ORIENTATION IDWriteTextLayout4_GetVerticalGlyphOrientation               (IDWriteTextLayout4* this) { return ((DWRITE_VERTICAL_GLYPH_ORIENTATION (WINAPI*)(IDWriteTextLayout4*))this->v->tbl[73])(this); }
static inline HRESULT                           IDWriteTextLayout4_SetLastLineWrapping                       (IDWriteTextLayout4* this, BOOL isLastLineWrappingEnabled) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, BOOL))this->v->tbl[74])(this, isLastLineWrappingEnabled); }
static inline BOOL                              IDWriteTextLayout4_GetLastLineWrapping                       (IDWriteTextLayout4* this) { return ((BOOL (WINAPI*)(IDWriteTextLayout4*))this->v->tbl[75])(this); }
static inline HRESULT                           IDWriteTextLayout4_SetOpticalAlignment                       (IDWriteTextLayout4* this, DWRITE_OPTICAL_ALIGNMENT opticalAlignment) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, DWRITE_OPTICAL_ALIGNMENT))this->v->tbl[76])(this, opticalAlignment); }
static inline DWRITE_OPTICAL_ALIGNMENT          IDWriteTextLayout4_GetOpticalAlignment                       (IDWriteTextLayout4* this) { return ((DWRITE_OPTICAL_ALIGNMENT (WINAPI*)(IDWriteTextLayout4*))this->v->tbl[77])(this); }
static inline HRESULT                           IDWriteTextLayout4_SetFontFallback                           (IDWriteTextLayout4* this, IDWriteFontFallback* fontFallback) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, IDWriteFontFallback*))this->v->tbl[78])(this, fontFallback); }
static inline HRESULT                           IDWriteTextLayout4_GetFontFallback                           (IDWriteTextLayout4* this, IDWriteFontFallback** fontFallback) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, IDWriteFontFallback**))this->v->tbl[79])(this, fontFallback); }
static inline HRESULT                           IDWriteTextLayout4_InvalidateLayout                          (IDWriteTextLayout4* this) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*))this->v->tbl[80])(this); }
static inline HRESULT                           IDWriteTextLayout4_SetLineSpacing1                           (IDWriteTextLayout4* this, const DWRITE_LINE_SPACING* lineSpacingOptions) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, const DWRITE_LINE_SPACING*))this->v->tbl[81])(this, lineSpacingOptions); }
static inline HRESULT                           IDWriteTextLayout4_GetLineSpacing1                           (IDWriteTextLayout4* this, DWRITE_LINE_SPACING* lineSpacingOptions) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, DWRITE_LINE_SPACING*))this->v->tbl[82])(this, lineSpacingOptions); }
static inline HRESULT                           IDWriteTextLayout4_GetLineMetrics1                           (IDWriteTextLayout4* this, DWRITE_LINE_METRICS1* lineMetrics, UINT32 maxLineCount, UINT32* actualLineCount) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, DWRITE_LINE_METRICS1*, UINT32, UINT32*))this->v->tbl[83])(this, lineMetrics, maxLineCount, actualLineCount); }
static inline HRESULT                           IDWriteTextLayout4_SetFontAxisValues                         (IDWriteTextLayout4* this, const DWRITE_FONT_AXIS_VALUE* fontAxisValues, UINT32 fontAxisValueCount, DWRITE_TEXT_RANGE textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, const DWRITE_FONT_AXIS_VALUE*, UINT32, DWRITE_TEXT_RANGE))this->v->tbl[84])(this, fontAxisValues, fontAxisValueCount, textRange); }
static inline UINT32                            IDWriteTextLayout4_GetFontAxisValueCount                     (IDWriteTextLayout4* this, UINT32 currentPosition) { return ((UINT32 (WINAPI*)(IDWriteTextLayout4*, UINT32))this->v->tbl[85])(this, currentPosition); }
static inline HRESULT                           IDWriteTextLayout4_GetFontAxisValues                         (IDWriteTextLayout4* this, UINT32 currentPosition, DWRITE_FONT_AXIS_VALUE* fontAxisValues, UINT32 fontAxisValueCount, DWRITE_TEXT_RANGE* textRange) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, UINT32, DWRITE_FONT_AXIS_VALUE*, UINT32, DWRITE_TEXT_RANGE*))this->v->tbl[86])(this, currentPosition, fontAxisValues, fontAxisValueCount, textRange); }
static inline DWRITE_AUTOMATIC_FONT_AXES        IDWriteTextLayout4_GetAutomaticFontAxes                      (IDWriteTextLayout4* this) { return ((DWRITE_AUTOMATIC_FONT_AXES (WINAPI*)(IDWriteTextLayout4*))this->v->tbl[87])(this); }
static inline HRESULT                           IDWriteTextLayout4_SetAutomaticFontAxes                      (IDWriteTextLayout4* this, DWRITE_AUTOMATIC_FONT_AXES automaticFontAxes) { return ((HRESULT (WINAPI*)(IDWriteTextLayout4*, DWRITE_AUTOMATIC_FONT_AXES))this->v->tbl[88])(this, automaticFontAxes); }

static inline HRESULT                           IDWriteTextRenderer_QueryInterface                           (IDWriteTextRenderer* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteTextRenderer*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteTextRenderer_AddRef                                   (IDWriteTextRenderer* this) { return ((UINT32 (WINAPI*)(IDWriteTextRenderer*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteTextRenderer_Release                                  (IDWriteTextRenderer* this) { return ((UINT32 (WINAPI*)(IDWriteTextRenderer*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteTextRenderer_IsPixelSnappingDisabled                  (IDWriteTextRenderer* this, void* clientDrawingContext, BOOL* isDisabled) { return ((HRESULT (WINAPI*)(IDWriteTextRenderer*, void*, BOOL*))this->v->tbl[3])(this, clientDrawingContext, isDisabled); }
static inline HRESULT                           IDWriteTextRenderer_GetCurrentTransform                      (IDWriteTextRenderer* this, void* clientDrawingContext, DWRITE_MATRIX* transform) { return ((HRESULT (WINAPI*)(IDWriteTextRenderer*, void*, DWRITE_MATRIX*))this->v->tbl[4])(this, clientDrawingContext, transform); }
static inline HRESULT                           IDWriteTextRenderer_GetPixelsPerDip                          (IDWriteTextRenderer* this, void* clientDrawingContext, FLOAT* pixelsPerDip) { return ((HRESULT (WINAPI*)(IDWriteTextRenderer*, void*, FLOAT*))this->v->tbl[5])(this, clientDrawingContext, pixelsPerDip); }
static inline HRESULT                           IDWriteTextRenderer_DrawGlyphRun                             (IDWriteTextRenderer* this, void* clientDrawingContext, FLOAT baselineOriginX, FLOAT baselineOriginY, DWRITE_MEASURING_MODE measuringMode, const DWRITE_GLYPH_RUN* glyphRun, const DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription, IUnknown* clientDrawingEffect) { return ((HRESULT (WINAPI*)(IDWriteTextRenderer*, void*, FLOAT, FLOAT, DWRITE_MEASURING_MODE, const DWRITE_GLYPH_RUN*, const DWRITE_GLYPH_RUN_DESCRIPTION*, IUnknown*))this->v->tbl[6])(this, clientDrawingContext, baselineOriginX, baselineOriginY, measuringMode, glyphRun, glyphRunDescription, clientDrawingEffect); }
static inline HRESULT                           IDWriteTextRenderer_DrawUnderline                            (IDWriteTextRenderer* this, void* clientDrawingContext, FLOAT baselineOriginX, FLOAT baselineOriginY, const DWRITE_UNDERLINE* underline, IUnknown* clientDrawingEffect) { return ((HRESULT (WINAPI*)(IDWriteTextRenderer*, void*, FLOAT, FLOAT, const DWRITE_UNDERLINE*, IUnknown*))this->v->tbl[7])(this, clientDrawingContext, baselineOriginX, baselineOriginY, underline, clientDrawingEffect); }
static inline HRESULT                           IDWriteTextRenderer_DrawStrikethrough                        (IDWriteTextRenderer* this, void* clientDrawingContext, FLOAT baselineOriginX, FLOAT baselineOriginY, const DWRITE_STRIKETHROUGH* strikethrough, IUnknown* clientDrawingEffect) { return ((HRESULT (WINAPI*)(IDWriteTextRenderer*, void*, FLOAT, FLOAT, const DWRITE_STRIKETHROUGH*, IUnknown*))this->v->tbl[8])(this, clientDrawingContext, baselineOriginX, baselineOriginY, strikethrough, clientDrawingEffect); }
static inline HRESULT                           IDWriteTextRenderer_DrawInlineObject                         (IDWriteTextRenderer* this, void* clientDrawingContext, FLOAT originX, FLOAT originY, IDWriteInlineObject* inlineObject, BOOL isSideways, BOOL isRightToLeft, IUnknown* clientDrawingEffect) { return ((HRESULT (WINAPI*)(IDWriteTextRenderer*, void*, FLOAT, FLOAT, IDWriteInlineObject*, BOOL, BOOL, IUnknown*))this->v->tbl[9])(this, clientDrawingContext, originX, originY, inlineObject, isSideways, isRightToLeft, clientDrawingEffect); }

static inline HRESULT                           IDWriteTextRenderer1_QueryInterface                          (IDWriteTextRenderer1* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteTextRenderer1*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteTextRenderer1_AddRef                                  (IDWriteTextRenderer1* this) { return ((UINT32 (WINAPI*)(IDWriteTextRenderer1*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteTextRenderer1_Release                                 (IDWriteTextRenderer1* this) { return ((UINT32 (WINAPI*)(IDWriteTextRenderer1*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteTextRenderer1_IsPixelSnappingDisabled                 (IDWriteTextRenderer1* this, void* clientDrawingContext, BOOL* isDisabled) { return ((HRESULT (WINAPI*)(IDWriteTextRenderer1*, void*, BOOL*))this->v->tbl[3])(this, clientDrawingContext, isDisabled); }
static inline HRESULT                           IDWriteTextRenderer1_GetCurrentTransform                     (IDWriteTextRenderer1* this, void* clientDrawingContext, DWRITE_MATRIX* transform) { return ((HRESULT (WINAPI*)(IDWriteTextRenderer1*, void*, DWRITE_MATRIX*))this->v->tbl[4])(this, clientDrawingContext, transform); }
static inline HRESULT                           IDWriteTextRenderer1_GetPixelsPerDip                         (IDWriteTextRenderer1* this, void* clientDrawingContext, FLOAT* pixelsPerDip) { return ((HRESULT (WINAPI*)(IDWriteTextRenderer1*, void*, FLOAT*))this->v->tbl[5])(this, clientDrawingContext, pixelsPerDip); }
static inline HRESULT                           IDWriteTextRenderer1_DrawGlyphRun                            (IDWriteTextRenderer1* this, void* clientDrawingContext, FLOAT baselineOriginX, FLOAT baselineOriginY, DWRITE_MEASURING_MODE measuringMode, const DWRITE_GLYPH_RUN* glyphRun, const DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription, IUnknown* clientDrawingEffect) { return ((HRESULT (WINAPI*)(IDWriteTextRenderer1*, void*, FLOAT, FLOAT, DWRITE_MEASURING_MODE, const DWRITE_GLYPH_RUN*, const DWRITE_GLYPH_RUN_DESCRIPTION*, IUnknown*))this->v->tbl[6])(this, clientDrawingContext, baselineOriginX, baselineOriginY, measuringMode, glyphRun, glyphRunDescription, clientDrawingEffect); }
static inline HRESULT                           IDWriteTextRenderer1_DrawUnderline                           (IDWriteTextRenderer1* this, void* clientDrawingContext, FLOAT baselineOriginX, FLOAT baselineOriginY, const DWRITE_UNDERLINE* underline, IUnknown* clientDrawingEffect) { return ((HRESULT (WINAPI*)(IDWriteTextRenderer1*, void*, FLOAT, FLOAT, const DWRITE_UNDERLINE*, IUnknown*))this->v->tbl[7])(this, clientDrawingContext, baselineOriginX, baselineOriginY, underline, clientDrawingEffect); }
static inline HRESULT                           IDWriteTextRenderer1_DrawStrikethrough                       (IDWriteTextRenderer1* this, void* clientDrawingContext, FLOAT baselineOriginX, FLOAT baselineOriginY, const DWRITE_STRIKETHROUGH* strikethrough, IUnknown* clientDrawingEffect) { return ((HRESULT (WINAPI*)(IDWriteTextRenderer1*, void*, FLOAT, FLOAT, const DWRITE_STRIKETHROUGH*, IUnknown*))this->v->tbl[8])(this, clientDrawingContext, baselineOriginX, baselineOriginY, strikethrough, clientDrawingEffect); }
static inline HRESULT                           IDWriteTextRenderer1_DrawInlineObject                        (IDWriteTextRenderer1* this, void* clientDrawingContext, FLOAT originX, FLOAT originY, IDWriteInlineObject* inlineObject, BOOL isSideways, BOOL isRightToLeft, IUnknown* clientDrawingEffect) { return ((HRESULT (WINAPI*)(IDWriteTextRenderer1*, void*, FLOAT, FLOAT, IDWriteInlineObject*, BOOL, BOOL, IUnknown*))this->v->tbl[9])(this, clientDrawingContext, originX, originY, inlineObject, isSideways, isRightToLeft, clientDrawingEffect); }
static inline HRESULT                           IDWriteTextRenderer1_DrawGlyphRun1                           (IDWriteTextRenderer1* this, void* clientDrawingContext, FLOAT baselineOriginX, FLOAT baselineOriginY, DWRITE_GLYPH_ORIENTATION_ANGLE orientationAngle, DWRITE_MEASURING_MODE measuringMode, const DWRITE_GLYPH_RUN* glyphRun, const DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription, IUnknown* clientDrawingEffect) { return ((HRESULT (WINAPI*)(IDWriteTextRenderer1*, void*, FLOAT, FLOAT, DWRITE_GLYPH_ORIENTATION_ANGLE, DWRITE_MEASURING_MODE, const DWRITE_GLYPH_RUN*, const DWRITE_GLYPH_RUN_DESCRIPTION*, IUnknown*))this->v->tbl[10])(this, clientDrawingContext, baselineOriginX, baselineOriginY, orientationAngle, measuringMode, glyphRun, glyphRunDescription, clientDrawingEffect); }
static inline HRESULT                           IDWriteTextRenderer1_DrawUnderline1                          (IDWriteTextRenderer1* this, void* clientDrawingContext, FLOAT baselineOriginX, FLOAT baselineOriginY, DWRITE_GLYPH_ORIENTATION_ANGLE orientationAngle, const DWRITE_UNDERLINE* underline, IUnknown* clientDrawingEffect) { return ((HRESULT (WINAPI*)(IDWriteTextRenderer1*, void*, FLOAT, FLOAT, DWRITE_GLYPH_ORIENTATION_ANGLE, const DWRITE_UNDERLINE*, IUnknown*))this->v->tbl[11])(this, clientDrawingContext, baselineOriginX, baselineOriginY, orientationAngle, underline, clientDrawingEffect); }
static inline HRESULT                           IDWriteTextRenderer1_DrawStrikethrough1                      (IDWriteTextRenderer1* this, void* clientDrawingContext, FLOAT baselineOriginX, FLOAT baselineOriginY, DWRITE_GLYPH_ORIENTATION_ANGLE orientationAngle, const DWRITE_STRIKETHROUGH* strikethrough, IUnknown* clientDrawingEffect) { return ((HRESULT (WINAPI*)(IDWriteTextRenderer1*, void*, FLOAT, FLOAT, DWRITE_GLYPH_ORIENTATION_ANGLE, const DWRITE_STRIKETHROUGH*, IUnknown*))this->v->tbl[12])(this, clientDrawingContext, baselineOriginX, baselineOriginY, orientationAngle, strikethrough, clientDrawingEffect); }
static inline HRESULT                           IDWriteTextRenderer1_DrawInlineObject1                       (IDWriteTextRenderer1* this, void* clientDrawingContext, FLOAT originX, FLOAT originY, DWRITE_GLYPH_ORIENTATION_ANGLE orientationAngle, IDWriteInlineObject* inlineObject, BOOL isSideways, BOOL isRightToLeft, IUnknown* clientDrawingEffect) { return ((HRESULT (WINAPI*)(IDWriteTextRenderer1*, void*, FLOAT, FLOAT, DWRITE_GLYPH_ORIENTATION_ANGLE, IDWriteInlineObject*, BOOL, BOOL, IUnknown*))this->v->tbl[13])(this, clientDrawingContext, originX, originY, orientationAngle, inlineObject, isSideways, isRightToLeft, clientDrawingEffect); }

static inline HRESULT                           IDWriteTypography_QueryInterface                             (IDWriteTypography* this, const GUID* riid, void** ppvObject) { return ((HRESULT (WINAPI*)(IDWriteTypography*, const GUID*, void**))this->v->tbl[0])(this, riid, ppvObject); }
static inline UINT32                            IDWriteTypography_AddRef                                     (IDWriteTypography* this) { return ((UINT32 (WINAPI*)(IDWriteTypography*))this->v->tbl[1])(this); }
static inline UINT32                            IDWriteTypography_Release                                    (IDWriteTypography* this) { return ((UINT32 (WINAPI*)(IDWriteTypography*))this->v->tbl[2])(this); }
static inline HRESULT                           IDWriteTypography_AddFontFeature                             (IDWriteTypography* this, DWRITE_FONT_FEATURE fontFeature) { return ((HRESULT (WINAPI*)(IDWriteTypography*, DWRITE_FONT_FEATURE))this->v->tbl[3])(this, fontFeature); }
static inline UINT32                            IDWriteTypography_GetFontFeatureCount                        (IDWriteTypography* this) { return ((UINT32 (WINAPI*)(IDWriteTypography*))this->v->tbl[4])(this); }
static inline HRESULT                           IDWriteTypography_GetFontFeature                             (IDWriteTypography* this, UINT32 fontFeatureIndex, DWRITE_FONT_FEATURE* fontFeature) { return ((HRESULT (WINAPI*)(IDWriteTypography*, UINT32, DWRITE_FONT_FEATURE*))this->v->tbl[5])(this, fontFeatureIndex, fontFeature); }

// guids

DEFINE_GUID(IID_IDWriteAsyncResult,              0xce25f8fd, 0x863b, 0x4d13, 0x96, 0x51, 0xc1, 0xf8, 0x8d, 0xc7, 0x3f, 0xe2);
DEFINE_GUID(IID_IDWriteBitmapRenderTarget,       0x5e5a32a3, 0x8dff, 0x4773, 0x9f, 0xf6, 0x06, 0x96, 0xea, 0xb7, 0x72, 0x67);
DEFINE_GUID(IID_IDWriteBitmapRenderTarget1,      0x791e8298, 0x3ef3, 0x4230, 0x98, 0x80, 0xc9, 0xbd, 0xec, 0xc4, 0x20, 0x64);
DEFINE_GUID(IID_IDWriteColorGlyphRunEnumerator,  0xd31fbe17, 0xf157, 0x41a2, 0x8d, 0x24, 0xcb, 0x77, 0x9e, 0x05, 0x60, 0xe8);
DEFINE_GUID(IID_IDWriteColorGlyphRunEnumerator1, 0x7c5f86da, 0xc7a1, 0x4f05, 0xb8, 0xe1, 0x55, 0xa1, 0x79, 0xfe, 0x5a, 0x35);
DEFINE_GUID(IID_IDWriteFactory,                  0xb859ee5a, 0xd838, 0x4b5b, 0xa2, 0xe8, 0x1a, 0xdc, 0x7d, 0x93, 0xdb, 0x48);
DEFINE_GUID(IID_IDWriteFactory1,                 0x30572f99, 0xdac6, 0x41db, 0xa1, 0x6e, 0x04, 0x86, 0x30, 0x7e, 0x60, 0x6a);
DEFINE_GUID(IID_IDWriteFactory2,                 0x0439fc60, 0xca44, 0x4994, 0x8d, 0xee, 0x3a, 0x9a, 0xf7, 0xb7, 0x32, 0xec);
DEFINE_GUID(IID_IDWriteFactory3,                 0x9a1b41c3, 0xd3bb, 0x466a, 0x87, 0xfc, 0xfe, 0x67, 0x55, 0x6a, 0x3b, 0x65);
DEFINE_GUID(IID_IDWriteFactory4,                 0x4b0b5bd3, 0x0797, 0x4549, 0x8a, 0xc5, 0xfe, 0x91, 0x5c, 0xc5, 0x38, 0x56);
DEFINE_GUID(IID_IDWriteFactory5,                 0x958db99a, 0xbe2a, 0x4f09, 0xaf, 0x7d, 0x65, 0x18, 0x98, 0x03, 0xd1, 0xd3);
DEFINE_GUID(IID_IDWriteFactory6,                 0xf3744d80, 0x21f7, 0x42eb, 0xb3, 0x5d, 0x99, 0x5b, 0xc7, 0x2f, 0xc2, 0x23);
DEFINE_GUID(IID_IDWriteFactory7,                 0x35d0e0b3, 0x9076, 0x4d2e, 0xa0, 0x16, 0xa9, 0x1b, 0x56, 0x8a, 0x06, 0xb4);
DEFINE_GUID(IID_IDWriteFont,                     0xacd16696, 0x8c14, 0x4f5d, 0x87, 0x7e, 0xfe, 0x3f, 0xc1, 0xd3, 0x27, 0x37);
DEFINE_GUID(IID_IDWriteFont1,                    0xacd16696, 0x8c14, 0x4f5d, 0x87, 0x7e, 0xfe, 0x3f, 0xc1, 0xd3, 0x27, 0x38);
DEFINE_GUID(IID_IDWriteFont2,                    0x29748ed6, 0x8c9c, 0x4a6a, 0xbe, 0x0b, 0xd9, 0x12, 0xe8, 0x53, 0x89, 0x44);
DEFINE_GUID(IID_IDWriteFont3,                    0x29748ed6, 0x8c9c, 0x4a6a, 0xbe, 0x0b, 0xd9, 0x12, 0xe8, 0x53, 0x89, 0x44);
DEFINE_GUID(IID_IDWriteFontCollection,           0xa84cee02, 0x3eea, 0x4eee, 0xa8, 0x27, 0x87, 0xc1, 0xa0, 0x2a, 0x0f, 0xcc);
DEFINE_GUID(IID_IDWriteFontCollection1,          0x53585141, 0xd9f8, 0x4095, 0x83, 0x21, 0xd7, 0x3c, 0xf6, 0xbd, 0x11, 0x6c);
DEFINE_GUID(IID_IDWriteFontCollection2,          0x514039c6, 0x4617, 0x4064, 0xbf, 0x8b, 0x92, 0xea, 0x83, 0xe5, 0x06, 0xe0);
DEFINE_GUID(IID_IDWriteFontCollection3,          0xa4d055a6, 0xf9e3, 0x4e25, 0x93, 0xb7, 0x9e, 0x30, 0x9f, 0x3a, 0xf8, 0xe9);
DEFINE_GUID(IID_IDWriteFontCollectionLoader,     0xcca920e4, 0x52f0, 0x492b, 0xbf, 0xa8, 0x29, 0xc7, 0x2e, 0xe0, 0xa4, 0x68);
DEFINE_GUID(IID_IDWriteFontDownloadListener,     0xb06fe5b9, 0x43ec, 0x4393, 0x88, 0x1b, 0xdb, 0xe4, 0xdc, 0x72, 0xfd, 0xa7);
DEFINE_GUID(IID_IDWriteFontDownloadQueue,        0xb71e6052, 0x5aea, 0x4fa3, 0x83, 0x2e, 0xf6, 0x0d, 0x43, 0x1f, 0x7e, 0x91);
DEFINE_GUID(IID_IDWriteFontFace,                 0x5f49804d, 0x7024, 0x4d43, 0xbf, 0xa9, 0xd2, 0x59, 0x84, 0xf5, 0x38, 0x49);
DEFINE_GUID(IID_IDWriteFontFace1,                0xa71efdb4, 0x9fdb, 0x4838, 0xad, 0x90, 0xcf, 0xc3, 0xbe, 0x8c, 0x3d, 0xaf);
DEFINE_GUID(IID_IDWriteFontFace2,                0xd8b768ff, 0x64bc, 0x4e66, 0x98, 0x2b, 0xec, 0x8e, 0x87, 0xf6, 0x93, 0xf7);
DEFINE_GUID(IID_IDWriteFontFace3,                0xd37d7598, 0x09be, 0x4222, 0xa2, 0x36, 0x20, 0x81, 0x34, 0x1c, 0xc1, 0xf2);
DEFINE_GUID(IID_IDWriteFontFace4,                0x27f2a904, 0x4eb8, 0x441d, 0x96, 0x78, 0x05, 0x63, 0xf5, 0x3e, 0x3e, 0x2f);
DEFINE_GUID(IID_IDWriteFontFace5,                0x98eff3a5, 0xb667, 0x479a, 0xb1, 0x45, 0xe2, 0xfa, 0x5b, 0x9f, 0xdc, 0x29);
DEFINE_GUID(IID_IDWriteFontFace6,                0xc4b1fe1b, 0x6e84, 0x47d5, 0xb5, 0x4c, 0xa5, 0x97, 0x98, 0x1b, 0x06, 0xad);
DEFINE_GUID(IID_IDWriteFontFaceReference,        0x5e7fa7ca, 0xdde3, 0x424c, 0x89, 0xf0, 0x9f, 0xcd, 0x6f, 0xed, 0x58, 0xcd);
DEFINE_GUID(IID_IDWriteFontFaceReference1,       0xc081fe77, 0x2fd1, 0x41ac, 0xa5, 0xa3, 0x34, 0x98, 0x3c, 0x4b, 0xa6, 0x1a);
DEFINE_GUID(IID_IDWriteFontFallback,             0xefa008f9, 0xf7a1, 0x48bf, 0xb0, 0x5c, 0xf2, 0x24, 0x71, 0x3c, 0xc0, 0xff);
DEFINE_GUID(IID_IDWriteFontFallback1,            0x2397599d, 0xdd0d, 0x4681, 0xbd, 0x6a, 0xf4, 0xf3, 0x1e, 0xaa, 0xde, 0x77);
DEFINE_GUID(IID_IDWriteFontFallbackBuilder,      0xfd882d06, 0x8aba, 0x4fb8, 0xb8, 0x49, 0x8b, 0xe8, 0xb7, 0x3e, 0x14, 0xde);
DEFINE_GUID(IID_IDWriteFontFamily,               0xda20d8ef, 0x812a, 0x4c43, 0x98, 0x02, 0x62, 0xec, 0x4a, 0xbd, 0x7a, 0xdd);
DEFINE_GUID(IID_IDWriteFontFamily1,              0xda20d8ef, 0x812a, 0x4c43, 0x98, 0x02, 0x62, 0xec, 0x4a, 0xbd, 0x7a, 0xdf);
DEFINE_GUID(IID_IDWriteFontFamily2,              0x3ed49e77, 0xa398, 0x4261, 0xb9, 0xcf, 0xc1, 0x26, 0xc2, 0x13, 0x1e, 0xf3);
DEFINE_GUID(IID_IDWriteFontFile,                 0x739d886a, 0xcef5, 0x47dc, 0x87, 0x69, 0x1a, 0x8b, 0x41, 0xbe, 0xbb, 0xb0);
DEFINE_GUID(IID_IDWriteFontFileEnumerator,       0x72755049, 0x5ff7, 0x435d, 0x83, 0x48, 0x4b, 0xe9, 0x7c, 0xfa, 0x6c, 0x7c);
DEFINE_GUID(IID_IDWriteFontFileLoader,           0x727cad4e, 0xd6af, 0x4c9e, 0x8a, 0x08, 0xd6, 0x95, 0xb1, 0x1c, 0xaa, 0x49);
DEFINE_GUID(IID_IDWriteFontFileStream,           0x6d4865fe, 0x0ab8, 0x4d91, 0x8f, 0x62, 0x5d, 0xd6, 0xbe, 0x34, 0xa3, 0xe0);
DEFINE_GUID(IID_IDWriteFontList,                 0x1a0d8438, 0x1d97, 0x4ec1, 0xae, 0xf9, 0xa2, 0xfb, 0x86, 0xed, 0x6a, 0xcb);
DEFINE_GUID(IID_IDWriteFontList1,                0xda20d8ef, 0x812a, 0x4c43, 0x98, 0x02, 0x62, 0xec, 0x4a, 0xbd, 0x7a, 0xde);
DEFINE_GUID(IID_IDWriteFontList2,                0xc0763a34, 0x77af, 0x445a, 0xb7, 0x35, 0x08, 0xc3, 0x7b, 0x0a, 0x5b, 0xf5);
DEFINE_GUID(IID_IDWriteFontResource,             0x1f803a76, 0x6871, 0x48e8, 0x98, 0x7f, 0xb9, 0x75, 0x55, 0x1c, 0x50, 0xf2);
DEFINE_GUID(IID_IDWriteFontSet,                  0x53585141, 0xd9f8, 0x4095, 0x83, 0x21, 0xd7, 0x3c, 0xf6, 0xbd, 0x11, 0x6b);
DEFINE_GUID(IID_IDWriteFontSet1,                 0x7e9fda85, 0x6c92, 0x4053, 0xbc, 0x47, 0x7a, 0xe3, 0x53, 0x0d, 0xb4, 0xd3);
DEFINE_GUID(IID_IDWriteFontSet2,                 0xdc7ead19, 0xe54c, 0x43af, 0xb2, 0xda, 0x4e, 0x2b, 0x79, 0xba, 0x3f, 0x7f);
DEFINE_GUID(IID_IDWriteFontSet3,                 0x7c073ef2, 0xa7f4, 0x4045, 0x8c, 0x32, 0x8a, 0xb8, 0xae, 0x64, 0x0f, 0x90);
DEFINE_GUID(IID_IDWriteFontSet4,                 0xeec175fc, 0xbea9, 0x4c86, 0x8b, 0x53, 0xcc, 0xbd, 0xd7, 0xdf, 0x0c, 0x82);
DEFINE_GUID(IID_IDWriteFontSetBuilder,           0x2f642afe, 0x9c68, 0x4f40, 0xb8, 0xbe, 0x45, 0x74, 0x01, 0xaf, 0xcb, 0x3d);
DEFINE_GUID(IID_IDWriteFontSetBuilder1,          0x3ff7715f, 0x3cdc, 0x4dc6, 0x9b, 0x72, 0xec, 0x56, 0x21, 0xdc, 0xca, 0xfd);
DEFINE_GUID(IID_IDWriteFontSetBuilder2,          0xee5ba612, 0xb131, 0x463c, 0x8f, 0x4f, 0x31, 0x89, 0xb9, 0x40, 0x1e, 0x45);
DEFINE_GUID(IID_IDWriteGdiInterop,               0x1edd9491, 0x9853, 0x4299, 0x89, 0x8f, 0x64, 0x32, 0x98, 0x3b, 0x6f, 0x3a);
DEFINE_GUID(IID_IDWriteGdiInterop1,              0x4556be70, 0x3abd, 0x4f70, 0x90, 0xbe, 0x42, 0x17, 0x80, 0xa6, 0xf5, 0x15);
DEFINE_GUID(IID_IDWriteGlyphRunAnalysis,         0x7d97dbf7, 0xe085, 0x42d4, 0x81, 0xe3, 0x6a, 0x88, 0x3b, 0xde, 0xd1, 0x18);
DEFINE_GUID(IID_IDWriteInlineObject,             0x8339fde3, 0x106f, 0x47ab, 0x83, 0x73, 0x1c, 0x62, 0x95, 0xeb, 0x10, 0xb3);
DEFINE_GUID(IID_IDWriteInMemoryFontFileLoader,   0xdc102f47, 0xa12d, 0x4b1c, 0x82, 0x2d, 0x9e, 0x11, 0x7e, 0x33, 0x04, 0x3f);
DEFINE_GUID(IID_IDWriteLocalFontFileLoader,      0xb2d9f3ec, 0xc9fe, 0x4a11, 0xa2, 0xec, 0xd8, 0x62, 0x08, 0xf7, 0xc0, 0xa2);
DEFINE_GUID(IID_IDWriteLocalizedStrings,         0x08256209, 0x099a, 0x4b34, 0xb8, 0x6d, 0xc2, 0x2b, 0x11, 0x0e, 0x77, 0x71);
DEFINE_GUID(IID_IDWriteNumberSubstitution,       0x14885cc9, 0xbab0, 0x4f90, 0xb6, 0xed, 0x5c, 0x36, 0x6a, 0x2c, 0xd0, 0x3d);
DEFINE_GUID(IID_IDWritePixelSnapping,            0xeaf3a2da, 0xecf4, 0x4d24, 0xb6, 0x44, 0xb3, 0x4f, 0x68, 0x42, 0x02, 0x4b);
DEFINE_GUID(IID_IDWriteRemoteFontFileLoader,     0x68648c83, 0x6ede, 0x46c0, 0xab, 0x46, 0x20, 0x08, 0x3a, 0x88, 0x7f, 0xde);
DEFINE_GUID(IID_IDWriteRemoteFontFileStream,     0x4db3757a, 0x2c72, 0x4ed9, 0xb2, 0xb6, 0x1a, 0xba, 0xbe, 0x1a, 0xff, 0x9c);
DEFINE_GUID(IID_IDWriteRenderingParams,          0x2f0da53a, 0x2add, 0x47cd, 0x82, 0xee, 0xd9, 0xec, 0x34, 0x68, 0x8e, 0x75);
DEFINE_GUID(IID_IDWriteRenderingParams1,         0x94413cf4, 0xa6fc, 0x4248, 0x8b, 0x50, 0x66, 0x74, 0x34, 0x8f, 0xca, 0xd3);
DEFINE_GUID(IID_IDWriteRenderingParams2,         0xf9d711c3, 0x9777, 0x40ae, 0x87, 0xe8, 0x3e, 0x5a, 0xf9, 0xbf, 0x09, 0x48);
DEFINE_GUID(IID_IDWriteRenderingParams3,         0xb7924baa, 0x391b, 0x412a, 0x8c, 0x5c, 0xe4, 0x4c, 0xc2, 0xd8, 0x67, 0xdc);
DEFINE_GUID(IID_IDWriteStringList,               0xcfee3140, 0x1157, 0x47ca, 0x8b, 0x85, 0x31, 0xbf, 0xcf, 0x3f, 0x2d, 0x0e);
DEFINE_GUID(IID_IDWriteTextAnalysisSink,         0x5810cd44, 0x0ca0, 0x4701, 0xb3, 0xfa, 0xbe, 0xc5, 0x18, 0x2a, 0xe4, 0xf6);
DEFINE_GUID(IID_IDWriteTextAnalysisSink1,        0xb0d941a0, 0x85e7, 0x4d8b, 0x9f, 0xd3, 0x5c, 0xed, 0x99, 0x34, 0x48, 0x2a);
DEFINE_GUID(IID_IDWriteTextAnalysisSource,       0x688e1a58, 0x5094, 0x47c8, 0xad, 0xc8, 0xfb, 0xce, 0xa6, 0x0a, 0xe9, 0x2b);
DEFINE_GUID(IID_IDWriteTextAnalysisSource1,      0x639cfad8, 0x0fb4, 0x4b21, 0xa5, 0x8a, 0x06, 0x79, 0x20, 0x12, 0x00, 0x09);
DEFINE_GUID(IID_IDWriteTextAnalyzer,             0xb7e6163e, 0x7f46, 0x43b4, 0x84, 0xb3, 0xe4, 0xe6, 0x24, 0x9c, 0x36, 0x5d);
DEFINE_GUID(IID_IDWriteTextAnalyzer1,            0x80dad800, 0xe21f, 0x4e83, 0x96, 0xce, 0xbf, 0xcc, 0xe5, 0x00, 0xdb, 0x7c);
DEFINE_GUID(IID_IDWriteTextAnalyzer2,            0x553a9ff3, 0x5693, 0x4df7, 0xb5, 0x2b, 0x74, 0x80, 0x6f, 0x7f, 0x2e, 0xb9);
DEFINE_GUID(IID_IDWriteTextFormat,               0x9c906818, 0x31d7, 0x4fd3, 0xa1, 0x51, 0x7c, 0x5e, 0x22, 0x5d, 0xb5, 0x5a);
DEFINE_GUID(IID_IDWriteTextFormat1,              0x5f174b49, 0x0d8b, 0x4cfb, 0x8b, 0xca, 0xf1, 0xcc, 0xe9, 0xd0, 0x6c, 0x67);
DEFINE_GUID(IID_IDWriteTextFormat2,              0xf67e0edd, 0x9e3d, 0x4ecc, 0x8c, 0x32, 0x41, 0x83, 0x25, 0x3d, 0xfe, 0x70);
DEFINE_GUID(IID_IDWriteTextFormat3,              0x6d3b5641, 0xe550, 0x430d, 0xa8, 0x5b, 0xb7, 0xbf, 0x48, 0xa9, 0x34, 0x27);
DEFINE_GUID(IID_IDWriteTextLayout,               0x53737037, 0x6d14, 0x410b, 0x9b, 0xfe, 0x0b, 0x18, 0x2b, 0xb7, 0x09, 0x61);
DEFINE_GUID(IID_IDWriteTextLayout1,              0x9064d822, 0x80a7, 0x465c, 0xa9, 0x86, 0xdf, 0x65, 0xf7, 0x8b, 0x8f, 0xeb);
DEFINE_GUID(IID_IDWriteTextLayout2,              0x1093c18f, 0x8d5e, 0x43f0, 0xb0, 0x64, 0x09, 0x17, 0x31, 0x1b, 0x52, 0x5e);
DEFINE_GUID(IID_IDWriteTextLayout3,              0x07ddcd52, 0x020e, 0x4de8, 0xac, 0x33, 0x6c, 0x95, 0x3d, 0x83, 0xf9, 0x2d);
DEFINE_GUID(IID_IDWriteTextLayout4,              0x05a9bf42, 0x223f, 0x4441, 0xb5, 0xfb, 0x82, 0x63, 0x68, 0x5f, 0x55, 0xe9);
DEFINE_GUID(IID_IDWriteTextRenderer,             0xef8a8135, 0x5cc6, 0x45fe, 0x88, 0x25, 0xc5, 0xa0, 0x72, 0x4e, 0xb8, 0x19);
DEFINE_GUID(IID_IDWriteTextRenderer1,            0xd3e0e934, 0x22a0, 0x427e, 0xaa, 0xe4, 0x7d, 0x95, 0x74, 0xb5, 0x9d, 0xb1);
DEFINE_GUID(IID_IDWriteTypography,               0x55f1112b, 0x1dc2, 0x4b3c, 0x95, 0x41, 0xf4, 0x68, 0x94, 0xed, 0x85, 0xb6);

// functions

EXTERN_C HRESULT DECLSPEC_IMPORT WINAPI DWriteCreateFactory (DWRITE_FACTORY_TYPE factoryType, const GUID* iid, void** factory) WIN_NOEXCEPT;
